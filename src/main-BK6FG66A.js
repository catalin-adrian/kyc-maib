import {
  __async,
  __spreadProps,
  __spreadValues,
  bootstrapLazy
} from "./chunk-FGEO3OPM.js";

// node_modules/@angular/core/fesm2022/primitives/signals.mjs
function defaultEquals(a, b) {
  return Object.is(a, b);
}
var activeConsumer = null;
var inNotificationPhase = false;
var epoch = 1;
var SIGNAL = /* @__PURE__ */ Symbol("SIGNAL");
function setActiveConsumer(consumer) {
  const prev = activeConsumer;
  activeConsumer = consumer;
  return prev;
}
function getActiveConsumer() {
  return activeConsumer;
}
var REACTIVE_NODE = {
  version: 0,
  lastCleanEpoch: 0,
  dirty: false,
  producerNode: void 0,
  producerLastReadVersion: void 0,
  producerIndexOfThis: void 0,
  nextProducerIndex: 0,
  liveConsumerNode: void 0,
  liveConsumerIndexOfThis: void 0,
  consumerAllowSignalWrites: false,
  consumerIsAlwaysLive: false,
  producerMustRecompute: () => false,
  producerRecomputeValue: () => {
  },
  consumerMarkedDirty: () => {
  },
  consumerOnSignalRead: () => {
  }
};
function producerAccessed(node) {
  if (inNotificationPhase) {
    throw new Error(typeof ngDevMode !== "undefined" && ngDevMode ? `Assertion error: signal read during notification phase` : "");
  }
  if (activeConsumer === null) {
    return;
  }
  activeConsumer.consumerOnSignalRead(node);
  const idx = activeConsumer.nextProducerIndex++;
  assertConsumerNode(activeConsumer);
  if (idx < activeConsumer.producerNode.length && activeConsumer.producerNode[idx] !== node) {
    if (consumerIsLive(activeConsumer)) {
      const staleProducer = activeConsumer.producerNode[idx];
      producerRemoveLiveConsumerAtIndex(staleProducer, activeConsumer.producerIndexOfThis[idx]);
    }
  }
  if (activeConsumer.producerNode[idx] !== node) {
    activeConsumer.producerNode[idx] = node;
    activeConsumer.producerIndexOfThis[idx] = consumerIsLive(activeConsumer) ? producerAddLiveConsumer(node, activeConsumer, idx) : 0;
  }
  activeConsumer.producerLastReadVersion[idx] = node.version;
}
function producerIncrementEpoch() {
  epoch++;
}
function producerUpdateValueVersion(node) {
  if (consumerIsLive(node) && !node.dirty) {
    return;
  }
  if (!node.dirty && node.lastCleanEpoch === epoch) {
    return;
  }
  if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {
    node.dirty = false;
    node.lastCleanEpoch = epoch;
    return;
  }
  node.producerRecomputeValue(node);
  node.dirty = false;
  node.lastCleanEpoch = epoch;
}
function producerNotifyConsumers(node) {
  if (node.liveConsumerNode === void 0) {
    return;
  }
  const prev = inNotificationPhase;
  inNotificationPhase = true;
  try {
    for (const consumer of node.liveConsumerNode) {
      if (!consumer.dirty) {
        consumerMarkDirty(consumer);
      }
    }
  } finally {
    inNotificationPhase = prev;
  }
}
function producerUpdatesAllowed() {
  return activeConsumer?.consumerAllowSignalWrites !== false;
}
function consumerMarkDirty(node) {
  node.dirty = true;
  producerNotifyConsumers(node);
  node.consumerMarkedDirty?.(node);
}
function consumerBeforeComputation(node) {
  node && (node.nextProducerIndex = 0);
  return setActiveConsumer(node);
}
function consumerAfterComputation(node, prevConsumer) {
  setActiveConsumer(prevConsumer);
  if (!node || node.producerNode === void 0 || node.producerIndexOfThis === void 0 || node.producerLastReadVersion === void 0) {
    return;
  }
  if (consumerIsLive(node)) {
    for (let i = node.nextProducerIndex; i < node.producerNode.length; i++) {
      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
    }
  }
  while (node.producerNode.length > node.nextProducerIndex) {
    node.producerNode.pop();
    node.producerLastReadVersion.pop();
    node.producerIndexOfThis.pop();
  }
}
function consumerPollProducersForChange(node) {
  assertConsumerNode(node);
  for (let i = 0; i < node.producerNode.length; i++) {
    const producer = node.producerNode[i];
    const seenVersion = node.producerLastReadVersion[i];
    if (seenVersion !== producer.version) {
      return true;
    }
    producerUpdateValueVersion(producer);
    if (seenVersion !== producer.version) {
      return true;
    }
  }
  return false;
}
function consumerDestroy(node) {
  assertConsumerNode(node);
  if (consumerIsLive(node)) {
    for (let i = 0; i < node.producerNode.length; i++) {
      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
    }
  }
  node.producerNode.length = node.producerLastReadVersion.length = node.producerIndexOfThis.length = 0;
  if (node.liveConsumerNode) {
    node.liveConsumerNode.length = node.liveConsumerIndexOfThis.length = 0;
  }
}
function producerAddLiveConsumer(node, consumer, indexOfThis) {
  assertProducerNode(node);
  if (node.liveConsumerNode.length === 0 && isConsumerNode(node)) {
    for (let i = 0; i < node.producerNode.length; i++) {
      node.producerIndexOfThis[i] = producerAddLiveConsumer(node.producerNode[i], node, i);
    }
  }
  node.liveConsumerIndexOfThis.push(indexOfThis);
  return node.liveConsumerNode.push(consumer) - 1;
}
function producerRemoveLiveConsumerAtIndex(node, idx) {
  assertProducerNode(node);
  if (typeof ngDevMode !== "undefined" && ngDevMode && idx >= node.liveConsumerNode.length) {
    throw new Error(`Assertion error: active consumer index ${idx} is out of bounds of ${node.liveConsumerNode.length} consumers)`);
  }
  if (node.liveConsumerNode.length === 1 && isConsumerNode(node)) {
    for (let i = 0; i < node.producerNode.length; i++) {
      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
    }
  }
  const lastIdx = node.liveConsumerNode.length - 1;
  node.liveConsumerNode[idx] = node.liveConsumerNode[lastIdx];
  node.liveConsumerIndexOfThis[idx] = node.liveConsumerIndexOfThis[lastIdx];
  node.liveConsumerNode.length--;
  node.liveConsumerIndexOfThis.length--;
  if (idx < node.liveConsumerNode.length) {
    const idxProducer = node.liveConsumerIndexOfThis[idx];
    const consumer = node.liveConsumerNode[idx];
    assertConsumerNode(consumer);
    consumer.producerIndexOfThis[idxProducer] = idx;
  }
}
function consumerIsLive(node) {
  return node.consumerIsAlwaysLive || (node?.liveConsumerNode?.length ?? 0) > 0;
}
function assertConsumerNode(node) {
  node.producerNode ??= [];
  node.producerIndexOfThis ??= [];
  node.producerLastReadVersion ??= [];
}
function assertProducerNode(node) {
  node.liveConsumerNode ??= [];
  node.liveConsumerIndexOfThis ??= [];
}
function isConsumerNode(node) {
  return node.producerNode !== void 0;
}
function createComputed(computation) {
  const node = Object.create(COMPUTED_NODE);
  node.computation = computation;
  const computed = () => {
    producerUpdateValueVersion(node);
    producerAccessed(node);
    if (node.value === ERRORED) {
      throw node.error;
    }
    return node.value;
  };
  computed[SIGNAL] = node;
  return computed;
}
var UNSET = /* @__PURE__ */ Symbol("UNSET");
var COMPUTING = /* @__PURE__ */ Symbol("COMPUTING");
var ERRORED = /* @__PURE__ */ Symbol("ERRORED");
var COMPUTED_NODE = /* @__PURE__ */ (() => {
  return __spreadProps(__spreadValues({}, REACTIVE_NODE), {
    value: UNSET,
    dirty: true,
    error: null,
    equal: defaultEquals,
    producerMustRecompute(node) {
      return node.value === UNSET || node.value === COMPUTING;
    },
    producerRecomputeValue(node) {
      if (node.value === COMPUTING) {
        throw new Error("Detected cycle in computations.");
      }
      const oldValue = node.value;
      node.value = COMPUTING;
      const prevConsumer = consumerBeforeComputation(node);
      let newValue;
      try {
        newValue = node.computation();
      } catch (err) {
        newValue = ERRORED;
        node.error = err;
      } finally {
        consumerAfterComputation(node, prevConsumer);
      }
      if (oldValue !== UNSET && oldValue !== ERRORED && newValue !== ERRORED && node.equal(oldValue, newValue)) {
        node.value = oldValue;
        return;
      }
      node.value = newValue;
      node.version++;
    }
  });
})();
function defaultThrowError() {
  throw new Error();
}
var throwInvalidWriteToSignalErrorFn = defaultThrowError;
function throwInvalidWriteToSignalError() {
  throwInvalidWriteToSignalErrorFn();
}
function setThrowInvalidWriteToSignalError(fn) {
  throwInvalidWriteToSignalErrorFn = fn;
}
var postSignalSetFn = null;
function createSignal(initialValue) {
  const node = Object.create(SIGNAL_NODE);
  node.value = initialValue;
  const getter = () => {
    producerAccessed(node);
    return node.value;
  };
  getter[SIGNAL] = node;
  return getter;
}
function signalSetFn(node, newValue) {
  if (!producerUpdatesAllowed()) {
    throwInvalidWriteToSignalError();
  }
  if (!node.equal(node.value, newValue)) {
    node.value = newValue;
    signalValueChanged(node);
  }
}
function signalUpdateFn(node, updater) {
  if (!producerUpdatesAllowed()) {
    throwInvalidWriteToSignalError();
  }
  signalSetFn(node, updater(node.value));
}
var SIGNAL_NODE = /* @__PURE__ */ (() => {
  return __spreadProps(__spreadValues({}, REACTIVE_NODE), {
    equal: defaultEquals,
    value: void 0
  });
})();
function signalValueChanged(node) {
  node.version++;
  producerIncrementEpoch();
  producerNotifyConsumers(node);
  postSignalSetFn?.();
}

// node_modules/rxjs/dist/esm/internal/util/isFunction.js
function isFunction(value) {
  return typeof value === "function";
}

// node_modules/rxjs/dist/esm/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  const _super = (instance) => {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  const ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/rxjs/dist/esm/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass((_super) => function UnsubscriptionErrorImpl(errors) {
  _super(this);
  this.message = errors ? `${errors.length} errors occurred during unsubscription:
${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join("\n  ")}` : "";
  this.name = "UnsubscriptionError";
  this.errors = errors;
});

// node_modules/rxjs/dist/esm/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    const index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/rxjs/dist/esm/internal/Subscription.js
var Subscription = class _Subscription {
  constructor(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  unsubscribe() {
    let errors;
    if (!this.closed) {
      this.closed = true;
      const {
        _parentage
      } = this;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          for (const parent of _parentage) {
            parent.remove(this);
          }
        } else {
          _parentage.remove(this);
        }
      }
      const {
        initialTeardown: initialFinalizer
      } = this;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      const {
        _finalizers
      } = this;
      if (_finalizers) {
        this._finalizers = null;
        for (const finalizer of _finalizers) {
          try {
            execFinalizer(finalizer);
          } catch (err) {
            errors = errors !== null && errors !== void 0 ? errors : [];
            if (err instanceof UnsubscriptionError) {
              errors = [...errors, ...err.errors];
            } else {
              errors.push(err);
            }
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  }
  add(teardown) {
    var _a12;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof _Subscription) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a12 = this._finalizers) !== null && _a12 !== void 0 ? _a12 : []).push(teardown);
      }
    }
  }
  _hasParent(parent) {
    const {
      _parentage
    } = this;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  }
  _addParent(parent) {
    const {
      _parentage
    } = this;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  }
  _removeParent(parent) {
    const {
      _parentage
    } = this;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  }
  remove(teardown) {
    const {
      _finalizers
    } = this;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof _Subscription) {
      teardown._removeParent(this);
    }
  }
};
Subscription.EMPTY = (() => {
  const empty = new Subscription();
  empty.closed = true;
  return empty;
})();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/rxjs/dist/esm/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/rxjs/dist/esm/internal/scheduler/timeoutProvider.js
var timeoutProvider = {
  setTimeout(handler, timeout, ...args) {
    const {
      delegate
    } = timeoutProvider;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout(handler, timeout, ...args);
    }
    return setTimeout(handler, timeout, ...args);
  },
  clearTimeout(handle) {
    const {
      delegate
    } = timeoutProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(() => {
    const {
      onUnhandledError
    } = config;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/rxjs/dist/esm/internal/util/noop.js
function noop() {
}

// node_modules/rxjs/dist/esm/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = (() => createNotification("C", void 0, void 0))();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/rxjs/dist/esm/internal/util/errorContext.js
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    const isRoot = !context;
    if (isRoot) {
      context = {
        errorThrown: false,
        error: null
      };
    }
    cb();
    if (isRoot) {
      const {
        errorThrown,
        error
      } = context;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/rxjs/dist/esm/internal/Subscriber.js
var Subscriber = class extends Subscription {
  constructor(destination) {
    super();
    this.isStopped = false;
    if (destination) {
      this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(this);
      }
    } else {
      this.destination = EMPTY_OBSERVER;
    }
  }
  static create(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  }
  next(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  }
  error(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  }
  complete() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  }
  unsubscribe() {
    if (!this.closed) {
      this.isStopped = true;
      super.unsubscribe();
      this.destination = null;
    }
  }
  _next(value) {
    this.destination.next(value);
  }
  _error(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  }
  _complete() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  }
};
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = class {
  constructor(partialObserver) {
    this.partialObserver = partialObserver;
  }
  next(value) {
    const {
      partialObserver
    } = this;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  }
  error(err) {
    const {
      partialObserver
    } = this;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  }
  complete() {
    const {
      partialObserver
    } = this;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  }
};
var SafeSubscriber = class extends Subscriber {
  constructor(observerOrNext, error, complete) {
    super();
    let partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      let context2;
      if (this && config.useDeprecatedNextContext) {
        context2 = Object.create(observerOrNext);
        context2.unsubscribe = () => this.unsubscribe();
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context2),
          error: observerOrNext.error && bind(observerOrNext.error, context2),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context2)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    this.destination = new ConsumerObserver(partialObserver);
  }
};
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  const {
    onStoppedNotification
  } = config;
  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};

// node_modules/rxjs/dist/esm/internal/symbol/observable.js
var observable = (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();

// node_modules/rxjs/dist/esm/internal/util/identity.js
function identity(x) {
  return x;
}

// node_modules/rxjs/dist/esm/internal/util/pipe.js
function pipe(...fns) {
  return pipeFromArray(fns);
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input2) {
    return fns.reduce((prev, fn) => fn(prev), input2);
  };
}

// node_modules/rxjs/dist/esm/internal/Observable.js
var Observable = class _Observable {
  constructor(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  lift(operator) {
    const observable2 = new _Observable();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  }
  subscribe(observerOrNext, error, complete) {
    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(() => {
      const {
        operator,
        source
      } = this;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? this._subscribe(subscriber) : this._trySubscribe(subscriber));
    });
    return subscriber;
  }
  _trySubscribe(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  }
  forEach(next, promiseCtor) {
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor((resolve, reject) => {
      const subscriber = new SafeSubscriber({
        next: (value) => {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      this.subscribe(subscriber);
    });
  }
  _subscribe(subscriber) {
    var _a12;
    return (_a12 = this.source) === null || _a12 === void 0 ? void 0 : _a12.subscribe(subscriber);
  }
  [observable]() {
    return this;
  }
  pipe(...operations) {
    return pipeFromArray(operations)(this);
  }
  toPromise(promiseCtor) {
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor((resolve, reject) => {
      let value;
      this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));
    });
  }
};
Observable.create = (subscribe) => {
  return new Observable(subscribe);
};
function getPromiseCtor(promiseCtor) {
  var _a12;
  return (_a12 = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a12 !== void 0 ? _a12 : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/rxjs/dist/esm/internal/util/lift.js
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
  return (source) => {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = class extends Subscriber {
  constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    super(destination);
    this.onFinalize = onFinalize;
    this.shouldUnsubscribe = shouldUnsubscribe;
    this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : super._next;
    this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : super._error;
    this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : super._complete;
  }
  unsubscribe() {
    var _a12;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      const {
        closed
      } = this;
      super.unsubscribe();
      !closed && ((_a12 = this.onFinalize) === null || _a12 === void 0 ? void 0 : _a12.call(this));
    }
  }
};

// node_modules/rxjs/dist/esm/internal/operators/refCount.js
function refCount() {
  return operate((source, subscriber) => {
    let connection = null;
    source._refCount++;
    const refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, () => {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      const sharedConnection = source._connection;
      const conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/rxjs/dist/esm/internal/observable/ConnectableObservable.js
var ConnectableObservable = class extends Observable {
  constructor(source, subjectFactory) {
    super();
    this.source = source;
    this.subjectFactory = subjectFactory;
    this._subject = null;
    this._refCount = 0;
    this._connection = null;
    if (hasLift(source)) {
      this.lift = source.lift;
    }
  }
  _subscribe(subscriber) {
    return this.getSubject().subscribe(subscriber);
  }
  getSubject() {
    const subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  }
  _teardown() {
    this._refCount = 0;
    const {
      _connection
    } = this;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  }
  connect() {
    let connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      const subject = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject, void 0, () => {
        this._teardown();
        subject.complete();
      }, (err) => {
        this._teardown();
        subject.error(err);
      }, () => this._teardown())));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  }
  refCount() {
    return refCount()(this);
  }
};

// node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {
  _super(this);
  this.name = "ObjectUnsubscribedError";
  this.message = "object unsubscribed";
});

// node_modules/rxjs/dist/esm/internal/Subject.js
var Subject = class extends Observable {
  constructor() {
    super();
    this.closed = false;
    this.currentObservers = null;
    this.observers = [];
    this.isStopped = false;
    this.hasError = false;
    this.thrownError = null;
  }
  lift(operator) {
    const subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  }
  _throwIfClosed() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  }
  next(value) {
    errorContext(() => {
      this._throwIfClosed();
      if (!this.isStopped) {
        if (!this.currentObservers) {
          this.currentObservers = Array.from(this.observers);
        }
        for (const observer of this.currentObservers) {
          observer.next(value);
        }
      }
    });
  }
  error(err) {
    errorContext(() => {
      this._throwIfClosed();
      if (!this.isStopped) {
        this.hasError = this.isStopped = true;
        this.thrownError = err;
        const {
          observers
        } = this;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  }
  complete() {
    errorContext(() => {
      this._throwIfClosed();
      if (!this.isStopped) {
        this.isStopped = true;
        const {
          observers
        } = this;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  }
  unsubscribe() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  }
  get observed() {
    var _a12;
    return ((_a12 = this.observers) === null || _a12 === void 0 ? void 0 : _a12.length) > 0;
  }
  _trySubscribe(subscriber) {
    this._throwIfClosed();
    return super._trySubscribe(subscriber);
  }
  _subscribe(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  }
  _innerSubscribe(subscriber) {
    const {
      hasError,
      isStopped,
      observers
    } = this;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(() => {
      this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  }
  _checkFinalizedStatuses(subscriber) {
    const {
      hasError,
      thrownError,
      isStopped
    } = this;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  }
  asObservable() {
    const observable2 = new Observable();
    observable2.source = this;
    return observable2;
  }
};
Subject.create = (destination, source) => {
  return new AnonymousSubject(destination, source);
};
var AnonymousSubject = class extends Subject {
  constructor(destination, source) {
    super();
    this.destination = destination;
    this.source = source;
  }
  next(value) {
    var _a12, _b4;
    (_b4 = (_a12 = this.destination) === null || _a12 === void 0 ? void 0 : _a12.next) === null || _b4 === void 0 ? void 0 : _b4.call(_a12, value);
  }
  error(err) {
    var _a12, _b4;
    (_b4 = (_a12 = this.destination) === null || _a12 === void 0 ? void 0 : _a12.error) === null || _b4 === void 0 ? void 0 : _b4.call(_a12, err);
  }
  complete() {
    var _a12, _b4;
    (_b4 = (_a12 = this.destination) === null || _a12 === void 0 ? void 0 : _a12.complete) === null || _b4 === void 0 ? void 0 : _b4.call(_a12);
  }
  _subscribe(subscriber) {
    var _a12, _b4;
    return (_b4 = (_a12 = this.source) === null || _a12 === void 0 ? void 0 : _a12.subscribe(subscriber)) !== null && _b4 !== void 0 ? _b4 : EMPTY_SUBSCRIPTION;
  }
};

// node_modules/rxjs/dist/esm/internal/BehaviorSubject.js
var BehaviorSubject = class extends Subject {
  constructor(_value) {
    super();
    this._value = _value;
  }
  get value() {
    return this.getValue();
  }
  _subscribe(subscriber) {
    const subscription = super._subscribe(subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  }
  getValue() {
    const {
      hasError,
      thrownError,
      _value
    } = this;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  }
  next(value) {
    super.next(this._value = value);
  }
};

// node_modules/rxjs/dist/esm/internal/observable/empty.js
var EMPTY = new Observable((subscriber) => subscriber.complete());

// node_modules/rxjs/dist/esm/internal/util/isScheduler.js
function isScheduler(value) {
  return value && isFunction(value.schedule);
}

// node_modules/rxjs/dist/esm/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popResultSelector(args) {
  return isFunction(last(args)) ? args.pop() : void 0;
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}

// node_modules/tslib/tslib.es6.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f) i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({
        value: v2,
        done: d
      });
    }, reject);
  }
}

// node_modules/rxjs/dist/esm/internal/util/isArrayLike.js
var isArrayLike = (x) => x && typeof x.length === "number" && typeof x !== "function";

// node_modules/rxjs/dist/esm/internal/util/isPromise.js
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/rxjs/dist/esm/internal/util/isInteropObservable.js
function isInteropObservable(input2) {
  return isFunction(input2[observable]);
}

// node_modules/rxjs/dist/esm/internal/util/isAsyncIterable.js
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/rxjs/dist/esm/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input2) {
  return new TypeError(`You provided ${input2 !== null && typeof input2 === "object" ? "an invalid object" : `'${input2}'`} where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`);
}

// node_modules/rxjs/dist/esm/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/rxjs/dist/esm/internal/util/isIterable.js
function isIterable(input2) {
  return isFunction(input2 === null || input2 === void 0 ? void 0 : input2[iterator]);
}

// node_modules/rxjs/dist/esm/internal/util/isReadableStreamLike.js
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function* readableStreamLikeToAsyncGenerator_1() {
    const reader = readableStream.getReader();
    try {
      while (true) {
        const {
          value,
          done
        } = yield __await(reader.read());
        if (done) {
          return yield __await(void 0);
        }
        yield yield __await(value);
      }
    } finally {
      reader.releaseLock();
    }
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/rxjs/dist/esm/internal/observable/innerFrom.js
function innerFrom(input2) {
  if (input2 instanceof Observable) {
    return input2;
  }
  if (input2 != null) {
    if (isInteropObservable(input2)) {
      return fromInteropObservable(input2);
    }
    if (isArrayLike(input2)) {
      return fromArrayLike(input2);
    }
    if (isPromise(input2)) {
      return fromPromise(input2);
    }
    if (isAsyncIterable(input2)) {
      return fromAsyncIterable(input2);
    }
    if (isIterable(input2)) {
      return fromIterable(input2);
    }
    if (isReadableStreamLike(input2)) {
      return fromReadableStreamLike(input2);
    }
  }
  throw createInvalidObservableTypeError(input2);
}
function fromInteropObservable(obj) {
  return new Observable((subscriber) => {
    const obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable((subscriber) => {
    for (let i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable((subscriber) => {
    promise.then((value) => {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, (err) => subscriber.error(err)).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable((subscriber) => {
    for (const value of iterable) {
      subscriber.next(value);
      if (subscriber.closed) {
        return;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable((subscriber) => {
    process2(asyncIterable, subscriber).catch((err) => subscriber.error(err));
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process2(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_1, _a12;
  return __awaiter(this, void 0, void 0, function* () {
    try {
      for (asyncIterable_1 = __asyncValues(asyncIterable); asyncIterable_1_1 = yield asyncIterable_1.next(), !asyncIterable_1_1.done; ) {
        const value = asyncIterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (asyncIterable_1_1 && !asyncIterable_1_1.done && (_a12 = asyncIterable_1.return)) yield _a12.call(asyncIterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    subscriber.complete();
  });
}

// node_modules/rxjs/dist/esm/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {
  const scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat) {
      parentSubscription.add(this.schedule(null, delay));
    } else {
      this.unsubscribe();
    }
  }, delay);
  parentSubscription.add(scheduleSubscription);
  if (!repeat) {
    return scheduleSubscription;
  }
}

// node_modules/rxjs/dist/esm/internal/operators/observeOn.js
function observeOn(scheduler, delay = 0) {
  return operate((source, subscriber) => {
    source.subscribe(createOperatorSubscriber(subscriber, (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js
function subscribeOn(scheduler, delay = 0) {
  return operate((source, subscriber) => {
    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js
function scheduleObservable(input2, scheduler) {
  return innerFrom(input2).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js
function schedulePromise(input2, scheduler) {
  return innerFrom(input2).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js
function scheduleArray(input2, scheduler) {
  return new Observable((subscriber) => {
    let i = 0;
    return scheduler.schedule(function() {
      if (i === input2.length) {
        subscriber.complete();
      } else {
        subscriber.next(input2[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js
function scheduleIterable(input2, scheduler) {
  return new Observable((subscriber) => {
    let iterator2;
    executeSchedule(subscriber, scheduler, () => {
      iterator2 = input2[iterator]();
      executeSchedule(subscriber, scheduler, () => {
        let value;
        let done;
        try {
          ({
            value,
            done
          } = iterator2.next());
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return () => isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js
function scheduleAsyncIterable(input2, scheduler) {
  if (!input2) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable((subscriber) => {
    executeSchedule(subscriber, scheduler, () => {
      const iterator2 = input2[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, () => {
        iterator2.next().then((result) => {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js
function scheduleReadableStreamLike(input2, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input2), scheduler);
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js
function scheduled(input2, scheduler) {
  if (input2 != null) {
    if (isInteropObservable(input2)) {
      return scheduleObservable(input2, scheduler);
    }
    if (isArrayLike(input2)) {
      return scheduleArray(input2, scheduler);
    }
    if (isPromise(input2)) {
      return schedulePromise(input2, scheduler);
    }
    if (isAsyncIterable(input2)) {
      return scheduleAsyncIterable(input2, scheduler);
    }
    if (isIterable(input2)) {
      return scheduleIterable(input2, scheduler);
    }
    if (isReadableStreamLike(input2)) {
      return scheduleReadableStreamLike(input2, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input2);
}

// node_modules/rxjs/dist/esm/internal/observable/from.js
function from(input2, scheduler) {
  return scheduler ? scheduled(input2, scheduler) : innerFrom(input2);
}

// node_modules/rxjs/dist/esm/internal/observable/of.js
function of(...args) {
  const scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/rxjs/dist/esm/internal/observable/throwError.js
function throwError(errorOrErrorFactory, scheduler) {
  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;
  const init = (subscriber) => subscriber.error(errorFactory());
  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init, 0, subscriber) : init);
}

// node_modules/rxjs/dist/esm/internal/util/isObservable.js
function isObservable(obj) {
  return !!obj && (obj instanceof Observable || isFunction(obj.lift) && isFunction(obj.subscribe));
}

// node_modules/rxjs/dist/esm/internal/util/EmptyError.js
var EmptyError = createErrorClass((_super) => function EmptyErrorImpl() {
  _super(this);
  this.name = "EmptyError";
  this.message = "no elements in sequence";
});

// node_modules/rxjs/dist/esm/internal/operators/map.js
function map(project, thisArg) {
  return operate((source, subscriber) => {
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js
var {
  isArray
} = Array;
function callOrApply(fn, args) {
  return isArray(args) ? fn(...args) : fn(args);
}
function mapOneOrManyArgs(fn) {
  return map((args) => callOrApply(fn, args));
}

// node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js
var {
  isArray: isArray2
} = Array;
var {
  getPrototypeOf,
  prototype: objectProto,
  keys: getKeys
} = Object;
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    const first2 = args[0];
    if (isArray2(first2)) {
      return {
        args: first2,
        keys: null
      };
    }
    if (isPOJO(first2)) {
      const keys = getKeys(first2);
      return {
        args: keys.map((key) => first2[key]),
        keys
      };
    }
  }
  return {
    args,
    keys: null
  };
}
function isPOJO(obj) {
  return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
}

// node_modules/rxjs/dist/esm/internal/util/createObject.js
function createObject(keys, values) {
  return keys.reduce((result, key, i) => (result[key] = values[i], result), {});
}

// node_modules/rxjs/dist/esm/internal/observable/combineLatest.js
function combineLatest(...args) {
  const scheduler = popScheduler(args);
  const resultSelector = popResultSelector(args);
  const {
    args: observables,
    keys
  } = argsArgArrayOrObject(args);
  if (observables.length === 0) {
    return from([], scheduler);
  }
  const result = new Observable(combineLatestInit(observables, scheduler, keys ? (values) => createObject(keys, values) : identity));
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform = identity) {
  return (subscriber) => {
    maybeSchedule(scheduler, () => {
      const {
        length
      } = observables;
      const values = new Array(length);
      let active = length;
      let remainingFirstValues = length;
      for (let i = 0; i < length; i++) {
        maybeSchedule(scheduler, () => {
          const source = from(observables[i], scheduler);
          let hasFirstValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, (value) => {
            values[i] = value;
            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }
            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, () => {
            if (!--active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      }
    }, subscriber);
  };
}
function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    executeSchedule(subscription, scheduler, execute);
  } else {
    execute();
  }
}

// node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
  const buffer = [];
  let active = 0;
  let index = 0;
  let isComplete = false;
  const checkComplete = () => {
    if (isComplete && !buffer.length && !active) {
      subscriber.complete();
    }
  };
  const outerNext = (value) => active < concurrent ? doInnerSub(value) : buffer.push(value);
  const doInnerSub = (value) => {
    expand && subscriber.next(value);
    active++;
    let innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, () => {
      innerComplete = true;
    }, void 0, () => {
      if (innerComplete) {
        try {
          active--;
          while (buffer.length && active < concurrent) {
            const bufferedValue = buffer.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));
            } else {
              doInnerSub(bufferedValue);
            }
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {
    isComplete = true;
    checkComplete();
  }));
  return () => {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}

// node_modules/rxjs/dist/esm/internal/operators/mergeMap.js
function mergeMap(project, resultSelector, concurrent = Infinity) {
  if (isFunction(resultSelector)) {
    return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));
}

// node_modules/rxjs/dist/esm/internal/operators/mergeAll.js
function mergeAll(concurrent = Infinity) {
  return mergeMap(identity, concurrent);
}

// node_modules/rxjs/dist/esm/internal/operators/concatAll.js
function concatAll() {
  return mergeAll(1);
}

// node_modules/rxjs/dist/esm/internal/observable/concat.js
function concat(...args) {
  return concatAll()(from(args, popScheduler(args)));
}

// node_modules/rxjs/dist/esm/internal/observable/defer.js
function defer(observableFactory) {
  return new Observable((subscriber) => {
    innerFrom(observableFactory()).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm/internal/operators/filter.js
function filter(predicate, thisArg) {
  return operate((source, subscriber) => {
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/catchError.js
function catchError(selector) {
  return operate((source, subscriber) => {
    let innerSub = null;
    let syncUnsub = false;
    let handledResult;
    innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, (err) => {
      handledResult = innerFrom(selector(err, catchError(selector)(source)));
      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));
    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}

// node_modules/rxjs/dist/esm/internal/operators/scanInternals.js
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return (source, subscriber) => {
    let hasState = hasSeed;
    let state = seed;
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      const i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && (() => {
      hasState && subscriber.next(state);
      subscriber.complete();
    })));
  };
}

// node_modules/rxjs/dist/esm/internal/operators/concatMap.js
function concatMap(project, resultSelector) {
  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
}

// node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js
function defaultIfEmpty(defaultValue) {
  return operate((source, subscriber) => {
    let hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      hasValue = true;
      subscriber.next(value);
    }, () => {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }
      subscriber.complete();
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/take.js
function take(count) {
  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {
    let seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      if (++seen <= count) {
        subscriber.next(value);
        if (count <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/mapTo.js
function mapTo(value) {
  return map(() => value);
}

// node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js
function throwIfEmpty(errorFactory = defaultErrorFactory) {
  return operate((source, subscriber) => {
    let hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      hasValue = true;
      subscriber.next(value);
    }, () => hasValue ? subscriber.complete() : subscriber.error(errorFactory())));
  });
}
function defaultErrorFactory() {
  return new EmptyError();
}

// node_modules/rxjs/dist/esm/internal/operators/finalize.js
function finalize(callback) {
  return operate((source, subscriber) => {
    try {
      source.subscribe(subscriber);
    } finally {
      subscriber.add(callback);
    }
  });
}

// node_modules/rxjs/dist/esm/internal/operators/first.js
function first(predicate, defaultValue) {
  const hasDefaultValue = arguments.length >= 2;
  return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));
}

// node_modules/rxjs/dist/esm/internal/operators/takeLast.js
function takeLast(count) {
  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {
    let buffer = [];
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      buffer.push(value);
      count < buffer.length && buffer.shift();
    }, () => {
      for (const value of buffer) {
        subscriber.next(value);
      }
      subscriber.complete();
    }, void 0, () => {
      buffer = null;
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/last.js
function last2(predicate, defaultValue) {
  const hasDefaultValue = arguments.length >= 2;
  return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));
}

// node_modules/rxjs/dist/esm/internal/operators/scan.js
function scan(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
}

// node_modules/rxjs/dist/esm/internal/operators/startWith.js
function startWith(...values) {
  const scheduler = popScheduler(values);
  return operate((source, subscriber) => {
    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm/internal/operators/switchMap.js
function switchMap(project, resultSelector) {
  return operate((source, subscriber) => {
    let innerSubscriber = null;
    let index = 0;
    let isComplete = false;
    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      let innerIndex = 0;
      const outerIndex = index++;
      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {
        innerSubscriber = null;
        checkComplete();
      }));
    }, () => {
      isComplete = true;
      checkComplete();
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/takeUntil.js
function takeUntil(notifier) {
  return operate((source, subscriber) => {
    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));
    !subscriber.closed && source.subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm/internal/operators/tap.js
function tap(observerOrNext, error, complete) {
  const tapObserver = isFunction(observerOrNext) || error || complete ? {
    next: observerOrNext,
    error,
    complete
  } : observerOrNext;
  return tapObserver ? operate((source, subscriber) => {
    var _a12;
    (_a12 = tapObserver.subscribe) === null || _a12 === void 0 ? void 0 : _a12.call(tapObserver);
    let isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      var _a13;
      (_a13 = tapObserver.next) === null || _a13 === void 0 ? void 0 : _a13.call(tapObserver, value);
      subscriber.next(value);
    }, () => {
      var _a13;
      isUnsub = false;
      (_a13 = tapObserver.complete) === null || _a13 === void 0 ? void 0 : _a13.call(tapObserver);
      subscriber.complete();
    }, (err) => {
      var _a13;
      isUnsub = false;
      (_a13 = tapObserver.error) === null || _a13 === void 0 ? void 0 : _a13.call(tapObserver, err);
      subscriber.error(err);
    }, () => {
      var _a13, _b4;
      if (isUnsub) {
        (_a13 = tapObserver.unsubscribe) === null || _a13 === void 0 ? void 0 : _a13.call(tapObserver);
      }
      (_b4 = tapObserver.finalize) === null || _b4 === void 0 ? void 0 : _b4.call(tapObserver);
    }));
  }) : identity;
}

// node_modules/@angular/core/fesm2022/primitives/event-dispatch.mjs
var Property = {
  /**
   * The parsed value of the jsaction attribute is stored in this
   * property on the DOM node. The parsed value is an Object. The
   * property names of the object are the events; the values are the
   * names of the actions. This property is attached even on nodes
   * that don't have a jsaction attribute as an optimization, because
   * property lookup is faster than attribute access.
   */
  JSACTION: "__jsaction",
  /**
   * The owner property references an a logical owner for a DOM node. JSAction
   * will follow this reference instead of parentNode when traversing the DOM
   * to find jsaction attributes. This allows overlaying a logical structure
   * over a document where the DOM structure can't reflect that structure.
   */
  OWNER: "__owner"
};
function get(element) {
  return element[Property.JSACTION];
}
function getDefaulted(element) {
  const cache = get(element) ?? {};
  set(element, cache);
  return cache;
}
function set(element, actionMap) {
  element[Property.JSACTION] = actionMap;
}
var EventType = {
  /**
   * Mouse middle click, introduced in Chrome 55 and not yet supported on
   * other browsers.
   */
  AUXCLICK: "auxclick",
  /**
   * The change event fired by browsers when the `value` attribute of input,
   * select, and textarea elements are changed.
   */
  CHANGE: "change",
  /**
   * The click event. In addEvent() refers to all click events, in the
   * jsaction attribute it refers to the unmodified click and Enter/Space
   * keypress events.  In the latter case, a jsaction click will be triggered,
   * for accessibility reasons.  See clickmod and clickonly, below.
   */
  CLICK: "click",
  /**
   * Specifies the jsaction for a modified click event (i.e. a mouse
   * click with the modifier key Cmd/Ctrl pressed). This event isn't
   * separately enabled in addEvent(), because in the DOM, it's just a
   * click event.
   */
  CLICKMOD: "clickmod",
  /**
   * Specifies the jsaction for a click-only event.  Click-only doesn't take
   * into account the case where an element with focus receives an Enter/Space
   * keypress.  This event isn't separately enabled in addEvent().
   */
  CLICKONLY: "clickonly",
  /**
   * The dblclick event.
   */
  DBLCLICK: "dblclick",
  /**
   * Focus doesn't bubble, but you can use it in addEvent() and
   * jsaction anyway. EventContract does the right thing under the
   * hood.
   */
  FOCUS: "focus",
  /**
   * This event only exists in IE. For addEvent() and jsaction, use
   * focus instead; EventContract does the right thing even though
   * focus doesn't bubble.
   */
  FOCUSIN: "focusin",
  /**
   * Analog to focus.
   */
  BLUR: "blur",
  /**
   * Analog to focusin.
   */
  FOCUSOUT: "focusout",
  /**
   * Submit doesn't bubble, so it cannot be used with event
   * contract. However, the browser helpfully fires a click event on
   * the submit button of a form (even if the form is not submitted by
   * a click on the submit button). So you should handle click on the
   * submit button instead.
   */
  SUBMIT: "submit",
  /**
   * The keydown event. In addEvent() and non-click jsaction it represents the
   * regular DOM keydown event. It represents click actions in non-Gecko
   * browsers.
   */
  KEYDOWN: "keydown",
  /**
   * The keypress event. In addEvent() and non-click jsaction it represents the
   * regular DOM keypress event. It represents click actions in Gecko browsers.
   */
  KEYPRESS: "keypress",
  /**
   * The keyup event. In addEvent() and non-click jsaction it represents the
   * regular DOM keyup event. It represents click actions in non-Gecko
   * browsers.
   */
  KEYUP: "keyup",
  /**
   * The mouseup event. Can either be used directly or used implicitly to
   * capture mouseup events. In addEvent(), it represents a regular DOM
   * mouseup event.
   */
  MOUSEUP: "mouseup",
  /**
   * The mousedown event. Can either be used directly or used implicitly to
   * capture mouseenter events. In addEvent(), it represents a regular DOM
   * mouseover event.
   */
  MOUSEDOWN: "mousedown",
  /**
   * The mouseover event. Can either be used directly or used implicitly to
   * capture mouseenter events. In addEvent(), it represents a regular DOM
   * mouseover event.
   */
  MOUSEOVER: "mouseover",
  /**
   * The mouseout event. Can either be used directly or used implicitly to
   * capture mouseover events. In addEvent(), it represents a regular DOM
   * mouseout event.
   */
  MOUSEOUT: "mouseout",
  /**
   * The mouseenter event. Does not bubble and fires individually on each
   * element being entered within a DOM tree.
   */
  MOUSEENTER: "mouseenter",
  /**
   * The mouseleave event. Does not bubble and fires individually on each
   * element being entered within a DOM tree.
   */
  MOUSELEAVE: "mouseleave",
  /**
   * The mousemove event.
   */
  MOUSEMOVE: "mousemove",
  /**
   * The pointerup event. Can either be used directly or used implicitly to
   * capture pointerup events. In addEvent(), it represents a regular DOM
   * pointerup event.
   */
  POINTERUP: "pointerup",
  /**
   * The pointerdown event. Can either be used directly or used implicitly to
   * capture pointerenter events. In addEvent(), it represents a regular DOM
   * mouseover event.
   */
  POINTERDOWN: "pointerdown",
  /**
   * The pointerover event. Can either be used directly or used implicitly to
   * capture pointerenter events. In addEvent(), it represents a regular DOM
   * pointerover event.
   */
  POINTEROVER: "pointerover",
  /**
   * The pointerout event. Can either be used directly or used implicitly to
   * capture pointerover events. In addEvent(), it represents a regular DOM
   * pointerout event.
   */
  POINTEROUT: "pointerout",
  /**
   * The pointerenter event. Does not bubble and fires individually on each
   * element being entered within a DOM tree.
   */
  POINTERENTER: "pointerenter",
  /**
   * The pointerleave event. Does not bubble and fires individually on each
   * element being entered within a DOM tree.
   */
  POINTERLEAVE: "pointerleave",
  /**
   * The pointermove event.
   */
  POINTERMOVE: "pointermove",
  /**
   * The pointercancel event.
   */
  POINTERCANCEL: "pointercancel",
  /**
   * The gotpointercapture event is fired when
   * Element.setPointerCapture(pointerId) is called on a mouse input, or
   * implicitly when a touch input begins.
   */
  GOTPOINTERCAPTURE: "gotpointercapture",
  /**
   * The lostpointercapture event is fired when
   * Element.releasePointerCapture(pointerId) is called, or implicitly after a
   * touch input ends.
   */
  LOSTPOINTERCAPTURE: "lostpointercapture",
  /**
   * The error event. The error event doesn't bubble, but you can use it in
   * addEvent() and jsaction anyway. EventContract does the right thing under
   * the hood (except in IE8 which does not use error events).
   */
  ERROR: "error",
  /**
   * The load event. The load event doesn't bubble, but you can use it in
   * addEvent() and jsaction anyway. EventContract does the right thing
   * under the hood.
   */
  LOAD: "load",
  /**
   * The unload event.
   */
  UNLOAD: "unload",
  /**
   * The touchstart event. Bubbles, will only ever fire in browsers with
   * touch support.
   */
  TOUCHSTART: "touchstart",
  /**
   * The touchend event. Bubbles, will only ever fire in browsers with
   * touch support.
   */
  TOUCHEND: "touchend",
  /**
   * The touchmove event. Bubbles, will only ever fire in browsers with
   * touch support.
   */
  TOUCHMOVE: "touchmove",
  /**
   * The input event.
   */
  INPUT: "input",
  /**
   * The scroll event.
   */
  SCROLL: "scroll",
  /**
   * The toggle event. The toggle event doesn't bubble, but you can use it in
   * addEvent() and jsaction anyway. EventContract does the right thing
   * under the hood.
   */
  TOGGLE: "toggle",
  /**
   * A custom event. The actual custom event type is declared as the 'type'
   * field in the event details. Supported in Firefox 6+, IE 9+, and all Chrome
   * versions.
   *
   * This is an internal name. Users should use jsaction's fireCustomEvent to
   * fire custom events instead of relying on this type to create them.
   */
  CUSTOM: "_custom"
};
var MOUSE_SPECIAL_EVENT_TYPES = [EventType.MOUSEENTER, EventType.MOUSELEAVE, "pointerenter", "pointerleave"];
var BUBBLE_EVENT_TYPES = [
  EventType.CLICK,
  EventType.DBLCLICK,
  EventType.FOCUSIN,
  EventType.FOCUSOUT,
  EventType.KEYDOWN,
  EventType.KEYUP,
  EventType.KEYPRESS,
  EventType.MOUSEOVER,
  EventType.MOUSEOUT,
  EventType.SUBMIT,
  EventType.TOUCHSTART,
  EventType.TOUCHEND,
  EventType.TOUCHMOVE,
  "touchcancel",
  "auxclick",
  "change",
  "compositionstart",
  "compositionupdate",
  "compositionend",
  "beforeinput",
  "input",
  "select",
  "copy",
  "cut",
  "paste",
  "mousedown",
  "mouseup",
  "wheel",
  "contextmenu",
  "dragover",
  "dragenter",
  "dragleave",
  "drop",
  "dragstart",
  "dragend",
  "pointerdown",
  "pointermove",
  "pointerup",
  "pointercancel",
  "pointerover",
  "pointerout",
  "gotpointercapture",
  "lostpointercapture",
  // Video events.
  "ended",
  "loadedmetadata",
  // Page visibility events.
  "pagehide",
  "pageshow",
  "visibilitychange",
  // Content visibility events.
  "beforematch"
];
var CAPTURE_EVENT_TYPES = [EventType.FOCUS, EventType.BLUR, EventType.ERROR, EventType.LOAD, EventType.TOGGLE];
var EARLY_EVENT_TYPES = BUBBLE_EVENT_TYPES.concat(CAPTURE_EVENT_TYPES);
var isEarlyEventType = (eventType) => EARLY_EVENT_TYPES.indexOf(eventType) >= 0;
var MAC_ENTER = 3;
var ENTER = 13;
var SPACE = 32;
var KeyCode = {
  MAC_ENTER,
  ENTER,
  SPACE
};
function getBrowserEventType(eventType) {
  if (eventType === EventType.MOUSEENTER) {
    return EventType.MOUSEOVER;
  } else if (eventType === EventType.MOUSELEAVE) {
    return EventType.MOUSEOUT;
  } else if (eventType === EventType.POINTERENTER) {
    return EventType.POINTEROVER;
  } else if (eventType === EventType.POINTERLEAVE) {
    return EventType.POINTEROUT;
  }
  return eventType;
}
var isMac = typeof navigator !== "undefined" && /Macintosh/.test(navigator.userAgent);
var isWebKit = typeof navigator !== "undefined" && !/Opera/.test(navigator.userAgent) && /WebKit/.test(navigator.userAgent);
var isIe = typeof navigator !== "undefined" && (/MSIE/.test(navigator.userAgent) || /Trident/.test(navigator.userAgent));
var isGecko = typeof navigator !== "undefined" && !/Opera|WebKit/.test(navigator.userAgent) && /Gecko/.test(navigator.product);
var ACTION_KEY_TO_KEYCODE = {
  "Enter": KeyCode.ENTER,
  " ": KeyCode.SPACE
};
var IDENTIFIER_TO_KEY_TRIGGER_MAPPING = {
  "A": KeyCode.ENTER,
  "BUTTON": 0,
  "CHECKBOX": KeyCode.SPACE,
  "COMBOBOX": KeyCode.ENTER,
  "FILE": 0,
  "GRIDCELL": KeyCode.ENTER,
  "LINK": KeyCode.ENTER,
  "LISTBOX": KeyCode.ENTER,
  "MENU": 0,
  "MENUBAR": 0,
  "MENUITEM": 0,
  "MENUITEMCHECKBOX": 0,
  "MENUITEMRADIO": 0,
  "OPTION": 0,
  "RADIO": KeyCode.SPACE,
  "RADIOGROUP": KeyCode.SPACE,
  "RESET": 0,
  "SUBMIT": 0,
  "SWITCH": KeyCode.SPACE,
  "TAB": 0,
  "TREE": KeyCode.ENTER,
  "TREEITEM": KeyCode.ENTER
};
var isIos = typeof navigator !== "undefined" && /iPhone|iPad|iPod/.test(navigator.userAgent);
function setEventType(eventInfo, eventType) {
  eventInfo.eventType = eventType;
}
function setIsReplay(eventInfo, replay) {
  eventInfo.eirp = replay;
}
function cloneEventInfo(eventInfo) {
  return {
    eventType: eventInfo.eventType,
    event: eventInfo.event,
    targetElement: eventInfo.targetElement,
    eic: eventInfo.eic,
    eia: eventInfo.eia,
    timeStamp: eventInfo.timeStamp,
    eirp: eventInfo.eirp,
    eiack: eventInfo.eiack,
    eir: eventInfo.eir
  };
}
function createEventInfoFromParameters(eventType, event, targetElement, container, timestamp, action, isReplay, a11yClickKey) {
  return {
    eventType,
    event,
    targetElement,
    eic: container,
    timeStamp: timestamp,
    eia: action,
    eirp: isReplay,
    eiack: a11yClickKey
  };
}
var DEFAULT_EVENT_TYPE = EventType.CLICK;
var Restriction;
(function(Restriction2) {
  Restriction2[Restriction2["I_AM_THE_JSACTION_FRAMEWORK"] = 0] = "I_AM_THE_JSACTION_FRAMEWORK";
})(Restriction || (Restriction = {}));
var PROPAGATION_STOPPED_SYMBOL = Symbol.for("propagationStopped");
function removeAllEventListeners(earlyJsactionData) {
  if (!earlyJsactionData) {
    return;
  }
  removeEventListeners(earlyJsactionData.c, earlyJsactionData.et, earlyJsactionData.h);
  removeEventListeners(earlyJsactionData.c, earlyJsactionData.etc, earlyJsactionData.h, true);
}
function removeEventListeners(container, eventTypes, earlyEventHandler, capture) {
  for (let i = 0; i < eventTypes.length; i++) {
    container.removeEventListener(
      eventTypes[i],
      earlyEventHandler,
      /* useCapture */
      capture
    );
  }
}
var MOUSE_SPECIAL_SUPPORT = false;
var _EventContract = class _EventContract {
  constructor(containerManager) {
    this.eventHandlers = {};
    this.browserEventTypeToExtraEventTypes = {};
    this.dispatcher = null;
    this.queuedEventInfos = [];
    this.containerManager = containerManager;
  }
  handleEvent(eventType, event, container) {
    const eventInfo = createEventInfoFromParameters(
      /* eventType= */
      eventType,
      /* event= */
      event,
      /* targetElement= */
      event.target,
      /* container= */
      container,
      /* timestamp= */
      Date.now()
    );
    this.handleEventInfo(eventInfo);
  }
  /**
   * Handle an `EventInfo`.
   */
  handleEventInfo(eventInfo) {
    if (!this.dispatcher) {
      setIsReplay(eventInfo, true);
      this.queuedEventInfos?.push(eventInfo);
      return;
    }
    this.dispatcher(eventInfo);
  }
  /**
   * Enables jsaction handlers to be called for the event type given by
   * name.
   *
   * If the event is already registered, this does nothing.
   *
   * @param prefixedEventType If supplied, this event is used in
   *     the actual browser event registration instead of the name that is
   *     exposed to jsaction. Use this if you e.g. want users to be able
   *     to subscribe to jsaction="transitionEnd:foo" while the underlying
   *     event is webkitTransitionEnd in one browser and mozTransitionEnd
   *     in another.
   */
  addEvent(eventType, prefixedEventType) {
    if (eventType in this.eventHandlers || !this.containerManager) {
      return;
    }
    if (!_EventContract.MOUSE_SPECIAL_SUPPORT && MOUSE_SPECIAL_EVENT_TYPES.indexOf(eventType) >= 0) {
      return;
    }
    const eventHandler = (eventType2, event, container) => {
      this.handleEvent(eventType2, event, container);
    };
    this.eventHandlers[eventType] = eventHandler;
    const browserEventType = getBrowserEventType(prefixedEventType || eventType);
    if (browserEventType !== eventType) {
      const eventTypes = this.browserEventTypeToExtraEventTypes[browserEventType] || [];
      eventTypes.push(eventType);
      this.browserEventTypeToExtraEventTypes[browserEventType] = eventTypes;
    }
    this.containerManager.addEventListener(browserEventType, (element) => {
      return (event) => {
        eventHandler(eventType, event, element);
      };
    });
  }
  /**
   * Gets the queued early events and replay them using the appropriate handler
   * in the provided event contract. Once all the events are replayed, it cleans
   * up the early contract.
   */
  replayEarlyEvents(earlyJsactionData = window._ejsa) {
    if (!earlyJsactionData) {
      return;
    }
    this.replayEarlyEventInfos(earlyJsactionData.q);
    removeAllEventListeners(earlyJsactionData);
    delete window._ejsa;
  }
  /**
   * Replays all the early `EventInfo` objects, dispatching them through the normal
   * `EventContract` flow.
   */
  replayEarlyEventInfos(earlyEventInfos) {
    for (let i = 0; i < earlyEventInfos.length; i++) {
      const earlyEventInfo = earlyEventInfos[i];
      const eventTypes = this.getEventTypesForBrowserEventType(earlyEventInfo.eventType);
      for (let j = 0; j < eventTypes.length; j++) {
        const eventInfo = cloneEventInfo(earlyEventInfo);
        setEventType(eventInfo, eventTypes[j]);
        this.handleEventInfo(eventInfo);
      }
    }
  }
  /**
   * Returns all JSAction event types that have been registered for a given
   * browser event type.
   */
  getEventTypesForBrowserEventType(browserEventType) {
    const eventTypes = [];
    if (this.eventHandlers[browserEventType]) {
      eventTypes.push(browserEventType);
    }
    if (this.browserEventTypeToExtraEventTypes[browserEventType]) {
      eventTypes.push(...this.browserEventTypeToExtraEventTypes[browserEventType]);
    }
    return eventTypes;
  }
  /**
   * Returns the event handler function for a given event type.
   */
  handler(eventType) {
    return this.eventHandlers[eventType];
  }
  /**
   * Cleans up the event contract. This resets all of the `EventContract`'s
   * internal state. Users are responsible for not using this `EventContract`
   * after it has been cleaned up.
   */
  cleanUp() {
    this.containerManager.cleanUp();
    this.containerManager = null;
    this.eventHandlers = {};
    this.browserEventTypeToExtraEventTypes = {};
    this.dispatcher = null;
    this.queuedEventInfos = [];
  }
  /**
   * Register a dispatcher function. Event info of each event mapped to
   * a jsaction is passed for handling to this callback. The queued
   * events are passed as well to the dispatcher for later replaying
   * once the dispatcher is registered. Clears the event queue to null.
   *
   * @param dispatcher The dispatcher function.
   * @param restriction
   */
  registerDispatcher(dispatcher, restriction) {
    this.ecrd(dispatcher, restriction);
  }
  /**
   * Unrenamed alias for registerDispatcher. Necessary for any codebases that
   * split the `EventContract` and `Dispatcher` code into different compilation
   * units.
   */
  ecrd(dispatcher, restriction) {
    this.dispatcher = dispatcher;
    if (this.queuedEventInfos?.length) {
      for (let i = 0; i < this.queuedEventInfos.length; i++) {
        this.handleEventInfo(this.queuedEventInfos[i]);
      }
      this.queuedEventInfos = null;
    }
  }
};
_EventContract.MOUSE_SPECIAL_SUPPORT = MOUSE_SPECIAL_SUPPORT;
var EventContract = _EventContract;

// node_modules/@angular/core/fesm2022/core.mjs
var ERROR_DETAILS_PAGE_BASE_URL = "https://angular.dev/errors";
var XSS_SECURITY_URL = "https://g.co/ng/security#xss";
var RuntimeError = class extends Error {
  constructor(code, message) {
    super(formatRuntimeError(code, message));
    this.code = code;
  }
};
function formatRuntimeError(code, message) {
  const fullCode = `NG0${Math.abs(code)}`;
  let errorMessage = `${fullCode}${message ? ": " + message : ""}`;
  if (ngDevMode && code < 0) {
    const addPeriodSeparator = !errorMessage.match(/[.,;!?\n]$/);
    const separator = addPeriodSeparator ? "." : "";
    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;
  }
  return errorMessage;
}
var REQUIRED_UNSET_VALUE = /* @__PURE__ */ Symbol("InputSignalNode#UNSET");
var INPUT_SIGNAL_NODE = /* @__PURE__ */ (() => {
  return __spreadProps(__spreadValues({}, SIGNAL_NODE), {
    transformFn: void 0,
    applyValueToInputSignal(node, value) {
      signalSetFn(node, value);
    }
  });
})();
function createInputSignal(initialValue, options) {
  const node = Object.create(INPUT_SIGNAL_NODE);
  node.value = initialValue;
  node.transformFn = options?.transform;
  function inputValueFn() {
    producerAccessed(node);
    if (node.value === REQUIRED_UNSET_VALUE) {
      throw new RuntimeError(-950, ngDevMode && "Input is required but no value is available yet.");
    }
    return node.value;
  }
  inputValueFn[SIGNAL] = node;
  if (ngDevMode) {
    inputValueFn.toString = () => `[Input Signal: ${inputValueFn()}]`;
  }
  return inputValueFn;
}
function noSideEffects(fn) {
  return {
    toString: fn
  }.toString();
}
var ANNOTATIONS = "__annotations__";
var PARAMETERS = "__parameters__";
var PROP_METADATA = "__prop__metadata__";
function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function DecoratorFactory(...args) {
      if (this instanceof DecoratorFactory) {
        metaCtor.call(this, ...args);
        return this;
      }
      const annotationInstance = new DecoratorFactory(...args);
      return function TypeDecorator(cls) {
        if (typeFn) typeFn(cls, ...args);
        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {
          value: []
        })[ANNOTATIONS];
        annotations.push(annotationInstance);
        if (additionalProcessing) additionalProcessing(cls);
        return cls;
      };
    }
    if (parentClass) {
      DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.ngMetadataName = name;
    DecoratorFactory.annotationCls = DecoratorFactory;
    return DecoratorFactory;
  });
}
function makeMetadataCtor(props) {
  return function ctor(...args) {
    if (props) {
      const values = props(...args);
      for (const propName in values) {
        this[propName] = values[propName];
      }
    }
  };
}
function makeParamDecorator(name, props, parentClass) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function ParamDecoratorFactory(...args) {
      if (this instanceof ParamDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      const annotationInstance = new ParamDecoratorFactory(...args);
      ParamDecorator.annotation = annotationInstance;
      return ParamDecorator;
      function ParamDecorator(cls, unusedKey, index) {
        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {
          value: []
        })[PARAMETERS];
        while (parameters.length <= index) {
          parameters.push(null);
        }
        (parameters[index] = parameters[index] || []).push(annotationInstance);
        return cls;
      }
    }
    if (parentClass) {
      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    ParamDecoratorFactory.prototype.ngMetadataName = name;
    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
  });
}
function makePropDecorator(name, props, parentClass, additionalProcessing) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function PropDecoratorFactory(...args) {
      if (this instanceof PropDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      const decoratorInstance = new PropDecoratorFactory(...args);
      function PropDecorator(target, name2) {
        if (target === void 0) {
          throw new Error("Standard Angular field decorators are not supported in JIT mode.");
        }
        const constructor = target.constructor;
        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {
          value: {}
        })[PROP_METADATA];
        meta[name2] = meta.hasOwnProperty(name2) && meta[name2] || [];
        meta[name2].unshift(decoratorInstance);
        if (additionalProcessing) additionalProcessing(target, name2, ...args);
      }
      return PropDecorator;
    }
    if (parentClass) {
      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.ngMetadataName = name;
    PropDecoratorFactory.annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
  });
}
var _global = globalThis;
function ngDevModeResetPerfCounters() {
  const locationString = typeof location !== "undefined" ? location.toString() : "";
  const newCounters = {
    namedConstructors: locationString.indexOf("ngDevMode=namedConstructors") != -1,
    firstCreatePass: 0,
    tNode: 0,
    tView: 0,
    rendererCreateTextNode: 0,
    rendererSetText: 0,
    rendererCreateElement: 0,
    rendererAddEventListener: 0,
    rendererSetAttribute: 0,
    rendererRemoveAttribute: 0,
    rendererSetProperty: 0,
    rendererSetClassName: 0,
    rendererAddClass: 0,
    rendererRemoveClass: 0,
    rendererSetStyle: 0,
    rendererRemoveStyle: 0,
    rendererDestroy: 0,
    rendererDestroyNode: 0,
    rendererMoveNode: 0,
    rendererRemoveNode: 0,
    rendererAppendChild: 0,
    rendererInsertBefore: 0,
    rendererCreateComment: 0,
    hydratedNodes: 0,
    hydratedComponents: 0,
    dehydratedViewsRemoved: 0,
    dehydratedViewsCleanupRuns: 0,
    componentsSkippedHydration: 0
  };
  const allowNgDevModeTrue = locationString.indexOf("ngDevMode=false") === -1;
  if (!allowNgDevModeTrue) {
    _global["ngDevMode"] = false;
  } else {
    if (typeof _global["ngDevMode"] !== "object") {
      _global["ngDevMode"] = {};
    }
    Object.assign(_global["ngDevMode"], newCounters);
  }
  return newCounters;
}
function initNgDevMode() {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (typeof ngDevMode !== "object" || Object.keys(ngDevMode).length === 0) {
      ngDevModeResetPerfCounters();
    }
    return typeof ngDevMode !== "undefined" && !!ngDevMode;
  }
  return false;
}
function getClosureSafeProperty(objWithPropertyToExtract) {
  for (let key in objWithPropertyToExtract) {
    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
      return key;
    }
  }
  throw Error("Could not find renamed property on target object.");
}
function fillProperties(target, source) {
  for (const key in source) {
    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
      target[key] = source[key];
    }
  }
}
function stringify(token) {
  if (typeof token === "string") {
    return token;
  }
  if (Array.isArray(token)) {
    return "[" + token.map(stringify).join(", ") + "]";
  }
  if (token == null) {
    return "" + token;
  }
  if (token.overriddenName) {
    return `${token.overriddenName}`;
  }
  if (token.name) {
    return `${token.name}`;
  }
  const res = token.toString();
  if (res == null) {
    return "" + res;
  }
  const newLineIndex = res.indexOf("\n");
  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
function concatStringsWithSpace(before, after) {
  return before == null || before === "" ? after === null ? "" : after : after == null || after === "" ? before : before + " " + after;
}
var __forward_ref__ = getClosureSafeProperty({
  __forward_ref__: getClosureSafeProperty
});
function forwardRef(forwardRefFn) {
  forwardRefFn.__forward_ref__ = forwardRef;
  forwardRefFn.toString = function() {
    return stringify(this());
  };
  return forwardRefFn;
}
function resolveForwardRef(type) {
  return isForwardRef(type) ? type() : type;
}
function isForwardRef(fn) {
  return typeof fn === "function" && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;
}
function assertNumber(actual, msg) {
  if (!(typeof actual === "number")) {
    throwError2(msg, typeof actual, "number", "===");
  }
}
function assertNumberInRange(actual, minInclusive, maxInclusive) {
  assertNumber(actual, "Expected a number");
  assertLessThanOrEqual(actual, maxInclusive, "Expected number to be less than or equal to");
  assertGreaterThanOrEqual(actual, minInclusive, "Expected number to be greater than or equal to");
}
function assertString(actual, msg) {
  if (!(typeof actual === "string")) {
    throwError2(msg, actual === null ? "null" : typeof actual, "string", "===");
  }
}
function assertFunction(actual, msg) {
  if (!(typeof actual === "function")) {
    throwError2(msg, actual === null ? "null" : typeof actual, "function", "===");
  }
}
function assertEqual(actual, expected, msg) {
  if (!(actual == expected)) {
    throwError2(msg, actual, expected, "==");
  }
}
function assertNotEqual(actual, expected, msg) {
  if (!(actual != expected)) {
    throwError2(msg, actual, expected, "!=");
  }
}
function assertSame(actual, expected, msg) {
  if (!(actual === expected)) {
    throwError2(msg, actual, expected, "===");
  }
}
function assertNotSame(actual, expected, msg) {
  if (!(actual !== expected)) {
    throwError2(msg, actual, expected, "!==");
  }
}
function assertLessThan(actual, expected, msg) {
  if (!(actual < expected)) {
    throwError2(msg, actual, expected, "<");
  }
}
function assertLessThanOrEqual(actual, expected, msg) {
  if (!(actual <= expected)) {
    throwError2(msg, actual, expected, "<=");
  }
}
function assertGreaterThan(actual, expected, msg) {
  if (!(actual > expected)) {
    throwError2(msg, actual, expected, ">");
  }
}
function assertGreaterThanOrEqual(actual, expected, msg) {
  if (!(actual >= expected)) {
    throwError2(msg, actual, expected, ">=");
  }
}
function assertDefined(actual, msg) {
  if (actual == null) {
    throwError2(msg, actual, null, "!=");
  }
}
function throwError2(msg, actual, expected, comparison) {
  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? "" : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));
}
function assertDomNode(node) {
  if (!(node instanceof Node)) {
    throwError2(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);
  }
}
function assertElement(node) {
  if (!(node instanceof Element)) {
    throwError2(`The provided value must be an element but got ${stringify(node)}`);
  }
}
function assertIndexInRange(arr, index) {
  assertDefined(arr, "Array must be defined.");
  const maxLen = arr.length;
  if (index < 0 || index >= maxLen) {
    throwError2(`Index expected to be less than ${maxLen} but got ${index}`);
  }
}
function assertOneOf(value, ...validValues) {
  if (validValues.indexOf(value) !== -1) return true;
  throwError2(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);
}
function assertNotReactive(fn) {
  if (getActiveConsumer() !== null) {
    throwError2(`${fn}() should never be called in a reactive context.`);
  }
}
function \u0275\u0275defineInjectable(opts) {
  return {
    token: opts.token,
    providedIn: opts.providedIn || null,
    factory: opts.factory,
    value: void 0
  };
}
function \u0275\u0275defineInjector(options) {
  return {
    providers: options.providers || [],
    imports: options.imports || []
  };
}
function getInjectableDef(type) {
  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);
}
function isInjectable(type) {
  return getInjectableDef(type) !== null;
}
function getOwnDefinition(type, field) {
  return type.hasOwnProperty(field) ? type[field] : null;
}
function getInheritedInjectableDef(type) {
  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);
  if (def) {
    ngDevMode && console.warn(`DEPRECATED: DI is instantiating a token "${type.name}" that inherits its @Injectable decorator but does not provide one itself.
This will become an error in a future version of Angular. Please add @Injectable() to the "${type.name}" class.`);
    return def;
  } else {
    return null;
  }
}
function getInjectorDef(type) {
  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;
}
var NG_PROV_DEF = getClosureSafeProperty({
  \u0275prov: getClosureSafeProperty
});
var NG_INJ_DEF = getClosureSafeProperty({
  \u0275inj: getClosureSafeProperty
});
var NG_INJECTABLE_DEF = getClosureSafeProperty({
  ngInjectableDef: getClosureSafeProperty
});
var NG_INJECTOR_DEF = getClosureSafeProperty({
  ngInjectorDef: getClosureSafeProperty
});
var InjectionToken = class {
  /**
   * @param _desc   Description for the token,
   *                used only for debugging purposes,
   *                it should but does not need to be unique
   * @param options Options for the token's usage, as described above
   */
  constructor(_desc, options) {
    this._desc = _desc;
    this.ngMetadataName = "InjectionToken";
    this.\u0275prov = void 0;
    if (typeof options == "number") {
      (typeof ngDevMode === "undefined" || ngDevMode) && assertLessThan(options, 0, "Only negative numbers are supported here");
      this.__NG_ELEMENT_ID__ = options;
    } else if (options !== void 0) {
      this.\u0275prov = \u0275\u0275defineInjectable({
        token: this,
        providedIn: options.providedIn || "root",
        factory: options.factory
      });
    }
  }
  /**
   * @internal
   */
  get multi() {
    return this;
  }
  toString() {
    return `InjectionToken ${this._desc}`;
  }
};
var _injectorProfilerContext;
function getInjectorProfilerContext() {
  !ngDevMode && throwError2("getInjectorProfilerContext should never be called in production mode");
  return _injectorProfilerContext;
}
function setInjectorProfilerContext(context2) {
  !ngDevMode && throwError2("setInjectorProfilerContext should never be called in production mode");
  const previous = _injectorProfilerContext;
  _injectorProfilerContext = context2;
  return previous;
}
var injectorProfilerCallback = null;
var setInjectorProfiler = (injectorProfiler2) => {
  !ngDevMode && throwError2("setInjectorProfiler should never be called in production mode");
  injectorProfilerCallback = injectorProfiler2;
};
function injectorProfiler(event) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  if (injectorProfilerCallback != null) {
    injectorProfilerCallback(event);
  }
}
function emitProviderConfiguredEvent(eventProvider, isViewProvider = false) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  let token;
  if (typeof eventProvider === "function") {
    token = eventProvider;
  } else if (eventProvider instanceof InjectionToken) {
    token = eventProvider;
  } else {
    token = resolveForwardRef(eventProvider.provide);
  }
  let provider = eventProvider;
  if (eventProvider instanceof InjectionToken) {
    provider = eventProvider.\u0275prov || eventProvider;
  }
  injectorProfiler({
    type: 2,
    context: getInjectorProfilerContext(),
    providerRecord: {
      token,
      provider,
      isViewProvider
    }
  });
}
function emitInstanceCreatedByInjectorEvent(instance) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 1,
    context: getInjectorProfilerContext(),
    instance: {
      value: instance
    }
  });
}
function emitInjectEvent(token, value, flags) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 0,
    context: getInjectorProfilerContext(),
    service: {
      token,
      value,
      flags
    }
  });
}
function runInInjectorProfilerContext(injector, token, callback) {
  !ngDevMode && throwError2("runInInjectorProfilerContext should never be called in production mode");
  const prevInjectContext = setInjectorProfilerContext({
    injector,
    token
  });
  try {
    callback();
  } finally {
    setInjectorProfilerContext(prevInjectContext);
  }
}
function isEnvironmentProviders(value) {
  return value && !!value.\u0275providers;
}
var NG_COMP_DEF = getClosureSafeProperty({
  \u0275cmp: getClosureSafeProperty
});
var NG_DIR_DEF = getClosureSafeProperty({
  \u0275dir: getClosureSafeProperty
});
var NG_PIPE_DEF = getClosureSafeProperty({
  \u0275pipe: getClosureSafeProperty
});
var NG_MOD_DEF = getClosureSafeProperty({
  \u0275mod: getClosureSafeProperty
});
var NG_FACTORY_DEF = getClosureSafeProperty({
  \u0275fac: getClosureSafeProperty
});
var NG_ELEMENT_ID = getClosureSafeProperty({
  __NG_ELEMENT_ID__: getClosureSafeProperty
});
var NG_ENV_ID = getClosureSafeProperty({
  __NG_ENV_ID__: getClosureSafeProperty
});
function renderStringify(value) {
  if (typeof value === "string") return value;
  if (value == null) return "";
  return String(value);
}
function stringifyForError(value) {
  if (typeof value === "function") return value.name || value.toString();
  if (typeof value === "object" && value != null && typeof value.type === "function") {
    return value.type.name || value.type.toString();
  }
  return renderStringify(value);
}
function throwCyclicDependencyError(token, path) {
  const depPath = path ? `. Dependency path: ${path.join(" > ")} > ${token}` : "";
  throw new RuntimeError(-200, ngDevMode ? `Circular dependency in DI detected for ${token}${depPath}` : token);
}
function throwMixedMultiProviderError() {
  throw new Error(`Cannot mix multi providers and regular providers`);
}
function throwInvalidProviderError(ngModuleType, providers, provider) {
  if (ngModuleType && providers) {
    const providerDetail = providers.map((v) => v == provider ? "?" + provider + "?" : "...");
    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(", ")}]`);
  } else if (isEnvironmentProviders(provider)) {
    if (provider.\u0275fromNgModule) {
      throw new RuntimeError(207, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);
    } else {
      throw new RuntimeError(207, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);
    }
  } else {
    throw new Error("Invalid provider");
  }
}
function throwProviderNotFoundError(token, injectorName) {
  const errorMessage = ngDevMode && `No provider for ${stringifyForError(token)} found${injectorName ? ` in ${injectorName}` : ""}`;
  throw new RuntimeError(-201, errorMessage);
}
var InjectFlags;
(function(InjectFlags2) {
  InjectFlags2[InjectFlags2["Default"] = 0] = "Default";
  InjectFlags2[InjectFlags2["Host"] = 1] = "Host";
  InjectFlags2[InjectFlags2["Self"] = 2] = "Self";
  InjectFlags2[InjectFlags2["SkipSelf"] = 4] = "SkipSelf";
  InjectFlags2[InjectFlags2["Optional"] = 8] = "Optional";
})(InjectFlags || (InjectFlags = {}));
var _injectImplementation;
function getInjectImplementation() {
  return _injectImplementation;
}
function setInjectImplementation(impl) {
  const previous = _injectImplementation;
  _injectImplementation = impl;
  return previous;
}
function injectRootLimpMode(token, notFoundValue, flags) {
  const injectableDef = getInjectableDef(token);
  if (injectableDef && injectableDef.providedIn == "root") {
    return injectableDef.value === void 0 ? injectableDef.value = injectableDef.factory() : injectableDef.value;
  }
  if (flags & InjectFlags.Optional) return null;
  if (notFoundValue !== void 0) return notFoundValue;
  throwProviderNotFoundError(token, "Injector");
}
function assertInjectImplementationNotEqual(fn) {
  ngDevMode && assertNotEqual(_injectImplementation, fn, "Calling \u0275\u0275inject would cause infinite recursion");
}
var _THROW_IF_NOT_FOUND = {};
var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
var DI_DECORATOR_FLAG = "__NG_DI_FLAG__";
var NG_TEMP_TOKEN_PATH = "ngTempTokenPath";
var NG_TOKEN_PATH = "ngTokenPath";
var NEW_LINE = /\n/gm;
var NO_NEW_LINE = "\u0275";
var SOURCE = "__source";
var _currentInjector = void 0;
function getCurrentInjector() {
  return _currentInjector;
}
function setCurrentInjector(injector) {
  const former = _currentInjector;
  _currentInjector = injector;
  return former;
}
function injectInjectorOnly(token, flags = InjectFlags.Default) {
  if (_currentInjector === void 0) {
    throw new RuntimeError(-203, ngDevMode && `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \`runInInjectionContext\`.`);
  } else if (_currentInjector === null) {
    return injectRootLimpMode(token, void 0, flags);
  } else {
    const value = _currentInjector.get(token, flags & InjectFlags.Optional ? null : void 0, flags);
    ngDevMode && emitInjectEvent(token, value, flags);
    return value;
  }
}
function \u0275\u0275inject(token, flags = InjectFlags.Default) {
  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);
}
function \u0275\u0275invalidFactoryDep(index) {
  throw new RuntimeError(202, ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.
This can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.

Please check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);
}
function inject(token, flags = InjectFlags.Default) {
  return \u0275\u0275inject(token, convertToBitFlags(flags));
}
function convertToBitFlags(flags) {
  if (typeof flags === "undefined" || typeof flags === "number") {
    return flags;
  }
  return 0 | // comment to force a line break in the formatter
  (flags.optional && 8) | (flags.host && 1) | (flags.self && 2) | (flags.skipSelf && 4);
}
function injectArgs(types) {
  const args = [];
  for (let i = 0; i < types.length; i++) {
    const arg = resolveForwardRef(types[i]);
    if (Array.isArray(arg)) {
      if (arg.length === 0) {
        throw new RuntimeError(900, ngDevMode && "Arguments array must have arguments.");
      }
      let type = void 0;
      let flags = InjectFlags.Default;
      for (let j = 0; j < arg.length; j++) {
        const meta = arg[j];
        const flag = getInjectFlag(meta);
        if (typeof flag === "number") {
          if (flag === -1) {
            type = meta.token;
          } else {
            flags |= flag;
          }
        } else {
          type = meta;
        }
      }
      args.push(\u0275\u0275inject(type, flags));
    } else {
      args.push(\u0275\u0275inject(arg));
    }
  }
  return args;
}
function attachInjectFlag(decorator, flag) {
  decorator[DI_DECORATOR_FLAG] = flag;
  decorator.prototype[DI_DECORATOR_FLAG] = flag;
  return decorator;
}
function getInjectFlag(token) {
  return token[DI_DECORATOR_FLAG];
}
function catchInjectorError(e, token, injectorErrorName, source) {
  const tokenPath = e[NG_TEMP_TOKEN_PATH];
  if (token[SOURCE]) {
    tokenPath.unshift(token[SOURCE]);
  }
  e.message = formatError("\n" + e.message, tokenPath, injectorErrorName, source);
  e[NG_TOKEN_PATH] = tokenPath;
  e[NG_TEMP_TOKEN_PATH] = null;
  throw e;
}
function formatError(text, obj, injectorErrorName, source = null) {
  text = text && text.charAt(0) === "\n" && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;
  let context2 = stringify(obj);
  if (Array.isArray(obj)) {
    context2 = obj.map(stringify).join(" -> ");
  } else if (typeof obj === "object") {
    let parts = [];
    for (let key in obj) {
      if (obj.hasOwnProperty(key)) {
        let value = obj[key];
        parts.push(key + ":" + (typeof value === "string" ? JSON.stringify(value) : stringify(value)));
      }
    }
    context2 = `{${parts.join(", ")}}`;
  }
  return `${injectorErrorName}${source ? "(" + source + ")" : ""}[${context2}]: ${text.replace(NEW_LINE, "\n  ")}`;
}
var Inject = attachInjectFlag(
  // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.
  makeParamDecorator("Inject", (token) => ({
    token
  })),
  -1
  /* DecoratorFlags.Inject */
);
var Optional = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("Optional"),
    8
    /* InternalInjectFlags.Optional */
  )
);
var Self = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("Self"),
    2
    /* InternalInjectFlags.Self */
  )
);
var SkipSelf = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("SkipSelf"),
    4
    /* InternalInjectFlags.SkipSelf */
  )
);
var Host = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("Host"),
    1
    /* InternalInjectFlags.Host */
  )
);
function getFactoryDef(type, throwNotFound) {
  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);
  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
    throw new Error(`Type ${stringify(type)} does not have '\u0275fac' property.`);
  }
  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
}
function arrayEquals(a, b, identityAccessor) {
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; i++) {
    let valueA = a[i];
    let valueB = b[i];
    if (identityAccessor) {
      valueA = identityAccessor(valueA);
      valueB = identityAccessor(valueB);
    }
    if (valueB !== valueA) {
      return false;
    }
  }
  return true;
}
function flatten(list) {
  return list.flat(Number.POSITIVE_INFINITY);
}
function deepForEach(input2, fn) {
  input2.forEach((value) => Array.isArray(value) ? deepForEach(value, fn) : fn(value));
}
function addToArray(arr, index, value) {
  if (index >= arr.length) {
    arr.push(value);
  } else {
    arr.splice(index, 0, value);
  }
}
function removeFromArray(arr, index) {
  if (index >= arr.length - 1) {
    return arr.pop();
  } else {
    return arr.splice(index, 1)[0];
  }
}
function newArray(size, value) {
  const list = [];
  for (let i = 0; i < size; i++) {
    list.push(value);
  }
  return list;
}
function arraySplice(array, index, count) {
  const length = array.length - count;
  while (index < length) {
    array[index] = array[index + count];
    index++;
  }
  while (count--) {
    array.pop();
  }
}
function arrayInsert2(array, index, value1, value2) {
  ngDevMode && assertLessThanOrEqual(index, array.length, "Can't insert past array end.");
  let end = array.length;
  if (end == index) {
    array.push(value1, value2);
  } else if (end === 1) {
    array.push(value2, array[0]);
    array[0] = value1;
  } else {
    end--;
    array.push(array[end - 1], array[end]);
    while (end > index) {
      const previousEnd = end - 2;
      array[end] = array[previousEnd];
      end--;
    }
    array[index] = value1;
    array[index + 1] = value2;
  }
}
function keyValueArraySet(keyValueArray, key, value) {
  let index = keyValueArrayIndexOf(keyValueArray, key);
  if (index >= 0) {
    keyValueArray[index | 1] = value;
  } else {
    index = ~index;
    arrayInsert2(keyValueArray, index, key, value);
  }
  return index;
}
function keyValueArrayGet(keyValueArray, key) {
  const index = keyValueArrayIndexOf(keyValueArray, key);
  if (index >= 0) {
    return keyValueArray[index | 1];
  }
  return void 0;
}
function keyValueArrayIndexOf(keyValueArray, key) {
  return _arrayIndexOfSorted(keyValueArray, key, 1);
}
function _arrayIndexOfSorted(array, value, shift) {
  ngDevMode && assertEqual(Array.isArray(array), true, "Expecting an array");
  let start = 0;
  let end = array.length >> shift;
  while (end !== start) {
    const middle = start + (end - start >> 1);
    const current = array[middle << shift];
    if (value === current) {
      return middle << shift;
    } else if (current > value) {
      end = middle;
    } else {
      start = middle + 1;
    }
  }
  return ~(end << shift);
}
var EMPTY_OBJ = {};
var EMPTY_ARRAY = [];
if ((typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode()) {
  Object.freeze(EMPTY_OBJ);
  Object.freeze(EMPTY_ARRAY);
}
var ENVIRONMENT_INITIALIZER = new InjectionToken(ngDevMode ? "ENVIRONMENT_INITIALIZER" : "");
var INJECTOR$1 = new InjectionToken(
  ngDevMode ? "INJECTOR" : "",
  // Disable tslint because this is const enum which gets inlined not top level prop access.
  // tslint:disable-next-line: no-toplevel-property-access
  -1
  /* InjectorMarkers.Injector */
);
var INJECTOR_DEF_TYPES = new InjectionToken(ngDevMode ? "INJECTOR_DEF_TYPES" : "");
var NullInjector = class {
  get(token, notFoundValue = THROW_IF_NOT_FOUND) {
    if (notFoundValue === THROW_IF_NOT_FOUND) {
      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);
      error.name = "NullInjectorError";
      throw error;
    }
    return notFoundValue;
  }
};
var ChangeDetectionStrategy;
(function(ChangeDetectionStrategy2) {
  ChangeDetectionStrategy2[ChangeDetectionStrategy2["OnPush"] = 0] = "OnPush";
  ChangeDetectionStrategy2[ChangeDetectionStrategy2["Default"] = 1] = "Default";
})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
var ViewEncapsulation$1;
(function(ViewEncapsulation2) {
  ViewEncapsulation2[ViewEncapsulation2["Emulated"] = 0] = "Emulated";
  ViewEncapsulation2[ViewEncapsulation2["None"] = 2] = "None";
  ViewEncapsulation2[ViewEncapsulation2["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));
var InputFlags;
(function(InputFlags2) {
  InputFlags2[InputFlags2["None"] = 0] = "None";
  InputFlags2[InputFlags2["SignalBased"] = 1] = "SignalBased";
  InputFlags2[InputFlags2["HasDecoratorInputTransform"] = 2] = "HasDecoratorInputTransform";
})(InputFlags || (InputFlags = {}));
function classIndexOf(className, classToSearch, startingIndex) {
  ngDevMode && assertNotEqual(classToSearch, "", 'can not look for "" string.');
  let end = className.length;
  while (true) {
    const foundIndex = className.indexOf(classToSearch, startingIndex);
    if (foundIndex === -1) return foundIndex;
    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32) {
      const length = classToSearch.length;
      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32) {
        return foundIndex;
      }
    }
    startingIndex = foundIndex + 1;
  }
}
function setUpAttributes(renderer, native, attrs) {
  let i = 0;
  while (i < attrs.length) {
    const value = attrs[i];
    if (typeof value === "number") {
      if (value !== 0) {
        break;
      }
      i++;
      const namespaceURI = attrs[i++];
      const attrName = attrs[i++];
      const attrVal = attrs[i++];
      ngDevMode && ngDevMode.rendererSetAttribute++;
      renderer.setAttribute(native, attrName, attrVal, namespaceURI);
    } else {
      const attrName = value;
      const attrVal = attrs[++i];
      ngDevMode && ngDevMode.rendererSetAttribute++;
      if (isAnimationProp(attrName)) {
        renderer.setProperty(native, attrName, attrVal);
      } else {
        renderer.setAttribute(native, attrName, attrVal);
      }
      i++;
    }
  }
  return i;
}
function isNameOnlyAttributeMarker(marker) {
  return marker === 3 || marker === 4 || marker === 6;
}
function isAnimationProp(name) {
  return name.charCodeAt(0) === 64;
}
function mergeHostAttrs(dst, src) {
  if (src === null || src.length === 0) {
  } else if (dst === null || dst.length === 0) {
    dst = src.slice();
  } else {
    let srcMarker = -1;
    for (let i = 0; i < src.length; i++) {
      const item = src[i];
      if (typeof item === "number") {
        srcMarker = item;
      } else {
        if (srcMarker === 0) {
        } else if (srcMarker === -1 || srcMarker === 2) {
          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
        } else {
          mergeHostAttribute(dst, srcMarker, item, null, null);
        }
      }
    }
  }
  return dst;
}
function mergeHostAttribute(dst, marker, key1, key2, value) {
  let i = 0;
  let markerInsertPosition = dst.length;
  if (marker === -1) {
    markerInsertPosition = -1;
  } else {
    while (i < dst.length) {
      const dstValue = dst[i++];
      if (typeof dstValue === "number") {
        if (dstValue === marker) {
          markerInsertPosition = -1;
          break;
        } else if (dstValue > marker) {
          markerInsertPosition = i - 1;
          break;
        }
      }
    }
  }
  while (i < dst.length) {
    const item = dst[i];
    if (typeof item === "number") {
      break;
    } else if (item === key1) {
      if (key2 === null) {
        if (value !== null) {
          dst[i + 1] = value;
        }
        return;
      } else if (key2 === dst[i + 1]) {
        dst[i + 2] = value;
        return;
      }
    }
    i++;
    if (key2 !== null) i++;
    if (value !== null) i++;
  }
  if (markerInsertPosition !== -1) {
    dst.splice(markerInsertPosition, 0, marker);
    i = markerInsertPosition + 1;
  }
  dst.splice(i++, 0, key1);
  if (key2 !== null) {
    dst.splice(i++, 0, key2);
  }
  if (value !== null) {
    dst.splice(i++, 0, value);
  }
}
var NG_TEMPLATE_SELECTOR = "ng-template";
function isCssClassMatching(tNode, attrs, cssClassToMatch, isProjectionMode) {
  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), "Class name expected to be lowercase.");
  let i = 0;
  if (isProjectionMode) {
    for (; i < attrs.length && typeof attrs[i] === "string"; i += 2) {
      if (attrs[i] === "class" && classIndexOf(attrs[i + 1].toLowerCase(), cssClassToMatch, 0) !== -1) {
        return true;
      }
    }
  } else if (isInlineTemplate(tNode)) {
    return false;
  }
  i = attrs.indexOf(1, i);
  if (i > -1) {
    let item;
    while (++i < attrs.length && typeof (item = attrs[i]) === "string") {
      if (item.toLowerCase() === cssClassToMatch) {
        return true;
      }
    }
  }
  return false;
}
function isInlineTemplate(tNode) {
  return tNode.type === 4 && tNode.value !== NG_TEMPLATE_SELECTOR;
}
function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
  const tagNameToCompare = tNode.type === 4 && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;
  return currentSelector === tagNameToCompare;
}
function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
  ngDevMode && assertDefined(selector[0], "Selector should have a tag name");
  let mode = 4;
  const nodeAttrs = tNode.attrs;
  const nameOnlyMarkerIdx = nodeAttrs !== null ? getNameOnlyMarkerIndex(nodeAttrs) : 0;
  let skipToNextSelector = false;
  for (let i = 0; i < selector.length; i++) {
    const current = selector[i];
    if (typeof current === "number") {
      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
        return false;
      }
      if (skipToNextSelector && isPositive(current)) continue;
      skipToNextSelector = false;
      mode = current | mode & 1;
      continue;
    }
    if (skipToNextSelector) continue;
    if (mode & 4) {
      mode = 2 | mode & 1;
      if (current !== "" && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === "" && selector.length === 1) {
        if (isPositive(mode)) return false;
        skipToNextSelector = true;
      }
    } else if (mode & 8) {
      if (nodeAttrs === null || !isCssClassMatching(tNode, nodeAttrs, current, isProjectionMode)) {
        if (isPositive(mode)) return false;
        skipToNextSelector = true;
      }
    } else {
      const selectorAttrValue = selector[++i];
      const attrIndexInNode = findAttrIndexInNode(current, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);
      if (attrIndexInNode === -1) {
        if (isPositive(mode)) return false;
        skipToNextSelector = true;
        continue;
      }
      if (selectorAttrValue !== "") {
        let nodeAttrValue;
        if (attrIndexInNode > nameOnlyMarkerIdx) {
          nodeAttrValue = "";
        } else {
          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0, "We do not match directives on namespaced attributes");
          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
        }
        if (mode & 2 && selectorAttrValue !== nodeAttrValue) {
          if (isPositive(mode)) return false;
          skipToNextSelector = true;
        }
      }
    }
  }
  return isPositive(mode) || skipToNextSelector;
}
function isPositive(mode) {
  return (mode & 1) === 0;
}
function findAttrIndexInNode(name, attrs, isInlineTemplate2, isProjectionMode) {
  if (attrs === null) return -1;
  let i = 0;
  if (isProjectionMode || !isInlineTemplate2) {
    let bindingsMode = false;
    while (i < attrs.length) {
      const maybeAttrName = attrs[i];
      if (maybeAttrName === name) {
        return i;
      } else if (maybeAttrName === 3 || maybeAttrName === 6) {
        bindingsMode = true;
      } else if (maybeAttrName === 1 || maybeAttrName === 2) {
        let value = attrs[++i];
        while (typeof value === "string") {
          value = attrs[++i];
        }
        continue;
      } else if (maybeAttrName === 4) {
        break;
      } else if (maybeAttrName === 0) {
        i += 4;
        continue;
      }
      i += bindingsMode ? 1 : 2;
    }
    return -1;
  } else {
    return matchTemplateAttribute(attrs, name);
  }
}
function isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {
  for (let i = 0; i < selector.length; i++) {
    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
      return true;
    }
  }
  return false;
}
function getProjectAsAttrValue(tNode) {
  const nodeAttrs = tNode.attrs;
  if (nodeAttrs != null) {
    const ngProjectAsAttrIdx = nodeAttrs.indexOf(
      5
      /* AttributeMarker.ProjectAs */
    );
    if ((ngProjectAsAttrIdx & 1) === 0) {
      return nodeAttrs[ngProjectAsAttrIdx + 1];
    }
  }
  return null;
}
function getNameOnlyMarkerIndex(nodeAttrs) {
  for (let i = 0; i < nodeAttrs.length; i++) {
    const nodeAttr = nodeAttrs[i];
    if (isNameOnlyAttributeMarker(nodeAttr)) {
      return i;
    }
  }
  return nodeAttrs.length;
}
function matchTemplateAttribute(attrs, name) {
  let i = attrs.indexOf(
    4
    /* AttributeMarker.Template */
  );
  if (i > -1) {
    i++;
    while (i < attrs.length) {
      const attr = attrs[i];
      if (typeof attr === "number") return -1;
      if (attr === name) return i;
      i++;
    }
  }
  return -1;
}
function isSelectorInSelectorList(selector, list) {
  selectorListLoop: for (let i = 0; i < list.length; i++) {
    const currentSelectorInList = list[i];
    if (selector.length !== currentSelectorInList.length) {
      continue;
    }
    for (let j = 0; j < selector.length; j++) {
      if (selector[j] !== currentSelectorInList[j]) {
        continue selectorListLoop;
      }
    }
    return true;
  }
  return false;
}
function maybeWrapInNotSelector(isNegativeMode, chunk) {
  return isNegativeMode ? ":not(" + chunk.trim() + ")" : chunk;
}
function stringifyCSSSelector(selector) {
  let result = selector[0];
  let i = 1;
  let mode = 2;
  let currentChunk = "";
  let isNegativeMode = false;
  while (i < selector.length) {
    let valueOrMarker = selector[i];
    if (typeof valueOrMarker === "string") {
      if (mode & 2) {
        const attrValue = selector[++i];
        currentChunk += "[" + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : "") + "]";
      } else if (mode & 8) {
        currentChunk += "." + valueOrMarker;
      } else if (mode & 4) {
        currentChunk += " " + valueOrMarker;
      }
    } else {
      if (currentChunk !== "" && !isPositive(valueOrMarker)) {
        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
        currentChunk = "";
      }
      mode = valueOrMarker;
      isNegativeMode = isNegativeMode || !isPositive(mode);
    }
    i++;
  }
  if (currentChunk !== "") {
    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
  }
  return result;
}
function stringifyCSSSelectorList(selectorList) {
  return selectorList.map(stringifyCSSSelector).join(",");
}
function extractAttrsAndClassesFromSelector(selector) {
  const attrs = [];
  const classes = [];
  let i = 1;
  let mode = 2;
  while (i < selector.length) {
    let valueOrMarker = selector[i];
    if (typeof valueOrMarker === "string") {
      if (mode === 2) {
        if (valueOrMarker !== "") {
          attrs.push(valueOrMarker, selector[++i]);
        }
      } else if (mode === 8) {
        classes.push(valueOrMarker);
      }
    } else {
      if (!isPositive(mode)) break;
      mode = valueOrMarker;
    }
    i++;
  }
  return {
    attrs,
    classes
  };
}
function \u0275\u0275defineComponent(componentDefinition) {
  return noSideEffects(() => {
    (typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode();
    const baseDef = getNgDirectiveDef(componentDefinition);
    const def = __spreadProps(__spreadValues({}, baseDef), {
      decls: componentDefinition.decls,
      vars: componentDefinition.vars,
      template: componentDefinition.template,
      consts: componentDefinition.consts || null,
      ngContentSelectors: componentDefinition.ngContentSelectors,
      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
      directiveDefs: null,
      // assigned in noSideEffects
      pipeDefs: null,
      // assigned in noSideEffects
      dependencies: baseDef.standalone && componentDefinition.dependencies || null,
      getStandaloneInjector: null,
      signals: componentDefinition.signals ?? false,
      data: componentDefinition.data || {},
      encapsulation: componentDefinition.encapsulation || ViewEncapsulation$1.Emulated,
      styles: componentDefinition.styles || EMPTY_ARRAY,
      _: null,
      schemas: componentDefinition.schemas || null,
      tView: null,
      id: ""
    });
    initFeatures(def);
    const dependencies = componentDefinition.dependencies;
    def.directiveDefs = extractDefListOrFactory(
      dependencies,
      /* pipeDef */
      false
    );
    def.pipeDefs = extractDefListOrFactory(
      dependencies,
      /* pipeDef */
      true
    );
    def.id = getComponentId(def);
    return def;
  });
}
function extractDirectiveDef(type) {
  return getComponentDef(type) || getDirectiveDef(type);
}
function nonNull(value) {
  return value !== null;
}
function \u0275\u0275defineNgModule(def) {
  return noSideEffects(() => {
    const res = {
      type: def.type,
      bootstrap: def.bootstrap || EMPTY_ARRAY,
      declarations: def.declarations || EMPTY_ARRAY,
      imports: def.imports || EMPTY_ARRAY,
      exports: def.exports || EMPTY_ARRAY,
      transitiveCompileScopes: null,
      schemas: def.schemas || null,
      id: def.id || null
    };
    return res;
  });
}
function parseAndConvertBindingsForDefinition(obj, declaredInputs) {
  if (obj == null) return EMPTY_OBJ;
  const newLookup = {};
  for (const minifiedKey in obj) {
    if (obj.hasOwnProperty(minifiedKey)) {
      const value = obj[minifiedKey];
      let publicName;
      let declaredName;
      let inputFlags = InputFlags.None;
      if (Array.isArray(value)) {
        inputFlags = value[0];
        publicName = value[1];
        declaredName = value[2] ?? publicName;
      } else {
        publicName = value;
        declaredName = value;
      }
      if (declaredInputs) {
        newLookup[publicName] = inputFlags !== InputFlags.None ? [minifiedKey, inputFlags] : minifiedKey;
        declaredInputs[publicName] = declaredName;
      } else {
        newLookup[publicName] = minifiedKey;
      }
    }
  }
  return newLookup;
}
function \u0275\u0275defineDirective(directiveDefinition) {
  return noSideEffects(() => {
    const def = getNgDirectiveDef(directiveDefinition);
    initFeatures(def);
    return def;
  });
}
function \u0275\u0275definePipe(pipeDef) {
  return {
    type: pipeDef.type,
    name: pipeDef.name,
    factory: null,
    pure: pipeDef.pure !== false,
    standalone: pipeDef.standalone === true,
    onDestroy: pipeDef.type.prototype.ngOnDestroy || null
  };
}
function getComponentDef(type) {
  return type[NG_COMP_DEF] || null;
}
function getDirectiveDef(type) {
  return type[NG_DIR_DEF] || null;
}
function getPipeDef$1(type) {
  return type[NG_PIPE_DEF] || null;
}
function isStandalone(type) {
  const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
  return def !== null ? def.standalone : false;
}
function getNgModuleDef(type, throwNotFound) {
  const ngModuleDef = type[NG_MOD_DEF] || null;
  if (!ngModuleDef && throwNotFound === true) {
    throw new Error(`Type ${stringify(type)} does not have '\u0275mod' property.`);
  }
  return ngModuleDef;
}
function getNgDirectiveDef(directiveDefinition) {
  const declaredInputs = {};
  return {
    type: directiveDefinition.type,
    providersResolver: null,
    factory: null,
    hostBindings: directiveDefinition.hostBindings || null,
    hostVars: directiveDefinition.hostVars || 0,
    hostAttrs: directiveDefinition.hostAttrs || null,
    contentQueries: directiveDefinition.contentQueries || null,
    declaredInputs,
    inputTransforms: null,
    inputConfig: directiveDefinition.inputs || EMPTY_OBJ,
    exportAs: directiveDefinition.exportAs || null,
    standalone: directiveDefinition.standalone === true,
    signals: directiveDefinition.signals === true,
    selectors: directiveDefinition.selectors || EMPTY_ARRAY,
    viewQuery: directiveDefinition.viewQuery || null,
    features: directiveDefinition.features || null,
    setInput: null,
    findHostDirectiveDefs: null,
    hostDirectives: null,
    inputs: parseAndConvertBindingsForDefinition(directiveDefinition.inputs, declaredInputs),
    outputs: parseAndConvertBindingsForDefinition(directiveDefinition.outputs),
    debugInfo: null
  };
}
function initFeatures(definition) {
  definition.features?.forEach((fn) => fn(definition));
}
function extractDefListOrFactory(dependencies, pipeDef) {
  if (!dependencies) {
    return null;
  }
  const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;
  return () => (typeof dependencies === "function" ? dependencies() : dependencies).map((dep) => defExtractor(dep)).filter(nonNull);
}
var GENERATED_COMP_IDS = /* @__PURE__ */ new Map();
function getComponentId(componentDef) {
  let hash = 0;
  const hashSelectors = [
    componentDef.selectors,
    componentDef.ngContentSelectors,
    componentDef.hostVars,
    componentDef.hostAttrs,
    componentDef.consts,
    componentDef.vars,
    componentDef.decls,
    componentDef.encapsulation,
    componentDef.standalone,
    componentDef.signals,
    componentDef.exportAs,
    JSON.stringify(componentDef.inputs),
    JSON.stringify(componentDef.outputs),
    // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not
    // match in the server and browser bundles.
    Object.getOwnPropertyNames(componentDef.type.prototype),
    !!componentDef.contentQueries,
    !!componentDef.viewQuery
  ].join("|");
  for (const char of hashSelectors) {
    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;
  }
  hash += 2147483647 + 1;
  const compId = "c" + hash;
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (GENERATED_COMP_IDS.has(compId)) {
      const previousCompDefType = GENERATED_COMP_IDS.get(compId);
      if (previousCompDefType !== componentDef.type) {
        console.warn(formatRuntimeError(-912, `Component ID generation collision detected. Components '${previousCompDefType.name}' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(componentDef.selectors)}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`));
      }
    } else {
      GENERATED_COMP_IDS.set(compId, componentDef.type);
    }
  }
  return compId;
}
function makeEnvironmentProviders(providers) {
  return {
    \u0275providers: providers
  };
}
function importProvidersFrom(...sources) {
  return {
    \u0275providers: internalImportProvidersFrom(true, sources),
    \u0275fromNgModule: true
  };
}
function internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {
  const providersOut = [];
  const dedup = /* @__PURE__ */ new Set();
  let injectorTypesWithProviders;
  const collectProviders = (provider) => {
    providersOut.push(provider);
  };
  deepForEach(sources, (source) => {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && checkForStandaloneCmp) {
      const cmpDef = getComponentDef(source);
      if (cmpDef?.standalone) {
        throw new RuntimeError(800, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component "${stringifyForError(source)}"`);
      }
    }
    const internalSource = source;
    if (walkProviderTree(internalSource, collectProviders, [], dedup)) {
      injectorTypesWithProviders ||= [];
      injectorTypesWithProviders.push(internalSource);
    }
  });
  if (injectorTypesWithProviders !== void 0) {
    processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);
  }
  return providersOut;
}
function processInjectorTypesWithProviders(typesWithProviders, visitor) {
  for (let i = 0; i < typesWithProviders.length; i++) {
    const {
      ngModule,
      providers
    } = typesWithProviders[i];
    deepForEachProvider(providers, (provider) => {
      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);
      visitor(provider, ngModule);
    });
  }
}
function walkProviderTree(container, visitor, parents, dedup) {
  container = resolveForwardRef(container);
  if (!container) return false;
  let defType = null;
  let injDef = getInjectorDef(container);
  const cmpDef = !injDef && getComponentDef(container);
  if (!injDef && !cmpDef) {
    const ngModule = container.ngModule;
    injDef = getInjectorDef(ngModule);
    if (injDef) {
      defType = ngModule;
    } else {
      return false;
    }
  } else if (cmpDef && !cmpDef.standalone) {
    return false;
  } else {
    defType = container;
  }
  if (ngDevMode && parents.indexOf(defType) !== -1) {
    const defName = stringify(defType);
    const path = parents.map(stringify);
    throwCyclicDependencyError(defName, path);
  }
  const isDuplicate = dedup.has(defType);
  if (cmpDef) {
    if (isDuplicate) {
      return false;
    }
    dedup.add(defType);
    if (cmpDef.dependencies) {
      const deps = typeof cmpDef.dependencies === "function" ? cmpDef.dependencies() : cmpDef.dependencies;
      for (const dep of deps) {
        walkProviderTree(dep, visitor, parents, dedup);
      }
    }
  } else if (injDef) {
    if (injDef.imports != null && !isDuplicate) {
      ngDevMode && parents.push(defType);
      dedup.add(defType);
      let importTypesWithProviders;
      try {
        deepForEach(injDef.imports, (imported) => {
          if (walkProviderTree(imported, visitor, parents, dedup)) {
            importTypesWithProviders ||= [];
            importTypesWithProviders.push(imported);
          }
        });
      } finally {
        ngDevMode && parents.pop();
      }
      if (importTypesWithProviders !== void 0) {
        processInjectorTypesWithProviders(importTypesWithProviders, visitor);
      }
    }
    if (!isDuplicate) {
      const factory = getFactoryDef(defType) || (() => new defType());
      visitor({
        provide: defType,
        useFactory: factory,
        deps: EMPTY_ARRAY
      }, defType);
      visitor({
        provide: INJECTOR_DEF_TYPES,
        useValue: defType,
        multi: true
      }, defType);
      visitor({
        provide: ENVIRONMENT_INITIALIZER,
        useValue: () => \u0275\u0275inject(defType),
        multi: true
      }, defType);
    }
    const defProviders = injDef.providers;
    if (defProviders != null && !isDuplicate) {
      const injectorType = container;
      deepForEachProvider(defProviders, (provider) => {
        ngDevMode && validateProvider(provider, defProviders, injectorType);
        visitor(provider, injectorType);
      });
    }
  } else {
    return false;
  }
  return defType !== container && container.providers !== void 0;
}
function validateProvider(provider, providers, containerType) {
  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {
    return;
  }
  const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));
  if (!classRef) {
    throwInvalidProviderError(containerType, providers, provider);
  }
}
function deepForEachProvider(providers, fn) {
  for (let provider of providers) {
    if (isEnvironmentProviders(provider)) {
      provider = provider.\u0275providers;
    }
    if (Array.isArray(provider)) {
      deepForEachProvider(provider, fn);
    } else {
      fn(provider);
    }
  }
}
var USE_VALUE$1 = getClosureSafeProperty({
  provide: String,
  useValue: getClosureSafeProperty
});
function isValueProvider(value) {
  return value !== null && typeof value == "object" && USE_VALUE$1 in value;
}
function isExistingProvider(value) {
  return !!(value && value.useExisting);
}
function isFactoryProvider(value) {
  return !!(value && value.useFactory);
}
function isTypeProvider(value) {
  return typeof value === "function";
}
function isClassProvider(value) {
  return !!value.useClass;
}
var INJECTOR_SCOPE = new InjectionToken(ngDevMode ? "Set Injector scope." : "");
var NOT_YET = {};
var CIRCULAR = {};
var NULL_INJECTOR = void 0;
function getNullInjector() {
  if (NULL_INJECTOR === void 0) {
    NULL_INJECTOR = new NullInjector();
  }
  return NULL_INJECTOR;
}
var EnvironmentInjector = class {
};
var R3Injector = class extends EnvironmentInjector {
  /**
   * Flag indicating that this injector was previously destroyed.
   */
  get destroyed() {
    return this._destroyed;
  }
  constructor(providers, parent, source, scopes) {
    super();
    this.parent = parent;
    this.source = source;
    this.scopes = scopes;
    this.records = /* @__PURE__ */ new Map();
    this._ngOnDestroyHooks = /* @__PURE__ */ new Set();
    this._onDestroyHooks = [];
    this._destroyed = false;
    forEachSingleProvider(providers, (provider) => this.processProvider(provider));
    this.records.set(INJECTOR$1, makeRecord(void 0, this));
    if (scopes.has("environment")) {
      this.records.set(EnvironmentInjector, makeRecord(void 0, this));
    }
    const record = this.records.get(INJECTOR_SCOPE);
    if (record != null && typeof record.value === "string") {
      this.scopes.add(record.value);
    }
    this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, InjectFlags.Self));
  }
  /**
   * Destroy the injector and release references to every instance or provider associated with it.
   *
   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
   * hook was found.
   */
  destroy() {
    this.assertNotDestroyed();
    this._destroyed = true;
    const prevConsumer = setActiveConsumer(null);
    try {
      for (const service of this._ngOnDestroyHooks) {
        service.ngOnDestroy();
      }
      const onDestroyHooks = this._onDestroyHooks;
      this._onDestroyHooks = [];
      for (const hook of onDestroyHooks) {
        hook();
      }
    } finally {
      this.records.clear();
      this._ngOnDestroyHooks.clear();
      this.injectorDefTypes.clear();
      setActiveConsumer(prevConsumer);
    }
  }
  onDestroy(callback) {
    this.assertNotDestroyed();
    this._onDestroyHooks.push(callback);
    return () => this.removeOnDestroy(callback);
  }
  runInContext(fn) {
    this.assertNotDestroyed();
    const previousInjector = setCurrentInjector(this);
    const previousInjectImplementation = setInjectImplementation(void 0);
    let prevInjectContext;
    if (ngDevMode) {
      prevInjectContext = setInjectorProfilerContext({
        injector: this,
        token: null
      });
    }
    try {
      return fn();
    } finally {
      setCurrentInjector(previousInjector);
      setInjectImplementation(previousInjectImplementation);
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
    }
  }
  get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {
    this.assertNotDestroyed();
    if (token.hasOwnProperty(NG_ENV_ID)) {
      return token[NG_ENV_ID](this);
    }
    flags = convertToBitFlags(flags);
    let prevInjectContext;
    if (ngDevMode) {
      prevInjectContext = setInjectorProfilerContext({
        injector: this,
        token
      });
    }
    const previousInjector = setCurrentInjector(this);
    const previousInjectImplementation = setInjectImplementation(void 0);
    try {
      if (!(flags & InjectFlags.SkipSelf)) {
        let record = this.records.get(token);
        if (record === void 0) {
          const def = couldBeInjectableType(token) && getInjectableDef(token);
          if (def && this.injectableDefInScope(def)) {
            if (ngDevMode) {
              runInInjectorProfilerContext(this, token, () => {
                emitProviderConfiguredEvent(token);
              });
            }
            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
          } else {
            record = null;
          }
          this.records.set(token, record);
        }
        if (record != null) {
          return this.hydrate(token, record);
        }
      }
      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();
      notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;
      return nextInjector.get(token, notFoundValue);
    } catch (e) {
      if (e.name === "NullInjectorError") {
        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
        path.unshift(stringify(token));
        if (previousInjector) {
          throw e;
        } else {
          return catchInjectorError(e, token, "R3InjectorError", this.source);
        }
      } else {
        throw e;
      }
    } finally {
      setInjectImplementation(previousInjectImplementation);
      setCurrentInjector(previousInjector);
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
    }
  }
  /** @internal */
  resolveInjectorInitializers() {
    const prevConsumer = setActiveConsumer(null);
    const previousInjector = setCurrentInjector(this);
    const previousInjectImplementation = setInjectImplementation(void 0);
    let prevInjectContext;
    if (ngDevMode) {
      prevInjectContext = setInjectorProfilerContext({
        injector: this,
        token: null
      });
    }
    try {
      const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, InjectFlags.Self);
      if (ngDevMode && !Array.isArray(initializers)) {
        throw new RuntimeError(-209, `Unexpected type of the \`ENVIRONMENT_INITIALIZER\` token value (expected an array, but got ${typeof initializers}). Please check that the \`ENVIRONMENT_INITIALIZER\` token is configured as a \`multi: true\` provider.`);
      }
      for (const initializer of initializers) {
        initializer();
      }
    } finally {
      setCurrentInjector(previousInjector);
      setInjectImplementation(previousInjectImplementation);
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
      setActiveConsumer(prevConsumer);
    }
  }
  toString() {
    const tokens = [];
    const records = this.records;
    for (const token of records.keys()) {
      tokens.push(stringify(token));
    }
    return `R3Injector[${tokens.join(", ")}]`;
  }
  assertNotDestroyed() {
    if (this._destroyed) {
      throw new RuntimeError(205, ngDevMode && "Injector has already been destroyed.");
    }
  }
  /**
   * Process a `SingleProvider` and add it.
   */
  processProvider(provider) {
    provider = resolveForwardRef(provider);
    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);
    const record = providerToRecord(provider);
    if (ngDevMode) {
      runInInjectorProfilerContext(this, token, () => {
        if (isValueProvider(provider)) {
          emitInstanceCreatedByInjectorEvent(provider.useValue);
        }
        emitProviderConfiguredEvent(provider);
      });
    }
    if (!isTypeProvider(provider) && provider.multi === true) {
      let multiRecord = this.records.get(token);
      if (multiRecord) {
        if (ngDevMode && multiRecord.multi === void 0) {
          throwMixedMultiProviderError();
        }
      } else {
        multiRecord = makeRecord(void 0, NOT_YET, true);
        multiRecord.factory = () => injectArgs(multiRecord.multi);
        this.records.set(token, multiRecord);
      }
      token = provider;
      multiRecord.multi.push(provider);
    } else {
      if (ngDevMode) {
        const existing = this.records.get(token);
        if (existing && existing.multi !== void 0) {
          throwMixedMultiProviderError();
        }
      }
    }
    this.records.set(token, record);
  }
  hydrate(token, record) {
    const prevConsumer = setActiveConsumer(null);
    try {
      if (ngDevMode && record.value === CIRCULAR) {
        throwCyclicDependencyError(stringify(token));
      } else if (record.value === NOT_YET) {
        record.value = CIRCULAR;
        if (ngDevMode) {
          runInInjectorProfilerContext(this, token, () => {
            record.value = record.factory();
            emitInstanceCreatedByInjectorEvent(record.value);
          });
        } else {
          record.value = record.factory();
        }
      }
      if (typeof record.value === "object" && record.value && hasOnDestroy(record.value)) {
        this._ngOnDestroyHooks.add(record.value);
      }
      return record.value;
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
  injectableDefInScope(def) {
    if (!def.providedIn) {
      return false;
    }
    const providedIn = resolveForwardRef(def.providedIn);
    if (typeof providedIn === "string") {
      return providedIn === "any" || this.scopes.has(providedIn);
    } else {
      return this.injectorDefTypes.has(providedIn);
    }
  }
  removeOnDestroy(callback) {
    const destroyCBIdx = this._onDestroyHooks.indexOf(callback);
    if (destroyCBIdx !== -1) {
      this._onDestroyHooks.splice(destroyCBIdx, 1);
    }
  }
};
function injectableDefOrInjectorDefFactory(token) {
  const injectableDef = getInjectableDef(token);
  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);
  if (factory !== null) {
    return factory;
  }
  if (token instanceof InjectionToken) {
    throw new RuntimeError(204, ngDevMode && `Token ${stringify(token)} is missing a \u0275prov definition.`);
  }
  if (token instanceof Function) {
    return getUndecoratedInjectableFactory(token);
  }
  throw new RuntimeError(204, ngDevMode && "unreachable");
}
function getUndecoratedInjectableFactory(token) {
  const paramLength = token.length;
  if (paramLength > 0) {
    throw new RuntimeError(204, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${newArray(paramLength, "?").join(", ")}).`);
  }
  const inheritedInjectableDef = getInheritedInjectableDef(token);
  if (inheritedInjectableDef !== null) {
    return () => inheritedInjectableDef.factory(token);
  } else {
    return () => new token();
  }
}
function providerToRecord(provider) {
  if (isValueProvider(provider)) {
    return makeRecord(void 0, provider.useValue);
  } else {
    const factory = providerToFactory(provider);
    return makeRecord(factory, NOT_YET);
  }
}
function providerToFactory(provider, ngModuleType, providers) {
  let factory = void 0;
  if (ngDevMode && isEnvironmentProviders(provider)) {
    throwInvalidProviderError(void 0, providers, provider);
  }
  if (isTypeProvider(provider)) {
    const unwrappedProvider = resolveForwardRef(provider);
    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
  } else {
    if (isValueProvider(provider)) {
      factory = () => resolveForwardRef(provider.useValue);
    } else if (isFactoryProvider(provider)) {
      factory = () => provider.useFactory(...injectArgs(provider.deps || []));
    } else if (isExistingProvider(provider)) {
      factory = () => \u0275\u0275inject(resolveForwardRef(provider.useExisting));
    } else {
      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));
      if (ngDevMode && !classRef) {
        throwInvalidProviderError(ngModuleType, providers, provider);
      }
      if (hasDeps(provider)) {
        factory = () => new classRef(...injectArgs(provider.deps));
      } else {
        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
      }
    }
  }
  return factory;
}
function makeRecord(factory, value, multi = false) {
  return {
    factory,
    value,
    multi: multi ? [] : void 0
  };
}
function hasDeps(value) {
  return !!value.deps;
}
function hasOnDestroy(value) {
  return value !== null && typeof value === "object" && typeof value.ngOnDestroy === "function";
}
function couldBeInjectableType(value) {
  return typeof value === "function" || typeof value === "object" && value instanceof InjectionToken;
}
function forEachSingleProvider(providers, fn) {
  for (const provider of providers) {
    if (Array.isArray(provider)) {
      forEachSingleProvider(provider, fn);
    } else if (provider && isEnvironmentProviders(provider)) {
      forEachSingleProvider(provider.\u0275providers, fn);
    } else {
      fn(provider);
    }
  }
}
function runInInjectionContext(injector, fn) {
  if (injector instanceof R3Injector) {
    injector.assertNotDestroyed();
  }
  let prevInjectorProfilerContext;
  if (ngDevMode) {
    prevInjectorProfilerContext = setInjectorProfilerContext({
      injector,
      token: null
    });
  }
  const prevInjector = setCurrentInjector(injector);
  const previousInjectImplementation = setInjectImplementation(void 0);
  try {
    return fn();
  } finally {
    setCurrentInjector(prevInjector);
    ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext);
    setInjectImplementation(previousInjectImplementation);
  }
}
function isInInjectionContext() {
  return getInjectImplementation() !== void 0 || getCurrentInjector() != null;
}
function assertInInjectionContext(debugFn) {
  if (!isInInjectionContext()) {
    throw new RuntimeError(-203, ngDevMode && debugFn.name + "() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`");
  }
}
var FactoryTarget;
(function(FactoryTarget2) {
  FactoryTarget2[FactoryTarget2["Directive"] = 0] = "Directive";
  FactoryTarget2[FactoryTarget2["Component"] = 1] = "Component";
  FactoryTarget2[FactoryTarget2["Injectable"] = 2] = "Injectable";
  FactoryTarget2[FactoryTarget2["Pipe"] = 3] = "Pipe";
  FactoryTarget2[FactoryTarget2["NgModule"] = 4] = "NgModule";
})(FactoryTarget || (FactoryTarget = {}));
var R3TemplateDependencyKind;
(function(R3TemplateDependencyKind2) {
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["Directive"] = 0] = "Directive";
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["Pipe"] = 1] = "Pipe";
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["NgModule"] = 2] = "NgModule";
})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));
var ViewEncapsulation;
(function(ViewEncapsulation2) {
  ViewEncapsulation2[ViewEncapsulation2["Emulated"] = 0] = "Emulated";
  ViewEncapsulation2[ViewEncapsulation2["None"] = 2] = "None";
  ViewEncapsulation2[ViewEncapsulation2["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation || (ViewEncapsulation = {}));
function getCompilerFacade(request) {
  const globalNg = _global["ng"];
  if (globalNg && globalNg.\u0275compilerFacade) {
    return globalNg.\u0275compilerFacade;
  }
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    console.error(`JIT compilation failed for ${request.kind}`, request.type);
    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.

`;
    if (request.usage === 1) {
      message += `The ${request.kind} is part of a library that has been partially compiled.
`;
      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.
`;
      message += "\n";
      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.
`;
    } else {
      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.
`;
    }
    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',
`;
    message += `or manually provide the compiler with 'import "@angular/compiler";' before bootstrapping.`;
    throw new Error(message);
  } else {
    throw new Error("JIT compiler unavailable");
  }
}
var angularCoreDiEnv = {
  "\u0275\u0275defineInjectable": \u0275\u0275defineInjectable,
  "\u0275\u0275defineInjector": \u0275\u0275defineInjector,
  "\u0275\u0275inject": \u0275\u0275inject,
  "\u0275\u0275invalidFactoryDep": \u0275\u0275invalidFactoryDep,
  "resolveForwardRef": resolveForwardRef
};
var Type = Function;
function isType(v) {
  return typeof v === "function";
}
var ES5_DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/;
var ES2015_INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
var ES2015_INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
var ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;
function isDelegateCtor(typeStr) {
  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);
}
var ReflectionCapabilities = class {
  constructor(reflect) {
    this._reflect = reflect || _global["Reflect"];
  }
  factory(t) {
    return (...args) => new t(...args);
  }
  /** @internal */
  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
    let result;
    if (typeof paramTypes === "undefined") {
      result = newArray(paramAnnotations.length);
    } else {
      result = newArray(paramTypes.length);
    }
    for (let i = 0; i < result.length; i++) {
      if (typeof paramTypes === "undefined") {
        result[i] = [];
      } else if (paramTypes[i] && paramTypes[i] != Object) {
        result[i] = [paramTypes[i]];
      } else {
        result[i] = [];
      }
      if (paramAnnotations && paramAnnotations[i] != null) {
        result[i] = result[i].concat(paramAnnotations[i]);
      }
    }
    return result;
  }
  _ownParameters(type, parentCtor) {
    const typeStr = type.toString();
    if (isDelegateCtor(typeStr)) {
      return null;
    }
    if (type.parameters && type.parameters !== parentCtor.parameters) {
      return type.parameters;
    }
    const tsickleCtorParams = type.ctorParameters;
    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
      const ctorParameters = typeof tsickleCtorParams === "function" ? tsickleCtorParams() : tsickleCtorParams;
      const paramTypes2 = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);
      const paramAnnotations2 = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));
      return this._zipTypesAndAnnotations(paramTypes2, paramAnnotations2);
    }
    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];
    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata("design:paramtypes", type);
    if (paramTypes || paramAnnotations) {
      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
    }
    return newArray(type.length);
  }
  parameters(type) {
    if (!isType(type)) {
      return [];
    }
    const parentCtor = getParentCtor(type);
    let parameters = this._ownParameters(type, parentCtor);
    if (!parameters && parentCtor !== Object) {
      parameters = this.parameters(parentCtor);
    }
    return parameters || [];
  }
  _ownAnnotations(typeOrFunc, parentCtor) {
    if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
      let annotations = typeOrFunc.annotations;
      if (typeof annotations === "function" && annotations.annotations) {
        annotations = annotations.annotations;
      }
      return annotations;
    }
    if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
      return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
    }
    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
      return typeOrFunc[ANNOTATIONS];
    }
    return null;
  }
  annotations(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return [];
    }
    const parentCtor = getParentCtor(typeOrFunc);
    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
    return parentAnnotations.concat(ownAnnotations);
  }
  _ownPropMetadata(typeOrFunc, parentCtor) {
    if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
      let propMetadata = typeOrFunc.propMetadata;
      if (typeof propMetadata === "function" && propMetadata.propMetadata) {
        propMetadata = propMetadata.propMetadata;
      }
      return propMetadata;
    }
    if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
      const propDecorators = typeOrFunc.propDecorators;
      const propMetadata = {};
      Object.keys(propDecorators).forEach((prop) => {
        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
      });
      return propMetadata;
    }
    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
      return typeOrFunc[PROP_METADATA];
    }
    return null;
  }
  propMetadata(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return {};
    }
    const parentCtor = getParentCtor(typeOrFunc);
    const propMetadata = {};
    if (parentCtor !== Object) {
      const parentPropMetadata = this.propMetadata(parentCtor);
      Object.keys(parentPropMetadata).forEach((propName) => {
        propMetadata[propName] = parentPropMetadata[propName];
      });
    }
    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
    if (ownPropMetadata) {
      Object.keys(ownPropMetadata).forEach((propName) => {
        const decorators = [];
        if (propMetadata.hasOwnProperty(propName)) {
          decorators.push(...propMetadata[propName]);
        }
        decorators.push(...ownPropMetadata[propName]);
        propMetadata[propName] = decorators;
      });
    }
    return propMetadata;
  }
  ownPropMetadata(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return {};
    }
    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
  }
  hasLifecycleHook(type, lcProperty) {
    return type instanceof Type && lcProperty in type.prototype;
  }
};
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
  if (!decoratorInvocations) {
    return [];
  }
  return decoratorInvocations.map((decoratorInvocation) => {
    const decoratorType = decoratorInvocation.type;
    const annotationCls = decoratorType.annotationCls;
    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
    return new annotationCls(...annotationArgs);
  });
}
function getParentCtor(ctor) {
  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
  const parentCtor = parentProto ? parentProto.constructor : null;
  return parentCtor || Object;
}
var HOST = 0;
var TVIEW = 1;
var FLAGS = 2;
var PARENT = 3;
var NEXT = 4;
var T_HOST = 5;
var HYDRATION = 6;
var CLEANUP = 7;
var CONTEXT = 8;
var INJECTOR = 9;
var ENVIRONMENT = 10;
var RENDERER = 11;
var CHILD_HEAD = 12;
var CHILD_TAIL = 13;
var DECLARATION_VIEW = 14;
var DECLARATION_COMPONENT_VIEW = 15;
var DECLARATION_LCONTAINER = 16;
var PREORDER_HOOK_FLAGS = 17;
var QUERIES = 18;
var ID = 19;
var EMBEDDED_VIEW_INJECTOR = 20;
var ON_DESTROY_HOOKS = 21;
var EFFECTS_TO_SCHEDULE = 22;
var REACTIVE_TEMPLATE_CONSUMER = 23;
var HEADER_OFFSET = 25;
var TYPE = 1;
var NATIVE = 7;
var VIEW_REFS = 8;
var MOVED_VIEWS = 9;
var CONTAINER_HEADER_OFFSET = 10;
var LContainerFlags;
(function(LContainerFlags2) {
  LContainerFlags2[LContainerFlags2["None"] = 0] = "None";
  LContainerFlags2[LContainerFlags2["HasTransplantedViews"] = 2] = "HasTransplantedViews";
})(LContainerFlags || (LContainerFlags = {}));
function isLView(value) {
  return Array.isArray(value) && typeof value[TYPE] === "object";
}
function isLContainer(value) {
  return Array.isArray(value) && value[TYPE] === true;
}
function isContentQueryHost(tNode) {
  return (tNode.flags & 4) !== 0;
}
function isComponentHost(tNode) {
  return tNode.componentOffset > -1;
}
function isDirectiveHost(tNode) {
  return (tNode.flags & 1) === 1;
}
function isComponentDef(def) {
  return !!def.template;
}
function isRootView(target) {
  return (target[FLAGS] & 512) !== 0;
}
function isDestroyed(lView) {
  return (lView[FLAGS] & 256) === 256;
}
function assertTNodeForLView(tNode, lView) {
  assertTNodeForTView(tNode, lView[TVIEW]);
}
function assertTNodeForTView(tNode, tView) {
  assertTNode(tNode);
  const tData = tView.data;
  for (let i = HEADER_OFFSET; i < tData.length; i++) {
    if (tData[i] === tNode) {
      return;
    }
  }
  throwError2("This TNode does not belong to this TView.");
}
function assertTNode(tNode) {
  assertDefined(tNode, "TNode must be defined");
  if (!(tNode && typeof tNode === "object" && tNode.hasOwnProperty("directiveStylingLast"))) {
    throwError2("Not of type TNode, got: " + tNode);
  }
}
function assertTIcu(tIcu) {
  assertDefined(tIcu, "Expected TIcu to be defined");
  if (!(typeof tIcu.currentCaseLViewIndex === "number")) {
    throwError2("Object is not of TIcu type.");
  }
}
function assertComponentType(actual, msg = "Type passed in is not ComponentType, it does not have '\u0275cmp' property.") {
  if (!getComponentDef(actual)) {
    throwError2(msg);
  }
}
function assertNgModuleType(actual, msg = "Type passed in is not NgModuleType, it does not have '\u0275mod' property.") {
  if (!getNgModuleDef(actual)) {
    throwError2(msg);
  }
}
function assertHasParent(tNode) {
  assertDefined(tNode, "currentTNode should exist!");
  assertDefined(tNode.parent, "currentTNode should have a parent");
}
function assertLContainer(value) {
  assertDefined(value, "LContainer must be defined");
  assertEqual(isLContainer(value), true, "Expecting LContainer");
}
function assertLViewOrUndefined(value) {
  value && assertEqual(isLView(value), true, "Expecting LView or undefined or null");
}
function assertLView(value) {
  assertDefined(value, "LView must be defined");
  assertEqual(isLView(value), true, "Expecting LView");
}
function assertFirstCreatePass(tView, errMessage) {
  assertEqual(tView.firstCreatePass, true, errMessage || "Should only be called in first create pass.");
}
function assertFirstUpdatePass(tView, errMessage) {
  assertEqual(tView.firstUpdatePass, true, errMessage || "Should only be called in first update pass.");
}
function assertDirectiveDef(obj) {
  if (obj.type === void 0 || obj.selectors == void 0 || obj.inputs === void 0) {
    throwError2(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);
  }
}
function assertIndexInDeclRange(tView, index) {
  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);
}
function assertIndexInExpandoRange(lView, index) {
  const tView = lView[1];
  assertBetween(tView.expandoStartIndex, lView.length, index);
}
function assertBetween(lower, upper, index) {
  if (!(lower <= index && index < upper)) {
    throwError2(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);
  }
}
function assertProjectionSlots(lView, errMessage) {
  assertDefined(lView[DECLARATION_COMPONENT_VIEW], "Component views should exist.");
  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || "Components with projection nodes (<ng-content>) must have projection slots defined.");
}
function assertParentView(lView, errMessage) {
  assertDefined(lView, errMessage || "Component views should always have a parent view (component's host view)");
}
function assertNoDuplicateDirectives(directives) {
  if (directives.length < 2) {
    return;
  }
  const seenDirectives = /* @__PURE__ */ new Set();
  for (const current of directives) {
    if (seenDirectives.has(current)) {
      throw new RuntimeError(309, `Directive ${current.type.name} matches multiple times on the same element. Directives can only match an element once.`);
    }
    seenDirectives.add(current);
  }
}
function assertNodeInjector(lView, injectorIndex) {
  assertIndexInExpandoRange(lView, injectorIndex);
  assertIndexInExpandoRange(
    lView,
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  );
  assertNumber(lView[injectorIndex + 0], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 1], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 2], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 3], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 4], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 5], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 6], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 7], "injectorIndex should point to a bloom filter");
  assertNumber(lView[
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ], "injectorIndex should point to parent injector");
}
var SimpleChange = class {
  constructor(previousValue, currentValue, firstChange) {
    this.previousValue = previousValue;
    this.currentValue = currentValue;
    this.firstChange = firstChange;
  }
  /**
   * Check whether the new value is the first value assigned.
   */
  isFirstChange() {
    return this.firstChange;
  }
};
function applyValueToInputField(instance, inputSignalNode, privateName, value) {
  if (inputSignalNode !== null) {
    inputSignalNode.applyValueToInputSignal(inputSignalNode, value);
  } else {
    instance[privateName] = value;
  }
}
function \u0275\u0275NgOnChangesFeature() {
  return NgOnChangesFeatureImpl;
}
function NgOnChangesFeatureImpl(definition) {
  if (definition.type.prototype.ngOnChanges) {
    definition.setInput = ngOnChangesSetInput;
  }
  return rememberChangeHistoryAndInvokeOnChangesHook;
}
\u0275\u0275NgOnChangesFeature.ngInherit = true;
function rememberChangeHistoryAndInvokeOnChangesHook() {
  const simpleChangesStore = getSimpleChangesStore(this);
  const current = simpleChangesStore?.current;
  if (current) {
    const previous = simpleChangesStore.previous;
    if (previous === EMPTY_OBJ) {
      simpleChangesStore.previous = current;
    } else {
      for (let key in current) {
        previous[key] = current[key];
      }
    }
    simpleChangesStore.current = null;
    this.ngOnChanges(current);
  }
}
function ngOnChangesSetInput(instance, inputSignalNode, value, publicName, privateName) {
  const declaredName = this.declaredInputs[publicName];
  ngDevMode && assertString(declaredName, "Name of input in ngOnChanges has to be a string");
  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {
    previous: EMPTY_OBJ,
    current: null
  });
  const current = simpleChangesStore.current || (simpleChangesStore.current = {});
  const previous = simpleChangesStore.previous;
  const previousChange = previous[declaredName];
  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
  applyValueToInputField(instance, inputSignalNode, privateName, value);
}
var SIMPLE_CHANGES_STORE = "__ngSimpleChanges__";
function getSimpleChangesStore(instance) {
  return instance[SIMPLE_CHANGES_STORE] || null;
}
function setSimpleChangesStore(instance, store2) {
  return instance[SIMPLE_CHANGES_STORE] = store2;
}
var profilerCallback = null;
var setProfiler = (profiler2) => {
  profilerCallback = profiler2;
};
var profiler = function(event, instance, hookOrListener) {
  if (profilerCallback != null) {
    profilerCallback(event, instance, hookOrListener);
  }
};
var SVG_NAMESPACE = "svg";
var MATH_ML_NAMESPACE = "math";
function unwrapRNode(value) {
  while (Array.isArray(value)) {
    value = value[HOST];
  }
  return value;
}
function unwrapLView(value) {
  while (Array.isArray(value)) {
    if (typeof value[TYPE] === "object") return value;
    value = value[HOST];
  }
  return null;
}
function getNativeByIndex(index, lView) {
  ngDevMode && assertIndexInRange(lView, index);
  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, "Expected to be past HEADER_OFFSET");
  return unwrapRNode(lView[index]);
}
function getNativeByTNode(tNode, lView) {
  ngDevMode && assertTNodeForLView(tNode, lView);
  ngDevMode && assertIndexInRange(lView, tNode.index);
  const node = unwrapRNode(lView[tNode.index]);
  return node;
}
function getTNode(tView, index) {
  ngDevMode && assertGreaterThan(index, -1, "wrong index for TNode");
  ngDevMode && assertLessThan(index, tView.data.length, "wrong index for TNode");
  const tNode = tView.data[index];
  ngDevMode && tNode !== null && assertTNode(tNode);
  return tNode;
}
function load(view, index) {
  ngDevMode && assertIndexInRange(view, index);
  return view[index];
}
function getComponentLViewByIndex(nodeIndex, hostView) {
  ngDevMode && assertIndexInRange(hostView, nodeIndex);
  const slotValue = hostView[nodeIndex];
  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];
  return lView;
}
function isCreationMode(view) {
  return (view[FLAGS] & 4) === 4;
}
function viewAttachedToChangeDetector(view) {
  return (view[FLAGS] & 128) === 128;
}
function viewAttachedToContainer(view) {
  return isLContainer(view[PARENT]);
}
function getConstant(consts, index) {
  if (index === null || index === void 0) return null;
  ngDevMode && assertIndexInRange(consts, index);
  return consts[index];
}
function resetPreOrderHookFlags(lView) {
  lView[PREORDER_HOOK_FLAGS] = 0;
}
function markViewForRefresh(lView) {
  if (lView[FLAGS] & 1024) {
    return;
  }
  lView[FLAGS] |= 1024;
  if (viewAttachedToChangeDetector(lView)) {
    markAncestorsForTraversal(lView);
  }
}
function walkUpViews(nestingLevel, currentView) {
  while (nestingLevel > 0) {
    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], "Declaration view should be defined if nesting level is greater than 0.");
    currentView = currentView[DECLARATION_VIEW];
    nestingLevel--;
  }
  return currentView;
}
function requiresRefreshOrTraversal(lView) {
  return !!(lView[FLAGS] & (1024 | 8192) || lView[REACTIVE_TEMPLATE_CONSUMER]?.dirty);
}
function updateAncestorTraversalFlagsOnAttach(lView) {
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(
    8
    /* NotificationSource.ViewAttached */
  );
  if (lView[FLAGS] & 64) {
    lView[FLAGS] |= 1024;
  }
  if (requiresRefreshOrTraversal(lView)) {
    markAncestorsForTraversal(lView);
  }
}
function markAncestorsForTraversal(lView) {
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(
    0
    /* NotificationSource.MarkAncestorsForTraversal */
  );
  let parent = getLViewParent(lView);
  while (parent !== null) {
    if (parent[FLAGS] & 8192) {
      break;
    }
    parent[FLAGS] |= 8192;
    if (!viewAttachedToChangeDetector(parent)) {
      break;
    }
    parent = getLViewParent(parent);
  }
}
function storeLViewOnDestroy(lView, onDestroyCallback) {
  if ((lView[FLAGS] & 256) === 256) {
    throw new RuntimeError(911, ngDevMode && "View has already been destroyed.");
  }
  if (lView[ON_DESTROY_HOOKS] === null) {
    lView[ON_DESTROY_HOOKS] = [];
  }
  lView[ON_DESTROY_HOOKS].push(onDestroyCallback);
}
function removeLViewOnDestroy(lView, onDestroyCallback) {
  if (lView[ON_DESTROY_HOOKS] === null) return;
  const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);
  if (destroyCBIdx !== -1) {
    lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);
  }
}
function getLViewParent(lView) {
  ngDevMode && assertLView(lView);
  const parent = lView[PARENT];
  return isLContainer(parent) ? parent[PARENT] : parent;
}
var instructionState = {
  lFrame: createLFrame(null),
  bindingsEnabled: true,
  skipHydrationRootTNode: null
};
var CheckNoChangesMode;
(function(CheckNoChangesMode2) {
  CheckNoChangesMode2[CheckNoChangesMode2["Off"] = 0] = "Off";
  CheckNoChangesMode2[CheckNoChangesMode2["Exhaustive"] = 1] = "Exhaustive";
  CheckNoChangesMode2[CheckNoChangesMode2["OnlyDirtyViews"] = 2] = "OnlyDirtyViews";
})(CheckNoChangesMode || (CheckNoChangesMode = {}));
var _checkNoChangesMode = 0;
var _isRefreshingViews = false;
function getElementDepthCount() {
  return instructionState.lFrame.elementDepthCount;
}
function increaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount++;
}
function decreaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount--;
}
function getBindingsEnabled() {
  return instructionState.bindingsEnabled;
}
function isInSkipHydrationBlock$1() {
  return instructionState.skipHydrationRootTNode !== null;
}
function isSkipHydrationRootTNode(tNode) {
  return instructionState.skipHydrationRootTNode === tNode;
}
function \u0275\u0275enableBindings() {
  instructionState.bindingsEnabled = true;
}
function \u0275\u0275disableBindings() {
  instructionState.bindingsEnabled = false;
}
function leaveSkipHydrationBlock() {
  instructionState.skipHydrationRootTNode = null;
}
function getLView() {
  return instructionState.lFrame.lView;
}
function getTView() {
  return instructionState.lFrame.tView;
}
function \u0275\u0275restoreView(viewToRestore) {
  instructionState.lFrame.contextLView = viewToRestore;
  return viewToRestore[CONTEXT];
}
function \u0275\u0275resetView(value) {
  instructionState.lFrame.contextLView = null;
  return value;
}
function getCurrentTNode() {
  let currentTNode = getCurrentTNodePlaceholderOk();
  while (currentTNode !== null && currentTNode.type === 64) {
    currentTNode = currentTNode.parent;
  }
  return currentTNode;
}
function getCurrentTNodePlaceholderOk() {
  return instructionState.lFrame.currentTNode;
}
function getCurrentParentTNode() {
  const lFrame = instructionState.lFrame;
  const currentTNode = lFrame.currentTNode;
  return lFrame.isParent ? currentTNode : currentTNode.parent;
}
function setCurrentTNode(tNode, isParent) {
  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);
  const lFrame = instructionState.lFrame;
  lFrame.currentTNode = tNode;
  lFrame.isParent = isParent;
}
function isCurrentTNodeParent() {
  return instructionState.lFrame.isParent;
}
function setCurrentTNodeAsNotParent() {
  instructionState.lFrame.isParent = false;
}
function getContextLView() {
  const contextLView = instructionState.lFrame.contextLView;
  ngDevMode && assertDefined(contextLView, "contextLView must be defined.");
  return contextLView;
}
function isInCheckNoChangesMode() {
  !ngDevMode && throwError2("Must never be called in production mode");
  return _checkNoChangesMode !== CheckNoChangesMode.Off;
}
function isExhaustiveCheckNoChanges() {
  !ngDevMode && throwError2("Must never be called in production mode");
  return _checkNoChangesMode === CheckNoChangesMode.Exhaustive;
}
function setIsInCheckNoChangesMode(mode) {
  !ngDevMode && throwError2("Must never be called in production mode");
  _checkNoChangesMode = mode;
}
function isRefreshingViews() {
  return _isRefreshingViews;
}
function setIsRefreshingViews(mode) {
  _isRefreshingViews = mode;
}
function getBindingRoot() {
  const lFrame = instructionState.lFrame;
  let index = lFrame.bindingRootIndex;
  if (index === -1) {
    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
  }
  return index;
}
function getBindingIndex() {
  return instructionState.lFrame.bindingIndex;
}
function setBindingIndex(value) {
  return instructionState.lFrame.bindingIndex = value;
}
function nextBindingIndex() {
  return instructionState.lFrame.bindingIndex++;
}
function incrementBindingIndex(count) {
  const lFrame = instructionState.lFrame;
  const index = lFrame.bindingIndex;
  lFrame.bindingIndex = lFrame.bindingIndex + count;
  return index;
}
function isInI18nBlock() {
  return instructionState.lFrame.inI18n;
}
function setInI18nBlock(isInI18nBlock2) {
  instructionState.lFrame.inI18n = isInI18nBlock2;
}
function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
  const lFrame = instructionState.lFrame;
  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
  setCurrentDirectiveIndex(currentDirectiveIndex);
}
function getCurrentDirectiveIndex() {
  return instructionState.lFrame.currentDirectiveIndex;
}
function setCurrentDirectiveIndex(currentDirectiveIndex) {
  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
}
function getCurrentDirectiveDef(tData) {
  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
}
function getCurrentQueryIndex() {
  return instructionState.lFrame.currentQueryIndex;
}
function setCurrentQueryIndex(value) {
  instructionState.lFrame.currentQueryIndex = value;
}
function getDeclarationTNode(lView) {
  const tView = lView[TVIEW];
  if (tView.type === 2) {
    ngDevMode && assertDefined(tView.declTNode, "Embedded TNodes should have declaration parents.");
    return tView.declTNode;
  }
  if (tView.type === 1) {
    return lView[T_HOST];
  }
  return null;
}
function enterDI(lView, tNode, flags) {
  ngDevMode && assertLViewOrUndefined(lView);
  if (flags & InjectFlags.SkipSelf) {
    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);
    let parentTNode = tNode;
    let parentLView = lView;
    while (true) {
      ngDevMode && assertDefined(parentTNode, "Parent TNode should be defined");
      parentTNode = parentTNode.parent;
      if (parentTNode === null && !(flags & InjectFlags.Host)) {
        parentTNode = getDeclarationTNode(parentLView);
        if (parentTNode === null) break;
        ngDevMode && assertDefined(parentLView, "Parent LView should be defined");
        parentLView = parentLView[DECLARATION_VIEW];
        if (parentTNode.type & (2 | 8)) {
          break;
        }
      } else {
        break;
      }
    }
    if (parentTNode === null) {
      return false;
    } else {
      tNode = parentTNode;
      lView = parentLView;
    }
  }
  ngDevMode && assertTNodeForLView(tNode, lView);
  const lFrame = instructionState.lFrame = allocLFrame();
  lFrame.currentTNode = tNode;
  lFrame.lView = lView;
  return true;
}
function enterView(newView) {
  ngDevMode && assertNotEqual(newView[0], newView[1], "????");
  ngDevMode && assertLViewOrUndefined(newView);
  const newLFrame = allocLFrame();
  if (ngDevMode) {
    assertEqual(newLFrame.isParent, true, "Expected clean LFrame");
    assertEqual(newLFrame.lView, null, "Expected clean LFrame");
    assertEqual(newLFrame.tView, null, "Expected clean LFrame");
    assertEqual(newLFrame.selectedIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.elementDepthCount, 0, "Expected clean LFrame");
    assertEqual(newLFrame.currentDirectiveIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.currentNamespace, null, "Expected clean LFrame");
    assertEqual(newLFrame.bindingRootIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.currentQueryIndex, 0, "Expected clean LFrame");
  }
  const tView = newView[TVIEW];
  instructionState.lFrame = newLFrame;
  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);
  newLFrame.currentTNode = tView.firstChild;
  newLFrame.lView = newView;
  newLFrame.tView = tView;
  newLFrame.contextLView = newView;
  newLFrame.bindingIndex = tView.bindingStartIndex;
  newLFrame.inI18n = false;
}
function allocLFrame() {
  const currentLFrame = instructionState.lFrame;
  const childLFrame = currentLFrame === null ? null : currentLFrame.child;
  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
  return newLFrame;
}
function createLFrame(parent) {
  const lFrame = {
    currentTNode: null,
    isParent: true,
    lView: null,
    tView: null,
    selectedIndex: -1,
    contextLView: null,
    elementDepthCount: 0,
    currentNamespace: null,
    currentDirectiveIndex: -1,
    bindingRootIndex: -1,
    bindingIndex: -1,
    currentQueryIndex: 0,
    parent,
    child: null,
    inI18n: false
  };
  parent !== null && (parent.child = lFrame);
  return lFrame;
}
function leaveViewLight() {
  const oldLFrame = instructionState.lFrame;
  instructionState.lFrame = oldLFrame.parent;
  oldLFrame.currentTNode = null;
  oldLFrame.lView = null;
  return oldLFrame;
}
var leaveDI = leaveViewLight;
function leaveView() {
  const oldLFrame = leaveViewLight();
  oldLFrame.isParent = true;
  oldLFrame.tView = null;
  oldLFrame.selectedIndex = -1;
  oldLFrame.contextLView = null;
  oldLFrame.elementDepthCount = 0;
  oldLFrame.currentDirectiveIndex = -1;
  oldLFrame.currentNamespace = null;
  oldLFrame.bindingRootIndex = -1;
  oldLFrame.bindingIndex = -1;
  oldLFrame.currentQueryIndex = 0;
}
function nextContextImpl(level) {
  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);
  return contextLView[CONTEXT];
}
function getSelectedIndex() {
  return instructionState.lFrame.selectedIndex;
}
function setSelectedIndex(index) {
  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, "Index must be past HEADER_OFFSET (or -1).");
  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, "Can't set index passed end of LView");
  instructionState.lFrame.selectedIndex = index;
}
function getSelectedTNode() {
  const lFrame = instructionState.lFrame;
  return getTNode(lFrame.tView, lFrame.selectedIndex);
}
function \u0275\u0275namespaceSVG() {
  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
}
function \u0275\u0275namespaceMathML() {
  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
}
function \u0275\u0275namespaceHTML() {
  namespaceHTMLInternal();
}
function namespaceHTMLInternal() {
  instructionState.lFrame.currentNamespace = null;
}
function getNamespace$1() {
  return instructionState.lFrame.currentNamespace;
}
var _wasLastNodeCreated = true;
function wasLastNodeCreated() {
  return _wasLastNodeCreated;
}
function lastNodeWasCreated(flag) {
  _wasLastNodeCreated = flag;
}
function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
  ngDevMode && assertFirstCreatePass(tView);
  const {
    ngOnChanges,
    ngOnInit,
    ngDoCheck
  } = directiveDef.type.prototype;
  if (ngOnChanges) {
    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
    (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);
    (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);
  }
  if (ngOnInit) {
    (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);
  }
  if (ngDoCheck) {
    (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);
    (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);
  }
}
function registerPostOrderHooks(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
    const directiveDef = tView.data[i];
    ngDevMode && assertDefined(directiveDef, "Expecting DirectiveDef");
    const lifecycleHooks = directiveDef.type.prototype;
    const {
      ngAfterContentInit,
      ngAfterContentChecked,
      ngAfterViewInit,
      ngAfterViewChecked,
      ngOnDestroy
    } = lifecycleHooks;
    if (ngAfterContentInit) {
      (tView.contentHooks ??= []).push(-i, ngAfterContentInit);
    }
    if (ngAfterContentChecked) {
      (tView.contentHooks ??= []).push(i, ngAfterContentChecked);
      (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);
    }
    if (ngAfterViewInit) {
      (tView.viewHooks ??= []).push(-i, ngAfterViewInit);
    }
    if (ngAfterViewChecked) {
      (tView.viewHooks ??= []).push(i, ngAfterViewChecked);
      (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);
    }
    if (ngOnDestroy != null) {
      (tView.destroyHooks ??= []).push(i, ngOnDestroy);
    }
  }
}
function executeCheckHooks(lView, hooks, nodeIndex) {
  callHooks(lView, hooks, 3, nodeIndex);
}
function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
  ngDevMode && assertNotEqual(initPhase, 3, "Init pre-order hooks should not be called more than once");
  if ((lView[FLAGS] & 3) === initPhase) {
    callHooks(lView, hooks, initPhase, nodeIndex);
  }
}
function incrementInitPhaseFlags(lView, initPhase) {
  ngDevMode && assertNotEqual(initPhase, 3, "Init hooks phase should not be incremented after all init hooks have been run.");
  let flags = lView[FLAGS];
  if ((flags & 3) === initPhase) {
    flags &= 16383;
    flags += 1;
    lView[FLAGS] = flags;
  }
}
function callHooks(currentView, arr, initPhase, currentNodeIndex) {
  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, "Hooks should never be run when in check no changes mode.");
  const startIndex = currentNodeIndex !== void 0 ? currentView[PREORDER_HOOK_FLAGS] & 65535 : 0;
  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
  const max = arr.length - 1;
  let lastNodeIndexFound = 0;
  for (let i = startIndex; i < max; i++) {
    const hook = arr[i + 1];
    if (typeof hook === "number") {
      lastNodeIndexFound = arr[i];
      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
        break;
      }
    } else {
      const isInitHook = arr[i] < 0;
      if (isInitHook) {
        currentView[PREORDER_HOOK_FLAGS] += 65536;
      }
      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
        callHook(currentView, initPhase, arr, i);
        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760) + i + 2;
      }
      i++;
    }
  }
}
function callHookInternal(directive, hook) {
  profiler(4, directive, hook);
  const prevConsumer = setActiveConsumer(null);
  try {
    hook.call(directive);
  } finally {
    setActiveConsumer(prevConsumer);
    profiler(5, directive, hook);
  }
}
function callHook(currentView, initPhase, arr, i) {
  const isInitHook = arr[i] < 0;
  const hook = arr[i + 1];
  const directiveIndex = isInitHook ? -arr[i] : arr[i];
  const directive = currentView[directiveIndex];
  if (isInitHook) {
    const indexWithintInitPhase = currentView[FLAGS] >> 14;
    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16 && (currentView[FLAGS] & 3) === initPhase) {
      currentView[FLAGS] += 16384;
      callHookInternal(directive, hook);
    }
  } else {
    callHookInternal(directive, hook);
  }
}
var NO_PARENT_INJECTOR = -1;
var NodeInjectorFactory = class {
  constructor(factory, isViewProvider, injectImplementation) {
    this.factory = factory;
    this.resolving = false;
    ngDevMode && assertDefined(factory, "Factory not specified");
    ngDevMode && assertEqual(typeof factory, "function", "Expected factory function.");
    this.canSeeViewProviders = isViewProvider;
    this.injectImpl = injectImplementation;
  }
};
function isFactory(obj) {
  return obj instanceof NodeInjectorFactory;
}
function toTNodeTypeAsString(tNodeType) {
  let text = "";
  tNodeType & 1 && (text += "|Text");
  tNodeType & 2 && (text += "|Element");
  tNodeType & 4 && (text += "|Container");
  tNodeType & 8 && (text += "|ElementContainer");
  tNodeType & 16 && (text += "|Projection");
  tNodeType & 32 && (text += "|IcuContainer");
  tNodeType & 64 && (text += "|Placeholder");
  tNodeType & 128 && (text += "|LetDeclaration");
  return text.length > 0 ? text.substring(1) : text;
}
function hasClassInput(tNode) {
  return (tNode.flags & 8) !== 0;
}
function hasStyleInput(tNode) {
  return (tNode.flags & 16) !== 0;
}
function assertTNodeType(tNode, expectedTypes, message) {
  assertDefined(tNode, "should be called with a TNode");
  if ((tNode.type & expectedTypes) === 0) {
    throwError2(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);
  }
}
function assertPureTNodeType(type) {
  if (!(type === 2 || type === 1 || type === 4 || type === 8 || type === 32 || type === 16 || type === 64 || type === 128)) {
    throwError2(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);
  }
}
var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
var ChainedInjector = class {
  constructor(injector, parentInjector) {
    this.injector = injector;
    this.parentInjector = parentInjector;
  }
  get(token, notFoundValue, flags) {
    flags = convertToBitFlags(flags);
    const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);
    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
      return value;
    }
    return this.parentInjector.get(token, notFoundValue, flags);
  }
};
function hasParentInjector(parentLocation) {
  return parentLocation !== NO_PARENT_INJECTOR;
}
function getParentInjectorIndex(parentLocation) {
  if (ngDevMode) {
    assertNumber(parentLocation, "Number expected");
    assertNotEqual(parentLocation, -1, "Not a valid state.");
    const parentInjectorIndex = parentLocation & 32767;
    assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, "Parent injector must be pointing past HEADER_OFFSET.");
  }
  return parentLocation & 32767;
}
function getParentInjectorViewOffset(parentLocation) {
  return parentLocation >> 16;
}
function getParentInjectorView(location2, startView) {
  let viewOffset = getParentInjectorViewOffset(location2);
  let parentView = startView;
  while (viewOffset > 0) {
    parentView = parentView[DECLARATION_VIEW];
    viewOffset--;
  }
  return parentView;
}
function isRouterOutletInjector(currentInjector) {
  return currentInjector instanceof ChainedInjector && typeof currentInjector.injector.__ngOutletInjector === "function";
}
var includeViewProviders = true;
function setIncludeViewProviders(v) {
  const oldValue = includeViewProviders;
  includeViewProviders = v;
  return oldValue;
}
var BLOOM_SIZE = 256;
var BLOOM_MASK = BLOOM_SIZE - 1;
var BLOOM_BUCKET_BITS = 5;
var nextNgElementId = 0;
var NOT_FOUND = {};
function bloomAdd(injectorIndex, tView, type) {
  ngDevMode && assertEqual(tView.firstCreatePass, true, "expected firstCreatePass to be true");
  let id;
  if (typeof type === "string") {
    id = type.charCodeAt(0) || 0;
  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
    id = type[NG_ELEMENT_ID];
  }
  if (id == null) {
    id = type[NG_ELEMENT_ID] = nextNgElementId++;
  }
  const bloomHash = id & BLOOM_MASK;
  const mask = 1 << bloomHash;
  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;
}
function getOrCreateNodeInjectorForNode(tNode, lView) {
  const existingInjectorIndex = getInjectorIndex(tNode, lView);
  if (existingInjectorIndex !== -1) {
    return existingInjectorIndex;
  }
  const tView = lView[TVIEW];
  if (tView.firstCreatePass) {
    tNode.injectorIndex = lView.length;
    insertBloom(tView.data, tNode);
    insertBloom(lView, null);
    insertBloom(tView.blueprint, null);
  }
  const parentLoc = getParentInjectorLocation(tNode, lView);
  const injectorIndex = tNode.injectorIndex;
  if (hasParentInjector(parentLoc)) {
    const parentIndex = getParentInjectorIndex(parentLoc);
    const parentLView = getParentInjectorView(parentLoc, lView);
    const parentData = parentLView[TVIEW].data;
    for (let i = 0; i < 8; i++) {
      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
    }
  }
  lView[
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ] = parentLoc;
  return injectorIndex;
}
function insertBloom(arr, footer) {
  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
}
function getInjectorIndex(tNode, lView) {
  if (tNode.injectorIndex === -1 || // If the injector index is the same as its parent's injector index, then the index has been
  // copied down from the parent node. No injector has been created yet on this node.
  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values
  // might not have been calculated yet for this instance
  lView[
    tNode.injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ] === null) {
    return -1;
  } else {
    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);
    return tNode.injectorIndex;
  }
}
function getParentInjectorLocation(tNode, lView) {
  if (tNode.parent && tNode.parent.injectorIndex !== -1) {
    return tNode.parent.injectorIndex;
  }
  let declarationViewOffset = 0;
  let parentTNode = null;
  let lViewCursor = lView;
  while (lViewCursor !== null) {
    parentTNode = getTNodeFromLView(lViewCursor);
    if (parentTNode === null) {
      return NO_PARENT_INJECTOR;
    }
    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);
    declarationViewOffset++;
    lViewCursor = lViewCursor[DECLARATION_VIEW];
    if (parentTNode.injectorIndex !== -1) {
      return parentTNode.injectorIndex | declarationViewOffset << 16;
    }
  }
  return NO_PARENT_INJECTOR;
}
function diPublicInInjector(injectorIndex, tView, token) {
  bloomAdd(injectorIndex, tView, token);
}
function injectAttributeImpl(tNode, attrNameToInject) {
  ngDevMode && assertTNodeType(
    tNode,
    12 | 3
    /* TNodeType.AnyRNode */
  );
  ngDevMode && assertDefined(tNode, "expecting tNode");
  if (attrNameToInject === "class") {
    return tNode.classes;
  }
  if (attrNameToInject === "style") {
    return tNode.styles;
  }
  const attrs = tNode.attrs;
  if (attrs) {
    const attrsLength = attrs.length;
    let i = 0;
    while (i < attrsLength) {
      const value = attrs[i];
      if (isNameOnlyAttributeMarker(value)) break;
      if (value === 0) {
        i = i + 2;
      } else if (typeof value === "number") {
        i++;
        while (i < attrsLength && typeof attrs[i] === "string") {
          i++;
        }
      } else if (value === attrNameToInject) {
        return attrs[i + 1];
      } else {
        i = i + 2;
      }
    }
  }
  return null;
}
function notFoundValueOrThrow(notFoundValue, token, flags) {
  if (flags & InjectFlags.Optional || notFoundValue !== void 0) {
    return notFoundValue;
  } else {
    throwProviderNotFoundError(token, "NodeInjector");
  }
}
function lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {
  if (flags & InjectFlags.Optional && notFoundValue === void 0) {
    notFoundValue = null;
  }
  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
    const moduleInjector = lView[INJECTOR];
    const previousInjectImplementation = setInjectImplementation(void 0);
    try {
      if (moduleInjector) {
        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
      } else {
        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
      }
    } finally {
      setInjectImplementation(previousInjectImplementation);
    }
  }
  return notFoundValueOrThrow(notFoundValue, token, flags);
}
function getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {
  if (tNode !== null) {
    if (lView[FLAGS] & 2048 && // The token must be present on the current node injector when the `Self`
    // flag is set, so the lookup on embedded view injector(s) can be skipped.
    !(flags & InjectFlags.Self)) {
      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);
      if (embeddedInjectorValue !== NOT_FOUND) {
        return embeddedInjectorValue;
      }
    }
    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);
    if (value !== NOT_FOUND) {
      return value;
    }
  }
  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
}
function lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {
  const bloomHash = bloomHashBitOrFactory(token);
  if (typeof bloomHash === "function") {
    if (!enterDI(lView, tNode, flags)) {
      return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
    }
    try {
      let value;
      if (ngDevMode) {
        runInInjectorProfilerContext(new NodeInjector(getCurrentTNode(), getLView()), token, () => {
          value = bloomHash(flags);
          if (value != null) {
            emitInstanceCreatedByInjectorEvent(value);
          }
        });
      } else {
        value = bloomHash(flags);
      }
      if (value == null && !(flags & InjectFlags.Optional)) {
        throwProviderNotFoundError(token);
      } else {
        return value;
      }
    } finally {
      leaveDI();
    }
  } else if (typeof bloomHash === "number") {
    let previousTView = null;
    let injectorIndex = getInjectorIndex(tNode, lView);
    let parentLocation = NO_PARENT_INJECTOR;
    let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;
    if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[
        injectorIndex + 8
        /* NodeInjectorOffset.PARENT */
      ];
      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {
        injectorIndex = -1;
      } else {
        previousTView = lView[TVIEW];
        injectorIndex = getParentInjectorIndex(parentLocation);
        lView = getParentInjectorView(parentLocation, lView);
      }
    }
    while (injectorIndex !== -1) {
      ngDevMode && assertNodeInjector(lView, injectorIndex);
      const tView = lView[TVIEW];
      ngDevMode && assertTNodeForLView(tView.data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ], lView);
      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
        const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);
        if (instance !== NOT_FOUND) {
          return instance;
        }
      }
      parentLocation = lView[
        injectorIndex + 8
        /* NodeInjectorOffset.PARENT */
      ];
      if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {
        previousTView = tView;
        injectorIndex = getParentInjectorIndex(parentLocation);
        lView = getParentInjectorView(parentLocation, lView);
      } else {
        injectorIndex = -1;
      }
    }
  }
  return notFoundValue;
}
function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
  const currentTView = lView[TVIEW];
  const tNode = currentTView.data[
    injectorIndex + 8
    /* NodeInjectorOffset.TNODE */
  ];
  const canAccessViewProviders = previousTView == null ? (
    // 1) This is the first invocation `previousTView == null` which means that we are at the
    // `TNode` of where injector is starting to look. In such a case the only time we are allowed
    // to look into the ViewProviders is if:
    // - we are on a component
    // - AND the injector set `includeViewProviders` to true (implying that the token can see
    // ViewProviders because it is the Component or a Service which itself was declared in
    // ViewProviders)
    isComponentHost(tNode) && includeViewProviders
  ) : (
    // 2) `previousTView != null` which means that we are now walking across the parent nodes.
    // In such a case we are only allowed to look into the ViewProviders if:
    // - We just crossed from child View to Parent View `previousTView != currentTView`
    // - AND the parent TNode is an Element.
    // This means that we just came from the Component's View and therefore are allowed to see
    // into the ViewProviders.
    previousTView != currentTView && (tNode.type & 3) !== 0
  );
  const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;
  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);
  if (injectableIdx !== null) {
    return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
  } else {
    return NOT_FOUND;
  }
}
function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
  const nodeProviderIndexes = tNode.providerIndexes;
  const tInjectables = tView.data;
  const injectablesStart = nodeProviderIndexes & 1048575;
  const directivesStart = tNode.directiveStart;
  const directiveEnd = tNode.directiveEnd;
  const cptViewProvidersCount = nodeProviderIndexes >> 20;
  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;
  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;
  for (let i = startingIndex; i < endIndex; i++) {
    const providerTokenOrDef = tInjectables[i];
    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {
      return i;
    }
  }
  if (isHostSpecialCase) {
    const dirDef = tInjectables[directivesStart];
    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
      return directivesStart;
    }
  }
  return null;
}
function getNodeInjectable(lView, tView, index, tNode) {
  let value = lView[index];
  const tData = tView.data;
  if (isFactory(value)) {
    const factory = value;
    if (factory.resolving) {
      throwCyclicDependencyError(stringifyForError(tData[index]));
    }
    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
    factory.resolving = true;
    let prevInjectContext;
    if (ngDevMode) {
      const token = tData[index].type || tData[index];
      const injector = new NodeInjector(tNode, lView);
      prevInjectContext = setInjectorProfilerContext({
        injector,
        token
      });
    }
    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;
    const success = enterDI(lView, tNode, InjectFlags.Default);
    ngDevMode && assertEqual(success, true, "Because flags do not contain `SkipSelf' we expect this to always succeed.");
    try {
      value = lView[index] = factory.factory(void 0, tData, lView, tNode);
      ngDevMode && emitInstanceCreatedByInjectorEvent(value);
      if (tView.firstCreatePass && index >= tNode.directiveStart) {
        ngDevMode && assertDirectiveDef(tData[index]);
        registerPreOrderHooks(index, tData[index], tView);
      }
    } finally {
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);
      setIncludeViewProviders(previousIncludeViewProviders);
      factory.resolving = false;
      leaveDI();
    }
  }
  return value;
}
function bloomHashBitOrFactory(token) {
  ngDevMode && assertDefined(token, "token must be defined");
  if (typeof token === "string") {
    return token.charCodeAt(0) || 0;
  }
  const tokenId = (
    // First check with `hasOwnProperty` so we don't get an inherited ID.
    token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : void 0
  );
  if (typeof tokenId === "number") {
    if (tokenId >= 0) {
      return tokenId & BLOOM_MASK;
    } else {
      ngDevMode && assertEqual(tokenId, -1, "Expecting to get Special Injector Id");
      return createNodeInjector;
    }
  } else {
    return tokenId;
  }
}
function bloomHasToken(bloomHash, injectorIndex, injectorView) {
  const mask = 1 << bloomHash;
  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];
  return !!(value & mask);
}
function shouldSearchParent(flags, isFirstHostTNode) {
  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
}
function getNodeInjectorLView(nodeInjector) {
  return nodeInjector._lView;
}
function getNodeInjectorTNode(nodeInjector) {
  return nodeInjector._tNode;
}
var NodeInjector = class {
  constructor(_tNode, _lView) {
    this._tNode = _tNode;
    this._lView = _lView;
  }
  get(token, notFoundValue, flags) {
    return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);
  }
};
function createNodeInjector() {
  return new NodeInjector(getCurrentTNode(), getLView());
}
function \u0275\u0275getInheritedFactory(type) {
  return noSideEffects(() => {
    const ownConstructor = type.prototype.constructor;
    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);
    const objectPrototype = Object.prototype;
    let parent = Object.getPrototypeOf(type.prototype).constructor;
    while (parent && parent !== objectPrototype) {
      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);
      if (factory && factory !== ownFactory) {
        return factory;
      }
      parent = Object.getPrototypeOf(parent);
    }
    return (t) => new t();
  });
}
function getFactoryOf(type) {
  if (isForwardRef(type)) {
    return () => {
      const factory = getFactoryOf(resolveForwardRef(type));
      return factory && factory();
    };
  }
  return getFactoryDef(type);
}
function lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {
  let currentTNode = tNode;
  let currentLView = lView;
  while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 2048 && !(currentLView[FLAGS] & 512)) {
    ngDevMode && assertTNodeForLView(currentTNode, currentLView);
    const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);
    if (nodeInjectorValue !== NOT_FOUND) {
      return nodeInjectorValue;
    }
    let parentTNode = currentTNode.parent;
    if (!parentTNode) {
      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];
      if (embeddedViewInjector) {
        const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);
        if (embeddedViewInjectorValue !== NOT_FOUND) {
          return embeddedViewInjectorValue;
        }
      }
      parentTNode = getTNodeFromLView(currentLView);
      currentLView = currentLView[DECLARATION_VIEW];
    }
    currentTNode = parentTNode;
  }
  return notFoundValue;
}
function getTNodeFromLView(lView) {
  const tView = lView[TVIEW];
  const tViewType = tView.type;
  if (tViewType === 2) {
    ngDevMode && assertDefined(tView.declTNode, "Embedded TNodes should have declaration parents.");
    return tView.declTNode;
  } else if (tViewType === 1) {
    return lView[T_HOST];
  }
  return null;
}
function \u0275\u0275injectAttribute(attrNameToInject) {
  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);
}
var Attribute2 = makeParamDecorator("Attribute", (attributeName) => ({
  attributeName,
  __NG_ELEMENT_ID__: () => \u0275\u0275injectAttribute(attributeName)
}));
var _reflect = null;
function getReflect() {
  return _reflect = _reflect || new ReflectionCapabilities();
}
function reflectDependencies(type) {
  return convertDependencies(getReflect().parameters(type));
}
function convertDependencies(deps) {
  return deps.map((dep) => reflectDependency(dep));
}
function reflectDependency(dep) {
  const meta = {
    token: null,
    attribute: null,
    host: false,
    optional: false,
    self: false,
    skipSelf: false
  };
  if (Array.isArray(dep) && dep.length > 0) {
    for (let j = 0; j < dep.length; j++) {
      const param = dep[j];
      if (param === void 0) {
        continue;
      }
      const proto = Object.getPrototypeOf(param);
      if (param instanceof Optional || proto.ngMetadataName === "Optional") {
        meta.optional = true;
      } else if (param instanceof SkipSelf || proto.ngMetadataName === "SkipSelf") {
        meta.skipSelf = true;
      } else if (param instanceof Self || proto.ngMetadataName === "Self") {
        meta.self = true;
      } else if (param instanceof Host || proto.ngMetadataName === "Host") {
        meta.host = true;
      } else if (param instanceof Inject) {
        meta.token = param.token;
      } else if (param instanceof Attribute2) {
        if (param.attributeName === void 0) {
          throw new RuntimeError(204, ngDevMode && `Attribute name must be defined.`);
        }
        meta.attribute = param.attributeName;
      } else {
        meta.token = param;
      }
    }
  } else if (dep === void 0 || Array.isArray(dep) && dep.length === 0) {
    meta.token = null;
  } else {
    meta.token = dep;
  }
  return meta;
}
function compileInjectable(type, meta) {
  let ngInjectableDef = null;
  let ngFactoryDef = null;
  if (!type.hasOwnProperty(NG_PROV_DEF)) {
    Object.defineProperty(type, NG_PROV_DEF, {
      get: () => {
        if (ngInjectableDef === null) {
          const compiler = getCompilerFacade({
            usage: 0,
            kind: "injectable",
            type
          });
          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/\u0275prov.js`, getInjectableMetadata(type, meta));
        }
        return ngInjectableDef;
      }
    });
  }
  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
    Object.defineProperty(type, NG_FACTORY_DEF, {
      get: () => {
        if (ngFactoryDef === null) {
          const compiler = getCompilerFacade({
            usage: 0,
            kind: "injectable",
            type
          });
          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/\u0275fac.js`, {
            name: type.name,
            type,
            typeArgumentCount: 0,
            // In JIT mode types are not available nor used.
            deps: reflectDependencies(type),
            target: compiler.FactoryTarget.Injectable
          });
        }
        return ngFactoryDef;
      },
      // Leave this configurable so that the factories from directives or pipes can take precedence.
      configurable: true
    });
  }
}
var USE_VALUE = getClosureSafeProperty({
  provide: String,
  useValue: getClosureSafeProperty
});
function isUseClassProvider(meta) {
  return meta.useClass !== void 0;
}
function isUseValueProvider(meta) {
  return USE_VALUE in meta;
}
function isUseFactoryProvider(meta) {
  return meta.useFactory !== void 0;
}
function isUseExistingProvider(meta) {
  return meta.useExisting !== void 0;
}
function getInjectableMetadata(type, srcMeta) {
  const meta = srcMeta || {
    providedIn: null
  };
  const compilerMeta = {
    name: type.name,
    type,
    typeArgumentCount: 0,
    providedIn: meta.providedIn
  };
  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== void 0) {
    compilerMeta.deps = convertDependencies(meta.deps);
  }
  if (isUseClassProvider(meta)) {
    compilerMeta.useClass = meta.useClass;
  } else if (isUseValueProvider(meta)) {
    compilerMeta.useValue = meta.useValue;
  } else if (isUseFactoryProvider(meta)) {
    compilerMeta.useFactory = meta.useFactory;
  } else if (isUseExistingProvider(meta)) {
    compilerMeta.useExisting = meta.useExisting;
  }
  return compilerMeta;
}
var Injectable = makeDecorator("Injectable", void 0, void 0, void 0, (type, meta) => compileInjectable(type, meta));
function createInjector(defType, parent = null, additionalProviders = null, name) {
  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);
  injector.resolveInjectorInitializers();
  return injector;
}
function createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = /* @__PURE__ */ new Set()) {
  const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];
  name = name || (typeof defType === "object" ? void 0 : stringify(defType));
  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);
}
var _Injector = class _Injector {
  static create(options, parent) {
    if (Array.isArray(options)) {
      return createInjector({
        name: ""
      }, parent, options, "");
    } else {
      const name = options.name ?? "";
      return createInjector({
        name
      }, options.parent, options.providers, name);
    }
  }
};
_Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
_Injector.NULL = new NullInjector();
_Injector.\u0275prov = \u0275\u0275defineInjectable({
  token: _Injector,
  providedIn: "any",
  factory: () => \u0275\u0275inject(INJECTOR$1)
});
_Injector.__NG_ELEMENT_ID__ = -1;
var Injector = _Injector;
var HOST_TAG_NAME = new InjectionToken(ngDevMode ? "HOST_TAG_NAME" : "");
HOST_TAG_NAME.__NG_ELEMENT_ID__ = (flags) => {
  const tNode = getCurrentTNode();
  if (tNode === null) {
    throw new RuntimeError(204, ngDevMode && "HOST_TAG_NAME can only be injected in directives and components during construction time (in a class constructor or as a class field initializer)");
  }
  if (tNode.type & 2) {
    return tNode.value;
  }
  if (flags & InjectFlags.Optional) {
    return null;
  }
  throw new RuntimeError(204, ngDevMode && `HOST_TAG_NAME was used on ${getDevModeNodeName(tNode)} which doesn't have an underlying element in the DOM. This is invalid, and so the dependency should be marked as optional.`);
};
function getDevModeNodeName(tNode) {
  if (tNode.type & 8) {
    return "an <ng-container>";
  } else if (tNode.type & 4) {
    return "an <ng-template>";
  } else if (tNode.type & 128) {
    return "an @let declaration";
  } else {
    return "a node";
  }
}
var ERROR_ORIGINAL_ERROR = "ngOriginalError";
function getOriginalError(error) {
  return error[ERROR_ORIGINAL_ERROR];
}
var SCHEDULE_IN_ROOT_ZONE_DEFAULT = true;
var _DestroyRef = class _DestroyRef {
};
_DestroyRef.__NG_ELEMENT_ID__ = injectDestroyRef;
_DestroyRef.__NG_ENV_ID__ = (injector) => injector;
var DestroyRef = _DestroyRef;
var NodeInjectorDestroyRef = class extends DestroyRef {
  constructor(_lView) {
    super();
    this._lView = _lView;
  }
  onDestroy(callback) {
    storeLViewOnDestroy(this._lView, callback);
    return () => removeLViewOnDestroy(this._lView, callback);
  }
};
function injectDestroyRef() {
  return new NodeInjectorDestroyRef(getLView());
}
var _PendingTasks = class _PendingTasks {
  constructor() {
    this.taskId = 0;
    this.pendingTasks = /* @__PURE__ */ new Set();
    this.hasPendingTasks = new BehaviorSubject(false);
  }
  get _hasPendingTasks() {
    return this.hasPendingTasks.value;
  }
  add() {
    if (!this._hasPendingTasks) {
      this.hasPendingTasks.next(true);
    }
    const taskId = this.taskId++;
    this.pendingTasks.add(taskId);
    return taskId;
  }
  remove(taskId) {
    this.pendingTasks.delete(taskId);
    if (this.pendingTasks.size === 0 && this._hasPendingTasks) {
      this.hasPendingTasks.next(false);
    }
  }
  ngOnDestroy() {
    this.pendingTasks.clear();
    if (this._hasPendingTasks) {
      this.hasPendingTasks.next(false);
    }
  }
};
_PendingTasks.\u0275prov = \u0275\u0275defineInjectable({
  token: _PendingTasks,
  providedIn: "root",
  factory: () => new _PendingTasks()
});
var PendingTasks = _PendingTasks;
var _ExperimentalPendingTasks = class _ExperimentalPendingTasks {
  constructor() {
    this.internalPendingTasks = inject(PendingTasks);
  }
  /**
   * Adds a new task that should block application's stability.
   * @returns A cleanup function that removes a task when called.
   */
  add() {
    const taskId = this.internalPendingTasks.add();
    return () => this.internalPendingTasks.remove(taskId);
  }
};
_ExperimentalPendingTasks.\u0275prov = \u0275\u0275defineInjectable({
  token: _ExperimentalPendingTasks,
  providedIn: "root",
  factory: () => new _ExperimentalPendingTasks()
});
var ExperimentalPendingTasks = _ExperimentalPendingTasks;
var EventEmitter_ = class extends Subject {
  constructor(isAsync = false) {
    super();
    this.destroyRef = void 0;
    this.pendingTasks = void 0;
    this.__isAsync = isAsync;
    if (isInInjectionContext()) {
      this.destroyRef = inject(DestroyRef, {
        optional: true
      }) ?? void 0;
      this.pendingTasks = inject(PendingTasks, {
        optional: true
      }) ?? void 0;
    }
  }
  emit(value) {
    const prevConsumer = setActiveConsumer(null);
    try {
      super.next(value);
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
  subscribe(observerOrNext, error, complete) {
    let nextFn = observerOrNext;
    let errorFn = error || (() => null);
    let completeFn = complete;
    if (observerOrNext && typeof observerOrNext === "object") {
      const observer = observerOrNext;
      nextFn = observer.next?.bind(observer);
      errorFn = observer.error?.bind(observer);
      completeFn = observer.complete?.bind(observer);
    }
    if (this.__isAsync) {
      errorFn = this.wrapInTimeout(errorFn);
      if (nextFn) {
        nextFn = this.wrapInTimeout(nextFn);
      }
      if (completeFn) {
        completeFn = this.wrapInTimeout(completeFn);
      }
    }
    const sink = super.subscribe({
      next: nextFn,
      error: errorFn,
      complete: completeFn
    });
    if (observerOrNext instanceof Subscription) {
      observerOrNext.add(sink);
    }
    return sink;
  }
  wrapInTimeout(fn) {
    return (value) => {
      const taskId = this.pendingTasks?.add();
      setTimeout(() => {
        fn(value);
        if (taskId !== void 0) {
          this.pendingTasks?.remove(taskId);
        }
      });
    };
  }
};
var EventEmitter = EventEmitter_;
function noop2(...args) {
}
function scheduleCallbackWithRafRace(callback) {
  let timeoutId;
  let animationFrameId;
  function cleanup() {
    callback = noop2;
    try {
      if (animationFrameId !== void 0 && typeof cancelAnimationFrame === "function") {
        cancelAnimationFrame(animationFrameId);
      }
      if (timeoutId !== void 0) {
        clearTimeout(timeoutId);
      }
    } catch {
    }
  }
  timeoutId = setTimeout(() => {
    callback();
    cleanup();
  });
  if (typeof requestAnimationFrame === "function") {
    animationFrameId = requestAnimationFrame(() => {
      callback();
      cleanup();
    });
  }
  return () => cleanup();
}
function scheduleCallbackWithMicrotask(callback) {
  queueMicrotask(() => callback());
  return () => {
    callback = noop2;
  };
}
var AsyncStackTaggingZoneSpec = class {
  constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {
    this.name = "asyncStackTagging for " + namePrefix;
    this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);
  }
  onScheduleTask(delegate, _current, target, task) {
    task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);
    return delegate.scheduleTask(target, task);
  }
  onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {
    let ret;
    if (task.consoleTask) {
      ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));
    } else {
      ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);
    }
    return ret;
  }
};
var isAngularZoneProperty = "isAngularZone";
var angularZoneInstanceIdProperty = isAngularZoneProperty + "_ID";
var ngZoneInstanceId = 0;
var NgZone = class _NgZone {
  constructor(options) {
    this.hasPendingMacrotasks = false;
    this.hasPendingMicrotasks = false;
    this.isStable = true;
    this.onUnstable = new EventEmitter(false);
    this.onMicrotaskEmpty = new EventEmitter(false);
    this.onStable = new EventEmitter(false);
    this.onError = new EventEmitter(false);
    const {
      enableLongStackTrace = false,
      shouldCoalesceEventChangeDetection = false,
      shouldCoalesceRunChangeDetection = false,
      scheduleInRootZone = SCHEDULE_IN_ROOT_ZONE_DEFAULT
    } = options;
    if (typeof Zone == "undefined") {
      throw new RuntimeError(908, ngDevMode && `In this configuration Angular requires Zone.js`);
    }
    Zone.assertZonePatched();
    const self2 = this;
    self2._nesting = 0;
    self2._outer = self2._inner = Zone.current;
    if (ngDevMode) {
      self2._inner = self2._inner.fork(new AsyncStackTaggingZoneSpec("Angular"));
    }
    if (Zone["TaskTrackingZoneSpec"]) {
      self2._inner = self2._inner.fork(new Zone["TaskTrackingZoneSpec"]());
    }
    if (enableLongStackTrace && Zone["longStackTraceZoneSpec"]) {
      self2._inner = self2._inner.fork(Zone["longStackTraceZoneSpec"]);
    }
    self2.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;
    self2.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;
    self2.callbackScheduled = false;
    self2.scheduleInRootZone = scheduleInRootZone;
    forkInnerZoneWithAngularBehavior(self2);
  }
  /**
    This method checks whether the method call happens within an Angular Zone instance.
  */
  static isInAngularZone() {
    return typeof Zone !== "undefined" && Zone.current.get(isAngularZoneProperty) === true;
  }
  /**
    Assures that the method is called within the Angular Zone, otherwise throws an error.
  */
  static assertInAngularZone() {
    if (!_NgZone.isInAngularZone()) {
      throw new RuntimeError(909, ngDevMode && "Expected to be in Angular Zone, but it is not!");
    }
  }
  /**
    Assures that the method is called outside of the Angular Zone, otherwise throws an error.
  */
  static assertNotInAngularZone() {
    if (_NgZone.isInAngularZone()) {
      throw new RuntimeError(909, ngDevMode && "Expected to not be in Angular Zone, but it is!");
    }
  }
  /**
   * Executes the `fn` function synchronously within the Angular zone and returns value returned by
   * the function.
   *
   * Running functions via `run` allows you to reenter Angular zone from a task that was executed
   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * within the Angular zone.
   *
   * If a synchronous error happens it will be rethrown and not reported via `onError`.
   */
  run(fn, applyThis, applyArgs) {
    return this._inner.run(fn, applyThis, applyArgs);
  }
  /**
   * Executes the `fn` function synchronously within the Angular zone as a task and returns value
   * returned by the function.
   *
   * Running functions via `run` allows you to reenter Angular zone from a task that was executed
   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * within the Angular zone.
   *
   * If a synchronous error happens it will be rethrown and not reported via `onError`.
   */
  runTask(fn, applyThis, applyArgs, name) {
    const zone = this._inner;
    const task = zone.scheduleEventTask("NgZoneEvent: " + name, fn, EMPTY_PAYLOAD, noop2, noop2);
    try {
      return zone.runTask(task, applyThis, applyArgs);
    } finally {
      zone.cancelTask(task);
    }
  }
  /**
   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
   * rethrown.
   */
  runGuarded(fn, applyThis, applyArgs) {
    return this._inner.runGuarded(fn, applyThis, applyArgs);
  }
  /**
   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
   * the function.
   *
   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
   * work that
   * doesn't trigger Angular change-detection or is subject to Angular's error handling.
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * outside of the Angular zone.
   *
   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
   */
  runOutsideAngular(fn) {
    return this._outer.run(fn);
  }
};
var EMPTY_PAYLOAD = {};
function checkStable(zone) {
  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
    try {
      zone._nesting++;
      zone.onMicrotaskEmpty.emit(null);
    } finally {
      zone._nesting--;
      if (!zone.hasPendingMicrotasks) {
        try {
          zone.runOutsideAngular(() => zone.onStable.emit(null));
        } finally {
          zone.isStable = true;
        }
      }
    }
  }
}
function delayChangeDetectionForEvents(zone) {
  if (zone.isCheckStableRunning || zone.callbackScheduled) {
    return;
  }
  zone.callbackScheduled = true;
  function scheduleCheckStable() {
    scheduleCallbackWithRafRace(() => {
      zone.callbackScheduled = false;
      updateMicroTaskStatus(zone);
      zone.isCheckStableRunning = true;
      checkStable(zone);
      zone.isCheckStableRunning = false;
    });
  }
  if (zone.scheduleInRootZone) {
    Zone.root.run(() => {
      scheduleCheckStable();
    });
  } else {
    zone._outer.run(() => {
      scheduleCheckStable();
    });
  }
  updateMicroTaskStatus(zone);
}
function forkInnerZoneWithAngularBehavior(zone) {
  const delayChangeDetectionForEventsDelegate = () => {
    delayChangeDetectionForEvents(zone);
  };
  const instanceId = ngZoneInstanceId++;
  zone._inner = zone._inner.fork({
    name: "angular",
    properties: {
      [isAngularZoneProperty]: true,
      [angularZoneInstanceIdProperty]: instanceId,
      [angularZoneInstanceIdProperty + instanceId]: true
    },
    onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {
      if (shouldBeIgnoredByZone(applyArgs)) {
        return delegate.invokeTask(target, task, applyThis, applyArgs);
      }
      try {
        onEnter(zone);
        return delegate.invokeTask(target, task, applyThis, applyArgs);
      } finally {
        if (zone.shouldCoalesceEventChangeDetection && task.type === "eventTask" || zone.shouldCoalesceRunChangeDetection) {
          delayChangeDetectionForEventsDelegate();
        }
        onLeave(zone);
      }
    },
    onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {
      try {
        onEnter(zone);
        return delegate.invoke(target, callback, applyThis, applyArgs, source);
      } finally {
        if (zone.shouldCoalesceRunChangeDetection && // Do not delay change detection when the task is the scheduler's tick.
        // We need to synchronously trigger the stability logic so that the
        // zone-based scheduler can prevent a duplicate ApplicationRef.tick
        // by first checking if the scheduler tick is running. This does seem a bit roundabout,
        // but we _do_ still want to trigger all the correct events when we exit the zone.run
        // (`onMicrotaskEmpty` and `onStable` _should_ emit; developers can have code which
        // relies on these events happening after change detection runs).
        // Note: `zone.callbackScheduled` is already in delayChangeDetectionForEventsDelegate
        // but is added here as well to prevent reads of applyArgs when not necessary
        !zone.callbackScheduled && !isSchedulerTick(applyArgs)) {
          delayChangeDetectionForEventsDelegate();
        }
        onLeave(zone);
      }
    },
    onHasTask: (delegate, current, target, hasTaskState) => {
      delegate.hasTask(target, hasTaskState);
      if (current === target) {
        if (hasTaskState.change == "microTask") {
          zone._hasPendingMicrotasks = hasTaskState.microTask;
          updateMicroTaskStatus(zone);
          checkStable(zone);
        } else if (hasTaskState.change == "macroTask") {
          zone.hasPendingMacrotasks = hasTaskState.macroTask;
        }
      }
    },
    onHandleError: (delegate, current, target, error) => {
      delegate.handleError(target, error);
      zone.runOutsideAngular(() => zone.onError.emit(error));
      return false;
    }
  });
}
function updateMicroTaskStatus(zone) {
  if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.callbackScheduled === true) {
    zone.hasPendingMicrotasks = true;
  } else {
    zone.hasPendingMicrotasks = false;
  }
}
function onEnter(zone) {
  zone._nesting++;
  if (zone.isStable) {
    zone.isStable = false;
    zone.onUnstable.emit(null);
  }
}
function onLeave(zone) {
  zone._nesting--;
  checkStable(zone);
}
var NoopNgZone = class {
  constructor() {
    this.hasPendingMicrotasks = false;
    this.hasPendingMacrotasks = false;
    this.isStable = true;
    this.onUnstable = new EventEmitter();
    this.onMicrotaskEmpty = new EventEmitter();
    this.onStable = new EventEmitter();
    this.onError = new EventEmitter();
  }
  run(fn, applyThis, applyArgs) {
    return fn.apply(applyThis, applyArgs);
  }
  runGuarded(fn, applyThis, applyArgs) {
    return fn.apply(applyThis, applyArgs);
  }
  runOutsideAngular(fn) {
    return fn();
  }
  runTask(fn, applyThis, applyArgs, name) {
    return fn.apply(applyThis, applyArgs);
  }
};
function shouldBeIgnoredByZone(applyArgs) {
  return hasApplyArgsData(applyArgs, "__ignore_ng_zone__");
}
function isSchedulerTick(applyArgs) {
  return hasApplyArgsData(applyArgs, "__scheduler_tick__");
}
function hasApplyArgsData(applyArgs, key) {
  if (!Array.isArray(applyArgs)) {
    return false;
  }
  if (applyArgs.length !== 1) {
    return false;
  }
  return applyArgs[0]?.data?.[key] === true;
}
function getNgZone(ngZoneToUse = "zone.js", options) {
  if (ngZoneToUse === "noop") {
    return new NoopNgZone();
  }
  if (ngZoneToUse === "zone.js") {
    return new NgZone(options);
  }
  return ngZoneToUse;
}
var ErrorHandler = class {
  constructor() {
    this._console = console;
  }
  handleError(error) {
    const originalError = this._findOriginalError(error);
    this._console.error("ERROR", error);
    if (originalError) {
      this._console.error("ORIGINAL ERROR", originalError);
    }
  }
  /** @internal */
  _findOriginalError(error) {
    let e = error && getOriginalError(error);
    while (e && getOriginalError(e)) {
      e = getOriginalError(e);
    }
    return e || null;
  }
};
var INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "internal error handler" : "", {
  providedIn: "root",
  factory: () => {
    const zone = inject(NgZone);
    const userErrorHandler = inject(ErrorHandler);
    return (e) => zone.runOutsideAngular(() => userErrorHandler.handleError(e));
  }
});
var OutputEmitterRef = class {
  constructor() {
    this.destroyed = false;
    this.listeners = null;
    this.errorHandler = inject(ErrorHandler, {
      optional: true
    });
    this.destroyRef = inject(DestroyRef);
    this.destroyRef.onDestroy(() => {
      this.destroyed = true;
      this.listeners = null;
    });
  }
  subscribe(callback) {
    if (this.destroyed) {
      throw new RuntimeError(953, ngDevMode && "Unexpected subscription to destroyed `OutputRef`. The owning directive/component is destroyed.");
    }
    (this.listeners ??= []).push(callback);
    return {
      unsubscribe: () => {
        const idx = this.listeners?.indexOf(callback);
        if (idx !== void 0 && idx !== -1) {
          this.listeners?.splice(idx, 1);
        }
      }
    };
  }
  /** Emits a new value to the output. */
  emit(value) {
    if (this.destroyed) {
      throw new RuntimeError(953, ngDevMode && "Unexpected emit for destroyed `OutputRef`. The owning directive/component is destroyed.");
    }
    if (this.listeners === null) {
      return;
    }
    const previousConsumer = setActiveConsumer(null);
    try {
      for (const listenerFn of this.listeners) {
        try {
          listenerFn(value);
        } catch (err) {
          this.errorHandler?.handleError(err);
        }
      }
    } finally {
      setActiveConsumer(previousConsumer);
    }
  }
};
function inputFunction(initialValue, opts) {
  ngDevMode && assertInInjectionContext(input);
  return createInputSignal(initialValue, opts);
}
function inputRequiredFunction(opts) {
  ngDevMode && assertInInjectionContext(input);
  return createInputSignal(REQUIRED_UNSET_VALUE, opts);
}
var input = (() => {
  inputFunction.required = inputRequiredFunction;
  return inputFunction;
})();
function injectElementRef() {
  return createElementRef(getCurrentTNode(), getLView());
}
function createElementRef(tNode, lView) {
  return new ElementRef(getNativeByTNode(tNode, lView));
}
var _ElementRef = class _ElementRef {
  constructor(nativeElement) {
    this.nativeElement = nativeElement;
  }
};
_ElementRef.__NG_ELEMENT_ID__ = injectElementRef;
var ElementRef = _ElementRef;
function unwrapElementRef(value) {
  return value instanceof ElementRef ? value.nativeElement : value;
}
function symbolIterator() {
  return this._results[Symbol.iterator]();
}
var _QueryList = class _QueryList {
  /**
   * Returns `Observable` of `QueryList` notifying the subscriber of changes.
   */
  get changes() {
    return this._changes ??= new EventEmitter();
  }
  /**
   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change
   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in
   *     the same result)
   */
  constructor(_emitDistinctChangesOnly = false) {
    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;
    this.dirty = true;
    this._onDirty = void 0;
    this._results = [];
    this._changesDetected = false;
    this._changes = void 0;
    this.length = 0;
    this.first = void 0;
    this.last = void 0;
    const proto = _QueryList.prototype;
    if (!proto[Symbol.iterator]) proto[Symbol.iterator] = symbolIterator;
  }
  /**
   * Returns the QueryList entry at `index`.
   */
  get(index) {
    return this._results[index];
  }
  /**
   * See
   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
   */
  map(fn) {
    return this._results.map(fn);
  }
  filter(fn) {
    return this._results.filter(fn);
  }
  /**
   * See
   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
   */
  find(fn) {
    return this._results.find(fn);
  }
  /**
   * See
   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
   */
  reduce(fn, init) {
    return this._results.reduce(fn, init);
  }
  /**
   * See
   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
   */
  forEach(fn) {
    this._results.forEach(fn);
  }
  /**
   * See
   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
   */
  some(fn) {
    return this._results.some(fn);
  }
  /**
   * Returns a copy of the internal results list as an Array.
   */
  toArray() {
    return this._results.slice();
  }
  toString() {
    return this._results.toString();
  }
  /**
   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
   * on change detection, it will not notify of changes to the queries, unless a new change
   * occurs.
   *
   * @param resultsTree The query results to store
   * @param identityAccessor Optional function for extracting stable object identity from a value
   *    in the array. This function is executed for each element of the query result list while
   *    comparing current query list with the new one (provided as a first argument of the `reset`
   *    function) to detect if the lists are different. If the function is not provided, elements
   *    are compared as is (without any pre-processing).
   */
  reset(resultsTree, identityAccessor) {
    this.dirty = false;
    const newResultFlat = flatten(resultsTree);
    if (this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor)) {
      this._results = newResultFlat;
      this.length = newResultFlat.length;
      this.last = newResultFlat[this.length - 1];
      this.first = newResultFlat[0];
    }
  }
  /**
   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
   */
  notifyOnChanges() {
    if (this._changes !== void 0 && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.emit(this);
  }
  /** @internal */
  onDirty(cb) {
    this._onDirty = cb;
  }
  /** internal */
  setDirty() {
    this.dirty = true;
    this._onDirty?.();
  }
  /** internal */
  destroy() {
    if (this._changes !== void 0) {
      this._changes.complete();
      this._changes.unsubscribe();
    }
  }
};
Symbol.iterator;
var QueryList = _QueryList;
function hasInSkipHydrationBlockFlag(tNode) {
  return (tNode.flags & 128) === 128;
}
var TRACKED_LVIEWS = /* @__PURE__ */ new Map();
var uniqueIdCounter = 0;
function getUniqueLViewId() {
  return uniqueIdCounter++;
}
function registerLView(lView) {
  ngDevMode && assertNumber(lView[ID], "LView must have an ID in order to be registered");
  TRACKED_LVIEWS.set(lView[ID], lView);
}
function getLViewById(id) {
  ngDevMode && assertNumber(id, "ID used for LView lookup must be a number");
  return TRACKED_LVIEWS.get(id) || null;
}
function unregisterLView(lView) {
  ngDevMode && assertNumber(lView[ID], "Cannot stop tracking an LView that does not have an ID");
  TRACKED_LVIEWS.delete(lView[ID]);
}
var LContext = class {
  /** Component's parent view data. */
  get lView() {
    return getLViewById(this.lViewId);
  }
  constructor(lViewId, nodeIndex, native) {
    this.lViewId = lViewId;
    this.nodeIndex = nodeIndex;
    this.native = native;
  }
};
function getLContext(target) {
  let mpValue = readPatchedData(target);
  if (mpValue) {
    if (isLView(mpValue)) {
      const lView = mpValue;
      let nodeIndex;
      let component = void 0;
      let directives = void 0;
      if (isComponentInstance(target)) {
        nodeIndex = findViaComponent(lView, target);
        if (nodeIndex == -1) {
          throw new Error("The provided component was not found in the application");
        }
        component = target;
      } else if (isDirectiveInstance(target)) {
        nodeIndex = findViaDirective(lView, target);
        if (nodeIndex == -1) {
          throw new Error("The provided directive was not found in the application");
        }
        directives = getDirectivesAtNodeIndex(nodeIndex, lView);
      } else {
        nodeIndex = findViaNativeElement(lView, target);
        if (nodeIndex == -1) {
          return null;
        }
      }
      const native = unwrapRNode(lView[nodeIndex]);
      const existingCtx = readPatchedData(native);
      const context2 = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);
      if (component && context2.component === void 0) {
        context2.component = component;
        attachPatchData(context2.component, context2);
      }
      if (directives && context2.directives === void 0) {
        context2.directives = directives;
        for (let i = 0; i < directives.length; i++) {
          attachPatchData(directives[i], context2);
        }
      }
      attachPatchData(context2.native, context2);
      mpValue = context2;
    }
  } else {
    const rElement = target;
    ngDevMode && assertDomNode(rElement);
    let parent = rElement;
    while (parent = parent.parentNode) {
      const parentContext = readPatchedData(parent);
      if (parentContext) {
        const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;
        if (!lView) {
          return null;
        }
        const index = findViaNativeElement(lView, rElement);
        if (index >= 0) {
          const native = unwrapRNode(lView[index]);
          const context2 = createLContext(lView, index, native);
          attachPatchData(native, context2);
          mpValue = context2;
          break;
        }
      }
    }
  }
  return mpValue || null;
}
function createLContext(lView, nodeIndex, native) {
  return new LContext(lView[ID], nodeIndex, native);
}
function getComponentViewByInstance(componentInstance) {
  let patchedData = readPatchedData(componentInstance);
  let lView;
  if (isLView(patchedData)) {
    const contextLView = patchedData;
    const nodeIndex = findViaComponent(contextLView, componentInstance);
    lView = getComponentLViewByIndex(nodeIndex, contextLView);
    const context2 = createLContext(contextLView, nodeIndex, lView[HOST]);
    context2.component = componentInstance;
    attachPatchData(componentInstance, context2);
    attachPatchData(context2.native, context2);
  } else {
    const context2 = patchedData;
    const contextLView = context2.lView;
    ngDevMode && assertLView(contextLView);
    lView = getComponentLViewByIndex(context2.nodeIndex, contextLView);
  }
  return lView;
}
var MONKEY_PATCH_KEY_NAME = "__ngContext__";
function attachPatchData(target, data) {
  ngDevMode && assertDefined(target, "Target expected");
  if (isLView(data)) {
    target[MONKEY_PATCH_KEY_NAME] = data[ID];
    registerLView(data);
  } else {
    target[MONKEY_PATCH_KEY_NAME] = data;
  }
}
function readPatchedData(target) {
  ngDevMode && assertDefined(target, "Target expected");
  const data = target[MONKEY_PATCH_KEY_NAME];
  return typeof data === "number" ? getLViewById(data) : data || null;
}
function readPatchedLView(target) {
  const value = readPatchedData(target);
  if (value) {
    return isLView(value) ? value : value.lView;
  }
  return null;
}
function isComponentInstance(instance) {
  return instance && instance.constructor && instance.constructor.\u0275cmp;
}
function isDirectiveInstance(instance) {
  return instance && instance.constructor && instance.constructor.\u0275dir;
}
function findViaNativeElement(lView, target) {
  const tView = lView[TVIEW];
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    if (unwrapRNode(lView[i]) === target) {
      return i;
    }
  }
  return -1;
}
function traverseNextElement(tNode) {
  if (tNode.child) {
    return tNode.child;
  } else if (tNode.next) {
    return tNode.next;
  } else {
    while (tNode.parent && !tNode.parent.next) {
      tNode = tNode.parent;
    }
    return tNode.parent && tNode.parent.next;
  }
}
function findViaComponent(lView, componentInstance) {
  const componentIndices = lView[TVIEW].components;
  if (componentIndices) {
    for (let i = 0; i < componentIndices.length; i++) {
      const elementComponentIndex = componentIndices[i];
      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);
      if (componentView[CONTEXT] === componentInstance) {
        return elementComponentIndex;
      }
    }
  } else {
    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
    const rootComponent = rootComponentView[CONTEXT];
    if (rootComponent === componentInstance) {
      return HEADER_OFFSET;
    }
  }
  return -1;
}
function findViaDirective(lView, directiveInstance) {
  let tNode = lView[TVIEW].firstChild;
  while (tNode) {
    const directiveIndexStart = tNode.directiveStart;
    const directiveIndexEnd = tNode.directiveEnd;
    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {
      if (lView[i] === directiveInstance) {
        return tNode.index;
      }
    }
    tNode = traverseNextElement(tNode);
  }
  return -1;
}
function getDirectivesAtNodeIndex(nodeIndex, lView) {
  const tNode = lView[TVIEW].data[nodeIndex];
  if (tNode.directiveStart === 0) return EMPTY_ARRAY;
  const results = [];
  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {
    const directiveInstance = lView[i];
    if (!isComponentInstance(directiveInstance)) {
      results.push(directiveInstance);
    }
  }
  return results;
}
function getComponentAtNodeIndex(nodeIndex, lView) {
  const tNode = lView[TVIEW].data[nodeIndex];
  const {
    directiveStart,
    componentOffset
  } = tNode;
  return componentOffset > -1 ? lView[directiveStart + componentOffset] : null;
}
function getRootView(componentOrLView) {
  ngDevMode && assertDefined(componentOrLView, "component");
  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);
  while (lView && !(lView[FLAGS] & 512)) {
    lView = getLViewParent(lView);
  }
  ngDevMode && assertLView(lView);
  return lView;
}
function getRootContext(viewOrComponent) {
  const rootView = getRootView(viewOrComponent);
  ngDevMode && assertDefined(rootView[CONTEXT], "Root view has no context. Perhaps it is disconnected?");
  return rootView[CONTEXT];
}
function getFirstLContainer(lView) {
  return getNearestLContainer(lView[CHILD_HEAD]);
}
function getNextLContainer(container) {
  return getNearestLContainer(container[NEXT]);
}
function getNearestLContainer(viewOrContainer) {
  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
    viewOrContainer = viewOrContainer[NEXT];
  }
  return viewOrContainer;
}
function getComponent$1(element) {
  ngDevMode && assertDomElement(element);
  const context2 = getLContext(element);
  if (context2 === null) return null;
  if (context2.component === void 0) {
    const lView = context2.lView;
    if (lView === null) {
      return null;
    }
    context2.component = getComponentAtNodeIndex(context2.nodeIndex, lView);
  }
  return context2.component;
}
function getContext(element) {
  assertDomElement(element);
  const context2 = getLContext(element);
  const lView = context2 ? context2.lView : null;
  return lView === null ? null : lView[CONTEXT];
}
function getOwningComponent(elementOrDir) {
  const context2 = getLContext(elementOrDir);
  let lView = context2 ? context2.lView : null;
  if (lView === null) return null;
  let parent;
  while (lView[TVIEW].type === 2 && (parent = getLViewParent(lView))) {
    lView = parent;
  }
  return lView[FLAGS] & 512 ? null : lView[CONTEXT];
}
function getRootComponents(elementOrDir) {
  const lView = readPatchedLView(elementOrDir);
  return lView !== null ? [getRootContext(lView)] : [];
}
function getInjector(elementOrDir) {
  const context2 = getLContext(elementOrDir);
  const lView = context2 ? context2.lView : null;
  if (lView === null) return Injector.NULL;
  const tNode = lView[TVIEW].data[context2.nodeIndex];
  return new NodeInjector(tNode, lView);
}
function getDirectives(node) {
  if (node instanceof Text) {
    return [];
  }
  const context2 = getLContext(node);
  const lView = context2 ? context2.lView : null;
  if (lView === null) {
    return [];
  }
  const tView = lView[TVIEW];
  const nodeIndex = context2.nodeIndex;
  if (!tView?.data[nodeIndex]) {
    return [];
  }
  if (context2.directives === void 0) {
    context2.directives = getDirectivesAtNodeIndex(nodeIndex, lView);
  }
  return context2.directives === null ? [] : [...context2.directives];
}
function getDirectiveMetadata$1(directiveOrComponentInstance) {
  const {
    constructor
  } = directiveOrComponentInstance;
  if (!constructor) {
    throw new Error("Unable to find the instance constructor");
  }
  const componentDef = getComponentDef(constructor);
  if (componentDef) {
    const inputs = extractInputDebugMetadata(componentDef.inputs);
    return {
      inputs,
      outputs: componentDef.outputs,
      encapsulation: componentDef.encapsulation,
      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default
    };
  }
  const directiveDef = getDirectiveDef(constructor);
  if (directiveDef) {
    const inputs = extractInputDebugMetadata(directiveDef.inputs);
    return {
      inputs,
      outputs: directiveDef.outputs
    };
  }
  return null;
}
function getHostElement(componentOrDirective) {
  return getLContext(componentOrDirective).native;
}
function getListeners(element) {
  ngDevMode && assertDomElement(element);
  const lContext = getLContext(element);
  const lView = lContext === null ? null : lContext.lView;
  if (lView === null) return [];
  const tView = lView[TVIEW];
  const lCleanup = lView[CLEANUP];
  const tCleanup = tView.cleanup;
  const listeners = [];
  if (tCleanup && lCleanup) {
    for (let i = 0; i < tCleanup.length; ) {
      const firstParam = tCleanup[i++];
      const secondParam = tCleanup[i++];
      if (typeof firstParam === "string") {
        const name = firstParam;
        const listenerElement = unwrapRNode(lView[secondParam]);
        const callback = lCleanup[tCleanup[i++]];
        const useCaptureOrIndx = tCleanup[i++];
        const type = typeof useCaptureOrIndx === "boolean" || useCaptureOrIndx >= 0 ? "dom" : "output";
        const useCapture = typeof useCaptureOrIndx === "boolean" ? useCaptureOrIndx : false;
        if (element == listenerElement) {
          listeners.push({
            element,
            name,
            callback,
            useCapture,
            type
          });
        }
      }
    }
  }
  listeners.sort(sortListeners);
  return listeners;
}
function sortListeners(a, b) {
  if (a.name == b.name) return 0;
  return a.name < b.name ? -1 : 1;
}
function assertDomElement(value) {
  if (typeof Element !== "undefined" && !(value instanceof Element)) {
    throw new Error("Expecting instance of DOM Element");
  }
}
function extractInputDebugMetadata(inputs) {
  const res = {};
  for (const key in inputs) {
    if (!inputs.hasOwnProperty(key)) {
      continue;
    }
    const value = inputs[key];
    if (value === void 0) {
      continue;
    }
    let minifiedName;
    if (Array.isArray(value)) {
      minifiedName = value[0];
    } else {
      minifiedName = value;
    }
    res[key] = minifiedName;
  }
  return res;
}
var DOCUMENT = void 0;
function setDocument(document2) {
  DOCUMENT = document2;
}
function getDocument() {
  if (DOCUMENT !== void 0) {
    return DOCUMENT;
  } else if (typeof document !== "undefined") {
    return document;
  }
  throw new RuntimeError(210, (typeof ngDevMode === "undefined" || ngDevMode) && `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`);
}
var APP_ID = new InjectionToken(ngDevMode ? "AppId" : "", {
  providedIn: "root",
  factory: () => DEFAULT_APP_ID
});
var DEFAULT_APP_ID = "ng";
var PLATFORM_INITIALIZER = new InjectionToken(ngDevMode ? "Platform Initializer" : "");
var PLATFORM_ID = new InjectionToken(ngDevMode ? "Platform ID" : "", {
  providedIn: "platform",
  factory: () => "unknown"
  // set a default platform name, when none set explicitly
});
var PACKAGE_ROOT_URL = new InjectionToken(ngDevMode ? "Application Packages Root URL" : "");
var ANIMATION_MODULE_TYPE = new InjectionToken(ngDevMode ? "AnimationModuleType" : "");
var CSP_NONCE = new InjectionToken(ngDevMode ? "CSP nonce" : "", {
  providedIn: "root",
  factory: () => {
    return getDocument().body?.querySelector("[ngCspNonce]")?.getAttribute("ngCspNonce") || null;
  }
});
var IMAGE_CONFIG_DEFAULTS = {
  breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],
  placeholderResolution: 30,
  disableImageSizeWarning: false,
  disableImageLazyLoadWarning: false
};
var IMAGE_CONFIG = new InjectionToken(ngDevMode ? "ImageConfig" : "", {
  providedIn: "root",
  factory: () => IMAGE_CONFIG_DEFAULTS
});
function makeStateKey(key) {
  return key;
}
function initTransferState() {
  const transferState = new TransferState();
  if (inject(PLATFORM_ID) === "browser") {
    transferState.store = retrieveTransferredState(getDocument(), inject(APP_ID));
  }
  return transferState;
}
var _TransferState = class _TransferState {
  constructor() {
    this.store = {};
    this.onSerializeCallbacks = {};
  }
  /**
   * Get the value corresponding to a key. Return `defaultValue` if key is not found.
   */
  get(key, defaultValue) {
    return this.store[key] !== void 0 ? this.store[key] : defaultValue;
  }
  /**
   * Set the value corresponding to a key.
   */
  set(key, value) {
    this.store[key] = value;
  }
  /**
   * Remove a key from the store.
   */
  remove(key) {
    delete this.store[key];
  }
  /**
   * Test whether a key exists in the store.
   */
  hasKey(key) {
    return this.store.hasOwnProperty(key);
  }
  /**
   * Indicates whether the state is empty.
   */
  get isEmpty() {
    return Object.keys(this.store).length === 0;
  }
  /**
   * Register a callback to provide the value for a key when `toJson` is called.
   */
  onSerialize(key, callback) {
    this.onSerializeCallbacks[key] = callback;
  }
  /**
   * Serialize the current state of the store to JSON.
   */
  toJson() {
    for (const key in this.onSerializeCallbacks) {
      if (this.onSerializeCallbacks.hasOwnProperty(key)) {
        try {
          this.store[key] = this.onSerializeCallbacks[key]();
        } catch (e) {
          console.warn("Exception in onSerialize callback: ", e);
        }
      }
    }
    return JSON.stringify(this.store).replace(/</g, "\\u003C");
  }
};
_TransferState.\u0275prov = \u0275\u0275defineInjectable({
  token: _TransferState,
  providedIn: "root",
  factory: initTransferState
});
var TransferState = _TransferState;
function retrieveTransferredState(doc, appId) {
  const script = doc.getElementById(appId + "-state");
  if (script?.textContent) {
    try {
      return JSON.parse(script.textContent);
    } catch (e) {
      console.warn("Exception while restoring TransferState for app " + appId, e);
    }
  }
  return {};
}
var REFERENCE_NODE_HOST = "h";
var REFERENCE_NODE_BODY = "b";
var NodeNavigationStep;
(function(NodeNavigationStep2) {
  NodeNavigationStep2["FirstChild"] = "f";
  NodeNavigationStep2["NextSibling"] = "n";
})(NodeNavigationStep || (NodeNavigationStep = {}));
var TRANSFER_STATE_TOKEN_ID = "__nghData__";
var NGH_DATA_KEY = makeStateKey(TRANSFER_STATE_TOKEN_ID);
var _retrieveHydrationInfoImpl = () => null;
function retrieveHydrationInfo(rNode, injector, isRootView2 = false) {
  return _retrieveHydrationInfoImpl(rNode, injector, isRootView2);
}
var HydrationStatus;
(function(HydrationStatus2) {
  HydrationStatus2["Hydrated"] = "hydrated";
  HydrationStatus2["Skipped"] = "skipped";
  HydrationStatus2["Mismatched"] = "mismatched";
})(HydrationStatus || (HydrationStatus = {}));
var IS_HYDRATION_DOM_REUSE_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_HYDRATION_DOM_REUSE_ENABLED" : "");
var PRESERVE_HOST_CONTENT_DEFAULT = false;
var PRESERVE_HOST_CONTENT = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "PRESERVE_HOST_CONTENT" : "", {
  providedIn: "root",
  factory: () => PRESERVE_HOST_CONTENT_DEFAULT
});
var IS_I18N_HYDRATION_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_I18N_HYDRATION_ENABLED" : "");
var IS_EVENT_REPLAY_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_EVENT_REPLAY_ENABLED" : "");
var IS_GLOBAL_EVENT_DELEGATION_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_GLOBAL_EVENT_DELEGATION_ENABLED" : "");
var policy$1;
function getPolicy$1() {
  if (policy$1 === void 0) {
    policy$1 = null;
    if (_global.trustedTypes) {
      try {
        policy$1 = _global.trustedTypes.createPolicy("angular", {
          createHTML: (s) => s,
          createScript: (s) => s,
          createScriptURL: (s) => s
        });
      } catch {
      }
    }
  }
  return policy$1;
}
function trustedHTMLFromString(html) {
  return getPolicy$1()?.createHTML(html) || html;
}
function trustedScriptURLFromString(url) {
  return getPolicy$1()?.createScriptURL(url) || url;
}
var policy;
function getPolicy() {
  if (policy === void 0) {
    policy = null;
    if (_global.trustedTypes) {
      try {
        policy = _global.trustedTypes.createPolicy("angular#unsafe-bypass", {
          createHTML: (s) => s,
          createScript: (s) => s,
          createScriptURL: (s) => s
        });
      } catch {
      }
    }
  }
  return policy;
}
function trustedHTMLFromStringBypass(html) {
  return getPolicy()?.createHTML(html) || html;
}
function trustedScriptFromStringBypass(script) {
  return getPolicy()?.createScript(script) || script;
}
function trustedScriptURLFromStringBypass(url) {
  return getPolicy()?.createScriptURL(url) || url;
}
var SafeValueImpl = class {
  constructor(changingThisBreaksApplicationSecurity) {
    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
  }
  toString() {
    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see ${XSS_SECURITY_URL})`;
  }
};
var SafeHtmlImpl = class extends SafeValueImpl {
  getTypeName() {
    return "HTML";
  }
};
var SafeStyleImpl = class extends SafeValueImpl {
  getTypeName() {
    return "Style";
  }
};
var SafeScriptImpl = class extends SafeValueImpl {
  getTypeName() {
    return "Script";
  }
};
var SafeUrlImpl = class extends SafeValueImpl {
  getTypeName() {
    return "URL";
  }
};
var SafeResourceUrlImpl = class extends SafeValueImpl {
  getTypeName() {
    return "ResourceURL";
  }
};
function unwrapSafeValue(value) {
  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;
}
function allowSanitizationBypassAndThrow(value, type) {
  const actualType = getSanitizationBypassType(value);
  if (actualType != null && actualType !== type) {
    if (actualType === "ResourceURL" && type === "URL") return true;
    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);
  }
  return actualType === type;
}
function getSanitizationBypassType(value) {
  return value instanceof SafeValueImpl && value.getTypeName() || null;
}
function bypassSanitizationTrustHtml(trustedHtml) {
  return new SafeHtmlImpl(trustedHtml);
}
function bypassSanitizationTrustStyle(trustedStyle) {
  return new SafeStyleImpl(trustedStyle);
}
function bypassSanitizationTrustScript(trustedScript) {
  return new SafeScriptImpl(trustedScript);
}
function bypassSanitizationTrustUrl(trustedUrl) {
  return new SafeUrlImpl(trustedUrl);
}
function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
  return new SafeResourceUrlImpl(trustedResourceUrl);
}
function getInertBodyHelper(defaultDoc) {
  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);
  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;
}
var DOMParserHelper = class {
  constructor(inertDocumentHelper) {
    this.inertDocumentHelper = inertDocumentHelper;
  }
  getInertBodyElement(html) {
    html = "<body><remove></remove>" + html;
    try {
      const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), "text/html").body;
      if (body === null) {
        return this.inertDocumentHelper.getInertBodyElement(html);
      }
      body.firstChild?.remove();
      return body;
    } catch {
      return null;
    }
  }
};
var InertDocumentHelper = class {
  constructor(defaultDoc) {
    this.defaultDoc = defaultDoc;
    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument("sanitization-inert");
  }
  getInertBodyElement(html) {
    const templateEl = this.inertDocument.createElement("template");
    templateEl.innerHTML = trustedHTMLFromString(html);
    return templateEl;
  }
};
function isDOMParserAvailable() {
  try {
    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(""), "text/html");
  } catch {
    return false;
  }
}
var SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\/?#]*(?:[\/?#]|$))/i;
function _sanitizeUrl(url) {
  url = String(url);
  if (url.match(SAFE_URL_PATTERN)) return url;
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);
  }
  return "unsafe:" + url;
}
function tagSet(tags) {
  const res = {};
  for (const t of tags.split(",")) res[t] = true;
  return res;
}
function merge(...sets) {
  const res = {};
  for (const s of sets) {
    for (const v in s) {
      if (s.hasOwnProperty(v)) res[v] = true;
    }
  }
  return res;
}
var VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr");
var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr");
var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt");
var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul"));
var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video"));
var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
var URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href");
var HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width");
var ARIA_ATTRS = tagSet("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext");
var VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);
var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet("script,style,template");
var SanitizingHtmlSerializer = class {
  constructor() {
    this.sanitizedSomething = false;
    this.buf = [];
  }
  sanitizeChildren(el) {
    let current = el.firstChild;
    let traverseContent = true;
    let parentNodes = [];
    while (current) {
      if (current.nodeType === Node.ELEMENT_NODE) {
        traverseContent = this.startElement(current);
      } else if (current.nodeType === Node.TEXT_NODE) {
        this.chars(current.nodeValue);
      } else {
        this.sanitizedSomething = true;
      }
      if (traverseContent && current.firstChild) {
        parentNodes.push(current);
        current = getFirstChild(current);
        continue;
      }
      while (current) {
        if (current.nodeType === Node.ELEMENT_NODE) {
          this.endElement(current);
        }
        let next = getNextSibling(current);
        if (next) {
          current = next;
          break;
        }
        current = parentNodes.pop();
      }
    }
    return this.buf.join("");
  }
  /**
   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
   * be traversed. Element content must always be traversed (even if the element itself is not
   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
   *
   * @param element The element to sanitize.
   * @return True if the element's contents should be traversed.
   */
  startElement(element) {
    const tagName = getNodeName(element).toLowerCase();
    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
      this.sanitizedSomething = true;
      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
    }
    this.buf.push("<");
    this.buf.push(tagName);
    const elAttrs = element.attributes;
    for (let i = 0; i < elAttrs.length; i++) {
      const elAttr = elAttrs.item(i);
      const attrName = elAttr.name;
      const lower = attrName.toLowerCase();
      if (!VALID_ATTRS.hasOwnProperty(lower)) {
        this.sanitizedSomething = true;
        continue;
      }
      let value = elAttr.value;
      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);
      this.buf.push(" ", attrName, '="', encodeEntities(value), '"');
    }
    this.buf.push(">");
    return true;
  }
  endElement(current) {
    const tagName = getNodeName(current).toLowerCase();
    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
      this.buf.push("</");
      this.buf.push(tagName);
      this.buf.push(">");
    }
  }
  chars(chars) {
    this.buf.push(encodeEntities(chars));
  }
};
function isClobberedElement(parentNode, childNode) {
  return (parentNode.compareDocumentPosition(childNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) !== Node.DOCUMENT_POSITION_CONTAINED_BY;
}
function getNextSibling(node) {
  const nextSibling = node.nextSibling;
  if (nextSibling && node !== nextSibling.previousSibling) {
    throw clobberedElementError(nextSibling);
  }
  return nextSibling;
}
function getFirstChild(node) {
  const firstChild = node.firstChild;
  if (firstChild && isClobberedElement(node, firstChild)) {
    throw clobberedElementError(firstChild);
  }
  return firstChild;
}
function getNodeName(node) {
  const nodeName = node.nodeName;
  return typeof nodeName === "string" ? nodeName : "FORM";
}
function clobberedElementError(node) {
  return new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);
}
var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
function encodeEntities(value) {
  return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(match2) {
    const hi = match2.charCodeAt(0);
    const low = match2.charCodeAt(1);
    return "&#" + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ";";
  }).replace(NON_ALPHANUMERIC_REGEXP, function(match2) {
    return "&#" + match2.charCodeAt(0) + ";";
  }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
var inertBodyHelper;
function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
  let inertBodyElement = null;
  try {
    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);
    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "";
    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    let mXSSAttempts = 5;
    let parsedHtml = unsafeHtml;
    do {
      if (mXSSAttempts === 0) {
        throw new Error("Failed to sanitize html because the input is unstable");
      }
      mXSSAttempts--;
      unsafeHtml = parsedHtml;
      parsedHtml = inertBodyElement.innerHTML;
      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    } while (unsafeHtml !== parsedHtml);
    const sanitizer = new SanitizingHtmlSerializer();
    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);
    if ((typeof ngDevMode === "undefined" || ngDevMode) && sanitizer.sanitizedSomething) {
      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);
    }
    return trustedHTMLFromString(safeHtml);
  } finally {
    if (inertBodyElement) {
      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;
      while (parent.firstChild) {
        parent.firstChild.remove();
      }
    }
  }
}
function getTemplateContent(el) {
  return "content" in el && isTemplateElement(el) ? el.content : null;
}
function isTemplateElement(el) {
  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === "TEMPLATE";
}
var SecurityContext;
(function(SecurityContext2) {
  SecurityContext2[SecurityContext2["NONE"] = 0] = "NONE";
  SecurityContext2[SecurityContext2["HTML"] = 1] = "HTML";
  SecurityContext2[SecurityContext2["STYLE"] = 2] = "STYLE";
  SecurityContext2[SecurityContext2["SCRIPT"] = 3] = "SCRIPT";
  SecurityContext2[SecurityContext2["URL"] = 4] = "URL";
  SecurityContext2[SecurityContext2["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(SecurityContext || (SecurityContext = {}));
function \u0275\u0275sanitizeHtml(unsafeHtml) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeHtml,
    "HTML"
    /* BypassType.Html */
  )) {
    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));
  }
  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
}
function \u0275\u0275sanitizeStyle(unsafeStyle) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || "";
  }
  if (allowSanitizationBypassAndThrow(
    unsafeStyle,
    "Style"
    /* BypassType.Style */
  )) {
    return unwrapSafeValue(unsafeStyle);
  }
  return renderStringify(unsafeStyle);
}
function \u0275\u0275sanitizeUrl(unsafeUrl) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || "";
  }
  if (allowSanitizationBypassAndThrow(
    unsafeUrl,
    "URL"
    /* BypassType.Url */
  )) {
    return unwrapSafeValue(unsafeUrl);
  }
  return _sanitizeUrl(renderStringify(unsafeUrl));
}
function \u0275\u0275sanitizeResourceUrl(unsafeResourceUrl) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeResourceUrl,
    "ResourceURL"
    /* BypassType.ResourceUrl */
  )) {
    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));
  }
  throw new RuntimeError(904, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);
}
function \u0275\u0275sanitizeScript(unsafeScript) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeScript,
    "Script"
    /* BypassType.Script */
  )) {
    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));
  }
  throw new RuntimeError(905, ngDevMode && "unsafe value used in a script context");
}
function \u0275\u0275trustConstantHtml(html) {
  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {
    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join("?")}`);
  }
  return trustedHTMLFromString(html[0]);
}
function \u0275\u0275trustConstantResourceUrl(url) {
  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {
    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join("?")}`);
  }
  return trustedScriptURLFromString(url[0]);
}
function getUrlSanitizer(tag, prop) {
  if (prop === "src" && (tag === "embed" || tag === "frame" || tag === "iframe" || tag === "media" || tag === "script") || prop === "href" && (tag === "base" || tag === "link")) {
    return \u0275\u0275sanitizeResourceUrl;
  }
  return \u0275\u0275sanitizeUrl;
}
function \u0275\u0275sanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
  return getUrlSanitizer(tag, prop)(unsafeUrl);
}
function validateAgainstEventProperties(name) {
  if (name.toLowerCase().startsWith("on")) {
    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...
If '${name}' is a directive input, make sure the directive is imported by the current module.`;
    throw new RuntimeError(306, errorMessage);
  }
}
function validateAgainstEventAttributes(name) {
  if (name.toLowerCase().startsWith("on")) {
    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...`;
    throw new RuntimeError(306, errorMessage);
  }
}
function getSanitizer() {
  const lView = getLView();
  return lView && lView[ENVIRONMENT].sanitizer;
}
var COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;
var COMMENT_DELIMITER = /(<|>)/g;
var COMMENT_DELIMITER_ESCAPED = "\u200B$1\u200B";
function escapeCommentText(value) {
  return value.replace(COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));
}
function normalizeDebugBindingName(name) {
  name = camelCaseToDashCase(name.replace(/[$@]/g, "_"));
  return `ng-reflect-${name}`;
}
var CAMEL_CASE_REGEXP = /([A-Z])/g;
function camelCaseToDashCase(input2) {
  return input2.replace(CAMEL_CASE_REGEXP, (...m) => "-" + m[1].toLowerCase());
}
function normalizeDebugBindingValue(value) {
  try {
    return value != null ? value.toString().slice(0, 30) : value;
  } catch (e) {
    return "[ERROR] Exception while trying to serialize the value";
  }
}
var CUSTOM_ELEMENTS_SCHEMA = {
  name: "custom-elements"
};
var NO_ERRORS_SCHEMA = {
  name: "no-errors-schema"
};
var shouldThrowErrorOnUnknownElement = false;
var shouldThrowErrorOnUnknownProperty = false;
function validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {
  if (schemas === null) return;
  if (!hasDirectives && tagName !== null) {
    const isUnknown = (
      // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because
      // Domino doesn't expose HTMLUnknownElement globally.
      typeof HTMLUnknownElement !== "undefined" && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== "undefined" && tagName.indexOf("-") > -1 && !customElements.get(tagName)
    );
    if (isUnknown && !matchingSchemas(schemas, tagName)) {
      const isHostStandalone = isHostComponentStandalone(lView);
      const templateLocation = getTemplateLocationDetails(lView);
      const schemas2 = `'${isHostStandalone ? "@Component" : "@NgModule"}.schemas'`;
      let message = `'${tagName}' is not a known element${templateLocation}:
`;
      message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? "included in the '@Component.imports' of this component" : "a part of an @NgModule where this component is declared"}.
`;
      if (tagName && tagName.indexOf("-") > -1) {
        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas2} of this component to suppress this message.`;
      } else {
        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas2} of this component.`;
      }
      if (shouldThrowErrorOnUnknownElement) {
        throw new RuntimeError(304, message);
      } else {
        console.error(formatRuntimeError(304, message));
      }
    }
  }
}
function isPropertyValid(element, propName, tagName, schemas) {
  if (schemas === null) return true;
  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {
    return true;
  }
  return typeof Node === "undefined" || Node === null || !(element instanceof Node);
}
function handleUnknownPropertyError(propName, tagName, nodeType, lView) {
  if (!tagName && nodeType === 4) {
    tagName = "ng-template";
  }
  const isHostStandalone = isHostComponentStandalone(lView);
  const templateLocation = getTemplateLocationDetails(lView);
  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;
  const schemas = `'${isHostStandalone ? "@Component" : "@NgModule"}.schemas'`;
  const importLocation = isHostStandalone ? "included in the '@Component.imports' of this component" : "a part of an @NgModule where this component is declared";
  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {
    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);
    message += `
If the '${propName}' is an Angular control flow directive, please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;
  } else {
    message += `
1. If '${tagName}' is an Angular component and it has the '${propName}' input, then verify that it is ${importLocation}.`;
    if (tagName && tagName.indexOf("-") > -1) {
      message += `
2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;
      message += `
3. To allow any property add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
    } else {
      message += `
2. To allow any property add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
    }
  }
  reportUnknownPropertyError(message);
}
function reportUnknownPropertyError(message) {
  if (shouldThrowErrorOnUnknownProperty) {
    throw new RuntimeError(303, message);
  } else {
    console.error(formatRuntimeError(303, message));
  }
}
function getDeclarationComponentDef(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  if (!context2) return null;
  return context2.constructor ? getComponentDef(context2.constructor) : null;
}
function isHostComponentStandalone(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const componentDef = getDeclarationComponentDef(lView);
  return !!componentDef?.standalone;
}
function getTemplateLocationDetails(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const hostComponentDef = getDeclarationComponentDef(lView);
  const componentClassName = hostComponentDef?.type?.name;
  return componentClassName ? ` (used in the '${componentClassName}' component template)` : "";
}
var KNOWN_CONTROL_FLOW_DIRECTIVES = /* @__PURE__ */ new Map([["ngIf", "NgIf"], ["ngFor", "NgFor"], ["ngSwitchCase", "NgSwitchCase"], ["ngSwitchDefault", "NgSwitchDefault"]]);
function matchingSchemas(schemas, tagName) {
  if (schemas !== null) {
    for (let i = 0; i < schemas.length; i++) {
      const schema = schemas[i];
      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf("-") > -1) {
        return true;
      }
    }
  }
  return false;
}
function \u0275\u0275resolveWindow(element) {
  return element.ownerDocument.defaultView;
}
function \u0275\u0275resolveDocument(element) {
  return element.ownerDocument;
}
function \u0275\u0275resolveBody(element) {
  return element.ownerDocument.body;
}
var INTERPOLATION_DELIMITER = `\uFFFD`;
function maybeUnwrapFn(value) {
  if (value instanceof Function) {
    return value();
  } else {
    return value;
  }
}
function isPlatformBrowser(injector) {
  return (injector ?? inject(Injector)).get(PLATFORM_ID) === "browser";
}
var VALUE_STRING_LENGTH_LIMIT = 200;
function throwMultipleComponentError(tNode, first2, second) {
  throw new RuntimeError(-300, `Multiple components match node with tagname ${tNode.value}: ${stringifyForError(first2)} and ${stringifyForError(second)}`);
}
function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName, lView) {
  const hostComponentDef = getDeclarationComponentDef(lView);
  const componentClassName = hostComponentDef?.type?.name;
  const field = propName ? ` for '${propName}'` : "";
  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(oldValue)}'. Current value: '${formatValue(currValue)}'.${componentClassName ? ` Expression location: ${componentClassName} component` : ""}`;
  if (creationMode) {
    msg += ` It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?`;
  }
  throw new RuntimeError(-100, msg);
}
function formatValue(value) {
  let strValue = String(value);
  try {
    if (Array.isArray(value) || strValue === "[object Object]") {
      strValue = JSON.stringify(value);
    }
  } catch (error) {
  }
  return strValue.length > VALUE_STRING_LENGTH_LIMIT ? strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + "\u2026" : strValue;
}
function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);
  let oldValue = prefix, newValue = prefix;
  for (let i = 0; i < chunks.length; i++) {
    const slotIdx = rootIndex + i;
    oldValue += `${lView[slotIdx]}${chunks[i]}`;
    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;
  }
  return {
    propName,
    oldValue,
    newValue
  };
}
function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
  const tData = lView[TVIEW].data;
  const metadata = tData[bindingIndex];
  if (typeof metadata === "string") {
    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
    }
    return {
      propName: metadata,
      oldValue,
      newValue
    };
  }
  if (metadata === null) {
    let idx = bindingIndex - 1;
    while (typeof tData[idx] !== "string" && tData[idx + 1] === null) {
      idx--;
    }
    const meta = tData[idx];
    if (typeof meta === "string") {
      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, "g"));
      if (matches && matches.length - 1 > bindingIndex - idx) {
        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
      }
    }
  }
  return {
    propName: void 0,
    oldValue,
    newValue
  };
}
var RendererStyleFlags2;
(function(RendererStyleFlags22) {
  RendererStyleFlags22[RendererStyleFlags22["Important"] = 1] = "Important";
  RendererStyleFlags22[RendererStyleFlags22["DashCase"] = 2] = "DashCase";
})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));
var _icuContainerIterate;
function icuContainerIterate(tIcuContainerNode, lView) {
  return _icuContainerIterate(tIcuContainerNode, lView);
}
function ensureIcuContainerVisitorLoaded(loader) {
  if (_icuContainerIterate === void 0) {
    _icuContainerIterate = loader();
  }
}
function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
  if (lNodeToHandle != null) {
    let lContainer;
    let isComponent2 = false;
    if (isLContainer(lNodeToHandle)) {
      lContainer = lNodeToHandle;
    } else if (isLView(lNodeToHandle)) {
      isComponent2 = true;
      ngDevMode && assertDefined(lNodeToHandle[HOST], "HOST must be defined for a component LView");
      lNodeToHandle = lNodeToHandle[HOST];
    }
    const rNode = unwrapRNode(lNodeToHandle);
    if (action === 0 && parent !== null) {
      if (beforeNode == null) {
        nativeAppendChild(renderer, parent, rNode);
      } else {
        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
      }
    } else if (action === 1 && parent !== null) {
      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
    } else if (action === 2) {
      nativeRemoveNode(renderer, rNode, isComponent2);
    } else if (action === 3) {
      ngDevMode && ngDevMode.rendererDestroyNode++;
      renderer.destroyNode(rNode);
    }
    if (lContainer != null) {
      applyContainer(renderer, action, lContainer, parent, beforeNode);
    }
  }
}
function createTextNode(renderer, value) {
  ngDevMode && ngDevMode.rendererCreateTextNode++;
  ngDevMode && ngDevMode.rendererSetText++;
  return renderer.createText(value);
}
function updateTextNode(renderer, rNode, value) {
  ngDevMode && ngDevMode.rendererSetText++;
  renderer.setValue(rNode, value);
}
function createCommentNode(renderer, value) {
  ngDevMode && ngDevMode.rendererCreateComment++;
  return renderer.createComment(escapeCommentText(value));
}
function createElementNode(renderer, name, namespace) {
  ngDevMode && ngDevMode.rendererCreateElement++;
  return renderer.createElement(name, namespace);
}
function removeViewFromDOM(tView, lView) {
  detachViewFromDOM(tView, lView);
  lView[HOST] = null;
  lView[T_HOST] = null;
}
function addViewToDOM(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {
  lView[HOST] = parentNativeNode;
  lView[T_HOST] = parentTNode;
  applyView(tView, lView, renderer, 1, parentNativeNode, beforeNode);
}
function detachViewFromDOM(tView, lView) {
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(
    9
    /* NotificationSource.ViewDetachedFromDOM */
  );
  applyView(tView, lView, lView[RENDERER], 2, null, null);
}
function destroyViewTree(rootView) {
  let lViewOrLContainer = rootView[CHILD_HEAD];
  if (!lViewOrLContainer) {
    return cleanUpView(rootView[TVIEW], rootView);
  }
  while (lViewOrLContainer) {
    let next = null;
    if (isLView(lViewOrLContainer)) {
      next = lViewOrLContainer[CHILD_HEAD];
    } else {
      ngDevMode && assertLContainer(lViewOrLContainer);
      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
      if (firstView) next = firstView;
    }
    if (!next) {
      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
        if (isLView(lViewOrLContainer)) {
          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
        }
        lViewOrLContainer = lViewOrLContainer[PARENT];
      }
      if (lViewOrLContainer === null) lViewOrLContainer = rootView;
      if (isLView(lViewOrLContainer)) {
        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
      }
      next = lViewOrLContainer && lViewOrLContainer[NEXT];
    }
    lViewOrLContainer = next;
  }
}
function insertView(tView, lView, lContainer, index) {
  ngDevMode && assertLView(lView);
  ngDevMode && assertLContainer(lContainer);
  const indexInContainer = CONTAINER_HEADER_OFFSET + index;
  const containerLength = lContainer.length;
  if (index > 0) {
    lContainer[indexInContainer - 1][NEXT] = lView;
  }
  if (index < containerLength - CONTAINER_HEADER_OFFSET) {
    lView[NEXT] = lContainer[indexInContainer];
    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
  } else {
    lContainer.push(lView);
    lView[NEXT] = null;
  }
  lView[PARENT] = lContainer;
  const declarationLContainer = lView[DECLARATION_LCONTAINER];
  if (declarationLContainer !== null && lContainer !== declarationLContainer) {
    trackMovedView(declarationLContainer, lView);
  }
  const lQueries = lView[QUERIES];
  if (lQueries !== null) {
    lQueries.insertView(tView);
  }
  updateAncestorTraversalFlagsOnAttach(lView);
  lView[FLAGS] |= 128;
}
function trackMovedView(declarationContainer, lView) {
  ngDevMode && assertDefined(lView, "LView required");
  ngDevMode && assertLContainer(declarationContainer);
  const movedViews = declarationContainer[MOVED_VIEWS];
  const parent = lView[PARENT];
  ngDevMode && assertDefined(parent, "missing parent");
  if (isLView(parent)) {
    declarationContainer[FLAGS] |= LContainerFlags.HasTransplantedViews;
  } else {
    const insertedComponentLView = parent[PARENT][DECLARATION_COMPONENT_VIEW];
    ngDevMode && assertDefined(insertedComponentLView, "Missing insertedComponentLView");
    const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
    ngDevMode && assertDefined(declaredComponentLView, "Missing declaredComponentLView");
    if (declaredComponentLView !== insertedComponentLView) {
      declarationContainer[FLAGS] |= LContainerFlags.HasTransplantedViews;
    }
  }
  if (movedViews === null) {
    declarationContainer[MOVED_VIEWS] = [lView];
  } else {
    movedViews.push(lView);
  }
}
function detachMovedView(declarationContainer, lView) {
  ngDevMode && assertLContainer(declarationContainer);
  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], "A projected view should belong to a non-empty projected views collection");
  const movedViews = declarationContainer[MOVED_VIEWS];
  const declarationViewIndex = movedViews.indexOf(lView);
  movedViews.splice(declarationViewIndex, 1);
}
function detachView(lContainer, removeIndex) {
  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;
  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
  const viewToDetach = lContainer[indexInContainer];
  if (viewToDetach) {
    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];
    if (declarationLContainer !== null && declarationLContainer !== lContainer) {
      detachMovedView(declarationLContainer, viewToDetach);
    }
    if (removeIndex > 0) {
      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
    }
    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
    removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);
    const lQueries = removedLView[QUERIES];
    if (lQueries !== null) {
      lQueries.detachView(removedLView[TVIEW]);
    }
    viewToDetach[PARENT] = null;
    viewToDetach[NEXT] = null;
    viewToDetach[FLAGS] &= ~128;
  }
  return viewToDetach;
}
function destroyLView(tView, lView) {
  if (!(lView[FLAGS] & 256)) {
    const renderer = lView[RENDERER];
    if (renderer.destroyNode) {
      applyView(tView, lView, renderer, 3, null, null);
    }
    destroyViewTree(lView);
  }
}
function cleanUpView(tView, lView) {
  if (lView[FLAGS] & 256) {
    return;
  }
  const prevConsumer = setActiveConsumer(null);
  try {
    lView[FLAGS] &= ~128;
    lView[FLAGS] |= 256;
    lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);
    executeOnDestroys(tView, lView);
    processCleanups(tView, lView);
    if (lView[TVIEW].type === 1) {
      ngDevMode && ngDevMode.rendererDestroy++;
      lView[RENDERER].destroy();
    }
    const declarationContainer = lView[DECLARATION_LCONTAINER];
    if (declarationContainer !== null && isLContainer(lView[PARENT])) {
      if (declarationContainer !== lView[PARENT]) {
        detachMovedView(declarationContainer, lView);
      }
      const lQueries = lView[QUERIES];
      if (lQueries !== null) {
        lQueries.detachView(tView);
      }
    }
    unregisterLView(lView);
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function processCleanups(tView, lView) {
  ngDevMode && assertNotReactive(processCleanups.name);
  const tCleanup = tView.cleanup;
  const lCleanup = lView[CLEANUP];
  if (tCleanup !== null) {
    for (let i = 0; i < tCleanup.length - 1; i += 2) {
      if (typeof tCleanup[i] === "string") {
        const targetIdx = tCleanup[i + 3];
        ngDevMode && assertNumber(targetIdx, "cleanup target must be a number");
        if (targetIdx >= 0) {
          lCleanup[targetIdx]();
        } else {
          lCleanup[-targetIdx].unsubscribe();
        }
        i += 2;
      } else {
        const context2 = lCleanup[tCleanup[i + 1]];
        tCleanup[i].call(context2);
      }
    }
  }
  if (lCleanup !== null) {
    lView[CLEANUP] = null;
  }
  const destroyHooks = lView[ON_DESTROY_HOOKS];
  if (destroyHooks !== null) {
    lView[ON_DESTROY_HOOKS] = null;
    for (let i = 0; i < destroyHooks.length; i++) {
      const destroyHooksFn = destroyHooks[i];
      ngDevMode && assertFunction(destroyHooksFn, "Expecting destroy hook to be a function.");
      destroyHooksFn();
    }
  }
}
function executeOnDestroys(tView, lView) {
  ngDevMode && assertNotReactive(executeOnDestroys.name);
  let destroyHooks;
  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
    for (let i = 0; i < destroyHooks.length; i += 2) {
      const context2 = lView[destroyHooks[i]];
      if (!(context2 instanceof NodeInjectorFactory)) {
        const toCall = destroyHooks[i + 1];
        if (Array.isArray(toCall)) {
          for (let j = 0; j < toCall.length; j += 2) {
            const callContext = context2[toCall[j]];
            const hook = toCall[j + 1];
            profiler(4, callContext, hook);
            try {
              hook.call(callContext);
            } finally {
              profiler(5, callContext, hook);
            }
          }
        } else {
          profiler(4, context2, toCall);
          try {
            toCall.call(context2);
          } finally {
            profiler(5, context2, toCall);
          }
        }
      }
    }
  }
}
function getParentRElement(tView, tNode, lView) {
  return getClosestRElement(tView, tNode.parent, lView);
}
function getClosestRElement(tView, tNode, lView) {
  let parentTNode = tNode;
  while (parentTNode !== null && parentTNode.type & (8 | 32 | 128)) {
    tNode = parentTNode;
    parentTNode = tNode.parent;
  }
  if (parentTNode === null) {
    return lView[HOST];
  } else {
    ngDevMode && assertTNodeType(
      parentTNode,
      3 | 4
      /* TNodeType.Container */
    );
    const {
      componentOffset
    } = parentTNode;
    if (componentOffset > -1) {
      ngDevMode && assertTNodeForLView(parentTNode, lView);
      const {
        encapsulation
      } = tView.data[parentTNode.directiveStart + componentOffset];
      if (encapsulation === ViewEncapsulation$1.None || encapsulation === ViewEncapsulation$1.Emulated) {
        return null;
      }
    }
    return getNativeByTNode(parentTNode, lView);
  }
}
function nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {
  ngDevMode && ngDevMode.rendererInsertBefore++;
  renderer.insertBefore(parent, child, beforeNode, isMove);
}
function nativeAppendChild(renderer, parent, child) {
  ngDevMode && ngDevMode.rendererAppendChild++;
  ngDevMode && assertDefined(parent, "parent node must be defined");
  renderer.appendChild(parent, child);
}
function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {
  if (beforeNode !== null) {
    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);
  } else {
    nativeAppendChild(renderer, parent, child);
  }
}
function nativeParentNode(renderer, node) {
  return renderer.parentNode(node);
}
function nativeNextSibling(renderer, node) {
  return renderer.nextSibling(node);
}
function getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {
  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);
}
function getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {
  if (parentTNode.type & (8 | 32)) {
    return getNativeByTNode(parentTNode, lView);
  }
  return null;
}
var _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;
var _processI18nInsertBefore;
function setI18nHandling(getInsertInFrontOfRNodeWithI18n2, processI18nInsertBefore2) {
  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n2;
  _processI18nInsertBefore = processI18nInsertBefore2;
}
function appendChild(tView, lView, childRNode, childTNode) {
  const parentRNode = getParentRElement(tView, childTNode, lView);
  const renderer = lView[RENDERER];
  const parentTNode = childTNode.parent || lView[T_HOST];
  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);
  if (parentRNode != null) {
    if (Array.isArray(childRNode)) {
      for (let i = 0; i < childRNode.length; i++) {
        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);
      }
    } else {
      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);
    }
  }
  _processI18nInsertBefore !== void 0 && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);
}
function getFirstNativeNode(lView, tNode) {
  if (tNode !== null) {
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 32 | 16 | 128
      /* TNodeType.LetDeclaration */
    );
    const tNodeType = tNode.type;
    if (tNodeType & 3) {
      return getNativeByTNode(tNode, lView);
    } else if (tNodeType & 4) {
      return getBeforeNodeForView(-1, lView[tNode.index]);
    } else if (tNodeType & 8) {
      const elIcuContainerChild = tNode.child;
      if (elIcuContainerChild !== null) {
        return getFirstNativeNode(lView, elIcuContainerChild);
      } else {
        const rNodeOrLContainer = lView[tNode.index];
        if (isLContainer(rNodeOrLContainer)) {
          return getBeforeNodeForView(-1, rNodeOrLContainer);
        } else {
          return unwrapRNode(rNodeOrLContainer);
        }
      }
    } else if (tNodeType & 128) {
      return getFirstNativeNode(lView, tNode.next);
    } else if (tNodeType & 32) {
      let nextRNode = icuContainerIterate(tNode, lView);
      let rNode = nextRNode();
      return rNode || unwrapRNode(lView[tNode.index]);
    } else {
      const projectionNodes = getProjectionNodes(lView, tNode);
      if (projectionNodes !== null) {
        if (Array.isArray(projectionNodes)) {
          return projectionNodes[0];
        }
        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        return getFirstNativeNode(parentView, projectionNodes);
      } else {
        return getFirstNativeNode(lView, tNode.next);
      }
    }
  }
  return null;
}
function getProjectionNodes(lView, tNode) {
  if (tNode !== null) {
    const componentView = lView[DECLARATION_COMPONENT_VIEW];
    const componentHost = componentView[T_HOST];
    const slotIdx = tNode.projection;
    ngDevMode && assertProjectionSlots(lView);
    return componentHost.projection[slotIdx];
  }
  return null;
}
function getBeforeNodeForView(viewIndexInContainer, lContainer) {
  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;
  if (nextViewIndex < lContainer.length) {
    const lView = lContainer[nextViewIndex];
    const firstTNodeOfView = lView[TVIEW].firstChild;
    if (firstTNodeOfView !== null) {
      return getFirstNativeNode(lView, firstTNodeOfView);
    }
  }
  return lContainer[NATIVE];
}
function nativeRemoveNode(renderer, rNode, isHostElement) {
  ngDevMode && ngDevMode.rendererRemoveNode++;
  renderer.removeChild(null, rNode, isHostElement);
}
function applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {
  while (tNode != null) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    if (tNode.type === 128) {
      tNode = tNode.next;
      continue;
    }
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 16 | 32
      /* TNodeType.Icu */
    );
    const rawSlotValue = lView[tNode.index];
    const tNodeType = tNode.type;
    if (isProjection) {
      if (action === 0) {
        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
        tNode.flags |= 2;
      }
    }
    if ((tNode.flags & 32) !== 32) {
      if (tNodeType & 8) {
        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 32) {
        const nextRNode = icuContainerIterate(tNode, lView);
        let rNode;
        while (rNode = nextRNode()) {
          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
        }
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 16) {
        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);
      } else {
        ngDevMode && assertTNodeType(
          tNode,
          3 | 4
          /* TNodeType.Container */
        );
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      }
    }
    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }
}
function applyView(tView, lView, renderer, action, parentRElement, beforeNode) {
  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);
}
function applyProjection(tView, lView, tProjectionNode) {
  const renderer = lView[RENDERER];
  const parentRNode = getParentRElement(tView, tProjectionNode, lView);
  const parentTNode = tProjectionNode.parent || lView[T_HOST];
  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);
  applyProjectionRecursive(renderer, 0, lView, tProjectionNode, parentRNode, beforeNode);
}
function applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {
  const componentLView = lView[DECLARATION_COMPONENT_VIEW];
  const componentNode = componentLView[T_HOST];
  ngDevMode && assertEqual(typeof tProjectionNode.projection, "number", "expecting projection index");
  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];
  if (Array.isArray(nodeToProjectOrRNodes)) {
    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {
      const rNode = nodeToProjectOrRNodes[i];
      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
    }
  } else {
    let nodeToProject = nodeToProjectOrRNodes;
    const projectedComponentLView = componentLView[PARENT];
    if (hasInSkipHydrationBlockFlag(tProjectionNode)) {
      nodeToProject.flags |= 128;
    }
    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);
  }
}
function applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {
  ngDevMode && assertLContainer(lContainer);
  const anchor = lContainer[NATIVE];
  const native = unwrapRNode(lContainer);
  if (anchor !== native) {
    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);
  }
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const lView = lContainer[i];
    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);
  }
}
function applyStyling(renderer, isClassBased, rNode, prop, value) {
  if (isClassBased) {
    if (!value) {
      ngDevMode && ngDevMode.rendererRemoveClass++;
      renderer.removeClass(rNode, prop);
    } else {
      ngDevMode && ngDevMode.rendererAddClass++;
      renderer.addClass(rNode, prop);
    }
  } else {
    let flags = prop.indexOf("-") === -1 ? void 0 : RendererStyleFlags2.DashCase;
    if (value == null) {
      ngDevMode && ngDevMode.rendererRemoveStyle++;
      renderer.removeStyle(rNode, prop, flags);
    } else {
      const isImportant = typeof value === "string" ? value.endsWith("!important") : false;
      if (isImportant) {
        value = value.slice(0, -10);
        flags |= RendererStyleFlags2.Important;
      }
      ngDevMode && ngDevMode.rendererSetStyle++;
      renderer.setStyle(rNode, prop, value, flags);
    }
  }
}
function writeDirectStyle(renderer, element, newValue) {
  ngDevMode && assertString(newValue, "'newValue' should be a string");
  renderer.setAttribute(element, "style", newValue);
  ngDevMode && ngDevMode.rendererSetStyle++;
}
function writeDirectClass(renderer, element, newValue) {
  ngDevMode && assertString(newValue, "'newValue' should be a string");
  if (newValue === "") {
    renderer.removeAttribute(element, "class");
  } else {
    renderer.setAttribute(element, "class", newValue);
  }
  ngDevMode && ngDevMode.rendererSetClassName++;
}
function setupStaticAttributes(renderer, element, tNode) {
  const {
    mergedAttrs,
    classes,
    styles
  } = tNode;
  if (mergedAttrs !== null) {
    setUpAttributes(renderer, element, mergedAttrs);
  }
  if (classes !== null) {
    writeDirectClass(renderer, element, classes);
  }
  if (styles !== null) {
    writeDirectStyle(renderer, element, styles);
  }
}
var NO_CHANGE = typeof ngDevMode === "undefined" || ngDevMode ? {
  __brand__: "NO_CHANGE"
} : {};
function \u0275\u0275advance(delta = 1) {
  ngDevMode && assertGreaterThan(delta, 0, "Can only advance forward");
  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());
}
function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
  ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);
  if (!checkNoChangesMode) {
    const hooksInitPhaseCompleted = (lView[FLAGS] & 3) === 3;
    if (hooksInitPhaseCompleted) {
      const preOrderCheckHooks = tView.preOrderCheckHooks;
      if (preOrderCheckHooks !== null) {
        executeCheckHooks(lView, preOrderCheckHooks, index);
      }
    } else {
      const preOrderHooks = tView.preOrderHooks;
      if (preOrderHooks !== null) {
        executeInitAndCheckHooks(lView, preOrderHooks, 0, index);
      }
    }
  }
  setSelectedIndex(index);
}
function \u0275\u0275directiveInject(token, flags = InjectFlags.Default) {
  const lView = getLView();
  if (lView === null) {
    ngDevMode && assertInjectImplementationNotEqual(\u0275\u0275directiveInject);
    return \u0275\u0275inject(token, flags);
  }
  const tNode = getCurrentTNode();
  const value = getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);
  ngDevMode && emitInjectEvent(token, value, flags);
  return value;
}
function \u0275\u0275invalidFactory() {
  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : "invalid";
  throw new Error(msg);
}
function writeToDirectiveInput(def, instance, publicName, privateName, flags, value) {
  const prevConsumer = setActiveConsumer(null);
  try {
    let inputSignalNode = null;
    if ((flags & InputFlags.SignalBased) !== 0) {
      const field = instance[privateName];
      inputSignalNode = field[SIGNAL];
    }
    if (inputSignalNode !== null && inputSignalNode.transformFn !== void 0) {
      value = inputSignalNode.transformFn(value);
    }
    if ((flags & InputFlags.HasDecoratorInputTransform) !== 0) {
      value = def.inputTransforms[privateName].call(instance, value);
    }
    if (def.setInput !== null) {
      def.setInput(instance, inputSignalNode, value, publicName, privateName);
    } else {
      applyValueToInputField(instance, inputSignalNode, privateName, value);
    }
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function processHostBindingOpCodes(tView, lView) {
  const hostBindingOpCodes = tView.hostBindingOpCodes;
  if (hostBindingOpCodes === null) return;
  try {
    for (let i = 0; i < hostBindingOpCodes.length; i++) {
      const opCode = hostBindingOpCodes[i];
      if (opCode < 0) {
        setSelectedIndex(~opCode);
      } else {
        const directiveIdx = opCode;
        const bindingRootIndx = hostBindingOpCodes[++i];
        const hostBindingFn = hostBindingOpCodes[++i];
        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
        const context2 = lView[directiveIdx];
        hostBindingFn(2, context2);
      }
    }
  } finally {
    setSelectedIndex(-1);
  }
}
function createLView(parentLView, tView, context2, flags, host, tHostNode, environment2, renderer, injector, embeddedViewInjector, hydrationInfo) {
  const lView = tView.blueprint.slice();
  lView[HOST] = host;
  lView[FLAGS] = flags | 4 | 128 | 8 | 64;
  if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 2048) {
    lView[FLAGS] |= 2048;
  }
  resetPreOrderHookFlags(lView);
  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);
  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
  lView[CONTEXT] = context2;
  lView[ENVIRONMENT] = environment2 || parentLView && parentLView[ENVIRONMENT];
  ngDevMode && assertDefined(lView[ENVIRONMENT], "LViewEnvironment is required");
  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];
  ngDevMode && assertDefined(lView[RENDERER], "Renderer is required");
  lView[INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;
  lView[T_HOST] = tHostNode;
  lView[ID] = getUniqueLViewId();
  lView[HYDRATION] = hydrationInfo;
  lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;
  ngDevMode && assertEqual(tView.type == 2 ? parentLView !== null : true, true, "Embedded views must have parentLView");
  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2 ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
  return lView;
}
function getOrCreateTNode(tView, index, type, name, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, "TNodes can't be in the LView header.");
  ngDevMode && assertPureTNodeType(type);
  let tNode = tView.data[index];
  if (tNode === null) {
    tNode = createTNodeAtIndex(tView, index, type, name, attrs);
    if (isInI18nBlock()) {
      tNode.flags |= 32;
    }
  } else if (tNode.type & 64) {
    tNode.type = type;
    tNode.value = name;
    tNode.attrs = attrs;
    const parent = getCurrentParentTNode();
    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;
    ngDevMode && assertTNodeForTView(tNode, tView);
    ngDevMode && assertEqual(index, tNode.index, "Expecting same index");
  }
  setCurrentTNode(tNode, true);
  return tNode;
}
function createTNodeAtIndex(tView, index, type, name, attrs) {
  const currentTNode = getCurrentTNodePlaceholderOk();
  const isParent = isCurrentTNodeParent();
  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;
  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs);
  if (tView.firstChild === null) {
    tView.firstChild = tNode;
  }
  if (currentTNode !== null) {
    if (isParent) {
      if (currentTNode.child == null && tNode.parent !== null) {
        currentTNode.child = tNode;
      }
    } else {
      if (currentTNode.next === null) {
        currentTNode.next = tNode;
        tNode.prev = currentTNode;
      }
    }
  }
  return tNode;
}
function allocExpando(tView, lView, numSlotsToAlloc, initialValue) {
  if (numSlotsToAlloc === 0) return -1;
  if (ngDevMode) {
    assertFirstCreatePass(tView);
    assertSame(tView, lView[TVIEW], "`LView` must be associated with `TView`!");
    assertEqual(tView.data.length, lView.length, "Expecting LView to be same size as TView");
    assertEqual(tView.data.length, tView.blueprint.length, "Expecting Blueprint to be same size as TView");
    assertFirstUpdatePass(tView);
  }
  const allocIdx = lView.length;
  for (let i = 0; i < numSlotsToAlloc; i++) {
    lView.push(initialValue);
    tView.blueprint.push(initialValue);
    tView.data.push(null);
  }
  return allocIdx;
}
function executeTemplate(tView, lView, templateFn, rf, context2) {
  const prevSelectedIndex = getSelectedIndex();
  const isUpdatePhase = rf & 2;
  try {
    setSelectedIndex(-1);
    if (isUpdatePhase && lView.length > HEADER_OFFSET) {
      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());
    }
    const preHookType = isUpdatePhase ? 2 : 0;
    profiler(preHookType, context2);
    templateFn(rf, context2);
  } finally {
    setSelectedIndex(prevSelectedIndex);
    const postHookType = isUpdatePhase ? 3 : 1;
    profiler(postHookType, context2);
  }
}
function executeContentQueries(tView, tNode, lView) {
  if (isContentQueryHost(tNode)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const start = tNode.directiveStart;
      const end = tNode.directiveEnd;
      for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
        const def = tView.data[directiveIndex];
        if (def.contentQueries) {
          const directiveInstance = lView[directiveIndex];
          ngDevMode && assertDefined(directiveIndex, "Incorrect reference to a directive defining a content query");
          def.contentQueries(1, directiveInstance, directiveIndex);
        }
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function createDirectivesInstances(tView, lView, tNode) {
  if (!getBindingsEnabled()) return;
  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));
  if ((tNode.flags & 64) === 64) {
    invokeDirectivesHostBindings(tView, lView, tNode);
  }
}
function saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {
  const localNames = tNode.localNames;
  if (localNames !== null) {
    let localIndex = tNode.index + 1;
    for (let i = 0; i < localNames.length; i += 2) {
      const index = localNames[i + 1];
      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];
      viewData[localIndex++] = value;
    }
  }
}
function getOrCreateComponentTView(def) {
  const tView = def.tView;
  if (tView === null || tView.incompleteFirstPass) {
    const declTNode = null;
    return def.tView = createTView(1, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts, def.id);
  }
  return tView;
}
function createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory, ssrId) {
  ngDevMode && ngDevMode.tView++;
  const bindingStartIndex = HEADER_OFFSET + decls;
  const initialViewLength = bindingStartIndex + vars;
  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
  const consts = typeof constsOrFactory === "function" ? constsOrFactory() : constsOrFactory;
  const tView = blueprint[TVIEW] = {
    type,
    blueprint,
    template: templateFn,
    queries: null,
    viewQuery,
    declTNode,
    data: blueprint.slice().fill(null, bindingStartIndex),
    bindingStartIndex,
    expandoStartIndex: initialViewLength,
    hostBindingOpCodes: null,
    firstCreatePass: true,
    firstUpdatePass: true,
    staticViewQueries: false,
    staticContentQueries: false,
    preOrderHooks: null,
    preOrderCheckHooks: null,
    contentHooks: null,
    contentCheckHooks: null,
    viewHooks: null,
    viewCheckHooks: null,
    destroyHooks: null,
    cleanup: null,
    contentQueries: null,
    components: null,
    directiveRegistry: typeof directives === "function" ? directives() : directives,
    pipeRegistry: typeof pipes === "function" ? pipes() : pipes,
    firstChild: null,
    schemas,
    consts,
    incompleteFirstPass: false,
    ssrId
  };
  if (ngDevMode) {
    Object.seal(tView);
  }
  return tView;
}
function createViewBlueprint(bindingStartIndex, initialViewLength) {
  const blueprint = [];
  for (let i = 0; i < initialViewLength; i++) {
    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
  }
  return blueprint;
}
function locateHostElement(renderer, elementOrSelector, encapsulation, injector) {
  const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);
  const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation$1.ShadowDom;
  const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);
  applyRootElementTransform(rootElement);
  return rootElement;
}
function applyRootElementTransform(rootElement) {
  _applyRootElementTransformImpl(rootElement);
}
var _applyRootElementTransformImpl = () => null;
function storeCleanupWithContext(tView, lView, context2, cleanupFn) {
  const lCleanup = getOrCreateLViewCleanup(lView);
  ngDevMode && assertDefined(context2, "Cleanup context is mandatory when registering framework-level destroy hooks");
  lCleanup.push(context2);
  if (tView.firstCreatePass) {
    getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
  } else {
    if (ngDevMode) {
      Object.freeze(getOrCreateTViewCleanup(tView));
    }
  }
}
function createTNode(tView, tParent, type, index, value, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, "TNodes can't be in the LView header.");
  ngDevMode && assertNotSame(attrs, void 0, "'undefined' is not valid value for 'attrs'");
  ngDevMode && ngDevMode.tNode++;
  ngDevMode && tParent && assertTNodeForTView(tParent, tView);
  let injectorIndex = tParent ? tParent.injectorIndex : -1;
  let flags = 0;
  if (isInSkipHydrationBlock$1()) {
    flags |= 128;
  }
  const tNode = {
    type,
    index,
    insertBeforeIndex: null,
    injectorIndex,
    directiveStart: -1,
    directiveEnd: -1,
    directiveStylingLast: -1,
    componentOffset: -1,
    propertyBindings: null,
    flags,
    providerIndexes: 0,
    value,
    attrs,
    mergedAttrs: null,
    localNames: null,
    initialInputs: void 0,
    inputs: null,
    outputs: null,
    tView: null,
    next: null,
    prev: null,
    projectionNext: null,
    child: null,
    parent: tParent,
    projection: null,
    styles: null,
    stylesWithoutHost: null,
    residualStyles: void 0,
    classes: null,
    classesWithoutHost: null,
    residualClasses: void 0,
    classBindings: 0,
    styleBindings: 0
  };
  if (ngDevMode) {
    Object.seal(tNode);
  }
  return tNode;
}
function captureNodeBindings(mode, aliasMap, directiveIndex, bindingsResult, hostDirectiveAliasMap) {
  for (let publicName in aliasMap) {
    if (!aliasMap.hasOwnProperty(publicName)) {
      continue;
    }
    const value = aliasMap[publicName];
    if (value === void 0) {
      continue;
    }
    bindingsResult ??= {};
    let internalName;
    let inputFlags = InputFlags.None;
    if (Array.isArray(value)) {
      internalName = value[0];
      inputFlags = value[1];
    } else {
      internalName = value;
    }
    let finalPublicName = publicName;
    if (hostDirectiveAliasMap !== null) {
      if (!hostDirectiveAliasMap.hasOwnProperty(publicName)) {
        continue;
      }
      finalPublicName = hostDirectiveAliasMap[publicName];
    }
    if (mode === 0) {
      addPropertyBinding(bindingsResult, directiveIndex, finalPublicName, internalName, inputFlags);
    } else {
      addPropertyBinding(bindingsResult, directiveIndex, finalPublicName, internalName);
    }
  }
  return bindingsResult;
}
function addPropertyBinding(bindings, directiveIndex, publicName, internalName, inputFlags) {
  let values;
  if (bindings.hasOwnProperty(publicName)) {
    (values = bindings[publicName]).push(directiveIndex, internalName);
  } else {
    values = bindings[publicName] = [directiveIndex, internalName];
  }
  if (inputFlags !== void 0) {
    values.push(inputFlags);
  }
}
function initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefinitionMap) {
  ngDevMode && assertFirstCreatePass(tView);
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  const tViewData = tView.data;
  const tNodeAttrs = tNode.attrs;
  const inputsFromAttrs = [];
  let inputsStore = null;
  let outputsStore = null;
  for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
    const directiveDef = tViewData[directiveIndex];
    const aliasData = hostDirectiveDefinitionMap ? hostDirectiveDefinitionMap.get(directiveDef) : null;
    const aliasedInputs = aliasData ? aliasData.inputs : null;
    const aliasedOutputs = aliasData ? aliasData.outputs : null;
    inputsStore = captureNodeBindings(0, directiveDef.inputs, directiveIndex, inputsStore, aliasedInputs);
    outputsStore = captureNodeBindings(1, directiveDef.outputs, directiveIndex, outputsStore, aliasedOutputs);
    const initialInputs = inputsStore !== null && tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(inputsStore, directiveIndex, tNodeAttrs) : null;
    inputsFromAttrs.push(initialInputs);
  }
  if (inputsStore !== null) {
    if (inputsStore.hasOwnProperty("class")) {
      tNode.flags |= 8;
    }
    if (inputsStore.hasOwnProperty("style")) {
      tNode.flags |= 16;
    }
  }
  tNode.initialInputs = inputsFromAttrs;
  tNode.inputs = inputsStore;
  tNode.outputs = outputsStore;
}
function mapPropName(name) {
  if (name === "class") return "className";
  if (name === "for") return "htmlFor";
  if (name === "formaction") return "formAction";
  if (name === "innerHtml") return "innerHTML";
  if (name === "readonly") return "readOnly";
  if (name === "tabindex") return "tabIndex";
  return name;
}
function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
  ngDevMode && assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
  const element = getNativeByTNode(tNode, lView);
  let inputData = tNode.inputs;
  let dataValue;
  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {
    setInputsForProperty(tView, lView, dataValue, propName, value);
    if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);
    if (ngDevMode) {
      setNgReflectProperties(lView, element, tNode.type, dataValue, value);
    }
  } else if (tNode.type & 3) {
    propName = mapPropName(propName);
    if (ngDevMode) {
      validateAgainstEventProperties(propName);
      if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {
        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
      }
      ngDevMode.rendererSetProperty++;
    }
    value = sanitizer != null ? sanitizer(value, tNode.value || "", propName) : value;
    renderer.setProperty(element, propName, value);
  } else if (tNode.type & 12) {
    if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {
      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
    }
  }
}
function markDirtyIfOnPush(lView, viewIndex) {
  ngDevMode && assertLView(lView);
  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);
  if (!(childComponentLView[FLAGS] & 16)) {
    childComponentLView[FLAGS] |= 64;
  }
}
function setNgReflectProperty(lView, element, type, attrName, value) {
  const renderer = lView[RENDERER];
  attrName = normalizeDebugBindingName(attrName);
  const debugValue = normalizeDebugBindingValue(value);
  if (type & 3) {
    if (value == null) {
      renderer.removeAttribute(element, attrName);
    } else {
      renderer.setAttribute(element, attrName, debugValue);
    }
  } else {
    const textContent = escapeCommentText(`bindings=${JSON.stringify({
      [attrName]: debugValue
    }, null, 2)}`);
    renderer.setValue(element, textContent);
  }
}
function setNgReflectProperties(lView, element, type, dataValue, value) {
  if (type & (3 | 4)) {
    for (let i = 0; i < dataValue.length; i += 3) {
      setNgReflectProperty(lView, element, type, dataValue[i + 1], value);
    }
  }
}
function resolveDirectives(tView, lView, tNode, localRefs) {
  ngDevMode && assertFirstCreatePass(tView);
  if (getBindingsEnabled()) {
    const exportsMap = localRefs === null ? null : {
      "": -1
    };
    const matchResult = findDirectiveDefMatches(tView, tNode);
    let directiveDefs;
    let hostDirectiveDefs;
    if (matchResult === null) {
      directiveDefs = hostDirectiveDefs = null;
    } else {
      [directiveDefs, hostDirectiveDefs] = matchResult;
    }
    if (directiveDefs !== null) {
      initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs);
    }
    if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);
  }
  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
}
function initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs) {
  ngDevMode && assertFirstCreatePass(tView);
  for (let i = 0; i < directives.length; i++) {
    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, directives[i].type);
  }
  initTNodeFlags(tNode, tView.data.length, directives.length);
  for (let i = 0; i < directives.length; i++) {
    const def = directives[i];
    if (def.providersResolver) def.providersResolver(def);
  }
  let preOrderHooksFound = false;
  let preOrderCheckHooksFound = false;
  let directiveIdx = allocExpando(tView, lView, directives.length, null);
  ngDevMode && assertSame(directiveIdx, tNode.directiveStart, "TNode.directiveStart should point to just allocated space");
  for (let i = 0; i < directives.length; i++) {
    const def = directives[i];
    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);
    saveNameToExportMap(directiveIdx, def, exportsMap);
    if (def.contentQueries !== null) tNode.flags |= 4;
    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0) tNode.flags |= 64;
    const lifeCycleHooks = def.type.prototype;
    if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
      (tView.preOrderHooks ??= []).push(tNode.index);
      preOrderHooksFound = true;
    }
    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
      (tView.preOrderCheckHooks ??= []).push(tNode.index);
      preOrderCheckHooksFound = true;
    }
    directiveIdx++;
  }
  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);
}
function registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {
  ngDevMode && assertFirstCreatePass(tView);
  const hostBindings = def.hostBindings;
  if (hostBindings) {
    let hostBindingOpCodes = tView.hostBindingOpCodes;
    if (hostBindingOpCodes === null) {
      hostBindingOpCodes = tView.hostBindingOpCodes = [];
    }
    const elementIndx = ~tNode.index;
    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {
      hostBindingOpCodes.push(elementIndx);
    }
    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);
  }
}
function lastSelectedElementIdx(hostBindingOpCodes) {
  let i = hostBindingOpCodes.length;
  while (i > 0) {
    const value = hostBindingOpCodes[--i];
    if (typeof value === "number" && value < 0) {
      return value;
    }
  }
  return 0;
}
function instantiateAllDirectives(tView, lView, tNode, native) {
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  if (isComponentHost(tNode)) {
    ngDevMode && assertTNodeType(
      tNode,
      3
      /* TNodeType.AnyRNode */
    );
    addComponentLogic(lView, tNode, tView.data[start + tNode.componentOffset]);
  }
  if (!tView.firstCreatePass) {
    getOrCreateNodeInjectorForNode(tNode, lView);
  }
  attachPatchData(native, lView);
  const initialInputs = tNode.initialInputs;
  for (let i = start; i < end; i++) {
    const def = tView.data[i];
    const directive = getNodeInjectable(lView, tView, i, tNode);
    attachPatchData(directive, lView);
    if (initialInputs !== null) {
      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
    }
    if (isComponentDef(def)) {
      const componentView = getComponentLViewByIndex(tNode.index, lView);
      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);
    }
  }
}
function invokeDirectivesHostBindings(tView, lView, tNode) {
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  const elementIndex = tNode.index;
  const currentDirectiveIndex = getCurrentDirectiveIndex();
  try {
    setSelectedIndex(elementIndex);
    for (let dirIndex = start; dirIndex < end; dirIndex++) {
      const def = tView.data[dirIndex];
      const directive = lView[dirIndex];
      setCurrentDirectiveIndex(dirIndex);
      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
        invokeHostBindingsInCreationMode(def, directive);
      }
    }
  } finally {
    setSelectedIndex(-1);
    setCurrentDirectiveIndex(currentDirectiveIndex);
  }
}
function invokeHostBindingsInCreationMode(def, directive) {
  if (def.hostBindings !== null) {
    def.hostBindings(1, directive);
  }
}
function findDirectiveDefMatches(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && assertTNodeType(
    tNode,
    3 | 12
    /* TNodeType.AnyContainer */
  );
  const registry = tView.directiveRegistry;
  let matches = null;
  let hostDirectiveDefs = null;
  if (registry) {
    for (let i = 0; i < registry.length; i++) {
      const def = registry[i];
      if (isNodeMatchingSelectorList(
        tNode,
        def.selectors,
        /* isProjectionMode */
        false
      )) {
        matches || (matches = []);
        if (isComponentDef(def)) {
          if (ngDevMode) {
            assertTNodeType(tNode, 2, `"${tNode.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${stringify(def.type)} component.`);
            if (isComponentHost(tNode)) {
              throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);
            }
          }
          if (def.findHostDirectiveDefs !== null) {
            const hostDirectiveMatches = [];
            hostDirectiveDefs = hostDirectiveDefs || /* @__PURE__ */ new Map();
            def.findHostDirectiveDefs(def, hostDirectiveMatches, hostDirectiveDefs);
            matches.unshift(...hostDirectiveMatches, def);
            const componentOffset = hostDirectiveMatches.length;
            markAsComponentHost(tView, tNode, componentOffset);
          } else {
            matches.unshift(def);
            markAsComponentHost(tView, tNode, 0);
          }
        } else {
          hostDirectiveDefs = hostDirectiveDefs || /* @__PURE__ */ new Map();
          def.findHostDirectiveDefs?.(def, matches, hostDirectiveDefs);
          matches.push(def);
        }
      }
    }
  }
  ngDevMode && matches !== null && assertNoDuplicateDirectives(matches);
  return matches === null ? null : [matches, hostDirectiveDefs];
}
function markAsComponentHost(tView, hostTNode, componentOffset) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && assertGreaterThan(componentOffset, -1, "componentOffset must be great than -1");
  hostTNode.componentOffset = componentOffset;
  (tView.components ??= []).push(hostTNode.index);
}
function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
  if (localRefs) {
    const localNames = tNode.localNames = [];
    for (let i = 0; i < localRefs.length; i += 2) {
      const index = exportsMap[localRefs[i + 1]];
      if (index == null) throw new RuntimeError(-301, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);
      localNames.push(localRefs[i], index);
    }
  }
}
function saveNameToExportMap(directiveIdx, def, exportsMap) {
  if (exportsMap) {
    if (def.exportAs) {
      for (let i = 0; i < def.exportAs.length; i++) {
        exportsMap[def.exportAs[i]] = directiveIdx;
      }
    }
    if (isComponentDef(def)) exportsMap[""] = directiveIdx;
  }
}
function initTNodeFlags(tNode, index, numberOfDirectives) {
  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, "Reached the max number of directives");
  tNode.flags |= 1;
  tNode.directiveStart = index;
  tNode.directiveEnd = index + numberOfDirectives;
  tNode.providerIndexes = index;
}
function configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {
  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, "Must be in Expando section");
  tView.data[directiveIndex] = def;
  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), \u0275\u0275directiveInject);
  tView.blueprint[directiveIndex] = nodeInjectorFactory;
  lView[directiveIndex] = nodeInjectorFactory;
  registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);
}
function addComponentLogic(lView, hostTNode, def) {
  const native = getNativeByTNode(hostTNode, lView);
  const tView = getOrCreateComponentTView(def);
  const rendererFactory = lView[ENVIRONMENT].rendererFactory;
  let lViewFlags = 16;
  if (def.signals) {
    lViewFlags = 4096;
  } else if (def.onPush) {
    lViewFlags = 64;
  }
  const componentView = addToViewTree(lView, createLView(lView, tView, null, lViewFlags, native, hostTNode, null, rendererFactory.createRenderer(native, def), null, null, null));
  lView[hostTNode.index] = componentView;
}
function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
  if (ngDevMode) {
    assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
    validateAgainstEventAttributes(name);
    assertTNodeType(tNode, 2, `Attempted to set attribute \`${name}\` on a container node. Host bindings are not valid on ng-container or ng-template.`);
  }
  const element = getNativeByTNode(tNode, lView);
  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);
}
function setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {
  if (value == null) {
    ngDevMode && ngDevMode.rendererRemoveAttribute++;
    renderer.removeAttribute(element, name, namespace);
  } else {
    ngDevMode && ngDevMode.rendererSetAttribute++;
    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || "", name);
    renderer.setAttribute(element, name, strValue, namespace);
  }
}
function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
  const initialInputs = initialInputData[directiveIndex];
  if (initialInputs !== null) {
    for (let i = 0; i < initialInputs.length; ) {
      const publicName = initialInputs[i++];
      const privateName = initialInputs[i++];
      const flags = initialInputs[i++];
      const value = initialInputs[i++];
      writeToDirectiveInput(def, instance, publicName, privateName, flags, value);
      if (ngDevMode) {
        const nativeElement = getNativeByTNode(tNode, lView);
        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);
      }
    }
  }
}
function generateInitialInputs(inputs, directiveIndex, attrs) {
  let inputsToStore = null;
  let i = 0;
  while (i < attrs.length) {
    const attrName = attrs[i];
    if (attrName === 0) {
      i += 4;
      continue;
    } else if (attrName === 5) {
      i += 2;
      continue;
    }
    if (typeof attrName === "number") break;
    if (inputs.hasOwnProperty(attrName)) {
      if (inputsToStore === null) inputsToStore = [];
      const inputConfig = inputs[attrName];
      for (let j = 0; j < inputConfig.length; j += 3) {
        if (inputConfig[j] === directiveIndex) {
          inputsToStore.push(attrName, inputConfig[j + 1], inputConfig[j + 2], attrs[i + 1]);
          break;
        }
      }
    }
    i += 2;
  }
  return inputsToStore;
}
function createLContainer(hostNative, currentView, native, tNode) {
  ngDevMode && assertLView(currentView);
  const lContainer = [
    hostNative,
    // host native
    true,
    // Boolean `true` in this position signifies that this is an `LContainer`
    0,
    // flags
    currentView,
    // parent
    null,
    // next
    tNode,
    // t_host
    null,
    // dehydrated views
    native,
    // native,
    null,
    // view refs
    null
    // moved views
  ];
  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, "Should allocate correct number of slots for LContainer header.");
  return lContainer;
}
function refreshContentQueries(tView, lView) {
  const contentQueries = tView.contentQueries;
  if (contentQueries !== null) {
    const prevConsumer = setActiveConsumer(null);
    try {
      for (let i = 0; i < contentQueries.length; i += 2) {
        const queryStartIdx = contentQueries[i];
        const directiveDefIdx = contentQueries[i + 1];
        if (directiveDefIdx !== -1) {
          const directiveDef = tView.data[directiveDefIdx];
          ngDevMode && assertDefined(directiveDef, "DirectiveDef not found.");
          ngDevMode && assertDefined(directiveDef.contentQueries, "contentQueries function should be defined");
          setCurrentQueryIndex(queryStartIdx);
          directiveDef.contentQueries(2, lView[directiveDefIdx], directiveDefIdx);
        }
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function addToViewTree(lView, lViewOrLContainer) {
  if (lView[CHILD_HEAD]) {
    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
  } else {
    lView[CHILD_HEAD] = lViewOrLContainer;
  }
  lView[CHILD_TAIL] = lViewOrLContainer;
  return lViewOrLContainer;
}
function executeViewQueryFn(flags, viewQueryFn, component) {
  ngDevMode && assertDefined(viewQueryFn, "View queries function to execute must be defined.");
  setCurrentQueryIndex(0);
  const prevConsumer = setActiveConsumer(null);
  try {
    viewQueryFn(flags, component);
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {
  if (tData[bindingIndex] === null) {
    if (tNode.inputs == null || !tNode.inputs[propertyName]) {
      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
      propBindingIdxs.push(bindingIndex);
      let bindingMetadata = propertyName;
      if (interpolationParts.length > 0) {
        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
      }
      tData[bindingIndex] = bindingMetadata;
    }
  }
}
function getOrCreateLViewCleanup(view) {
  return view[CLEANUP] ??= [];
}
function getOrCreateTViewCleanup(tView) {
  return tView.cleanup ??= [];
}
function loadComponentRenderer(currentDef, tNode, lView) {
  if (currentDef === null || isComponentDef(currentDef)) {
    lView = unwrapLView(lView[tNode.index]);
  }
  return lView[RENDERER];
}
function handleError(lView, error) {
  const injector = lView[INJECTOR];
  const errorHandler2 = injector ? injector.get(ErrorHandler, null) : null;
  errorHandler2 && errorHandler2.handleError(error);
}
function setInputsForProperty(tView, lView, inputs, publicName, value) {
  for (let i = 0; i < inputs.length; ) {
    const index = inputs[i++];
    const privateName = inputs[i++];
    const flags = inputs[i++];
    const instance = lView[index];
    ngDevMode && assertIndexInRange(lView, index);
    const def = tView.data[index];
    writeToDirectiveInput(def, instance, publicName, privateName, flags, value);
  }
}
function textBindingInternal(lView, index, value) {
  ngDevMode && assertString(value, "Value should be a string");
  ngDevMode && assertNotSame(value, NO_CHANGE, "value should not be NO_CHANGE");
  ngDevMode && assertIndexInRange(lView, index);
  const element = getNativeByIndex(index, lView);
  ngDevMode && assertDefined(element, "native element should exist");
  updateTextNode(lView[RENDERER], element, value);
}
function renderComponent(hostLView, componentHostIdx) {
  ngDevMode && assertEqual(isCreationMode(hostLView), true, "Should be run in creation mode");
  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
  const componentTView = componentView[TVIEW];
  syncViewWithBlueprint(componentTView, componentView);
  const hostRNode = componentView[HOST];
  if (hostRNode !== null && componentView[HYDRATION] === null) {
    componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR]);
  }
  renderView(componentTView, componentView, componentView[CONTEXT]);
}
function syncViewWithBlueprint(tView, lView) {
  for (let i = lView.length; i < tView.blueprint.length; i++) {
    lView.push(tView.blueprint[i]);
  }
}
function renderView(tView, lView, context2) {
  ngDevMode && assertEqual(isCreationMode(lView), true, "Should be run in creation mode");
  ngDevMode && assertNotReactive(renderView.name);
  enterView(lView);
  try {
    const viewQuery = tView.viewQuery;
    if (viewQuery !== null) {
      executeViewQueryFn(1, viewQuery, context2);
    }
    const templateFn = tView.template;
    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 1, context2);
    }
    if (tView.firstCreatePass) {
      tView.firstCreatePass = false;
    }
    lView[QUERIES]?.finishViewCreation(tView);
    if (tView.staticContentQueries) {
      refreshContentQueries(tView, lView);
    }
    if (tView.staticViewQueries) {
      executeViewQueryFn(2, tView.viewQuery, context2);
    }
    const components = tView.components;
    if (components !== null) {
      renderChildComponents(lView, components);
    }
  } catch (error) {
    if (tView.firstCreatePass) {
      tView.incompleteFirstPass = true;
      tView.firstCreatePass = false;
    }
    throw error;
  } finally {
    lView[FLAGS] &= ~4;
    leaveView();
  }
}
function renderChildComponents(hostLView, components) {
  for (let i = 0; i < components.length; i++) {
    renderComponent(hostLView, components[i]);
  }
}
function createAndRenderEmbeddedLView(declarationLView, templateTNode, context2, options) {
  const prevConsumer = setActiveConsumer(null);
  try {
    const embeddedTView = templateTNode.tView;
    ngDevMode && assertDefined(embeddedTView, "TView must be defined for a template node.");
    ngDevMode && assertTNodeForLView(templateTNode, declarationLView);
    const isSignalView = declarationLView[FLAGS] & 4096;
    const viewFlags = isSignalView ? 4096 : 16;
    const embeddedLView = createLView(declarationLView, embeddedTView, context2, viewFlags, null, templateTNode, null, null, options?.injector ?? null, options?.embeddedViewInjector ?? null, options?.dehydratedView ?? null);
    const declarationLContainer = declarationLView[templateTNode.index];
    ngDevMode && assertLContainer(declarationLContainer);
    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
    const declarationViewLQueries = declarationLView[QUERIES];
    if (declarationViewLQueries !== null) {
      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
    }
    renderView(embeddedTView, embeddedLView, context2);
    return embeddedLView;
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function getLViewFromLContainer(lContainer, index) {
  const adjustedIndex = CONTAINER_HEADER_OFFSET + index;
  if (adjustedIndex < lContainer.length) {
    const lView = lContainer[adjustedIndex];
    ngDevMode && assertLView(lView);
    return lView;
  }
  return void 0;
}
function shouldAddViewToDom(tNode, dehydratedView) {
  return !dehydratedView || dehydratedView.firstChild === null || hasInSkipHydrationBlockFlag(tNode);
}
function addLViewToLContainer(lContainer, lView, index, addToDOM = true) {
  const tView = lView[TVIEW];
  insertView(tView, lView, lContainer, index);
  if (addToDOM) {
    const beforeNode = getBeforeNodeForView(index, lContainer);
    const renderer = lView[RENDERER];
    const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);
    if (parentRNode !== null) {
      addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);
    }
  }
  const hydrationInfo = lView[HYDRATION];
  if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {
    hydrationInfo.firstChild = null;
  }
}
function removeLViewFromLContainer(lContainer, index) {
  const lView = detachView(lContainer, index);
  if (lView !== void 0) {
    destroyLView(lView[TVIEW], lView);
  }
  return lView;
}
function collectNativeNodes(tView, lView, tNode, result, isProjection = false) {
  while (tNode !== null) {
    if (tNode.type === 128) {
      tNode = isProjection ? tNode.projectionNext : tNode.next;
      continue;
    }
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 16 | 32
      /* TNodeType.Icu */
    );
    const lNode = lView[tNode.index];
    if (lNode !== null) {
      result.push(unwrapRNode(lNode));
    }
    if (isLContainer(lNode)) {
      collectNativeNodesInLContainer(lNode, result);
    }
    const tNodeType = tNode.type;
    if (tNodeType & 8) {
      collectNativeNodes(tView, lView, tNode.child, result);
    } else if (tNodeType & 32) {
      const nextRNode = icuContainerIterate(tNode, lView);
      let rNode;
      while (rNode = nextRNode()) {
        result.push(rNode);
      }
    } else if (tNodeType & 16) {
      const nodesInSlot = getProjectionNodes(lView, tNode);
      if (Array.isArray(nodesInSlot)) {
        result.push(...nodesInSlot);
      } else {
        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
      }
    }
    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }
  return result;
}
function collectNativeNodesInLContainer(lContainer, result) {
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const lViewInAContainer = lContainer[i];
    const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;
    if (lViewFirstChildTNode !== null) {
      collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
    }
  }
  if (lContainer[NATIVE] !== lContainer[HOST]) {
    result.push(lContainer[NATIVE]);
  }
}
var freeConsumers = [];
function getOrBorrowReactiveLViewConsumer(lView) {
  return lView[REACTIVE_TEMPLATE_CONSUMER] ?? borrowReactiveLViewConsumer(lView);
}
function borrowReactiveLViewConsumer(lView) {
  const consumer = freeConsumers.pop() ?? Object.create(REACTIVE_LVIEW_CONSUMER_NODE);
  consumer.lView = lView;
  return consumer;
}
function maybeReturnReactiveLViewConsumer(consumer) {
  if (consumer.lView[REACTIVE_TEMPLATE_CONSUMER] === consumer) {
    return;
  }
  consumer.lView = null;
  freeConsumers.push(consumer);
}
var REACTIVE_LVIEW_CONSUMER_NODE = __spreadProps(__spreadValues({}, REACTIVE_NODE), {
  consumerIsAlwaysLive: true,
  consumerMarkedDirty: (node) => {
    markAncestorsForTraversal(node.lView);
  },
  consumerOnSignalRead() {
    this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;
  }
});
function getOrCreateTemporaryConsumer(lView) {
  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER] ?? Object.create(TEMPORARY_CONSUMER_NODE);
  consumer.lView = lView;
  return consumer;
}
var TEMPORARY_CONSUMER_NODE = __spreadProps(__spreadValues({}, REACTIVE_NODE), {
  consumerIsAlwaysLive: true,
  consumerMarkedDirty: (node) => {
    let parent = getLViewParent(node.lView);
    while (parent && !viewShouldHaveReactiveConsumer(parent[TVIEW])) {
      parent = getLViewParent(parent);
    }
    if (!parent) {
      return;
    }
    markViewForRefresh(parent);
  },
  consumerOnSignalRead() {
    this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;
  }
});
function viewShouldHaveReactiveConsumer(tView) {
  return tView.type !== 2;
}
var MAXIMUM_REFRESH_RERUNS$1 = 100;
function detectChangesInternal(lView, notifyErrorHandler = true, mode = 0) {
  const environment2 = lView[ENVIRONMENT];
  const rendererFactory = environment2.rendererFactory;
  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();
  if (!checkNoChangesMode) {
    rendererFactory.begin?.();
  }
  try {
    detectChangesInViewWhileDirty(lView, mode);
  } catch (error) {
    if (notifyErrorHandler) {
      handleError(lView, error);
    }
    throw error;
  } finally {
    if (!checkNoChangesMode) {
      rendererFactory.end?.();
      environment2.inlineEffectRunner?.flush();
    }
  }
}
function detectChangesInViewWhileDirty(lView, mode) {
  const lastIsRefreshingViewsValue = isRefreshingViews();
  try {
    setIsRefreshingViews(true);
    detectChangesInView(lView, mode);
    if (ngDevMode && isExhaustiveCheckNoChanges()) {
      return;
    }
    let retries = 0;
    while (requiresRefreshOrTraversal(lView)) {
      if (retries === MAXIMUM_REFRESH_RERUNS$1) {
        throw new RuntimeError(103, ngDevMode && "Infinite change detection while trying to refresh views. There may be components which each cause the other to require a refresh, causing an infinite loop.");
      }
      retries++;
      detectChangesInView(
        lView,
        1
        /* ChangeDetectionMode.Targeted */
      );
    }
  } finally {
    setIsRefreshingViews(lastIsRefreshingViewsValue);
  }
}
function checkNoChangesInternal(lView, mode, notifyErrorHandler = true) {
  setIsInCheckNoChangesMode(mode);
  try {
    detectChangesInternal(lView, notifyErrorHandler);
  } finally {
    setIsInCheckNoChangesMode(CheckNoChangesMode.Off);
  }
}
function refreshView(tView, lView, templateFn, context2) {
  ngDevMode && assertEqual(isCreationMode(lView), false, "Should be run in update mode");
  const flags = lView[FLAGS];
  if ((flags & 256) === 256) return;
  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();
  const isInExhaustiveCheckNoChangesPass = ngDevMode && isExhaustiveCheckNoChanges();
  !isInCheckNoChangesPass && lView[ENVIRONMENT].inlineEffectRunner?.flush();
  enterView(lView);
  let returnConsumerToPool = true;
  let prevConsumer = null;
  let currentConsumer = null;
  if (!isInCheckNoChangesPass) {
    if (viewShouldHaveReactiveConsumer(tView)) {
      currentConsumer = getOrBorrowReactiveLViewConsumer(lView);
      prevConsumer = consumerBeforeComputation(currentConsumer);
    } else if (getActiveConsumer() === null) {
      returnConsumerToPool = false;
      currentConsumer = getOrCreateTemporaryConsumer(lView);
      prevConsumer = consumerBeforeComputation(currentConsumer);
    } else if (lView[REACTIVE_TEMPLATE_CONSUMER]) {
      consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);
      lView[REACTIVE_TEMPLATE_CONSUMER] = null;
    }
  }
  try {
    resetPreOrderHookFlags(lView);
    setBindingIndex(tView.bindingStartIndex);
    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 2, context2);
    }
    const hooksInitPhaseCompleted = (flags & 3) === 3;
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const preOrderCheckHooks = tView.preOrderCheckHooks;
        if (preOrderCheckHooks !== null) {
          executeCheckHooks(lView, preOrderCheckHooks, null);
        }
      } else {
        const preOrderHooks = tView.preOrderHooks;
        if (preOrderHooks !== null) {
          executeInitAndCheckHooks(lView, preOrderHooks, 0, null);
        }
        incrementInitPhaseFlags(
          lView,
          0
          /* InitPhaseState.OnInitHooksToBeRun */
        );
      }
    }
    if (!isInExhaustiveCheckNoChangesPass) {
      markTransplantedViewsForRefresh(lView);
    }
    detectChangesInEmbeddedViews(
      lView,
      0
      /* ChangeDetectionMode.Global */
    );
    if (tView.contentQueries !== null) {
      refreshContentQueries(tView, lView);
    }
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const contentCheckHooks = tView.contentCheckHooks;
        if (contentCheckHooks !== null) {
          executeCheckHooks(lView, contentCheckHooks);
        }
      } else {
        const contentHooks = tView.contentHooks;
        if (contentHooks !== null) {
          executeInitAndCheckHooks(
            lView,
            contentHooks,
            1
            /* InitPhaseState.AfterContentInitHooksToBeRun */
          );
        }
        incrementInitPhaseFlags(
          lView,
          1
          /* InitPhaseState.AfterContentInitHooksToBeRun */
        );
      }
    }
    processHostBindingOpCodes(tView, lView);
    const components = tView.components;
    if (components !== null) {
      detectChangesInChildComponents(
        lView,
        components,
        0
        /* ChangeDetectionMode.Global */
      );
    }
    const viewQuery = tView.viewQuery;
    if (viewQuery !== null) {
      executeViewQueryFn(2, viewQuery, context2);
    }
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const viewCheckHooks = tView.viewCheckHooks;
        if (viewCheckHooks !== null) {
          executeCheckHooks(lView, viewCheckHooks);
        }
      } else {
        const viewHooks = tView.viewHooks;
        if (viewHooks !== null) {
          executeInitAndCheckHooks(
            lView,
            viewHooks,
            2
            /* InitPhaseState.AfterViewInitHooksToBeRun */
          );
        }
        incrementInitPhaseFlags(
          lView,
          2
          /* InitPhaseState.AfterViewInitHooksToBeRun */
        );
      }
    }
    if (tView.firstUpdatePass === true) {
      tView.firstUpdatePass = false;
    }
    if (lView[EFFECTS_TO_SCHEDULE]) {
      for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {
        notifyEffect();
      }
      lView[EFFECTS_TO_SCHEDULE] = null;
    }
    if (!isInCheckNoChangesPass) {
      lView[FLAGS] &= ~(64 | 8);
    }
  } catch (e) {
    if (!isInCheckNoChangesPass) {
      markAncestorsForTraversal(lView);
    }
    throw e;
  } finally {
    if (currentConsumer !== null) {
      consumerAfterComputation(currentConsumer, prevConsumer);
      if (returnConsumerToPool) {
        maybeReturnReactiveLViewConsumer(currentConsumer);
      }
    }
    leaveView();
  }
}
function detectChangesInEmbeddedViews(lView, mode) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      const embeddedLView = lContainer[i];
      detectChangesInViewIfAttached(embeddedLView, mode);
    }
  }
}
function markTransplantedViewsForRefresh(lView) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    if (!(lContainer[FLAGS] & LContainerFlags.HasTransplantedViews)) continue;
    const movedViews = lContainer[MOVED_VIEWS];
    ngDevMode && assertDefined(movedViews, "Transplanted View flags set but missing MOVED_VIEWS");
    for (let i = 0; i < movedViews.length; i++) {
      const movedLView = movedViews[i];
      markViewForRefresh(movedLView);
    }
  }
}
function detectChangesInComponent(hostLView, componentHostIdx, mode) {
  ngDevMode && assertEqual(isCreationMode(hostLView), false, "Should be run in update mode");
  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
  detectChangesInViewIfAttached(componentView, mode);
}
function detectChangesInViewIfAttached(lView, mode) {
  if (!viewAttachedToChangeDetector(lView)) {
    return;
  }
  detectChangesInView(lView, mode);
}
function detectChangesInView(lView, mode) {
  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();
  const tView = lView[TVIEW];
  const flags = lView[FLAGS];
  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];
  let shouldRefreshView = !!(mode === 0 && flags & 16);
  shouldRefreshView ||= !!(flags & 64 && mode === 0 && !isInCheckNoChangesPass);
  shouldRefreshView ||= !!(flags & 1024);
  shouldRefreshView ||= !!(consumer?.dirty && consumerPollProducersForChange(consumer));
  shouldRefreshView ||= !!(ngDevMode && isExhaustiveCheckNoChanges());
  if (consumer) {
    consumer.dirty = false;
  }
  lView[FLAGS] &= ~(8192 | 1024);
  if (shouldRefreshView) {
    refreshView(tView, lView, tView.template, lView[CONTEXT]);
  } else if (flags & 8192) {
    detectChangesInEmbeddedViews(
      lView,
      1
      /* ChangeDetectionMode.Targeted */
    );
    const components = tView.components;
    if (components !== null) {
      detectChangesInChildComponents(
        lView,
        components,
        1
        /* ChangeDetectionMode.Targeted */
      );
    }
  }
}
function detectChangesInChildComponents(hostLView, components, mode) {
  for (let i = 0; i < components.length; i++) {
    detectChangesInComponent(hostLView, components[i], mode);
  }
}
function markViewDirty(lView, source) {
  const dirtyBitsToUse = isRefreshingViews() ? (
    // When we are actively refreshing views, we only use the `Dirty` bit to mark a view
    64
  ) : (
    // When we are not actively refreshing a view tree, it is absolutely
    // valid to update state and mark views dirty. We use the `RefreshView` flag in this
    // case to allow synchronously rerunning change detection. This applies today to
    // afterRender hooks as well as animation listeners which execute after detecting
    // changes in a view when the render factory flushes.
    1024 | 64
  );
  lView[ENVIRONMENT].changeDetectionScheduler?.notify(source);
  while (lView) {
    lView[FLAGS] |= dirtyBitsToUse;
    const parent = getLViewParent(lView);
    if (isRootView(lView) && !parent) {
      return lView;
    }
    lView = parent;
  }
  return null;
}
var ViewRef$1 = class {
  get rootNodes() {
    const lView = this._lView;
    const tView = lView[TVIEW];
    return collectNativeNodes(tView, lView, tView.firstChild, []);
  }
  constructor(_lView, _cdRefInjectingView, notifyErrorHandler = true) {
    this._lView = _lView;
    this._cdRefInjectingView = _cdRefInjectingView;
    this.notifyErrorHandler = notifyErrorHandler;
    this._appRef = null;
    this._attachedToViewContainer = false;
  }
  get context() {
    return this._lView[CONTEXT];
  }
  /**
   * @deprecated Replacing the full context object is not supported. Modify the context
   *   directly, or consider using a `Proxy` if you need to replace the full object.
   * // TODO(devversion): Remove this.
   */
  set context(value) {
    if (ngDevMode) {
      console.warn("Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.");
    }
    this._lView[CONTEXT] = value;
  }
  get destroyed() {
    return (this._lView[FLAGS] & 256) === 256;
  }
  destroy() {
    if (this._appRef) {
      this._appRef.detachView(this);
    } else if (this._attachedToViewContainer) {
      const parent = this._lView[PARENT];
      if (isLContainer(parent)) {
        const viewRefs = parent[VIEW_REFS];
        const index = viewRefs ? viewRefs.indexOf(this) : -1;
        if (index > -1) {
          ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, "An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.");
          detachView(parent, index);
          removeFromArray(viewRefs, index);
        }
      }
      this._attachedToViewContainer = false;
    }
    destroyLView(this._lView[TVIEW], this._lView);
  }
  onDestroy(callback) {
    storeLViewOnDestroy(this._lView, callback);
  }
  /**
   * Marks a view and all of its ancestors dirty.
   *
   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is
   * checked when it needs to be re-rendered but the two normal triggers haven't marked it
   * dirty (i.e. inputs haven't changed and events haven't fired in the view).
   *
   * <!-- TODO: Add a link to a chapter on OnPush components -->
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * @Component({
   *   selector: 'app-root',
   *   template: `Number of ticks: {{numberOfTicks}}`
   *   changeDetection: ChangeDetectionStrategy.OnPush,
   * })
   * class AppComponent {
   *   numberOfTicks = 0;
   *
   *   constructor(private ref: ChangeDetectorRef) {
   *     setInterval(() => {
   *       this.numberOfTicks++;
   *       // the following is required, otherwise the view will not be updated
   *       this.ref.markForCheck();
   *     }, 1000);
   *   }
   * }
   * ```
   */
  markForCheck() {
    markViewDirty(
      this._cdRefInjectingView || this._lView,
      4
      /* NotificationSource.MarkForCheck */
    );
  }
  /**
   * Detaches the view from the change detection tree.
   *
   * Detached views will not be checked during change detection runs until they are
   * re-attached, even if they are dirty. `detach` can be used in combination with
   * {@link ChangeDetectorRef#detectChanges} to implement local change
   * detection checks.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example defines a component with a large list of readonly data.
   * Imagine the data changes constantly, many times per second. For performance reasons,
   * we want to check and update the list every five seconds. We can do that by detaching
   * the component's change detector and doing a local check every five seconds.
   *
   * ```typescript
   * class DataProvider {
   *   // in a real application the returned data will be different every time
   *   get data() {
   *     return [1,2,3,4,5];
   *   }
   * }
   *
   * @Component({
   *   selector: 'giant-list',
   *   template: `
   *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
   *   `,
   * })
   * class GiantList {
   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
   *     ref.detach();
   *     setInterval(() => {
   *       this.ref.detectChanges();
   *     }, 5000);
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   providers: [DataProvider],
   *   template: `
   *     <giant-list><giant-list>
   *   `,
   * })
   * class App {
   * }
   * ```
   */
  detach() {
    this._lView[FLAGS] &= ~128;
  }
  /**
   * Re-attaches a view to the change detection tree.
   *
   * This can be used to re-attach views that were previously detached from the tree
   * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example creates a component displaying `live` data. The component will detach
   * its change detector from the main change detector tree when the component's live property
   * is set to false.
   *
   * ```typescript
   * class DataProvider {
   *   data = 1;
   *
   *   constructor() {
   *     setInterval(() => {
   *       this.data = this.data * 2;
   *     }, 500);
   *   }
   * }
   *
   * @Component({
   *   selector: 'live-data',
   *   inputs: ['live'],
   *   template: 'Data: {{dataProvider.data}}'
   * })
   * class LiveData {
   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
   *
   *   set live(value) {
   *     if (value) {
   *       this.ref.reattach();
   *     } else {
   *       this.ref.detach();
   *     }
   *   }
   * }
   *
   * @Component({
   *   selector: 'app-root',
   *   providers: [DataProvider],
   *   template: `
   *     Live Update: <input type="checkbox" [(ngModel)]="live">
   *     <live-data [live]="live"><live-data>
   *   `,
   * })
   * class AppComponent {
   *   live = true;
   * }
   * ```
   */
  reattach() {
    updateAncestorTraversalFlagsOnAttach(this._lView);
    this._lView[FLAGS] |= 128;
  }
  /**
   * Checks the view and its children.
   *
   * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement
   * local change detection checks.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example defines a component with a large list of readonly data.
   * Imagine, the data changes constantly, many times per second. For performance reasons,
   * we want to check and update the list every five seconds.
   *
   * We can do that by detaching the component's change detector and doing a local change detection
   * check every five seconds.
   *
   * See {@link ChangeDetectorRef#detach} for more information.
   */
  detectChanges() {
    this._lView[FLAGS] |= 1024;
    detectChangesInternal(this._lView, this.notifyErrorHandler);
  }
  /**
   * Checks the change detector and its children, and throws if any changes are detected.
   *
   * This is used in development mode to verify that running change detection doesn't
   * introduce other changes.
   */
  checkNoChanges() {
    if (ngDevMode) {
      checkNoChangesInternal(this._lView, CheckNoChangesMode.OnlyDirtyViews, this.notifyErrorHandler);
    }
  }
  attachToViewContainerRef() {
    if (this._appRef) {
      throw new RuntimeError(902, ngDevMode && "This view is already attached directly to the ApplicationRef!");
    }
    this._attachedToViewContainer = true;
  }
  detachFromAppRef() {
    this._appRef = null;
    const isRoot = isRootView(this._lView);
    const declarationContainer = this._lView[DECLARATION_LCONTAINER];
    if (declarationContainer !== null && !isRoot) {
      detachMovedView(declarationContainer, this._lView);
    }
    detachViewFromDOM(this._lView[TVIEW], this._lView);
  }
  attachToAppRef(appRef) {
    if (this._attachedToViewContainer) {
      throw new RuntimeError(902, ngDevMode && "This view is already attached to a ViewContainer!");
    }
    this._appRef = appRef;
    const isRoot = isRootView(this._lView);
    const declarationContainer = this._lView[DECLARATION_LCONTAINER];
    if (declarationContainer !== null && !isRoot) {
      trackMovedView(declarationContainer, this._lView);
    }
    updateAncestorTraversalFlagsOnAttach(this._lView);
  }
};
var _TemplateRef = class _TemplateRef {
};
_TemplateRef.__NG_ELEMENT_ID__ = injectTemplateRef;
var TemplateRef = _TemplateRef;
var ViewEngineTemplateRef = TemplateRef;
var R3TemplateRef = class TemplateRef2 extends ViewEngineTemplateRef {
  constructor(_declarationLView, _declarationTContainer, elementRef) {
    super();
    this._declarationLView = _declarationLView;
    this._declarationTContainer = _declarationTContainer;
    this.elementRef = elementRef;
  }
  /**
   * Returns an `ssrId` associated with a TView, which was used to
   * create this instance of the `TemplateRef`.
   *
   * @internal
   */
  get ssrId() {
    return this._declarationTContainer.tView?.ssrId || null;
  }
  createEmbeddedView(context2, injector) {
    return this.createEmbeddedViewImpl(context2, injector);
  }
  /**
   * @internal
   */
  createEmbeddedViewImpl(context2, injector, dehydratedView) {
    const embeddedLView = createAndRenderEmbeddedLView(this._declarationLView, this._declarationTContainer, context2, {
      embeddedViewInjector: injector,
      dehydratedView
    });
    return new ViewRef$1(embeddedLView);
  }
};
function injectTemplateRef() {
  return createTemplateRef(getCurrentTNode(), getLView());
}
function createTemplateRef(hostTNode, hostLView) {
  if (hostTNode.type & 4) {
    ngDevMode && assertDefined(hostTNode.tView, "TView must be allocated");
    return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));
  }
  return null;
}
function getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {
  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;
  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;
  if (insertBeforeIndex === null) {
    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);
  } else {
    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);
    return unwrapRNode(lView[insertBeforeIndex]);
  }
}
function processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {
  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;
  if (Array.isArray(tNodeInsertBeforeIndex)) {
    ngDevMode && assertDomNode(childRNode);
    let i18nParent = childRNode;
    let anchorRNode = null;
    if (!(childTNode.type & 3)) {
      anchorRNode = i18nParent;
      i18nParent = parentRElement;
    }
    if (i18nParent !== null && childTNode.componentOffset === -1) {
      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {
        const i18nChild = lView[tNodeInsertBeforeIndex[i]];
        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);
      }
    }
  }
}
function addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {
  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, "We expect that insertBeforeIndex is not set");
  previousTNodes.push(newTNode);
  if (previousTNodes.length > 1) {
    for (let i = previousTNodes.length - 2; i >= 0; i--) {
      const existingTNode = previousTNodes[i];
      if (!isI18nText(existingTNode)) {
        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {
          setInsertBeforeIndex(existingTNode, newTNode.index);
        }
      }
    }
  }
}
function isI18nText(tNode) {
  return !(tNode.type & 64);
}
function isNewTNodeCreatedBefore(existingTNode, newTNode) {
  return isI18nText(newTNode) || existingTNode.index > newTNode.index;
}
function getInsertBeforeIndex(tNode) {
  const index = tNode.insertBeforeIndex;
  return Array.isArray(index) ? index[0] : index;
}
function setInsertBeforeIndex(tNode, value) {
  const index = tNode.insertBeforeIndex;
  if (Array.isArray(index)) {
    index[0] = value;
  } else {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    tNode.insertBeforeIndex = value;
  }
}
function getTIcu(tView, index) {
  const value = tView.data[index];
  if (value === null || typeof value === "string") return null;
  if (ngDevMode && !(value.hasOwnProperty("tView") || value.hasOwnProperty("currentCaseLViewIndex"))) {
    throwError2("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: " + value);
  }
  const tIcu = value.hasOwnProperty("currentCaseLViewIndex") ? value : value.value;
  ngDevMode && assertTIcu(tIcu);
  return tIcu;
}
function setTIcu(tView, index, tIcu) {
  const tNode = tView.data[index];
  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty("tView"), true, "We expect to get 'null'|'TIcuContainer'");
  if (tNode === null) {
    tView.data[index] = tIcu;
  } else {
    ngDevMode && assertTNodeType(
      tNode,
      32
      /* TNodeType.Icu */
    );
    tNode.value = tIcu;
  }
}
function setTNodeInsertBeforeIndex(tNode, index) {
  ngDevMode && assertTNode(tNode);
  let insertBeforeIndex = tNode.insertBeforeIndex;
  if (insertBeforeIndex === null) {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    insertBeforeIndex = tNode.insertBeforeIndex = [null, index];
  } else {
    assertEqual(Array.isArray(insertBeforeIndex), true, "Expecting array here");
    insertBeforeIndex.push(index);
  }
}
function createTNodePlaceholder(tView, previousTNodes, index) {
  const tNode = createTNodeAtIndex(tView, index, 64, null, null);
  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);
  return tNode;
}
function getCurrentICUCaseIndex(tIcu, lView) {
  const currentCase = lView[tIcu.currentCaseLViewIndex];
  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;
}
function getParentFromIcuCreateOpCode(mergedCode) {
  return mergedCode >>> 17;
}
function getRefFromIcuCreateOpCode(mergedCode) {
  return (mergedCode & 131070) >>> 1;
}
function getInstructionFromIcuCreateOpCode(mergedCode) {
  return mergedCode & 1;
}
function icuCreateOpCode(opCode, parentIdx, refIdx) {
  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, "Missing parent index");
  ngDevMode && assertGreaterThan(refIdx, 0, "Missing ref index");
  return opCode | parentIdx << 17 | refIdx << 1;
}
function isRootTemplateMessage(subTemplateIndex) {
  return subTemplateIndex === -1;
}
function enterIcu(state, tIcu, lView) {
  state.index = 0;
  const currentCase = getCurrentICUCaseIndex(tIcu, lView);
  if (currentCase !== null) {
    ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);
    state.removes = tIcu.remove[currentCase];
  } else {
    state.removes = EMPTY_ARRAY;
  }
}
function icuContainerIteratorNext(state) {
  if (state.index < state.removes.length) {
    const removeOpCode = state.removes[state.index++];
    ngDevMode && assertNumber(removeOpCode, "Expecting OpCode number");
    if (removeOpCode > 0) {
      const rNode = state.lView[removeOpCode];
      ngDevMode && assertDomNode(rNode);
      return rNode;
    } else {
      state.stack.push(state.index, state.removes);
      const tIcuIndex = ~removeOpCode;
      const tIcu = state.lView[TVIEW].data[tIcuIndex];
      ngDevMode && assertTIcu(tIcu);
      enterIcu(state, tIcu, state.lView);
      return icuContainerIteratorNext(state);
    }
  } else {
    if (state.stack.length === 0) {
      return null;
    } else {
      state.removes = state.stack.pop();
      state.index = state.stack.pop();
      return icuContainerIteratorNext(state);
    }
  }
}
function loadIcuContainerVisitor() {
  const _state = {
    stack: [],
    index: -1
  };
  function icuContainerIteratorStart(tIcuContainerNode, lView) {
    _state.lView = lView;
    while (_state.stack.length) _state.stack.pop();
    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);
    enterIcu(_state, tIcuContainerNode.value, lView);
    return icuContainerIteratorNext.bind(null, _state);
  }
  return icuContainerIteratorStart;
}
var REF_EXTRACTOR_REGEXP = new RegExp(`^(\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`);
var _prepareI18nBlockForHydrationImpl = () => {
};
function prepareI18nBlockForHydration(lView, index, parentTNode, subTemplateIndex) {
  _prepareI18nBlockForHydrationImpl(lView, index, parentTNode, subTemplateIndex);
}
var _claimDehydratedIcuCaseImpl = () => {
};
function claimDehydratedIcuCase(lView, icuIndex, caseIndex) {
  _claimDehydratedIcuCaseImpl(lView, icuIndex, caseIndex);
}
var _findMatchingDehydratedViewImpl = () => null;
function findMatchingDehydratedView(lContainer, template) {
  return _findMatchingDehydratedViewImpl(lContainer, template);
}
var ChangeDetectionScheduler = class {
};
var ZONELESS_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Zoneless enabled" : "", {
  providedIn: "root",
  factory: () => false
});
var PROVIDED_ZONELESS = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Zoneless provided" : "", {
  providedIn: "root",
  factory: () => false
});
var ZONELESS_SCHEDULER_DISABLED = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "scheduler disabled" : "");
var SCHEDULE_IN_ROOT_ZONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "run changes outside zone in root" : "");
var ComponentRef$1 = class {
};
var ComponentFactory$1 = class {
};
function noComponentFactoryError(component) {
  const error = Error(`No component factory found for ${stringify(component)}.`);
  error[ERROR_COMPONENT] = component;
  return error;
}
var ERROR_COMPONENT = "ngComponent";
var _NullComponentFactoryResolver = class {
  resolveComponentFactory(component) {
    throw noComponentFactoryError(component);
  }
};
var _ComponentFactoryResolver$1 = class _ComponentFactoryResolver$1 {
};
_ComponentFactoryResolver$1.NULL = new _NullComponentFactoryResolver();
var ComponentFactoryResolver$1 = _ComponentFactoryResolver$1;
var RendererFactory2 = class {
};
var _Renderer2 = class _Renderer2 {
  constructor() {
    this.destroyNode = null;
  }
};
_Renderer2.__NG_ELEMENT_ID__ = () => injectRenderer2();
var Renderer2 = _Renderer2;
function injectRenderer2() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];
}
var _Sanitizer = class _Sanitizer {
};
_Sanitizer.\u0275prov = \u0275\u0275defineInjectable({
  token: _Sanitizer,
  providedIn: "root",
  factory: () => null
});
var Sanitizer = _Sanitizer;
function isModuleWithProviders(value) {
  return value.ngModule !== void 0;
}
function isNgModule(value) {
  return !!getNgModuleDef(value);
}
function isPipe(value) {
  return !!getPipeDef$1(value);
}
function isDirective(value) {
  return !!getDirectiveDef(value);
}
function isComponent(value) {
  return !!getComponentDef(value);
}
function getDependencyTypeForError(type) {
  if (getComponentDef(type)) return "component";
  if (getDirectiveDef(type)) return "directive";
  if (getPipeDef$1(type)) return "pipe";
  return "type";
}
function verifyStandaloneImport(depType, importingType) {
  if (isForwardRef(depType)) {
    depType = resolveForwardRef(depType);
    if (!depType) {
      throw new Error(`Expected forwardRef function, imported from "${stringifyForError(importingType)}", to return a standalone entity or NgModule but got "${stringifyForError(depType) || depType}".`);
    }
  }
  if (getNgModuleDef(depType) == null) {
    const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef$1(depType);
    if (def != null) {
      if (!def.standalone) {
        throw new Error(`The "${stringifyForError(depType)}" ${getDependencyTypeForError(depType)}, imported from "${stringifyForError(importingType)}", is not standalone. Did you forget to add the standalone: true flag?`);
      }
    } else {
      if (isModuleWithProviders(depType)) {
        throw new Error(`A module with providers was imported from "${stringifyForError(importingType)}". Modules with providers are not supported in standalone components imports.`);
      } else {
        throw new Error(`The "${stringifyForError(depType)}" type, imported from "${stringifyForError(importingType)}", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);
      }
    }
  }
}
var USE_RUNTIME_DEPS_TRACKER_FOR_JIT = true;
var DepsTracker = class {
  constructor() {
    this.ownerNgModule = /* @__PURE__ */ new Map();
    this.ngModulesWithSomeUnresolvedDecls = /* @__PURE__ */ new Set();
    this.ngModulesScopeCache = /* @__PURE__ */ new Map();
    this.standaloneComponentsScopeCache = /* @__PURE__ */ new Map();
  }
  /**
   * Attempts to resolve ng module's forward ref declarations as much as possible and add them to
   * the `ownerNgModule` map. This method normally should be called after the initial parsing when
   * all the forward refs are resolved (e.g., when trying to render a component)
   */
  resolveNgModulesDecls() {
    if (this.ngModulesWithSomeUnresolvedDecls.size === 0) {
      return;
    }
    for (const moduleType of this.ngModulesWithSomeUnresolvedDecls) {
      const def = getNgModuleDef(moduleType);
      if (def?.declarations) {
        for (const decl of maybeUnwrapFn(def.declarations)) {
          if (isComponent(decl)) {
            this.ownerNgModule.set(decl, moduleType);
          }
        }
      }
    }
    this.ngModulesWithSomeUnresolvedDecls.clear();
  }
  /** @override */
  getComponentDependencies(type, rawImports) {
    this.resolveNgModulesDecls();
    const def = getComponentDef(type);
    if (def === null) {
      throw new Error(`Attempting to get component dependencies for a type that is not a component: ${type}`);
    }
    if (def.standalone) {
      const scope = this.getStandaloneComponentScope(type, rawImports);
      if (scope.compilation.isPoisoned) {
        return {
          dependencies: []
        };
      }
      return {
        dependencies: [...scope.compilation.directives, ...scope.compilation.pipes, ...scope.compilation.ngModules]
      };
    } else {
      if (!this.ownerNgModule.has(type)) {
        return {
          dependencies: []
        };
      }
      const scope = this.getNgModuleScope(this.ownerNgModule.get(type));
      if (scope.compilation.isPoisoned) {
        return {
          dependencies: []
        };
      }
      return {
        dependencies: [...scope.compilation.directives, ...scope.compilation.pipes]
      };
    }
  }
  /**
   * @override
   * This implementation does not make use of param scopeInfo since it assumes the scope info is
   * already added to the type itself through methods like {@link ɵɵsetNgModuleScope}
   */
  registerNgModule(type, scopeInfo) {
    if (!isNgModule(type)) {
      throw new Error(`Attempting to register a Type which is not NgModule as NgModule: ${type}`);
    }
    this.ngModulesWithSomeUnresolvedDecls.add(type);
  }
  /** @override */
  clearScopeCacheFor(type) {
    this.ngModulesScopeCache.delete(type);
    this.standaloneComponentsScopeCache.delete(type);
  }
  /** @override */
  getNgModuleScope(type) {
    if (this.ngModulesScopeCache.has(type)) {
      return this.ngModulesScopeCache.get(type);
    }
    const scope = this.computeNgModuleScope(type);
    this.ngModulesScopeCache.set(type, scope);
    return scope;
  }
  /** Compute NgModule scope afresh. */
  computeNgModuleScope(type) {
    const def = getNgModuleDef(type, true);
    const scope = {
      exported: {
        directives: /* @__PURE__ */ new Set(),
        pipes: /* @__PURE__ */ new Set()
      },
      compilation: {
        directives: /* @__PURE__ */ new Set(),
        pipes: /* @__PURE__ */ new Set()
      }
    };
    for (const imported of maybeUnwrapFn(def.imports)) {
      if (isNgModule(imported)) {
        const importedScope = this.getNgModuleScope(imported);
        addSet(importedScope.exported.directives, scope.compilation.directives);
        addSet(importedScope.exported.pipes, scope.compilation.pipes);
      } else if (isStandalone(imported)) {
        if (isDirective(imported) || isComponent(imported)) {
          scope.compilation.directives.add(imported);
        } else if (isPipe(imported)) {
          scope.compilation.pipes.add(imported);
        } else {
          throw new RuntimeError(1e3, "The standalone imported type is neither a component nor a directive nor a pipe");
        }
      } else {
        scope.compilation.isPoisoned = true;
        break;
      }
    }
    if (!scope.compilation.isPoisoned) {
      for (const decl of maybeUnwrapFn(def.declarations)) {
        if (isNgModule(decl) || isStandalone(decl)) {
          scope.compilation.isPoisoned = true;
          break;
        }
        if (isPipe(decl)) {
          scope.compilation.pipes.add(decl);
        } else {
          scope.compilation.directives.add(decl);
        }
      }
    }
    for (const exported of maybeUnwrapFn(def.exports)) {
      if (isNgModule(exported)) {
        const exportedScope = this.getNgModuleScope(exported);
        addSet(exportedScope.exported.directives, scope.exported.directives);
        addSet(exportedScope.exported.pipes, scope.exported.pipes);
        addSet(exportedScope.exported.directives, scope.compilation.directives);
        addSet(exportedScope.exported.pipes, scope.compilation.pipes);
      } else if (isPipe(exported)) {
        scope.exported.pipes.add(exported);
      } else {
        scope.exported.directives.add(exported);
      }
    }
    return scope;
  }
  /** @override */
  getStandaloneComponentScope(type, rawImports) {
    if (this.standaloneComponentsScopeCache.has(type)) {
      return this.standaloneComponentsScopeCache.get(type);
    }
    const ans = this.computeStandaloneComponentScope(type, rawImports);
    this.standaloneComponentsScopeCache.set(type, ans);
    return ans;
  }
  computeStandaloneComponentScope(type, rawImports) {
    const ans = {
      compilation: {
        // Standalone components are always able to self-reference.
        directives: /* @__PURE__ */ new Set([type]),
        pipes: /* @__PURE__ */ new Set(),
        ngModules: /* @__PURE__ */ new Set()
      }
    };
    for (const rawImport of flatten(rawImports ?? [])) {
      const imported = resolveForwardRef(rawImport);
      try {
        verifyStandaloneImport(imported, type);
      } catch (e) {
        ans.compilation.isPoisoned = true;
        return ans;
      }
      if (isNgModule(imported)) {
        ans.compilation.ngModules.add(imported);
        const importedScope = this.getNgModuleScope(imported);
        if (importedScope.exported.isPoisoned) {
          ans.compilation.isPoisoned = true;
          return ans;
        }
        addSet(importedScope.exported.directives, ans.compilation.directives);
        addSet(importedScope.exported.pipes, ans.compilation.pipes);
      } else if (isPipe(imported)) {
        ans.compilation.pipes.add(imported);
      } else if (isDirective(imported) || isComponent(imported)) {
        ans.compilation.directives.add(imported);
      } else {
        ans.compilation.isPoisoned = true;
        return ans;
      }
    }
    return ans;
  }
  /** @override */
  isOrphanComponent(cmp) {
    const def = getComponentDef(cmp);
    if (!def || def.standalone) {
      return false;
    }
    this.resolveNgModulesDecls();
    return !this.ownerNgModule.has(cmp);
  }
};
function addSet(sourceSet, targetSet) {
  for (const m of sourceSet) {
    targetSet.add(m);
  }
}
var depsTracker = new DepsTracker();
function computeStaticStyling(tNode, attrs, writeToHost) {
  ngDevMode && assertFirstCreatePass(getTView(), "Expecting to be called in first template pass only");
  let styles = writeToHost ? tNode.styles : null;
  let classes = writeToHost ? tNode.classes : null;
  let mode = 0;
  if (attrs !== null) {
    for (let i = 0; i < attrs.length; i++) {
      const value = attrs[i];
      if (typeof value === "number") {
        mode = value;
      } else if (mode == 1) {
        classes = concatStringsWithSpace(classes, value);
      } else if (mode == 2) {
        const style = value;
        const styleValue = attrs[++i];
        styles = concatStringsWithSpace(styles, style + ": " + styleValue + ";");
      }
    }
  }
  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;
  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
}
var ComponentFactoryResolver = class extends ComponentFactoryResolver$1 {
  /**
   * @param ngModule The NgModuleRef to which all resolved factories are bound.
   */
  constructor(ngModule) {
    super();
    this.ngModule = ngModule;
  }
  resolveComponentFactory(component) {
    ngDevMode && assertComponentType(component);
    const componentDef = getComponentDef(component);
    return new ComponentFactory(componentDef, this.ngModule);
  }
};
function toRefArray(map2, isInputMap) {
  const array = [];
  for (const publicName in map2) {
    if (!map2.hasOwnProperty(publicName)) {
      continue;
    }
    const value = map2[publicName];
    if (value === void 0) {
      continue;
    }
    const isArray4 = Array.isArray(value);
    const propName = isArray4 ? value[0] : value;
    const flags = isArray4 ? value[1] : InputFlags.None;
    if (isInputMap) {
      array.push({
        propName,
        templateName: publicName,
        isSignal: (flags & InputFlags.SignalBased) !== 0
      });
    } else {
      array.push({
        propName,
        templateName: publicName
      });
    }
  }
  return array;
}
function getNamespace(elementName) {
  const name = elementName.toLowerCase();
  return name === "svg" ? SVG_NAMESPACE : name === "math" ? MATH_ML_NAMESPACE : null;
}
var ComponentFactory = class extends ComponentFactory$1 {
  get inputs() {
    const componentDef = this.componentDef;
    const inputTransforms = componentDef.inputTransforms;
    const refArray = toRefArray(componentDef.inputs, true);
    if (inputTransforms !== null) {
      for (const input2 of refArray) {
        if (inputTransforms.hasOwnProperty(input2.propName)) {
          input2.transform = inputTransforms[input2.propName];
        }
      }
    }
    return refArray;
  }
  get outputs() {
    return toRefArray(this.componentDef.outputs, false);
  }
  /**
   * @param componentDef The component definition.
   * @param ngModule The NgModuleRef to which the factory is bound.
   */
  constructor(componentDef, ngModule) {
    super();
    this.componentDef = componentDef;
    this.ngModule = ngModule;
    this.componentType = componentDef.type;
    this.selector = stringifyCSSSelectorList(componentDef.selectors);
    this.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
    this.isBoundToModule = !!ngModule;
  }
  create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {
    const prevConsumer = setActiveConsumer(null);
    try {
      if (ngDevMode && false) {
        if (depsTracker.isOrphanComponent(this.componentType)) {
          throw new RuntimeError(1001, `Orphan component found! Trying to render the component ${debugStringifyTypeForError(this.componentType)} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`);
        }
      }
      environmentInjector = environmentInjector || this.ngModule;
      let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : environmentInjector?.injector;
      if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {
        realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;
      }
      const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;
      const rendererFactory = rootViewInjector.get(RendererFactory2, null);
      if (rendererFactory === null) {
        throw new RuntimeError(407, ngDevMode && "Angular was not able to inject a renderer (RendererFactory2). Likely this is due to a broken DI hierarchy. Make sure that any injector used to create this component has a correct parent.");
      }
      const sanitizer = rootViewInjector.get(Sanitizer, null);
      const changeDetectionScheduler = rootViewInjector.get(ChangeDetectionScheduler, null);
      const environment2 = {
        rendererFactory,
        sanitizer,
        // We don't use inline effects (yet).
        inlineEffectRunner: null,
        changeDetectionScheduler
      };
      const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);
      const elementName = this.componentDef.selectors[0][0] || "div";
      const hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation, rootViewInjector) : createElementNode(hostRenderer, elementName, getNamespace(elementName));
      let rootFlags = 512;
      if (this.componentDef.signals) {
        rootFlags |= 4096;
      } else if (!this.componentDef.onPush) {
        rootFlags |= 16;
      }
      let hydrationInfo = null;
      if (hostRNode !== null) {
        hydrationInfo = retrieveHydrationInfo(
          hostRNode,
          rootViewInjector,
          true
          /* isRootView */
        );
      }
      const rootTView = createTView(0, null, null, 1, 0, null, null, null, null, null, null);
      const rootLView = createLView(null, rootTView, null, rootFlags, null, null, environment2, hostRenderer, rootViewInjector, null, hydrationInfo);
      enterView(rootLView);
      let component;
      let tElementNode;
      let componentView = null;
      try {
        const rootComponentDef = this.componentDef;
        let rootDirectives;
        let hostDirectiveDefs = null;
        if (rootComponentDef.findHostDirectiveDefs) {
          rootDirectives = [];
          hostDirectiveDefs = /* @__PURE__ */ new Map();
          rootComponentDef.findHostDirectiveDefs(rootComponentDef, rootDirectives, hostDirectiveDefs);
          rootDirectives.push(rootComponentDef);
          ngDevMode && assertNoDuplicateDirectives(rootDirectives);
        } else {
          rootDirectives = [rootComponentDef];
        }
        const hostTNode = createRootComponentTNode(rootLView, hostRNode);
        componentView = createRootComponentView(hostTNode, hostRNode, rootComponentDef, rootDirectives, rootLView, environment2, hostRenderer);
        tElementNode = getTNode(rootTView, HEADER_OFFSET);
        if (hostRNode) {
          setRootNodeAttributes(hostRenderer, rootComponentDef, hostRNode, rootSelectorOrNode);
        }
        if (projectableNodes !== void 0) {
          projectNodes(tElementNode, this.ngContentSelectors, projectableNodes);
        }
        component = createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, [LifecycleHooksFeature]);
        renderView(rootTView, rootLView, null);
      } catch (e) {
        if (componentView !== null) {
          unregisterLView(componentView);
        }
        unregisterLView(rootLView);
        throw e;
      } finally {
        leaveView();
      }
      return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
};
var ComponentRef = class extends ComponentRef$1 {
  constructor(componentType, instance, location2, _rootLView, _tNode) {
    super();
    this.location = location2;
    this._rootLView = _rootLView;
    this._tNode = _tNode;
    this.previousInputValues = null;
    this.instance = instance;
    this.hostView = this.changeDetectorRef = new ViewRef$1(
      _rootLView,
      void 0,
      false
      /* notifyErrorHandler */
    );
    this.componentType = componentType;
  }
  setInput(name, value) {
    const inputData = this._tNode.inputs;
    let dataValue;
    if (inputData !== null && (dataValue = inputData[name])) {
      this.previousInputValues ??= /* @__PURE__ */ new Map();
      if (this.previousInputValues.has(name) && Object.is(this.previousInputValues.get(name), value)) {
        return;
      }
      const lView = this._rootLView;
      setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);
      this.previousInputValues.set(name, value);
      const childComponentLView = getComponentLViewByIndex(this._tNode.index, lView);
      markViewDirty(
        childComponentLView,
        1
        /* NotificationSource.SetInput */
      );
    } else {
      if (ngDevMode) {
        const cmpNameForError = stringifyForError(this.componentType);
        let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;
        message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;
        reportUnknownPropertyError(message);
      }
    }
  }
  get injector() {
    return new NodeInjector(this._tNode, this._rootLView);
  }
  destroy() {
    this.hostView.destroy();
  }
  onDestroy(callback) {
    this.hostView.onDestroy(callback);
  }
};
function createRootComponentTNode(lView, rNode) {
  const tView = lView[TVIEW];
  const index = HEADER_OFFSET;
  ngDevMode && assertIndexInRange(lView, index);
  lView[index] = rNode;
  return getOrCreateTNode(tView, index, 2, "#host", null);
}
function createRootComponentView(tNode, hostRNode, rootComponentDef, rootDirectives, rootView, environment2, hostRenderer) {
  const tView = rootView[TVIEW];
  applyRootComponentStyling(rootDirectives, tNode, hostRNode, hostRenderer);
  let hydrationInfo = null;
  if (hostRNode !== null) {
    hydrationInfo = retrieveHydrationInfo(hostRNode, rootView[INJECTOR]);
  }
  const viewRenderer = environment2.rendererFactory.createRenderer(hostRNode, rootComponentDef);
  let lViewFlags = 16;
  if (rootComponentDef.signals) {
    lViewFlags = 4096;
  } else if (rootComponentDef.onPush) {
    lViewFlags = 64;
  }
  const componentView = createLView(rootView, getOrCreateComponentTView(rootComponentDef), null, lViewFlags, rootView[tNode.index], tNode, environment2, viewRenderer, null, null, hydrationInfo);
  if (tView.firstCreatePass) {
    markAsComponentHost(tView, tNode, rootDirectives.length - 1);
  }
  addToViewTree(rootView, componentView);
  return rootView[tNode.index] = componentView;
}
function applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer) {
  for (const def of rootDirectives) {
    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
  }
  if (tNode.mergedAttrs !== null) {
    computeStaticStyling(tNode, tNode.mergedAttrs, true);
    if (rNode !== null) {
      setupStaticAttributes(hostRenderer, rNode, tNode);
    }
  }
}
function createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, hostFeatures) {
  const rootTNode = getCurrentTNode();
  ngDevMode && assertDefined(rootTNode, "tNode should have been already created");
  const tView = rootLView[TVIEW];
  const native = getNativeByTNode(rootTNode, rootLView);
  initializeDirectives(tView, rootLView, rootTNode, rootDirectives, null, hostDirectiveDefs);
  for (let i = 0; i < rootDirectives.length; i++) {
    const directiveIndex = rootTNode.directiveStart + i;
    const directiveInstance = getNodeInjectable(rootLView, tView, directiveIndex, rootTNode);
    attachPatchData(directiveInstance, rootLView);
  }
  invokeDirectivesHostBindings(tView, rootLView, rootTNode);
  if (native) {
    attachPatchData(native, rootLView);
  }
  ngDevMode && assertGreaterThan(rootTNode.componentOffset, -1, "componentOffset must be great than -1");
  const component = getNodeInjectable(rootLView, tView, rootTNode.directiveStart + rootTNode.componentOffset, rootTNode);
  componentView[CONTEXT] = rootLView[CONTEXT] = component;
  if (hostFeatures !== null) {
    for (const feature of hostFeatures) {
      feature(component, rootComponentDef);
    }
  }
  executeContentQueries(tView, rootTNode, rootLView);
  return component;
}
function setRootNodeAttributes(hostRenderer, componentDef, hostRNode, rootSelectorOrNode) {
  if (rootSelectorOrNode) {
    setUpAttributes(hostRenderer, hostRNode, ["ng-version", "18.2.2"]);
  } else {
    const {
      attrs,
      classes
    } = extractAttrsAndClassesFromSelector(componentDef.selectors[0]);
    if (attrs) {
      setUpAttributes(hostRenderer, hostRNode, attrs);
    }
    if (classes && classes.length > 0) {
      writeDirectClass(hostRenderer, hostRNode, classes.join(" "));
    }
  }
}
function projectNodes(tNode, ngContentSelectors, projectableNodes) {
  const projection = tNode.projection = [];
  for (let i = 0; i < ngContentSelectors.length; i++) {
    const nodesforSlot = projectableNodes[i];
    projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);
  }
}
function LifecycleHooksFeature() {
  const tNode = getCurrentTNode();
  ngDevMode && assertDefined(tNode, "TNode is required");
  registerPostOrderHooks(getLView()[TVIEW], tNode);
}
var _ViewContainerRef = class _ViewContainerRef {
};
_ViewContainerRef.__NG_ELEMENT_ID__ = injectViewContainerRef;
var ViewContainerRef = _ViewContainerRef;
function injectViewContainerRef() {
  const previousTNode = getCurrentTNode();
  return createContainerRef(previousTNode, getLView());
}
var VE_ViewContainerRef = ViewContainerRef;
var R3ViewContainerRef = class ViewContainerRef2 extends VE_ViewContainerRef {
  constructor(_lContainer, _hostTNode, _hostLView) {
    super();
    this._lContainer = _lContainer;
    this._hostTNode = _hostTNode;
    this._hostLView = _hostLView;
  }
  get element() {
    return createElementRef(this._hostTNode, this._hostLView);
  }
  get injector() {
    return new NodeInjector(this._hostTNode, this._hostLView);
  }
  /** @deprecated No replacement */
  get parentInjector() {
    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);
    if (hasParentInjector(parentLocation)) {
      const parentView = getParentInjectorView(parentLocation, this._hostLView);
      const injectorIndex = getParentInjectorIndex(parentLocation);
      ngDevMode && assertNodeInjector(parentView, injectorIndex);
      const parentTNode = parentView[TVIEW].data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ];
      return new NodeInjector(parentTNode, parentView);
    } else {
      return new NodeInjector(null, this._hostLView);
    }
  }
  clear() {
    while (this.length > 0) {
      this.remove(this.length - 1);
    }
  }
  get(index) {
    const viewRefs = getViewRefs(this._lContainer);
    return viewRefs !== null && viewRefs[index] || null;
  }
  get length() {
    return this._lContainer.length - CONTAINER_HEADER_OFFSET;
  }
  createEmbeddedView(templateRef, context2, indexOrOptions) {
    let index;
    let injector;
    if (typeof indexOrOptions === "number") {
      index = indexOrOptions;
    } else if (indexOrOptions != null) {
      index = indexOrOptions.index;
      injector = indexOrOptions.injector;
    }
    const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);
    const viewRef = templateRef.createEmbeddedViewImpl(context2 || {}, injector, dehydratedView);
    this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));
    return viewRef;
  }
  createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {
    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);
    let index;
    if (isComponentFactory) {
      if (ngDevMode) {
        assertEqual(typeof indexOrOptions !== "object", true, "It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)");
      }
      index = indexOrOptions;
    } else {
      if (ngDevMode) {
        assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator.`);
        assertEqual(typeof indexOrOptions !== "number", true, "It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead.");
      }
      const options = indexOrOptions || {};
      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {
        throwError2(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);
      }
      index = options.index;
      injector = options.injector;
      projectableNodes = options.projectableNodes;
      environmentInjector = options.environmentInjector || options.ngModuleRef;
    }
    const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory(getComponentDef(componentFactoryOrType));
    const contextInjector = injector || this.parentInjector;
    if (!environmentInjector && componentFactory.ngModule == null) {
      const _injector = isComponentFactory ? contextInjector : this.parentInjector;
      const result = _injector.get(EnvironmentInjector, null);
      if (result) {
        environmentInjector = result;
      }
    }
    const componentDef = getComponentDef(componentFactory.componentType ?? {});
    const dehydratedView = findMatchingDehydratedView(this._lContainer, componentDef?.id ?? null);
    const rNode = dehydratedView?.firstChild ?? null;
    const componentRef = componentFactory.create(contextInjector, projectableNodes, rNode, environmentInjector);
    this.insertImpl(componentRef.hostView, index, shouldAddViewToDom(this._hostTNode, dehydratedView));
    return componentRef;
  }
  insert(viewRef, index) {
    return this.insertImpl(viewRef, index, true);
  }
  insertImpl(viewRef, index, addToDOM) {
    const lView = viewRef._lView;
    if (ngDevMode && viewRef.destroyed) {
      throw new Error("Cannot insert a destroyed View in a ViewContainer!");
    }
    if (viewAttachedToContainer(lView)) {
      const prevIdx = this.indexOf(viewRef);
      if (prevIdx !== -1) {
        this.detach(prevIdx);
      } else {
        const prevLContainer = lView[PARENT];
        ngDevMode && assertEqual(isLContainer(prevLContainer), true, "An attached view should have its PARENT point to a container.");
        const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
        prevVCRef.detach(prevVCRef.indexOf(viewRef));
      }
    }
    const adjustedIdx = this._adjustIndex(index);
    const lContainer = this._lContainer;
    addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);
    viewRef.attachToViewContainerRef();
    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);
    return viewRef;
  }
  move(viewRef, newIndex) {
    if (ngDevMode && viewRef.destroyed) {
      throw new Error("Cannot move a destroyed View in a ViewContainer!");
    }
    return this.insert(viewRef, newIndex);
  }
  indexOf(viewRef) {
    const viewRefsArr = getViewRefs(this._lContainer);
    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
  }
  remove(index) {
    const adjustedIdx = this._adjustIndex(index, -1);
    const detachedView = detachView(this._lContainer, adjustedIdx);
    if (detachedView) {
      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);
      destroyLView(detachedView[TVIEW], detachedView);
    }
  }
  detach(index) {
    const adjustedIdx = this._adjustIndex(index, -1);
    const view = detachView(this._lContainer, adjustedIdx);
    const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;
    return wasDetached ? new ViewRef$1(view) : null;
  }
  _adjustIndex(index, shift = 0) {
    if (index == null) {
      return this.length + shift;
    }
    if (ngDevMode) {
      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);
      assertLessThan(index, this.length + 1 + shift, "index");
    }
    return index;
  }
};
function getViewRefs(lContainer) {
  return lContainer[VIEW_REFS];
}
function getOrCreateViewRefs(lContainer) {
  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);
}
function createContainerRef(hostTNode, hostLView) {
  ngDevMode && assertTNodeType(
    hostTNode,
    12 | 3
    /* TNodeType.AnyRNode */
  );
  let lContainer;
  const slotValue = hostLView[hostTNode.index];
  if (isLContainer(slotValue)) {
    lContainer = slotValue;
  } else {
    lContainer = createLContainer(slotValue, hostLView, null, hostTNode);
    hostLView[hostTNode.index] = lContainer;
    addToViewTree(hostLView, lContainer);
  }
  _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);
  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);
}
function insertAnchorNode(hostLView, hostTNode) {
  const renderer = hostLView[RENDERER];
  ngDevMode && ngDevMode.rendererCreateComment++;
  const commentNode = renderer.createComment(ngDevMode ? "container" : "");
  const hostNative = getNativeByTNode(hostTNode, hostLView);
  const parentOfHostNative = nativeParentNode(renderer, hostNative);
  nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);
  return commentNode;
}
var _locateOrCreateAnchorNode = createAnchorNode;
var _populateDehydratedViewsInLContainer = () => false;
function populateDehydratedViewsInLContainer(lContainer, tNode, hostLView) {
  return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);
}
function createAnchorNode(lContainer, hostLView, hostTNode, slotValue) {
  if (lContainer[NATIVE]) return;
  let commentNode;
  if (hostTNode.type & 8) {
    commentNode = unwrapRNode(slotValue);
  } else {
    commentNode = insertAnchorNode(hostLView, hostTNode);
  }
  lContainer[NATIVE] = commentNode;
}
var LQuery_ = class _LQuery_ {
  constructor(queryList) {
    this.queryList = queryList;
    this.matches = null;
  }
  clone() {
    return new _LQuery_(this.queryList);
  }
  setDirty() {
    this.queryList.setDirty();
  }
};
var LQueries_ = class _LQueries_ {
  constructor(queries = []) {
    this.queries = queries;
  }
  createEmbeddedView(tView) {
    const tQueries = tView.queries;
    if (tQueries !== null) {
      const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
      const viewLQueries = [];
      for (let i = 0; i < noOfInheritedQueries; i++) {
        const tQuery = tQueries.getByIndex(i);
        const parentLQuery = this.queries[tQuery.indexInDeclarationView];
        viewLQueries.push(parentLQuery.clone());
      }
      return new _LQueries_(viewLQueries);
    }
    return null;
  }
  insertView(tView) {
    this.dirtyQueriesWithMatches(tView);
  }
  detachView(tView) {
    this.dirtyQueriesWithMatches(tView);
  }
  finishViewCreation(tView) {
    this.dirtyQueriesWithMatches(tView);
  }
  dirtyQueriesWithMatches(tView) {
    for (let i = 0; i < this.queries.length; i++) {
      if (getTQuery(tView, i).matches !== null) {
        this.queries[i].setDirty();
      }
    }
  }
};
var TQueryMetadata_ = class {
  constructor(predicate, flags, read = null) {
    this.flags = flags;
    this.read = read;
    if (typeof predicate === "string") {
      this.predicate = splitQueryMultiSelectors(predicate);
    } else {
      this.predicate = predicate;
    }
  }
};
var TQueries_ = class _TQueries_ {
  constructor(queries = []) {
    this.queries = queries;
  }
  elementStart(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView, "Queries should collect results on the first template pass only");
    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].elementStart(tView, tNode);
    }
  }
  elementEnd(tNode) {
    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].elementEnd(tNode);
    }
  }
  embeddedTView(tNode) {
    let queriesForTemplateRef = null;
    for (let i = 0; i < this.length; i++) {
      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);
      if (tqueryClone) {
        tqueryClone.indexInDeclarationView = i;
        if (queriesForTemplateRef !== null) {
          queriesForTemplateRef.push(tqueryClone);
        } else {
          queriesForTemplateRef = [tqueryClone];
        }
      }
    }
    return queriesForTemplateRef !== null ? new _TQueries_(queriesForTemplateRef) : null;
  }
  template(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView, "Queries should collect results on the first template pass only");
    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].template(tView, tNode);
    }
  }
  getByIndex(index) {
    ngDevMode && assertIndexInRange(this.queries, index);
    return this.queries[index];
  }
  get length() {
    return this.queries.length;
  }
  track(tquery) {
    this.queries.push(tquery);
  }
};
var TQuery_ = class _TQuery_ {
  constructor(metadata, nodeIndex = -1) {
    this.metadata = metadata;
    this.matches = null;
    this.indexInDeclarationView = -1;
    this.crossesNgTemplate = false;
    this._appliesToNextNode = true;
    this._declarationNodeIndex = nodeIndex;
  }
  elementStart(tView, tNode) {
    if (this.isApplyingToNode(tNode)) {
      this.matchTNode(tView, tNode);
    }
  }
  elementEnd(tNode) {
    if (this._declarationNodeIndex === tNode.index) {
      this._appliesToNextNode = false;
    }
  }
  template(tView, tNode) {
    this.elementStart(tView, tNode);
  }
  embeddedTView(tNode, childQueryIndex) {
    if (this.isApplyingToNode(tNode)) {
      this.crossesNgTemplate = true;
      this.addMatch(-tNode.index, childQueryIndex);
      return new _TQuery_(this.metadata);
    }
    return null;
  }
  isApplyingToNode(tNode) {
    if (this._appliesToNextNode && (this.metadata.flags & 1) !== 1) {
      const declarationNodeIdx = this._declarationNodeIndex;
      let parent = tNode.parent;
      while (parent !== null && parent.type & 8 && parent.index !== declarationNodeIdx) {
        parent = parent.parent;
      }
      return declarationNodeIdx === (parent !== null ? parent.index : -1);
    }
    return this._appliesToNextNode;
  }
  matchTNode(tView, tNode) {
    const predicate = this.metadata.predicate;
    if (Array.isArray(predicate)) {
      for (let i = 0; i < predicate.length; i++) {
        const name = predicate[i];
        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));
        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
      }
    } else {
      if (predicate === TemplateRef) {
        if (tNode.type & 4) {
          this.matchTNodeWithReadOption(tView, tNode, -1);
        }
      } else {
        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
      }
    }
  }
  matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
    if (nodeMatchIdx !== null) {
      const read = this.metadata.read;
      if (read !== null) {
        if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4) {
          this.addMatch(tNode.index, -2);
        } else {
          const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);
          if (directiveOrProviderIdx !== null) {
            this.addMatch(tNode.index, directiveOrProviderIdx);
          }
        }
      } else {
        this.addMatch(tNode.index, nodeMatchIdx);
      }
    }
  }
  addMatch(tNodeIdx, matchIdx) {
    if (this.matches === null) {
      this.matches = [tNodeIdx, matchIdx];
    } else {
      this.matches.push(tNodeIdx, matchIdx);
    }
  }
};
function getIdxOfMatchingSelector(tNode, selector) {
  const localNames = tNode.localNames;
  if (localNames !== null) {
    for (let i = 0; i < localNames.length; i += 2) {
      if (localNames[i] === selector) {
        return localNames[i + 1];
      }
    }
  }
  return null;
}
function createResultByTNodeType(tNode, currentView) {
  if (tNode.type & (3 | 8)) {
    return createElementRef(tNode, currentView);
  } else if (tNode.type & 4) {
    return createTemplateRef(tNode, currentView);
  }
  return null;
}
function createResultForNode(lView, tNode, matchingIdx, read) {
  if (matchingIdx === -1) {
    return createResultByTNodeType(tNode, lView);
  } else if (matchingIdx === -2) {
    return createSpecialToken(lView, tNode, read);
  } else {
    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
  }
}
function createSpecialToken(lView, tNode, read) {
  if (read === ElementRef) {
    return createElementRef(tNode, lView);
  } else if (read === TemplateRef) {
    return createTemplateRef(tNode, lView);
  } else if (read === ViewContainerRef) {
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12
      /* TNodeType.AnyContainer */
    );
    return createContainerRef(tNode, lView);
  } else {
    ngDevMode && throwError2(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);
  }
}
function materializeViewResults(tView, lView, tQuery, queryIndex) {
  const lQuery = lView[QUERIES].queries[queryIndex];
  if (lQuery.matches === null) {
    const tViewData = tView.data;
    const tQueryMatches = tQuery.matches;
    const result = [];
    for (let i = 0; tQueryMatches !== null && i < tQueryMatches.length; i += 2) {
      const matchedNodeIdx = tQueryMatches[i];
      if (matchedNodeIdx < 0) {
        result.push(null);
      } else {
        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
        const tNode = tViewData[matchedNodeIdx];
        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
      }
    }
    lQuery.matches = result;
  }
  return lQuery.matches;
}
function collectQueryResults(tView, lView, queryIndex, result) {
  const tQuery = tView.queries.getByIndex(queryIndex);
  const tQueryMatches = tQuery.matches;
  if (tQueryMatches !== null) {
    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);
    for (let i = 0; i < tQueryMatches.length; i += 2) {
      const tNodeIdx = tQueryMatches[i];
      if (tNodeIdx > 0) {
        result.push(lViewResults[i / 2]);
      } else {
        const childQueryIndex = tQueryMatches[i + 1];
        const declarationLContainer = lView[-tNodeIdx];
        ngDevMode && assertLContainer(declarationLContainer);
        for (let i2 = CONTAINER_HEADER_OFFSET; i2 < declarationLContainer.length; i2++) {
          const embeddedLView = declarationLContainer[i2];
          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        }
        if (declarationLContainer[MOVED_VIEWS] !== null) {
          const embeddedLViews = declarationLContainer[MOVED_VIEWS];
          for (let i2 = 0; i2 < embeddedLViews.length; i2++) {
            const embeddedLView = embeddedLViews[i2];
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        }
      }
    }
  }
  return result;
}
function loadQueryInternal(lView, queryIndex) {
  ngDevMode && assertDefined(lView[QUERIES], "LQueries should be defined when trying to load a query");
  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
  return lView[QUERIES].queries[queryIndex].queryList;
}
function createLQuery(tView, lView, flags) {
  const queryList = new QueryList(
    (flags & 4) === 4
    /* QueryFlags.emitDistinctChangesOnly */
  );
  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
  const lQueries = (lView[QUERIES] ??= new LQueries_()).queries;
  return lQueries.push(new LQuery_(queryList)) - 1;
}
function createViewQuery(predicate, flags, read) {
  ngDevMode && assertNumber(flags, "Expecting flags");
  const tView = getTView();
  if (tView.firstCreatePass) {
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);
    if ((flags & 2) === 2) {
      tView.staticViewQueries = true;
    }
  }
  return createLQuery(tView, getLView(), flags);
}
function createContentQuery(directiveIndex, predicate, flags, read) {
  ngDevMode && assertNumber(flags, "Expecting flags");
  const tView = getTView();
  if (tView.firstCreatePass) {
    const tNode = getCurrentTNode();
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);
    saveContentQueryAndDirectiveIndex(tView, directiveIndex);
    if ((flags & 2) === 2) {
      tView.staticContentQueries = true;
    }
  }
  return createLQuery(tView, getLView(), flags);
}
function splitQueryMultiSelectors(locator) {
  return locator.split(",").map((s) => s.trim());
}
function createTQuery(tView, metadata, nodeIndex) {
  if (tView.queries === null) tView.queries = new TQueries_();
  tView.queries.track(new TQuery_(metadata, nodeIndex));
}
function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;
  if (directiveIndex !== lastSavedDirectiveIndex) {
    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
  }
}
function getTQuery(tView, index) {
  ngDevMode && assertDefined(tView.queries, "TQueries must be defined to retrieve a TQuery");
  return tView.queries.getByIndex(index);
}
function getQueryResults(lView, queryIndex) {
  const tView = lView[TVIEW];
  const tQuery = getTQuery(tView, queryIndex);
  return tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);
}
var markedFeatures = /* @__PURE__ */ new Set();
function performanceMarkFeature(feature) {
  if (markedFeatures.has(feature)) {
    return;
  }
  markedFeatures.add(feature);
  performance?.mark?.("mark_feature_usage", {
    detail: {
      feature
    }
  });
}
function isSignal(value) {
  return typeof value === "function" && value[SIGNAL] !== void 0;
}
function signal(initialValue, options) {
  performanceMarkFeature("NgSignals");
  const signalFn = createSignal(initialValue);
  const node = signalFn[SIGNAL];
  if (options?.equal) {
    node.equal = options.equal;
  }
  signalFn.set = (newValue) => signalSetFn(node, newValue);
  signalFn.update = (updateFn) => signalUpdateFn(node, updateFn);
  signalFn.asReadonly = signalAsReadonlyFn.bind(signalFn);
  if (ngDevMode) {
    signalFn.toString = () => `[Signal: ${signalFn()}]`;
  }
  return signalFn;
}
function signalAsReadonlyFn() {
  const node = this[SIGNAL];
  if (node.readonlyFn === void 0) {
    const readonlyFn = () => this();
    readonlyFn[SIGNAL] = node;
    node.readonlyFn = readonlyFn;
  }
  return node.readonlyFn;
}
function isWritableSignal(value) {
  return isSignal(value) && typeof value.set === "function";
}
function createQuerySignalFn(firstOnly, required) {
  let node;
  const signalFn = createComputed(() => {
    node._dirtyCounter();
    const value = refreshSignalQuery(node, firstOnly);
    if (required && value === void 0) {
      throw new RuntimeError(-951, ngDevMode && "Child query result is required but no value is available.");
    }
    return value;
  });
  node = signalFn[SIGNAL];
  node._dirtyCounter = signal(0);
  node._flatValue = void 0;
  if (ngDevMode) {
    signalFn.toString = () => `[Query Signal]`;
  }
  return signalFn;
}
function createSingleResultOptionalQuerySignalFn() {
  return createQuerySignalFn(
    /* firstOnly */
    true,
    /* required */
    false
  );
}
function createSingleResultRequiredQuerySignalFn() {
  return createQuerySignalFn(
    /* firstOnly */
    true,
    /* required */
    true
  );
}
function createMultiResultQuerySignalFn() {
  return createQuerySignalFn(
    /* firstOnly */
    false,
    /* required */
    false
  );
}
function bindQueryToSignal(target, queryIndex) {
  const node = target[SIGNAL];
  node._lView = getLView();
  node._queryIndex = queryIndex;
  node._queryList = loadQueryInternal(node._lView, queryIndex);
  node._queryList.onDirty(() => node._dirtyCounter.update((v) => v + 1));
}
function refreshSignalQuery(node, firstOnly) {
  const lView = node._lView;
  const queryIndex = node._queryIndex;
  if (lView === void 0 || queryIndex === void 0 || lView[FLAGS] & 4) {
    return firstOnly ? void 0 : EMPTY_ARRAY;
  }
  const queryList = loadQueryInternal(lView, queryIndex);
  const results = getQueryResults(lView, queryIndex);
  queryList.reset(results, unwrapElementRef);
  if (firstOnly) {
    return queryList.first;
  } else {
    const resultChanged = queryList._changesDetected;
    if (resultChanged || node._flatValue === void 0) {
      return node._flatValue = queryList.toArray();
    }
    return node._flatValue;
  }
}
function viewChildFn(locator, opts) {
  ngDevMode && assertInInjectionContext(viewChild);
  return createSingleResultOptionalQuerySignalFn();
}
function viewChildRequiredFn(locator, opts) {
  ngDevMode && assertInInjectionContext(viewChild);
  return createSingleResultRequiredQuerySignalFn();
}
var viewChild = (() => {
  viewChildFn.required = viewChildRequiredFn;
  return viewChildFn;
})();
function contentChildFn(locator, opts) {
  ngDevMode && assertInInjectionContext(contentChild);
  return createSingleResultOptionalQuerySignalFn();
}
function contentChildRequiredFn(locator, opts) {
  ngDevMode && assertInInjectionContext(contentChildren);
  return createSingleResultRequiredQuerySignalFn();
}
var contentChild = (() => {
  contentChildFn.required = contentChildRequiredFn;
  return contentChildFn;
})();
function contentChildren(locator, opts) {
  return createMultiResultQuerySignalFn();
}
function createModelSignal(initialValue) {
  const node = Object.create(INPUT_SIGNAL_NODE);
  const emitterRef = new OutputEmitterRef();
  node.value = initialValue;
  function getter() {
    producerAccessed(node);
    assertModelSet(node.value);
    return node.value;
  }
  getter[SIGNAL] = node;
  getter.asReadonly = signalAsReadonlyFn.bind(getter);
  getter.set = (newValue) => {
    if (!node.equal(node.value, newValue)) {
      signalSetFn(node, newValue);
      emitterRef.emit(newValue);
    }
  };
  getter.update = (updateFn) => {
    assertModelSet(node.value);
    getter.set(updateFn(node.value));
  };
  getter.subscribe = emitterRef.subscribe.bind(emitterRef);
  getter.destroyRef = emitterRef.destroyRef;
  if (ngDevMode) {
    getter.toString = () => `[Model Signal: ${getter()}]`;
  }
  return getter;
}
function assertModelSet(value) {
  if (value === REQUIRED_UNSET_VALUE) {
    throw new RuntimeError(952, ngDevMode && "Model is required but no value is available yet.");
  }
}
function modelFunction(initialValue) {
  ngDevMode && assertInInjectionContext(model);
  return createModelSignal(initialValue);
}
function modelRequiredFunction() {
  ngDevMode && assertInInjectionContext(model);
  return createModelSignal(REQUIRED_UNSET_VALUE);
}
var model = (() => {
  modelFunction.required = modelRequiredFunction;
  return modelFunction;
})();
var emitDistinctChangesOnlyDefaultValue = true;
var Query = class {
};
var ContentChildren = makePropDecorator("ContentChildren", (selector, opts = {}) => __spreadValues({
  selector,
  first: false,
  isViewQuery: false,
  descendants: false,
  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
}, opts), Query);
var ContentChild = makePropDecorator("ContentChild", (selector, opts = {}) => __spreadValues({
  selector,
  first: true,
  isViewQuery: false,
  descendants: true
}, opts), Query);
var ViewChildren = makePropDecorator("ViewChildren", (selector, opts = {}) => __spreadValues({
  selector,
  first: false,
  isViewQuery: true,
  descendants: true,
  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
}, opts), Query);
var ViewChild = makePropDecorator("ViewChild", (selector, opts) => __spreadValues({
  selector,
  first: true,
  isViewQuery: true,
  descendants: true
}, opts), Query);
function resolveComponentResources(resourceResolver) {
  const componentResolved = [];
  const urlMap = /* @__PURE__ */ new Map();
  function cachedResourceResolve(url) {
    let promise = urlMap.get(url);
    if (!promise) {
      const resp = resourceResolver(url);
      urlMap.set(url, promise = resp.then(unwrapResponse));
    }
    return promise;
  }
  componentResourceResolutionQueue.forEach((component, type) => {
    const promises = [];
    if (component.templateUrl) {
      promises.push(cachedResourceResolve(component.templateUrl).then((template) => {
        component.template = template;
      }));
    }
    const styles = typeof component.styles === "string" ? [component.styles] : component.styles || [];
    component.styles = styles;
    if (component.styleUrl && component.styleUrls?.length) {
      throw new Error("@Component cannot define both `styleUrl` and `styleUrls`. Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple");
    } else if (component.styleUrls?.length) {
      const styleOffset = component.styles.length;
      const styleUrls = component.styleUrls;
      component.styleUrls.forEach((styleUrl, index) => {
        styles.push("");
        promises.push(cachedResourceResolve(styleUrl).then((style) => {
          styles[styleOffset + index] = style;
          styleUrls.splice(styleUrls.indexOf(styleUrl), 1);
          if (styleUrls.length == 0) {
            component.styleUrls = void 0;
          }
        }));
      });
    } else if (component.styleUrl) {
      promises.push(cachedResourceResolve(component.styleUrl).then((style) => {
        styles.push(style);
        component.styleUrl = void 0;
      }));
    }
    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));
    componentResolved.push(fullyResolved);
  });
  clearResolutionOfComponentResourcesQueue();
  return Promise.all(componentResolved).then(() => void 0);
}
var componentResourceResolutionQueue = /* @__PURE__ */ new Map();
var componentDefPendingResolution = /* @__PURE__ */ new Set();
function maybeQueueResolutionOfComponentResources(type, metadata) {
  if (componentNeedsResolution(metadata)) {
    componentResourceResolutionQueue.set(type, metadata);
    componentDefPendingResolution.add(type);
  }
}
function componentNeedsResolution(component) {
  return !!(component.templateUrl && !component.hasOwnProperty("template") || component.styleUrls && component.styleUrls.length || component.styleUrl);
}
function clearResolutionOfComponentResourcesQueue() {
  const old = componentResourceResolutionQueue;
  componentResourceResolutionQueue = /* @__PURE__ */ new Map();
  return old;
}
function isComponentResourceResolutionQueueEmpty() {
  return componentResourceResolutionQueue.size === 0;
}
function unwrapResponse(response) {
  return typeof response == "string" ? response : response.text();
}
function componentDefResolved(type) {
  componentDefPendingResolution.delete(type);
}
var modules = /* @__PURE__ */ new Map();
var checkForDuplicateNgModules = true;
function assertSameOrNotExisting(id, type, incoming) {
  if (type && type !== incoming && checkForDuplicateNgModules) {
    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);
  }
}
function registerNgModuleType(ngModuleType, id) {
  const existing = modules.get(id) || null;
  assertSameOrNotExisting(id, existing, ngModuleType);
  modules.set(id, ngModuleType);
}
function \u0275\u0275validateIframeAttribute(attrValue, tagName, attrName) {
  const lView = getLView();
  const tNode = getSelectedTNode();
  const element = getNativeByTNode(tNode, lView);
  if (tNode.type === 2 && tagName.toLowerCase() === "iframe") {
    const iframe = element;
    iframe.src = "";
    iframe.srcdoc = trustedHTMLFromString("");
    nativeRemoveNode(lView[RENDERER], iframe);
    const errorMessage = ngDevMode && `Angular has detected that the \`${attrName}\` was applied as a binding to an <iframe>${getTemplateLocationDetails(lView)}. For security reasons, the \`${attrName}\` can be set on an <iframe> as a static attribute only. 
To fix this, switch the \`${attrName}\` binding to a static attribute in a template or in host bindings section.`;
    throw new RuntimeError(-910, errorMessage);
  }
  return attrValue;
}
function getSuperType(type) {
  return Object.getPrototypeOf(type.prototype).constructor;
}
function \u0275\u0275InheritDefinitionFeature(definition) {
  let superType = getSuperType(definition.type);
  let shouldInheritFields = true;
  const inheritanceChain = [definition];
  while (superType) {
    let superDef = void 0;
    if (isComponentDef(definition)) {
      superDef = superType.\u0275cmp || superType.\u0275dir;
    } else {
      if (superType.\u0275cmp) {
        throw new RuntimeError(903, ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);
      }
      superDef = superType.\u0275dir;
    }
    if (superDef) {
      if (shouldInheritFields) {
        inheritanceChain.push(superDef);
        const writeableDef = definition;
        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
        writeableDef.inputTransforms = maybeUnwrapEmpty(definition.inputTransforms);
        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);
        const superHostBindings = superDef.hostBindings;
        superHostBindings && inheritHostBindings(definition, superHostBindings);
        const superViewQuery = superDef.viewQuery;
        const superContentQueries = superDef.contentQueries;
        superViewQuery && inheritViewQuery(definition, superViewQuery);
        superContentQueries && inheritContentQueries(definition, superContentQueries);
        mergeInputsWithTransforms(definition, superDef);
        fillProperties(definition.outputs, superDef.outputs);
        if (isComponentDef(superDef) && superDef.data.animation) {
          const defData = definition.data;
          defData.animation = (defData.animation || []).concat(superDef.data.animation);
        }
      }
      const features = superDef.features;
      if (features) {
        for (let i = 0; i < features.length; i++) {
          const feature = features[i];
          if (feature && feature.ngInherit) {
            feature(definition);
          }
          if (feature === \u0275\u0275InheritDefinitionFeature) {
            shouldInheritFields = false;
          }
        }
      }
    }
    superType = Object.getPrototypeOf(superType);
  }
  mergeHostAttrsAcrossInheritance(inheritanceChain);
}
function mergeInputsWithTransforms(target, source) {
  for (const key in source.inputs) {
    if (!source.inputs.hasOwnProperty(key)) {
      continue;
    }
    if (target.inputs.hasOwnProperty(key)) {
      continue;
    }
    const value = source.inputs[key];
    if (value === void 0) {
      continue;
    }
    target.inputs[key] = value;
    target.declaredInputs[key] = source.declaredInputs[key];
    if (source.inputTransforms !== null) {
      const minifiedName = Array.isArray(value) ? value[0] : value;
      if (!source.inputTransforms.hasOwnProperty(minifiedName)) {
        continue;
      }
      target.inputTransforms ??= {};
      target.inputTransforms[minifiedName] = source.inputTransforms[minifiedName];
    }
  }
}
function mergeHostAttrsAcrossInheritance(inheritanceChain) {
  let hostVars = 0;
  let hostAttrs = null;
  for (let i = inheritanceChain.length - 1; i >= 0; i--) {
    const def = inheritanceChain[i];
    def.hostVars = hostVars += def.hostVars;
    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
  }
}
function maybeUnwrapEmpty(value) {
  if (value === EMPTY_OBJ) {
    return {};
  } else if (value === EMPTY_ARRAY) {
    return [];
  } else {
    return value;
  }
}
function inheritViewQuery(definition, superViewQuery) {
  const prevViewQuery = definition.viewQuery;
  if (prevViewQuery) {
    definition.viewQuery = (rf, ctx) => {
      superViewQuery(rf, ctx);
      prevViewQuery(rf, ctx);
    };
  } else {
    definition.viewQuery = superViewQuery;
  }
}
function inheritContentQueries(definition, superContentQueries) {
  const prevContentQueries = definition.contentQueries;
  if (prevContentQueries) {
    definition.contentQueries = (rf, ctx, directiveIndex) => {
      superContentQueries(rf, ctx, directiveIndex);
      prevContentQueries(rf, ctx, directiveIndex);
    };
  } else {
    definition.contentQueries = superContentQueries;
  }
}
function inheritHostBindings(definition, superHostBindings) {
  const prevHostBindings = definition.hostBindings;
  if (prevHostBindings) {
    definition.hostBindings = (rf, ctx) => {
      superHostBindings(rf, ctx);
      prevHostBindings(rf, ctx);
    };
  } else {
    definition.hostBindings = superHostBindings;
  }
}
var COPY_DIRECTIVE_FIELDS = [
  // The child class should use the providers of its parent.
  "providersResolver"
  // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such
  // as inputs, outputs, and host binding functions.
];
var COPY_COMPONENT_FIELDS = [
  // The child class should use the template function of its parent, including all template
  // semantics.
  "template",
  "decls",
  "consts",
  "vars",
  "onPush",
  "ngContentSelectors",
  // The child class should use the CSS styles of its parent, including all styling semantics.
  "styles",
  "encapsulation",
  // The child class should be checked by the runtime in the same way as its parent.
  "schemas"
];
function \u0275\u0275CopyDefinitionFeature(definition) {
  let superType = getSuperType(definition.type);
  let superDef = void 0;
  if (isComponentDef(definition)) {
    superDef = superType.\u0275cmp;
  } else {
    superDef = superType.\u0275dir;
  }
  const defAny = definition;
  for (const field of COPY_DIRECTIVE_FIELDS) {
    defAny[field] = superDef[field];
  }
  if (isComponentDef(superDef)) {
    for (const field of COPY_COMPONENT_FIELDS) {
      defAny[field] = superDef[field];
    }
  }
}
function \u0275\u0275HostDirectivesFeature(rawHostDirectives) {
  const feature = (definition) => {
    const resolved = (Array.isArray(rawHostDirectives) ? rawHostDirectives : rawHostDirectives()).map((dir) => {
      return typeof dir === "function" ? {
        directive: resolveForwardRef(dir),
        inputs: EMPTY_OBJ,
        outputs: EMPTY_OBJ
      } : {
        directive: resolveForwardRef(dir.directive),
        inputs: bindingArrayToMap(dir.inputs),
        outputs: bindingArrayToMap(dir.outputs)
      };
    });
    if (definition.hostDirectives === null) {
      definition.findHostDirectiveDefs = findHostDirectiveDefs;
      definition.hostDirectives = resolved;
    } else {
      definition.hostDirectives.unshift(...resolved);
    }
  };
  feature.ngInherit = true;
  return feature;
}
function findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {
  if (currentDef.hostDirectives !== null) {
    for (const hostDirectiveConfig of currentDef.hostDirectives) {
      const hostDirectiveDef = getDirectiveDef(hostDirectiveConfig.directive);
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        validateHostDirective(hostDirectiveConfig, hostDirectiveDef);
      }
      patchDeclaredInputs(hostDirectiveDef.declaredInputs, hostDirectiveConfig.inputs);
      findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);
      hostDirectiveDefs.set(hostDirectiveDef, hostDirectiveConfig);
      matchedDefs.push(hostDirectiveDef);
    }
  }
}
function bindingArrayToMap(bindings) {
  if (bindings === void 0 || bindings.length === 0) {
    return EMPTY_OBJ;
  }
  const result = {};
  for (let i = 0; i < bindings.length; i += 2) {
    result[bindings[i]] = bindings[i + 1];
  }
  return result;
}
function patchDeclaredInputs(declaredInputs, exposedInputs) {
  for (const publicName in exposedInputs) {
    if (exposedInputs.hasOwnProperty(publicName)) {
      const remappedPublicName = exposedInputs[publicName];
      const privateName = declaredInputs[publicName];
      if ((typeof ngDevMode === "undefined" || ngDevMode) && declaredInputs.hasOwnProperty(remappedPublicName)) {
        assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);
      }
      declaredInputs[remappedPublicName] = privateName;
    }
  }
}
function validateHostDirective(hostDirectiveConfig, directiveDef) {
  const type = hostDirectiveConfig.directive;
  if (directiveDef === null) {
    if (getComponentDef(type) !== null) {
      throw new RuntimeError(310, `Host directive ${type.name} cannot be a component.`);
    }
    throw new RuntimeError(307, `Could not resolve metadata for host directive ${type.name}. Make sure that the ${type.name} class is annotated with an @Directive decorator.`);
  }
  if (!directiveDef.standalone) {
    throw new RuntimeError(308, `Host directive ${directiveDef.type.name} must be standalone.`);
  }
  validateMappings("input", directiveDef, hostDirectiveConfig.inputs);
  validateMappings("output", directiveDef, hostDirectiveConfig.outputs);
}
function validateMappings(bindingType, def, hostDirectiveBindings) {
  const className = def.type.name;
  const bindings = bindingType === "input" ? def.inputs : def.outputs;
  for (const publicName in hostDirectiveBindings) {
    if (hostDirectiveBindings.hasOwnProperty(publicName)) {
      if (!bindings.hasOwnProperty(publicName)) {
        throw new RuntimeError(311, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);
      }
      const remappedPublicName = hostDirectiveBindings[publicName];
      if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName) {
        throw new RuntimeError(312, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);
      }
    }
  }
}
function \u0275\u0275InputTransformsFeature(definition) {
  const inputs = definition.inputConfig;
  const inputTransforms = {};
  for (const minifiedKey in inputs) {
    if (inputs.hasOwnProperty(minifiedKey)) {
      const value = inputs[minifiedKey];
      if (Array.isArray(value) && value[3]) {
        inputTransforms[minifiedKey] = value[3];
      }
    }
  }
  definition.inputTransforms = inputTransforms;
}
var NgModuleRef$1 = class {
};
var NgModuleFactory$1 = class {
};
function createNgModule(ngModule, parentInjector) {
  return new NgModuleRef(ngModule, parentInjector ?? null, []);
}
var NgModuleRef = class extends NgModuleRef$1 {
  constructor(ngModuleType, _parent, additionalProviders, runInjectorInitializers = true) {
    super();
    this.ngModuleType = ngModuleType;
    this._parent = _parent;
    this._bootstrapComponents = [];
    this.destroyCbs = [];
    this.componentFactoryResolver = new ComponentFactoryResolver(this);
    const ngModuleDef = getNgModuleDef(ngModuleType);
    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);
    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
    this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{
      provide: NgModuleRef$1,
      useValue: this
    }, {
      provide: ComponentFactoryResolver$1,
      useValue: this.componentFactoryResolver
    }, ...additionalProviders], stringify(ngModuleType), /* @__PURE__ */ new Set(["environment"]));
    if (runInjectorInitializers) {
      this.resolveInjectorInitializers();
    }
  }
  resolveInjectorInitializers() {
    this._r3Injector.resolveInjectorInitializers();
    this.instance = this._r3Injector.get(this.ngModuleType);
  }
  get injector() {
    return this._r3Injector;
  }
  destroy() {
    ngDevMode && assertDefined(this.destroyCbs, "NgModule already destroyed");
    const injector = this._r3Injector;
    !injector.destroyed && injector.destroy();
    this.destroyCbs.forEach((fn) => fn());
    this.destroyCbs = null;
  }
  onDestroy(callback) {
    ngDevMode && assertDefined(this.destroyCbs, "NgModule already destroyed");
    this.destroyCbs.push(callback);
  }
};
var NgModuleFactory = class extends NgModuleFactory$1 {
  constructor(moduleType) {
    super();
    this.moduleType = moduleType;
  }
  create(parentInjector) {
    return new NgModuleRef(this.moduleType, parentInjector, []);
  }
};
function createNgModuleRefWithProviders(moduleType, parentInjector, additionalProviders) {
  return new NgModuleRef(moduleType, parentInjector, additionalProviders, false);
}
var EnvironmentNgModuleRefAdapter = class extends NgModuleRef$1 {
  constructor(config2) {
    super();
    this.componentFactoryResolver = new ComponentFactoryResolver(this);
    this.instance = null;
    const injector = new R3Injector([...config2.providers, {
      provide: NgModuleRef$1,
      useValue: this
    }, {
      provide: ComponentFactoryResolver$1,
      useValue: this.componentFactoryResolver
    }], config2.parent || getNullInjector(), config2.debugName, /* @__PURE__ */ new Set(["environment"]));
    this.injector = injector;
    if (config2.runEnvironmentInitializers) {
      injector.resolveInjectorInitializers();
    }
  }
  destroy() {
    this.injector.destroy();
  }
  onDestroy(callback) {
    this.injector.onDestroy(callback);
  }
};
function createEnvironmentInjector(providers, parent, debugName = null) {
  const adapter = new EnvironmentNgModuleRefAdapter({
    providers,
    parent,
    debugName,
    runEnvironmentInitializers: true
  });
  return adapter.injector;
}
var _CachedInjectorService = class _CachedInjectorService {
  constructor() {
    this.cachedInjectors = /* @__PURE__ */ new Map();
  }
  getOrCreateInjector(key, parentInjector, providers, debugName) {
    if (!this.cachedInjectors.has(key)) {
      const injector = providers.length > 0 ? createEnvironmentInjector(providers, parentInjector, debugName) : null;
      this.cachedInjectors.set(key, injector);
    }
    return this.cachedInjectors.get(key);
  }
  ngOnDestroy() {
    try {
      for (const injector of this.cachedInjectors.values()) {
        if (injector !== null) {
          injector.destroy();
        }
      }
    } finally {
      this.cachedInjectors.clear();
    }
  }
};
_CachedInjectorService.\u0275prov = \u0275\u0275defineInjectable({
  token: _CachedInjectorService,
  providedIn: "environment",
  factory: () => new _CachedInjectorService()
});
var CachedInjectorService = _CachedInjectorService;
function isListLikeIterable(obj) {
  if (!isJsObject(obj)) return false;
  return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
  Symbol.iterator in obj;
}
function areIterablesEqual(a, b, comparator) {
  const iterator1 = a[Symbol.iterator]();
  const iterator2 = b[Symbol.iterator]();
  while (true) {
    const item1 = iterator1.next();
    const item2 = iterator2.next();
    if (item1.done && item2.done) return true;
    if (item1.done || item2.done) return false;
    if (!comparator(item1.value, item2.value)) return false;
  }
}
function iterateListLike(obj, fn) {
  if (Array.isArray(obj)) {
    for (let i = 0; i < obj.length; i++) {
      fn(obj[i]);
    }
  } else {
    const iterator2 = obj[Symbol.iterator]();
    let item;
    while (!(item = iterator2.next()).done) {
      fn(item.value);
    }
  }
}
function isJsObject(o) {
  return o !== null && (typeof o === "function" || typeof o === "object");
}
function devModeEqual(a, b) {
  const isListLikeIterableA = isListLikeIterable(a);
  const isListLikeIterableB = isListLikeIterable(b);
  if (isListLikeIterableA && isListLikeIterableB) {
    return areIterablesEqual(a, b, devModeEqual);
  } else {
    const isAObject = a && (typeof a === "object" || typeof a === "function");
    const isBObject = b && (typeof b === "object" || typeof b === "function");
    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
      return true;
    } else {
      return Object.is(a, b);
    }
  }
}
function updateBinding(lView, bindingIndex, value) {
  return lView[bindingIndex] = value;
}
function getBinding(lView, bindingIndex) {
  ngDevMode && assertIndexInRange(lView, bindingIndex);
  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, "Stored value should never be NO_CHANGE.");
  return lView[bindingIndex];
}
function bindingUpdated(lView, bindingIndex, value) {
  ngDevMode && assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);
  const oldValue = lView[bindingIndex];
  if (Object.is(oldValue, value)) {
    return false;
  } else {
    if (ngDevMode && isInCheckNoChangesMode()) {
      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : void 0;
      if (!devModeEqual(oldValueToCompare, value)) {
        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName, lView);
      }
      return false;
    }
    lView[bindingIndex] = value;
    return true;
  }
}
function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
  const different = bindingUpdated(lView, bindingIndex, exp1);
  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
}
function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
}
function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
}
function isDetachedByI18n(tNode) {
  return (tNode.flags & 32) === 32;
}
function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrs, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const tNode = getOrCreateTNode(tView, index, 4, tagName || null, attrs || null);
  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
  registerPostOrderHooks(tView, tNode);
  const embeddedTView = tNode.tView = createTView(
    2,
    tNode,
    templateFn,
    decls,
    vars,
    tView.directiveRegistry,
    tView.pipeRegistry,
    null,
    tView.schemas,
    tViewConsts,
    null
    /* ssrId */
  );
  if (tView.queries !== null) {
    tView.queries.template(tView, tNode);
    embeddedTView.queries = tView.queries.embeddedTView(tNode);
  }
  return tNode;
}
function declareTemplate(declarationLView, declarationTView, index, templateFn, decls, vars, tagName, attrs, localRefsIndex, localRefExtractor) {
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = declarationTView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, declarationTView, declarationLView, templateFn, decls, vars, tagName, attrs, localRefsIndex) : declarationTView.data[adjustedIndex];
  setCurrentTNode(tNode, false);
  const comment = _locateOrCreateContainerAnchor(declarationTView, declarationLView, tNode, index);
  if (wasLastNodeCreated()) {
    appendChild(declarationTView, declarationLView, comment, tNode);
  }
  attachPatchData(comment, declarationLView);
  const lContainer = createLContainer(comment, declarationLView, comment, tNode);
  declarationLView[adjustedIndex] = lContainer;
  addToViewTree(declarationLView, lContainer);
  populateDehydratedViewsInLContainer(lContainer, tNode, declarationLView);
  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(declarationTView, declarationLView, tNode);
  }
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(declarationLView, tNode, localRefExtractor);
  }
  return tNode;
}
function \u0275\u0275template(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
  const lView = getLView();
  const tView = getTView();
  const attrs = getConstant(tView.consts, attrsIndex);
  declareTemplate(lView, tView, index, templateFn, decls, vars, tagName, attrs, localRefsIndex, localRefExtractor);
  return \u0275\u0275template;
}
var _locateOrCreateContainerAnchor = createContainerAnchorImpl;
function createContainerAnchorImpl(tView, lView, tNode, index) {
  lastNodeWasCreated(true);
  return lView[RENDERER].createComment(ngDevMode ? "container" : "");
}
var DeferDependenciesLoadingState;
(function(DeferDependenciesLoadingState2) {
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["NOT_STARTED"] = 0] = "NOT_STARTED";
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["IN_PROGRESS"] = 1] = "IN_PROGRESS";
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["COMPLETE"] = 2] = "COMPLETE";
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["FAILED"] = 3] = "FAILED";
})(DeferDependenciesLoadingState || (DeferDependenciesLoadingState = {}));
var MINIMUM_SLOT = 0;
var LOADING_AFTER_SLOT = 1;
var DeferBlockState;
(function(DeferBlockState2) {
  DeferBlockState2[DeferBlockState2["Placeholder"] = 0] = "Placeholder";
  DeferBlockState2[DeferBlockState2["Loading"] = 1] = "Loading";
  DeferBlockState2[DeferBlockState2["Complete"] = 2] = "Complete";
  DeferBlockState2[DeferBlockState2["Error"] = 3] = "Error";
})(DeferBlockState || (DeferBlockState = {}));
var DeferBlockInternalState;
(function(DeferBlockInternalState2) {
  DeferBlockInternalState2[DeferBlockInternalState2["Initial"] = -1] = "Initial";
})(DeferBlockInternalState || (DeferBlockInternalState = {}));
var NEXT_DEFER_BLOCK_STATE = 0;
var DEFER_BLOCK_STATE = 1;
var STATE_IS_FROZEN_UNTIL = 2;
var LOADING_AFTER_CLEANUP_FN = 3;
var TRIGGER_CLEANUP_FNS = 4;
var PREFETCH_TRIGGER_CLEANUP_FNS = 5;
var DeferBlockBehavior;
(function(DeferBlockBehavior2) {
  DeferBlockBehavior2[DeferBlockBehavior2["Manual"] = 0] = "Manual";
  DeferBlockBehavior2[DeferBlockBehavior2["Playthrough"] = 1] = "Playthrough";
})(DeferBlockBehavior || (DeferBlockBehavior = {}));
function storeTriggerCleanupFn(type, lDetails, cleanupFn) {
  const key = type === 1 ? PREFETCH_TRIGGER_CLEANUP_FNS : TRIGGER_CLEANUP_FNS;
  if (lDetails[key] === null) {
    lDetails[key] = [];
  }
  lDetails[key].push(cleanupFn);
}
function invokeTriggerCleanupFns(type, lDetails) {
  const key = type === 1 ? PREFETCH_TRIGGER_CLEANUP_FNS : TRIGGER_CLEANUP_FNS;
  const cleanupFns = lDetails[key];
  if (cleanupFns !== null) {
    for (const cleanupFn of cleanupFns) {
      cleanupFn();
    }
    lDetails[key] = null;
  }
}
function invokeAllTriggerCleanupFns(lDetails) {
  invokeTriggerCleanupFns(1, lDetails);
  invokeTriggerCleanupFns(0, lDetails);
}
var AfterRenderPhase;
(function(AfterRenderPhase2) {
  AfterRenderPhase2[AfterRenderPhase2["EarlyRead"] = 0] = "EarlyRead";
  AfterRenderPhase2[AfterRenderPhase2["Write"] = 1] = "Write";
  AfterRenderPhase2[AfterRenderPhase2["MixedReadWrite"] = 2] = "MixedReadWrite";
  AfterRenderPhase2[AfterRenderPhase2["Read"] = 3] = "Read";
})(AfterRenderPhase || (AfterRenderPhase = {}));
var _AfterRenderManager = class _AfterRenderManager {
  constructor() {
    this.impl = null;
  }
  execute() {
    this.impl?.execute();
  }
};
_AfterRenderManager.\u0275prov = \u0275\u0275defineInjectable({
  token: _AfterRenderManager,
  providedIn: "root",
  factory: () => new _AfterRenderManager()
});
var AfterRenderManager = _AfterRenderManager;
var _AfterRenderImpl = class _AfterRenderImpl {
  constructor() {
    this.ngZone = inject(NgZone);
    this.scheduler = inject(ChangeDetectionScheduler);
    this.errorHandler = inject(ErrorHandler, {
      optional: true
    });
    this.sequences = /* @__PURE__ */ new Set();
    this.deferredRegistrations = /* @__PURE__ */ new Set();
    this.executing = false;
  }
  /**
   * Run the sequence of phases of hooks, once through. As a result of executing some hooks, more
   * might be scheduled.
   */
  execute() {
    this.executing = true;
    for (const phase of _AfterRenderImpl.PHASES) {
      for (const sequence of this.sequences) {
        if (sequence.erroredOrDestroyed || !sequence.hooks[phase]) {
          continue;
        }
        try {
          sequence.pipelinedValue = this.ngZone.runOutsideAngular(() => sequence.hooks[phase](sequence.pipelinedValue));
        } catch (err) {
          sequence.erroredOrDestroyed = true;
          this.errorHandler?.handleError(err);
        }
      }
    }
    this.executing = false;
    for (const sequence of this.sequences) {
      sequence.afterRun();
      if (sequence.once) {
        this.sequences.delete(sequence);
      }
    }
    for (const sequence of this.deferredRegistrations) {
      this.sequences.add(sequence);
    }
    if (this.deferredRegistrations.size > 0) {
      this.scheduler.notify(
        7
        /* NotificationSource.DeferredRenderHook */
      );
    }
    this.deferredRegistrations.clear();
  }
  register(sequence) {
    if (!this.executing) {
      this.sequences.add(sequence);
      this.scheduler.notify(
        6
        /* NotificationSource.RenderHook */
      );
    } else {
      this.deferredRegistrations.add(sequence);
    }
  }
  unregister(sequence) {
    if (this.executing && this.sequences.has(sequence)) {
      sequence.erroredOrDestroyed = true;
      sequence.pipelinedValue = void 0;
      sequence.once = true;
    } else {
      this.sequences.delete(sequence);
      this.deferredRegistrations.delete(sequence);
    }
  }
};
_AfterRenderImpl.PHASES = [AfterRenderPhase.EarlyRead, AfterRenderPhase.Write, AfterRenderPhase.MixedReadWrite, AfterRenderPhase.Read];
_AfterRenderImpl.\u0275prov = \u0275\u0275defineInjectable({
  token: _AfterRenderImpl,
  providedIn: "root",
  factory: () => new _AfterRenderImpl()
});
var AfterRenderImpl = _AfterRenderImpl;
var AfterRenderSequence = class {
  constructor(impl, hooks, once, destroyRef) {
    this.impl = impl;
    this.hooks = hooks;
    this.once = once;
    this.erroredOrDestroyed = false;
    this.pipelinedValue = void 0;
    this.unregisterOnDestroy = destroyRef.onDestroy(() => this.destroy());
  }
  afterRun() {
    this.erroredOrDestroyed = false;
    this.pipelinedValue = void 0;
  }
  destroy() {
    this.impl.unregister(this);
    this.unregisterOnDestroy();
  }
};
function afterNextRender(callbackOrSpec, options) {
  !options?.injector && assertInInjectionContext(afterNextRender);
  const injector = options?.injector ?? inject(Injector);
  if (!isPlatformBrowser(injector)) {
    return NOOP_AFTER_RENDER_REF;
  }
  performanceMarkFeature("NgAfterNextRender");
  return afterRenderImpl(
    callbackOrSpec,
    injector,
    options,
    /* once */
    true
  );
}
function getHooks(callbackOrSpec, phase) {
  if (callbackOrSpec instanceof Function) {
    const hooks = [void 0, void 0, void 0, void 0];
    hooks[phase] = callbackOrSpec;
    return hooks;
  } else {
    return [callbackOrSpec.earlyRead, callbackOrSpec.write, callbackOrSpec.mixedReadWrite, callbackOrSpec.read];
  }
}
function afterRenderImpl(callbackOrSpec, injector, options, once) {
  const manager = injector.get(AfterRenderManager);
  manager.impl ??= injector.get(AfterRenderImpl);
  const hooks = options?.phase ?? AfterRenderPhase.MixedReadWrite;
  const sequence = new AfterRenderSequence(manager.impl, getHooks(callbackOrSpec, hooks), once, injector.get(DestroyRef));
  manager.impl.register(sequence);
  return sequence;
}
var NOOP_AFTER_RENDER_REF = {
  destroy() {
  }
};
function getDeferBlockDataIndex(deferBlockIndex) {
  return deferBlockIndex + 1;
}
function getLDeferBlockDetails(lView, tNode) {
  const tView = lView[TVIEW];
  const slotIndex = getDeferBlockDataIndex(tNode.index);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  return lView[slotIndex];
}
function setLDeferBlockDetails(lView, deferBlockIndex, lDetails) {
  const tView = lView[TVIEW];
  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  lView[slotIndex] = lDetails;
}
function getTDeferBlockDetails(tView, tNode) {
  const slotIndex = getDeferBlockDataIndex(tNode.index);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  return tView.data[slotIndex];
}
function setTDeferBlockDetails(tView, deferBlockIndex, deferBlockConfig) {
  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  tView.data[slotIndex] = deferBlockConfig;
}
function getTemplateIndexForState(newState, hostLView, tNode) {
  const tView = hostLView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  switch (newState) {
    case DeferBlockState.Complete:
      return tDetails.primaryTmplIndex;
    case DeferBlockState.Loading:
      return tDetails.loadingTmplIndex;
    case DeferBlockState.Error:
      return tDetails.errorTmplIndex;
    case DeferBlockState.Placeholder:
      return tDetails.placeholderTmplIndex;
    default:
      ngDevMode && throwError2(`Unexpected defer block state: ${newState}`);
      return null;
  }
}
function getMinimumDurationForState(tDetails, currentState) {
  if (currentState === DeferBlockState.Placeholder) {
    return tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null;
  } else if (currentState === DeferBlockState.Loading) {
    return tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null;
  }
  return null;
}
function getLoadingBlockAfter(tDetails) {
  return tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null;
}
function addDepsToRegistry(currentDeps, newDeps) {
  if (!currentDeps || currentDeps.length === 0) {
    return newDeps;
  }
  const currentDepSet = new Set(currentDeps);
  for (const dep of newDeps) {
    currentDepSet.add(dep);
  }
  return currentDeps.length === currentDepSet.size ? currentDeps : Array.from(currentDepSet);
}
function getPrimaryBlockTNode(tView, tDetails) {
  const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;
  return getTNode(tView, adjustedIndex);
}
function assertDeferredDependenciesLoaded(tDetails) {
  assertEqual(tDetails.loadingState, DeferDependenciesLoadingState.COMPLETE, "Expecting all deferred dependencies to be loaded.");
}
var eventListenerOptions = {
  passive: true,
  capture: true
};
var hoverTriggers = /* @__PURE__ */ new WeakMap();
var interactionTriggers = /* @__PURE__ */ new WeakMap();
var viewportTriggers = /* @__PURE__ */ new WeakMap();
var interactionEventNames = ["click", "keydown"];
var hoverEventNames = ["mouseenter", "focusin"];
var intersectionObserver = null;
var observedViewportElements = 0;
var DeferEventEntry = class {
  constructor() {
    this.callbacks = /* @__PURE__ */ new Set();
    this.listener = () => {
      for (const callback of this.callbacks) {
        callback();
      }
    };
  }
};
function onInteraction(trigger, callback) {
  let entry = interactionTriggers.get(trigger);
  if (!entry) {
    entry = new DeferEventEntry();
    interactionTriggers.set(trigger, entry);
    for (const name of interactionEventNames) {
      trigger.addEventListener(name, entry.listener, eventListenerOptions);
    }
  }
  entry.callbacks.add(callback);
  return () => {
    const {
      callbacks,
      listener
    } = entry;
    callbacks.delete(callback);
    if (callbacks.size === 0) {
      interactionTriggers.delete(trigger);
      for (const name of interactionEventNames) {
        trigger.removeEventListener(name, listener, eventListenerOptions);
      }
    }
  };
}
function onHover(trigger, callback) {
  let entry = hoverTriggers.get(trigger);
  if (!entry) {
    entry = new DeferEventEntry();
    hoverTriggers.set(trigger, entry);
    for (const name of hoverEventNames) {
      trigger.addEventListener(name, entry.listener, eventListenerOptions);
    }
  }
  entry.callbacks.add(callback);
  return () => {
    const {
      callbacks,
      listener
    } = entry;
    callbacks.delete(callback);
    if (callbacks.size === 0) {
      for (const name of hoverEventNames) {
        trigger.removeEventListener(name, listener, eventListenerOptions);
      }
      hoverTriggers.delete(trigger);
    }
  };
}
function onViewport(trigger, callback, injector) {
  const ngZone = injector.get(NgZone);
  let entry = viewportTriggers.get(trigger);
  intersectionObserver = intersectionObserver || ngZone.runOutsideAngular(() => {
    return new IntersectionObserver((entries) => {
      for (const current of entries) {
        if (current.isIntersecting && viewportTriggers.has(current.target)) {
          ngZone.run(viewportTriggers.get(current.target).listener);
        }
      }
    });
  });
  if (!entry) {
    entry = new DeferEventEntry();
    ngZone.runOutsideAngular(() => intersectionObserver.observe(trigger));
    viewportTriggers.set(trigger, entry);
    observedViewportElements++;
  }
  entry.callbacks.add(callback);
  return () => {
    if (!viewportTriggers.has(trigger)) {
      return;
    }
    entry.callbacks.delete(callback);
    if (entry.callbacks.size === 0) {
      intersectionObserver?.unobserve(trigger);
      viewportTriggers.delete(trigger);
      observedViewportElements--;
    }
    if (observedViewportElements === 0) {
      intersectionObserver?.disconnect();
      intersectionObserver = null;
    }
  };
}
function getTriggerLView(deferredHostLView, deferredTNode, walkUpTimes) {
  if (walkUpTimes == null) {
    return deferredHostLView;
  }
  if (walkUpTimes >= 0) {
    return walkUpViews(walkUpTimes, deferredHostLView);
  }
  const deferredContainer = deferredHostLView[deferredTNode.index];
  ngDevMode && assertLContainer(deferredContainer);
  const triggerLView = deferredContainer[CONTAINER_HEADER_OFFSET] ?? null;
  if (ngDevMode && triggerLView !== null) {
    const lDetails = getLDeferBlockDetails(deferredHostLView, deferredTNode);
    const renderedState = lDetails[DEFER_BLOCK_STATE];
    assertEqual(renderedState, DeferBlockState.Placeholder, "Expected a placeholder to be rendered in this defer block.");
    assertLView(triggerLView);
  }
  return triggerLView;
}
function getTriggerElement(triggerLView, triggerIndex) {
  const element = getNativeByIndex(HEADER_OFFSET + triggerIndex, triggerLView);
  ngDevMode && assertElement(element);
  return element;
}
function registerDomTrigger(initialLView, tNode, triggerIndex, walkUpTimes, registerFn, callback, type) {
  const injector = initialLView[INJECTOR];
  const zone = injector.get(NgZone);
  function pollDomTrigger() {
    if (isDestroyed(initialLView)) {
      return;
    }
    const lDetails = getLDeferBlockDetails(initialLView, tNode);
    const renderedState = lDetails[DEFER_BLOCK_STATE];
    if (renderedState !== DeferBlockInternalState.Initial && renderedState !== DeferBlockState.Placeholder) {
      return;
    }
    const triggerLView = getTriggerLView(initialLView, tNode, walkUpTimes);
    if (!triggerLView) {
      afterNextRender({
        read: pollDomTrigger
      }, {
        injector
      });
      return;
    }
    if (isDestroyed(triggerLView)) {
      return;
    }
    const element = getTriggerElement(triggerLView, triggerIndex);
    const cleanup = registerFn(element, () => {
      zone.run(() => {
        if (initialLView !== triggerLView) {
          removeLViewOnDestroy(triggerLView, cleanup);
        }
        callback();
      });
    }, injector);
    if (initialLView !== triggerLView) {
      storeLViewOnDestroy(triggerLView, cleanup);
    }
    storeTriggerCleanupFn(type, lDetails, cleanup);
  }
  afterNextRender({
    read: pollDomTrigger
  }, {
    injector
  });
}
function onIdle(callback, lView) {
  const injector = lView[INJECTOR];
  const scheduler = injector.get(IdleScheduler);
  const cleanupFn = () => scheduler.remove(callback);
  scheduler.add(callback);
  return cleanupFn;
}
var _requestIdleCallback = () => typeof requestIdleCallback !== "undefined" ? requestIdleCallback : setTimeout;
var _cancelIdleCallback = () => typeof requestIdleCallback !== "undefined" ? cancelIdleCallback : clearTimeout;
var _IdleScheduler = class _IdleScheduler {
  constructor() {
    this.executingCallbacks = false;
    this.idleId = null;
    this.current = /* @__PURE__ */ new Set();
    this.deferred = /* @__PURE__ */ new Set();
    this.ngZone = inject(NgZone);
    this.requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);
    this.cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);
  }
  add(callback) {
    const target = this.executingCallbacks ? this.deferred : this.current;
    target.add(callback);
    if (this.idleId === null) {
      this.scheduleIdleCallback();
    }
  }
  remove(callback) {
    const {
      current,
      deferred
    } = this;
    current.delete(callback);
    deferred.delete(callback);
    if (current.size === 0 && deferred.size === 0) {
      this.cancelIdleCallback();
    }
  }
  scheduleIdleCallback() {
    const callback = () => {
      this.cancelIdleCallback();
      this.executingCallbacks = true;
      for (const callback2 of this.current) {
        callback2();
      }
      this.current.clear();
      this.executingCallbacks = false;
      if (this.deferred.size > 0) {
        for (const callback2 of this.deferred) {
          this.current.add(callback2);
        }
        this.deferred.clear();
        this.scheduleIdleCallback();
      }
    };
    this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback));
  }
  cancelIdleCallback() {
    if (this.idleId !== null) {
      this.cancelIdleCallbackFn(this.idleId);
      this.idleId = null;
    }
  }
  ngOnDestroy() {
    this.cancelIdleCallback();
    this.current.clear();
    this.deferred.clear();
  }
};
_IdleScheduler.\u0275prov = \u0275\u0275defineInjectable({
  token: _IdleScheduler,
  providedIn: "root",
  factory: () => new _IdleScheduler()
});
var IdleScheduler = _IdleScheduler;
function onTimer(delay) {
  return (callback, lView) => scheduleTimerTrigger(delay, callback, lView);
}
function scheduleTimerTrigger(delay, callback, lView) {
  const injector = lView[INJECTOR];
  const scheduler = injector.get(TimerScheduler);
  const cleanupFn = () => scheduler.remove(callback);
  scheduler.add(delay, callback);
  return cleanupFn;
}
var _TimerScheduler = class _TimerScheduler {
  constructor() {
    this.executingCallbacks = false;
    this.timeoutId = null;
    this.invokeTimerAt = null;
    this.current = [];
    this.deferred = [];
  }
  add(delay, callback) {
    const target = this.executingCallbacks ? this.deferred : this.current;
    this.addToQueue(target, Date.now() + delay, callback);
    this.scheduleTimer();
  }
  remove(callback) {
    const {
      current,
      deferred
    } = this;
    const callbackIndex = this.removeFromQueue(current, callback);
    if (callbackIndex === -1) {
      this.removeFromQueue(deferred, callback);
    }
    if (current.length === 0 && deferred.length === 0) {
      this.clearTimeout();
    }
  }
  addToQueue(target, invokeAt, callback) {
    let insertAtIndex = target.length;
    for (let i = 0; i < target.length; i += 2) {
      const invokeQueuedCallbackAt = target[i];
      if (invokeQueuedCallbackAt > invokeAt) {
        insertAtIndex = i;
        break;
      }
    }
    arrayInsert2(target, insertAtIndex, invokeAt, callback);
  }
  removeFromQueue(target, callback) {
    let index = -1;
    for (let i = 0; i < target.length; i += 2) {
      const queuedCallback = target[i + 1];
      if (queuedCallback === callback) {
        index = i;
        break;
      }
    }
    if (index > -1) {
      arraySplice(target, index, 2);
    }
    return index;
  }
  scheduleTimer() {
    const callback = () => {
      this.clearTimeout();
      this.executingCallbacks = true;
      const current = [...this.current];
      const now = Date.now();
      for (let i = 0; i < current.length; i += 2) {
        const invokeAt = current[i];
        const callback2 = current[i + 1];
        if (invokeAt <= now) {
          callback2();
        } else {
          break;
        }
      }
      let lastCallbackIndex = -1;
      for (let i = 0; i < this.current.length; i += 2) {
        const invokeAt = this.current[i];
        if (invokeAt <= now) {
          lastCallbackIndex = i + 1;
        } else {
          break;
        }
      }
      if (lastCallbackIndex >= 0) {
        arraySplice(this.current, 0, lastCallbackIndex + 1);
      }
      this.executingCallbacks = false;
      if (this.deferred.length > 0) {
        for (let i = 0; i < this.deferred.length; i += 2) {
          const invokeAt = this.deferred[i];
          const callback2 = this.deferred[i + 1];
          this.addToQueue(this.current, invokeAt, callback2);
        }
        this.deferred.length = 0;
      }
      this.scheduleTimer();
    };
    const FRAME_DURATION_MS = 16;
    if (this.current.length > 0) {
      const now = Date.now();
      const invokeAt = this.current[0];
      if (this.timeoutId === null || // Reschedule a timer in case a queue contains an item with
      // an earlier timestamp and the delta is more than an average
      // frame duration.
      this.invokeTimerAt && this.invokeTimerAt - invokeAt > FRAME_DURATION_MS) {
        this.clearTimeout();
        const timeout = Math.max(invokeAt - now, FRAME_DURATION_MS);
        this.invokeTimerAt = invokeAt;
        this.timeoutId = setTimeout(callback, timeout);
      }
    }
  }
  clearTimeout() {
    if (this.timeoutId !== null) {
      clearTimeout(this.timeoutId);
      this.timeoutId = null;
    }
  }
  ngOnDestroy() {
    this.clearTimeout();
    this.current.length = 0;
    this.deferred.length = 0;
  }
};
_TimerScheduler.\u0275prov = \u0275\u0275defineInjectable({
  token: _TimerScheduler,
  providedIn: "root",
  factory: () => new _TimerScheduler()
});
var TimerScheduler = _TimerScheduler;
var DEFER_BLOCK_DEPENDENCY_INTERCEPTOR = new InjectionToken("DEFER_BLOCK_DEPENDENCY_INTERCEPTOR");
var DEFER_BLOCK_CONFIG = new InjectionToken(ngDevMode ? "DEFER_BLOCK_CONFIG" : "");
function shouldTriggerDeferBlock(injector) {
  const config2 = injector.get(DEFER_BLOCK_CONFIG, null, {
    optional: true
  });
  if (config2?.behavior === DeferBlockBehavior.Manual) {
    return false;
  }
  return isPlatformBrowser(injector);
}
var applyDeferBlockStateWithSchedulingImpl = null;
function \u0275\u0275deferEnableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex) {
  const tViewConsts = tView.consts;
  if (placeholderConfigIndex != null) {
    tDetails.placeholderBlockConfig = getConstant(tViewConsts, placeholderConfigIndex);
  }
  if (loadingConfigIndex != null) {
    tDetails.loadingBlockConfig = getConstant(tViewConsts, loadingConfigIndex);
  }
  if (applyDeferBlockStateWithSchedulingImpl === null) {
    applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;
  }
}
function \u0275\u0275defer(index, primaryTmplIndex, dependencyResolverFn, loadingTmplIndex, placeholderTmplIndex, errorTmplIndex, loadingConfigIndex, placeholderConfigIndex, enableTimerScheduling) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = declareTemplate(lView, tView, index, null, 0, 0);
  if (tView.firstCreatePass) {
    performanceMarkFeature("NgDefer");
    const tDetails = {
      primaryTmplIndex,
      loadingTmplIndex: loadingTmplIndex ?? null,
      placeholderTmplIndex: placeholderTmplIndex ?? null,
      errorTmplIndex: errorTmplIndex ?? null,
      placeholderBlockConfig: null,
      loadingBlockConfig: null,
      dependencyResolverFn: dependencyResolverFn ?? null,
      loadingState: DeferDependenciesLoadingState.NOT_STARTED,
      loadingPromise: null,
      providers: null
    };
    enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);
    setTDeferBlockDetails(tView, adjustedIndex, tDetails);
  }
  const lContainer = lView[adjustedIndex];
  populateDehydratedViewsInLContainer(lContainer, tNode, lView);
  const lDetails = [
    null,
    // NEXT_DEFER_BLOCK_STATE
    DeferBlockInternalState.Initial,
    // DEFER_BLOCK_STATE
    null,
    // STATE_IS_FROZEN_UNTIL
    null,
    // LOADING_AFTER_CLEANUP_FN
    null,
    // TRIGGER_CLEANUP_FNS
    null
    // PREFETCH_TRIGGER_CLEANUP_FNS
  ];
  setLDeferBlockDetails(lView, adjustedIndex, lDetails);
  const cleanupTriggersFn = () => invokeAllTriggerCleanupFns(lDetails);
  storeTriggerCleanupFn(0, lDetails, () => removeLViewOnDestroy(lView, cleanupTriggersFn));
  storeLViewOnDestroy(lView, cleanupTriggersFn);
}
function \u0275\u0275deferWhen(rawValue) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, rawValue)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const value = Boolean(rawValue);
      const tNode = getSelectedTNode();
      const lDetails = getLDeferBlockDetails(lView, tNode);
      const renderedState = lDetails[DEFER_BLOCK_STATE];
      if (value === false && renderedState === DeferBlockInternalState.Initial) {
        renderPlaceholder(lView, tNode);
      } else if (value === true && (renderedState === DeferBlockInternalState.Initial || renderedState === DeferBlockState.Placeholder)) {
        triggerDeferBlock(lView, tNode);
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function \u0275\u0275deferPrefetchWhen(rawValue) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, rawValue)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const value = Boolean(rawValue);
      const tView = lView[TVIEW];
      const tNode = getSelectedTNode();
      const tDetails = getTDeferBlockDetails(tView, tNode);
      if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
        triggerPrefetching(tDetails, lView, tNode);
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function \u0275\u0275deferOnIdle() {
  scheduleDelayedTrigger(onIdle);
}
function \u0275\u0275deferPrefetchOnIdle() {
  scheduleDelayedPrefetching(onIdle);
}
function \u0275\u0275deferOnImmediate() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const injector = lView[INJECTOR];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (!shouldTriggerDeferBlock(injector) || tDetails.loadingTmplIndex === null) {
    renderPlaceholder(lView, tNode);
  }
  triggerDeferBlock(lView, tNode);
}
function \u0275\u0275deferPrefetchOnImmediate() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    triggerResourceLoading(tDetails, lView, tNode);
  }
}
function \u0275\u0275deferOnTimer(delay) {
  scheduleDelayedTrigger(onTimer(delay));
}
function \u0275\u0275deferPrefetchOnTimer(delay) {
  scheduleDelayedPrefetching(onTimer(delay));
}
function \u0275\u0275deferOnHover(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  renderPlaceholder(lView, tNode);
  registerDomTrigger(
    lView,
    tNode,
    triggerIndex,
    walkUpTimes,
    onHover,
    () => triggerDeferBlock(lView, tNode),
    0
    /* TriggerType.Regular */
  );
}
function \u0275\u0275deferPrefetchOnHover(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onHover,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function \u0275\u0275deferOnInteraction(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  renderPlaceholder(lView, tNode);
  registerDomTrigger(
    lView,
    tNode,
    triggerIndex,
    walkUpTimes,
    onInteraction,
    () => triggerDeferBlock(lView, tNode),
    0
    /* TriggerType.Regular */
  );
}
function \u0275\u0275deferPrefetchOnInteraction(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onInteraction,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function \u0275\u0275deferOnViewport(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  renderPlaceholder(lView, tNode);
  registerDomTrigger(
    lView,
    tNode,
    triggerIndex,
    walkUpTimes,
    onViewport,
    () => triggerDeferBlock(lView, tNode),
    0
    /* TriggerType.Regular */
  );
}
function \u0275\u0275deferPrefetchOnViewport(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onViewport,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function scheduleDelayedTrigger(scheduleFn) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  renderPlaceholder(lView, tNode);
  if (isPlatformBrowser(lView[INJECTOR])) {
    const cleanupFn = scheduleFn(() => triggerDeferBlock(lView, tNode), lView);
    const lDetails = getLDeferBlockDetails(lView, tNode);
    storeTriggerCleanupFn(0, lDetails, cleanupFn);
  }
}
function scheduleDelayedPrefetching(scheduleFn) {
  const lView = getLView();
  if (isPlatformBrowser(lView[INJECTOR])) {
    const tNode = getCurrentTNode();
    const tView = lView[TVIEW];
    const tDetails = getTDeferBlockDetails(tView, tNode);
    if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
      const lDetails = getLDeferBlockDetails(lView, tNode);
      const prefetch = () => triggerPrefetching(tDetails, lView, tNode);
      const cleanupFn = scheduleFn(prefetch, lView);
      storeTriggerCleanupFn(1, lDetails, cleanupFn);
    }
  }
}
function renderDeferBlockState(newState, tNode, lContainer, skipTimerScheduling = false) {
  const hostLView = lContainer[PARENT];
  const hostTView = hostLView[TVIEW];
  if (isDestroyed(hostLView)) return;
  ngDevMode && assertTNodeForLView(tNode, hostLView);
  const lDetails = getLDeferBlockDetails(hostLView, tNode);
  ngDevMode && assertDefined(lDetails, "Expected a defer block state defined");
  const currentState = lDetails[DEFER_BLOCK_STATE];
  if (isValidStateChange(currentState, newState) && isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)) {
    const injector = hostLView[INJECTOR];
    const tDetails = getTDeferBlockDetails(hostTView, tNode);
    const needsScheduling = !skipTimerScheduling && isPlatformBrowser(injector) && (getLoadingBlockAfter(tDetails) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));
    if (ngDevMode && needsScheduling) {
      assertDefined(applyDeferBlockStateWithSchedulingImpl, "Expected scheduling function to be defined");
    }
    const applyStateFn = needsScheduling ? applyDeferBlockStateWithSchedulingImpl : applyDeferBlockState;
    try {
      applyStateFn(newState, lDetails, lContainer, tNode, hostLView);
    } catch (error) {
      handleError(hostLView, error);
    }
  }
}
function getOrCreateEnvironmentInjector(parentInjector, tDetails, providers) {
  return parentInjector.get(CachedInjectorService).getOrCreateInjector(tDetails, parentInjector, providers, ngDevMode ? "DeferBlock Injector" : "");
}
function createDeferBlockInjector(parentInjector, tDetails, providers) {
  if (parentInjector instanceof ChainedInjector) {
    const origInjector = parentInjector.injector;
    const parentEnvInjector2 = parentInjector.parentInjector;
    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector2, tDetails, providers);
    return new ChainedInjector(origInjector, envInjector);
  }
  const parentEnvInjector = parentInjector.get(EnvironmentInjector);
  if (parentEnvInjector !== parentInjector) {
    const envInjector = getOrCreateEnvironmentInjector(parentEnvInjector, tDetails, providers);
    return new ChainedInjector(parentInjector, envInjector);
  }
  return getOrCreateEnvironmentInjector(parentInjector, tDetails, providers);
}
function applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView) {
  const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);
  if (stateTmplIndex !== null) {
    lDetails[DEFER_BLOCK_STATE] = newState;
    const hostTView = hostLView[TVIEW];
    const adjustedIndex = stateTmplIndex + HEADER_OFFSET;
    const activeBlockTNode = getTNode(hostTView, adjustedIndex);
    const viewIndex = 0;
    removeLViewFromLContainer(lContainer, viewIndex);
    let injector;
    if (newState === DeferBlockState.Complete) {
      const tDetails = getTDeferBlockDetails(hostTView, tNode);
      const providers = tDetails.providers;
      if (providers && providers.length > 0) {
        injector = createDeferBlockInjector(hostLView[INJECTOR], tDetails, providers);
      }
    }
    const dehydratedView = findMatchingDehydratedView(lContainer, activeBlockTNode.tView.ssrId);
    const embeddedLView = createAndRenderEmbeddedLView(hostLView, activeBlockTNode, null, {
      dehydratedView,
      injector
    });
    addLViewToLContainer(lContainer, embeddedLView, viewIndex, shouldAddViewToDom(activeBlockTNode, dehydratedView));
    markViewDirty(
      embeddedLView,
      2
      /* NotificationSource.DeferBlockStateUpdate */
    );
  }
}
function applyDeferBlockStateWithScheduling(newState, lDetails, lContainer, tNode, hostLView) {
  const now = Date.now();
  const hostTView = hostLView[TVIEW];
  const tDetails = getTDeferBlockDetails(hostTView, tNode);
  if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {
    lDetails[STATE_IS_FROZEN_UNTIL] = null;
    const loadingAfter = getLoadingBlockAfter(tDetails);
    const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;
    if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {
      lDetails[NEXT_DEFER_BLOCK_STATE] = newState;
      const cleanupFn = scheduleDeferBlockUpdate(loadingAfter, lDetails, tNode, lContainer, hostLView);
      lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;
    } else {
      if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {
        lDetails[LOADING_AFTER_CLEANUP_FN]();
        lDetails[LOADING_AFTER_CLEANUP_FN] = null;
        lDetails[NEXT_DEFER_BLOCK_STATE] = null;
      }
      applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);
      const duration = getMinimumDurationForState(tDetails, newState);
      if (duration !== null) {
        lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;
        scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);
      }
    }
  } else {
    lDetails[NEXT_DEFER_BLOCK_STATE] = newState;
  }
}
function scheduleDeferBlockUpdate(timeout, lDetails, tNode, lContainer, hostLView) {
  const callback = () => {
    const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];
    lDetails[STATE_IS_FROZEN_UNTIL] = null;
    lDetails[NEXT_DEFER_BLOCK_STATE] = null;
    if (nextState !== null) {
      renderDeferBlockState(nextState, tNode, lContainer);
    }
  };
  return scheduleTimerTrigger(timeout, callback, hostLView);
}
function isValidStateChange(currentState, newState) {
  return currentState < newState;
}
function triggerPrefetching(tDetails, lView, tNode) {
  if (lView[INJECTOR] && shouldTriggerDeferBlock(lView[INJECTOR])) {
    triggerResourceLoading(tDetails, lView, tNode);
  }
}
function triggerResourceLoading(tDetails, lView, tNode) {
  const injector = lView[INJECTOR];
  const tView = lView[TVIEW];
  if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {
    return tDetails.loadingPromise ?? Promise.resolve();
  }
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);
  tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;
  invokeTriggerCleanupFns(1, lDetails);
  let dependenciesFn = tDetails.dependencyResolverFn;
  if (ngDevMode) {
    const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, {
      optional: true
    });
    if (deferDependencyInterceptor) {
      dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);
    }
  }
  const pendingTasks = injector.get(PendingTasks);
  const taskId = pendingTasks.add();
  if (!dependenciesFn) {
    tDetails.loadingPromise = Promise.resolve().then(() => {
      tDetails.loadingPromise = null;
      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;
      pendingTasks.remove(taskId);
    });
    return tDetails.loadingPromise;
  }
  tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then((results) => {
    let failed = false;
    const directiveDefs = [];
    const pipeDefs = [];
    for (const result of results) {
      if (result.status === "fulfilled") {
        const dependency = result.value;
        const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);
        if (directiveDef) {
          directiveDefs.push(directiveDef);
        } else {
          const pipeDef = getPipeDef$1(dependency);
          if (pipeDef) {
            pipeDefs.push(pipeDef);
          }
        }
      } else {
        failed = true;
        break;
      }
    }
    tDetails.loadingPromise = null;
    pendingTasks.remove(taskId);
    if (failed) {
      tDetails.loadingState = DeferDependenciesLoadingState.FAILED;
      if (tDetails.errorTmplIndex === null) {
        const templateLocation = ngDevMode ? getTemplateLocationDetails(lView) : "";
        const error = new RuntimeError(750, ngDevMode && `Loading dependencies for \`@defer\` block failed, but no \`@error\` block was configured${templateLocation}. Consider using the \`@error\` block to render an error state.`);
        handleError(lView, error);
      }
    } else {
      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;
      const primaryBlockTView = primaryBlockTNode.tView;
      if (directiveDefs.length > 0) {
        primaryBlockTView.directiveRegistry = addDepsToRegistry(primaryBlockTView.directiveRegistry, directiveDefs);
        const directiveTypes = directiveDefs.map((def) => def.type);
        const providers = internalImportProvidersFrom(false, ...directiveTypes);
        tDetails.providers = providers;
      }
      if (pipeDefs.length > 0) {
        primaryBlockTView.pipeRegistry = addDepsToRegistry(primaryBlockTView.pipeRegistry, pipeDefs);
      }
    }
  });
  return tDetails.loadingPromise;
}
function renderPlaceholder(lView, tNode) {
  const lContainer = lView[tNode.index];
  ngDevMode && assertLContainer(lContainer);
  renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);
}
function renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer) {
  ngDevMode && assertDefined(tDetails.loadingPromise, "Expected loading Promise to exist on this defer block");
  tDetails.loadingPromise.then(() => {
    if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {
      ngDevMode && assertDeferredDependenciesLoaded(tDetails);
      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);
    } else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {
      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);
    }
  });
}
function triggerDeferBlock(lView, tNode) {
  const tView = lView[TVIEW];
  const lContainer = lView[tNode.index];
  const injector = lView[INJECTOR];
  ngDevMode && assertLContainer(lContainer);
  if (!shouldTriggerDeferBlock(injector)) return;
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const tDetails = getTDeferBlockDetails(tView, tNode);
  invokeAllTriggerCleanupFns(lDetails);
  switch (tDetails.loadingState) {
    case DeferDependenciesLoadingState.NOT_STARTED:
      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);
      triggerResourceLoading(tDetails, lView, tNode);
      if (tDetails.loadingState === DeferDependenciesLoadingState.IN_PROGRESS) {
        renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);
      }
      break;
    case DeferDependenciesLoadingState.IN_PROGRESS:
      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);
      renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);
      break;
    case DeferDependenciesLoadingState.COMPLETE:
      ngDevMode && assertDeferredDependenciesLoaded(tDetails);
      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);
      break;
    case DeferDependenciesLoadingState.FAILED:
      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);
      break;
    default:
      if (ngDevMode) {
        throwError2("Unknown defer block state");
      }
  }
}
function \u0275\u0275attribute(name, value, sanitizer, namespace) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, "attr." + name, bindingIndex);
  }
  return \u0275\u0275attribute;
}
function interpolationV(lView, values) {
  ngDevMode && assertLessThan(2, values.length, "should have at least 3 values");
  ngDevMode && assertEqual(values.length % 2, 1, "should have an odd number of values");
  let isBindingUpdated = false;
  let bindingIndex = getBindingIndex();
  for (let i = 1; i < values.length; i += 2) {
    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
  }
  setBindingIndex(bindingIndex);
  if (!isBindingUpdated) {
    return NO_CHANGE;
  }
  let content = values[0];
  for (let i = 1; i < values.length; i += 2) {
    content += renderStringify(values[i]) + values[i + 1];
  }
  return content;
}
function interpolation1(lView, prefix, v0, suffix) {
  const different = bindingUpdated(lView, nextBindingIndex(), v0);
  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
}
function interpolation2(lView, prefix, v0, i0, v1, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated2(lView, bindingIndex, v0, v1);
  incrementBindingIndex(2);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
}
function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
  incrementBindingIndex(3);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;
}
function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  incrementBindingIndex(4);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;
}
function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated(lView, bindingIndex + 4, v42) || different;
  incrementBindingIndex(5);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v42) + suffix : NO_CHANGE;
}
function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated2(lView, bindingIndex + 4, v42, v5) || different;
  incrementBindingIndex(6);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v42) + i4 + renderStringify(v5) + suffix : NO_CHANGE;
}
function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated3(lView, bindingIndex + 4, v42, v5, v6) || different;
  incrementBindingIndex(7);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v42) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;
}
function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated4(lView, bindingIndex + 4, v42, v5, v6, v7) || different;
  incrementBindingIndex(8);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v42) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;
}
function \u0275\u0275attributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 1, prefix, suffix);
  }
  return \u0275\u0275attributeInterpolate1;
}
function \u0275\u0275attributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 2, prefix, i0, suffix);
  }
  return \u0275\u0275attributeInterpolate2;
}
function \u0275\u0275attributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
  }
  return \u0275\u0275attributeInterpolate3;
}
function \u0275\u0275attributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
  }
  return \u0275\u0275attributeInterpolate4;
}
function \u0275\u0275attributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
  }
  return \u0275\u0275attributeInterpolate5;
}
function \u0275\u0275attributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
  }
  return \u0275\u0275attributeInterpolate6;
}
function \u0275\u0275attributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
  }
  return \u0275\u0275attributeInterpolate7;
}
function \u0275\u0275attributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
  }
  return \u0275\u0275attributeInterpolate8;
}
function \u0275\u0275attributeInterpolateV(attrName, values, sanitizer, namespace) {
  const lView = getLView();
  const interpolated = interpolationV(lView, values);
  if (interpolated !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);
    if (ngDevMode) {
      const interpolationInBetween = [values[0]];
      for (let i = 2; i < values.length; i += 2) {
        interpolationInBetween.push(values[i]);
      }
      storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
    }
  }
  return \u0275\u0275attributeInterpolateV;
}
function toTStylingRange(prev, next) {
  ngDevMode && assertNumberInRange(
    prev,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  ngDevMode && assertNumberInRange(
    next,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return prev << 17 | next << 2;
}
function getTStylingRangePrev(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange >> 17 & 32767;
}
function getTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 2) == 2;
}
function setTStylingRangePrev(tStylingRange, previous) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  ngDevMode && assertNumberInRange(
    previous,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return tStylingRange & ~4294836224 | previous << 17;
}
function setTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange | 2;
}
function getTStylingRangeNext(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 131068) >> 2;
}
function setTStylingRangeNext(tStylingRange, next) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  ngDevMode && assertNumberInRange(
    next,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return tStylingRange & ~131068 | //
  next << 2;
}
function getTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 1) === 1;
}
function setTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange | 1;
}
function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {
  ngDevMode && assertFirstUpdatePass(getTView());
  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
  let tmplHead = getTStylingRangePrev(tBindings);
  let tmplTail = getTStylingRangeNext(tBindings);
  tData[index] = tStylingKeyWithStatic;
  let isKeyDuplicateOfStatic = false;
  let tStylingKey;
  if (Array.isArray(tStylingKeyWithStatic)) {
    const staticKeyValueArray = tStylingKeyWithStatic;
    tStylingKey = staticKeyValueArray[1];
    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
      isKeyDuplicateOfStatic = true;
    }
  } else {
    tStylingKey = tStylingKeyWithStatic;
  }
  if (isHostBinding) {
    const hasTemplateBindings = tmplTail !== 0;
    if (hasTemplateBindings) {
      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
      tData[index + 1] = toTStylingRange(previousNode, tmplHead);
      if (previousNode !== 0) {
        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);
      }
      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
    } else {
      tData[index + 1] = toTStylingRange(tmplHead, 0);
      if (tmplHead !== 0) {
        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
      }
      tmplHead = index;
    }
  } else {
    tData[index + 1] = toTStylingRange(tmplTail, 0);
    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, "Adding template bindings after hostBindings is not allowed.");
    if (tmplHead === 0) {
      tmplHead = index;
    } else {
      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
    }
    tmplTail = index;
  }
  if (isKeyDuplicateOfStatic) {
    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
  }
  markDuplicates(tData, tStylingKey, index, true);
  markDuplicates(tData, tStylingKey, index, false);
  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
  tBindings = toTStylingRange(tmplHead, tmplTail);
  if (isClassBinding) {
    tNode.classBindings = tBindings;
  } else {
    tNode.styleBindings = tBindings;
  }
}
function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;
  if (residual != null && typeof tStylingKey == "string" && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
  }
}
function markDuplicates(tData, tStylingKey, index, isPrevDir) {
  const tStylingAtIndex = tData[index + 1];
  const isMap = tStylingKey === null;
  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
  let foundDuplicate = false;
  while (cursor !== 0 && (foundDuplicate === false || isMap)) {
    ngDevMode && assertIndexInRange(tData, cursor);
    const tStylingValueAtCursor = tData[cursor];
    const tStyleRangeAtCursor = tData[cursor + 1];
    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
      foundDuplicate = true;
      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
    }
    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);
  }
  if (foundDuplicate) {
    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);
  }
}
function isStylingMatch(tStylingKeyCursor, tStylingKey) {
  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, "Expected that 'tStylingKey' has been unwrapped");
  if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
  // location so we must assume that we have a match.
  tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
  // contains a match.
  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey) {
    return true;
  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === "string") {
    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0;
  }
  return false;
}
var parserState = {
  textEnd: 0,
  key: 0,
  keyEnd: 0,
  value: 0,
  valueEnd: 0
};
function getLastParsedKey(text) {
  return text.substring(parserState.key, parserState.keyEnd);
}
function getLastParsedValue(text) {
  return text.substring(parserState.value, parserState.valueEnd);
}
function parseClassName(text) {
  resetParserState(text);
  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
function parseClassNameNext(text, index) {
  const end = parserState.textEnd;
  if (end === index) {
    return -1;
  }
  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);
  return consumeWhitespace(text, index, end);
}
function parseStyle(text) {
  resetParserState(text);
  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
function parseStyleNext(text, startIndex) {
  const end = parserState.textEnd;
  let index = parserState.key = consumeWhitespace(text, startIndex, end);
  if (end === index) {
    return -1;
  }
  index = parserState.keyEnd = consumeStyleKey(text, index, end);
  index = consumeSeparator(
    text,
    index,
    end,
    58
    /* CharCode.COLON */
  );
  index = parserState.value = consumeWhitespace(text, index, end);
  index = parserState.valueEnd = consumeStyleValue(text, index, end);
  return consumeSeparator(
    text,
    index,
    end,
    59
    /* CharCode.SEMI_COLON */
  );
}
function resetParserState(text) {
  parserState.key = 0;
  parserState.keyEnd = 0;
  parserState.value = 0;
  parserState.valueEnd = 0;
  parserState.textEnd = text.length;
}
function consumeWhitespace(text, startIndex, endIndex) {
  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32) {
    startIndex++;
  }
  return startIndex;
}
function consumeClassToken(text, startIndex, endIndex) {
  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32) {
    startIndex++;
  }
  return startIndex;
}
function consumeStyleKey(text, startIndex, endIndex) {
  let ch;
  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45 || ch === 95 || (ch & -33) >= 65 && (ch & -33) <= 90 || ch >= 48 && ch <= 57)) {
    startIndex++;
  }
  return startIndex;
}
function consumeSeparator(text, startIndex, endIndex, separator) {
  startIndex = consumeWhitespace(text, startIndex, endIndex);
  if (startIndex < endIndex) {
    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {
      malformedStyleError(text, String.fromCharCode(separator), startIndex);
    }
    startIndex++;
  }
  return startIndex;
}
function consumeStyleValue(text, startIndex, endIndex) {
  let ch1 = -1;
  let ch2 = -1;
  let ch3 = -1;
  let i = startIndex;
  let lastChIndex = i;
  while (i < endIndex) {
    const ch = text.charCodeAt(i++);
    if (ch === 59) {
      return lastChIndex;
    } else if (ch === 34 || ch === 39) {
      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);
    } else if (startIndex === i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
    ch3 === 85 && ch2 === 82 && ch1 === 76 && ch === 40) {
      lastChIndex = i = consumeQuotedText(text, 41, i, endIndex);
    } else if (ch > 32) {
      lastChIndex = i;
    }
    ch3 = ch2;
    ch2 = ch1;
    ch1 = ch & -33;
  }
  return lastChIndex;
}
function consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {
  let ch1 = -1;
  let index = startIndex;
  while (index < endIndex) {
    const ch = text.charCodeAt(index++);
    if (ch == quoteCharCode && ch1 !== 92) {
      return index;
    }
    if (ch == 92 && ch1 === 92) {
      ch1 = 0;
    } else {
      ch1 = ch;
    }
  }
  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();
}
function malformedStyleError(text, expecting, index) {
  ngDevMode && assertEqual(typeof text === "string", true, "String expected here");
  throw throwError2(`Malformed style at location ${index} in string '` + text.substring(0, index) + "[>>" + text.substring(index, index + 1) + "<<]" + text.slice(index + 1) + `'. Expecting '${expecting}'.`);
}
function \u0275\u0275property(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275property;
}
function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
  const inputs = tNode.inputs;
  const property = isClassBased ? "class" : "style";
  setInputsForProperty(tView, lView, inputs[property], property, value);
}
function \u0275\u0275styleProp(prop, value, suffix) {
  checkStylingProperty(prop, value, suffix, false);
  return \u0275\u0275styleProp;
}
function \u0275\u0275classProp(className, value) {
  checkStylingProperty(className, value, null, true);
  return \u0275\u0275classProp;
}
function \u0275\u0275styleMap(styles) {
  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
}
function styleStringParser(keyValueArray, text) {
  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {
    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));
  }
}
function \u0275\u0275classMap(classes) {
  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);
}
function classStringParser(keyValueArray, text) {
  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);
  }
}
function checkStylingProperty(prop, value, suffix, isClassBased) {
  const lView = getLView();
  const tView = getTView();
  const bindingIndex = incrementBindingIndex(2);
  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
  }
  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    const tNode = tView.data[getSelectedIndex()];
    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
  }
}
function checkStylingMap(keyValueArraySet2, stringParser, value, isClassBased) {
  const tView = getTView();
  const bindingIndex = incrementBindingIndex(2);
  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
  }
  const lView = getLView();
  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    const tNode = tView.data[getSelectedIndex()];
    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
      if (ngDevMode) {
        const tStylingKey = tView.data[bindingIndex];
        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, "Styling linked list shadow input should be marked as 'false'");
      }
      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(";"), true, "Expecting static portion to end with ';'");
      if (staticPrefix !== null) {
        value = concatStringsWithSpace(staticPrefix, value ? value : "");
      }
      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
    } else {
      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet2, stringParser, value), isClassBased, bindingIndex);
    }
  }
}
function isInHostBindings(tView, bindingIndex) {
  return bindingIndex >= tView.expandoStartIndex;
}
function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
  ngDevMode && assertFirstUpdatePass(tView);
  const tData = tView.data;
  if (tData[bindingIndex + 1] === null) {
    const tNode = tData[getSelectedIndex()];
    ngDevMode && assertDefined(tNode, "TNode expected");
    const isHostBindings = isInHostBindings(tView, bindingIndex);
    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
      tStylingKey = false;
    }
    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
  }
}
function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
  const hostDirectiveDef = getCurrentDirectiveDef(tData);
  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
  if (hostDirectiveDef === null) {
    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;
    if (isFirstStylingInstructionInTemplate) {
      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);
      residual = null;
    }
  } else {
    const directiveStylingLast = tNode.directiveStylingLast;
    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;
    if (isFirstStylingInstructionInHostBinding) {
      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);
      if (residual === null) {
        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);
        if (templateStylingKey !== void 0 && Array.isArray(templateStylingKey)) {
          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1], isClassBased);
          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
        }
      } else {
        residual = collectResidual(tData, tNode, isClassBased);
      }
    }
  }
  if (residual !== void 0) {
    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;
  }
  return stylingKey;
}
function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
  if (getTStylingRangeNext(bindings) === 0) {
    return void 0;
  }
  return tData[getTStylingRangePrev(bindings)];
}
function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, "Expecting to have at least one template styling binding.");
  tData[getTStylingRangePrev(bindings)] = tStylingKey;
}
function collectResidual(tData, tNode, isClassBased) {
  let residual = void 0;
  const directiveEnd = tNode.directiveEnd;
  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, "By the time this function gets called at least one hostBindings-node styling instruction must have executed.");
  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
    const attrs = tData[i].hostAttrs;
    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
  }
  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
}
function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
  let currentDirective = null;
  const directiveEnd = tNode.directiveEnd;
  let directiveStylingLast = tNode.directiveStylingLast;
  if (directiveStylingLast === -1) {
    directiveStylingLast = tNode.directiveStart;
  } else {
    directiveStylingLast++;
  }
  while (directiveStylingLast < directiveEnd) {
    currentDirective = tData[directiveStylingLast];
    ngDevMode && assertDefined(currentDirective, "expected to be defined");
    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
    if (currentDirective === hostDirectiveDef) break;
    directiveStylingLast++;
  }
  if (hostDirectiveDef !== null) {
    tNode.directiveStylingLast = directiveStylingLast;
  }
  return stylingKey;
}
function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
  const desiredMarker = isClassBased ? 1 : 2;
  let currentMarker = -1;
  if (attrs !== null) {
    for (let i = 0; i < attrs.length; i++) {
      const item = attrs[i];
      if (typeof item === "number") {
        currentMarker = item;
      } else {
        if (currentMarker === desiredMarker) {
          if (!Array.isArray(stylingKey)) {
            stylingKey = stylingKey === void 0 ? [] : ["", stylingKey];
          }
          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
        }
      }
    }
  }
  return stylingKey === void 0 ? null : stylingKey;
}
function toStylingKeyValueArray(keyValueArraySet2, stringParser, value) {
  if (value == null || value === "") return EMPTY_ARRAY;
  const styleKeyValueArray = [];
  const unwrappedValue = unwrapSafeValue(value);
  if (Array.isArray(unwrappedValue)) {
    for (let i = 0; i < unwrappedValue.length; i++) {
      keyValueArraySet2(styleKeyValueArray, unwrappedValue[i], true);
    }
  } else if (typeof unwrappedValue === "object") {
    for (const key in unwrappedValue) {
      if (unwrappedValue.hasOwnProperty(key)) {
        keyValueArraySet2(styleKeyValueArray, key, unwrappedValue[key]);
      }
    }
  } else if (typeof unwrappedValue === "string") {
    stringParser(styleKeyValueArray, unwrappedValue);
  } else {
    ngDevMode && throwError2("Unsupported styling type " + typeof unwrappedValue + ": " + unwrappedValue);
  }
  return styleKeyValueArray;
}
function styleKeyValueArraySet(keyValueArray, key, value) {
  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
}
function classKeyValueArraySet(keyValueArray, key, value) {
  const stringKey = String(key);
  if (stringKey !== "" && !stringKey.includes(" ")) {
    keyValueArraySet(keyValueArray, stringKey, value);
  }
}
function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
  if (oldKeyValueArray === NO_CHANGE) {
    oldKeyValueArray = EMPTY_ARRAY;
  }
  let oldIndex = 0;
  let newIndex = 0;
  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;
  while (oldKey !== null || newKey !== null) {
    ngDevMode && assertLessThan(oldIndex, 999, "Are we stuck in infinite loop?");
    ngDevMode && assertLessThan(newIndex, 999, "Are we stuck in infinite loop?");
    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : void 0;
    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : void 0;
    let setKey = null;
    let setValue2 = void 0;
    if (oldKey === newKey) {
      oldIndex += 2;
      newIndex += 2;
      if (oldValue !== newValue) {
        setKey = newKey;
        setValue2 = newValue;
      }
    } else if (newKey === null || oldKey !== null && oldKey < newKey) {
      oldIndex += 2;
      setKey = oldKey;
    } else {
      ngDevMode && assertDefined(newKey, "Expecting to have a valid key");
      newIndex += 2;
      setKey = newKey;
      setValue2 = newValue;
    }
    if (setKey !== null) {
      updateStyling(tView, tNode, lView, renderer, setKey, setValue2, isClassBased, bindingIndex);
    }
    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
  }
}
function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
  if (!(tNode.type & 3)) {
    return;
  }
  const tData = tView.data;
  const tRange = tData[bindingIndex + 1];
  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : void 0;
  if (!isStylingValuePresent(higherPriorityValue)) {
    if (!isStylingValuePresent(value)) {
      if (getTStylingRangePrevDuplicate(tRange)) {
        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
      }
    }
    const rNode = getNativeByIndex(getSelectedIndex(), lView);
    applyStyling(renderer, isClassBased, rNode, prop, value);
  }
}
function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
  const isPrevDirection = tNode === null;
  let value = void 0;
  while (index > 0) {
    const rawKey = tData[index];
    const containsStatics = Array.isArray(rawKey);
    const key = containsStatics ? rawKey[1] : rawKey;
    const isStylingMap = key === null;
    let valueAtLViewIndex = lView[index + 1];
    if (valueAtLViewIndex === NO_CHANGE) {
      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : void 0;
    }
    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : void 0;
    if (containsStatics && !isStylingValuePresent(currentValue)) {
      currentValue = keyValueArrayGet(rawKey, prop);
    }
    if (isStylingValuePresent(currentValue)) {
      value = currentValue;
      if (isPrevDirection) {
        return value;
      }
    }
    const tRange = tData[index + 1];
    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
  }
  if (tNode !== null) {
    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
    if (residual != null) {
      value = keyValueArrayGet(residual, prop);
    }
  }
  return value;
}
function isStylingValuePresent(value) {
  return value !== void 0;
}
function normalizeSuffix(value, suffix) {
  if (value == null || value === "") {
  } else if (typeof suffix === "string") {
    value = value + suffix;
  } else if (typeof value === "object") {
    value = stringify(unwrapSafeValue(value));
  }
  return value;
}
function hasStylingInputShadow(tNode, isClassBased) {
  return (tNode.flags & (isClassBased ? 8 : 16)) !== 0;
}
function \u0275\u0275classMapInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolateV(values) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275componentInstance() {
  const instance = getLView()[DECLARATION_COMPONENT_VIEW][CONTEXT];
  ngDevMode && assertDefined(instance, "Expected component instance to be defined");
  return instance;
}
var LiveCollection = class {
  destroy(item) {
  }
  updateValue(index, value) {
  }
  // operations below could be implemented on top of the operations defined so far, but having
  // them explicitly allow clear expression of intent and potentially more performant
  // implementations
  swap(index1, index2) {
    const startIdx = Math.min(index1, index2);
    const endIdx = Math.max(index1, index2);
    const endItem = this.detach(endIdx);
    if (endIdx - startIdx > 1) {
      const startItem = this.detach(startIdx);
      this.attach(startIdx, endItem);
      this.attach(endIdx, startItem);
    } else {
      this.attach(startIdx, endItem);
    }
  }
  move(prevIndex, newIdx) {
    this.attach(newIdx, this.detach(prevIndex));
  }
};
function valuesMatching(liveIdx, liveValue, newIdx, newValue, trackBy) {
  if (liveIdx === newIdx && Object.is(liveValue, newValue)) {
    return 1;
  } else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {
    return -1;
  }
  return 0;
}
function recordDuplicateKeys(keyToIdx, key, idx) {
  const idxSoFar = keyToIdx.get(key);
  if (idxSoFar !== void 0) {
    idxSoFar.add(idx);
  } else {
    keyToIdx.set(key, /* @__PURE__ */ new Set([idx]));
  }
}
function reconcile(liveCollection, newCollection, trackByFn) {
  let detachedItems = void 0;
  let liveKeysInTheFuture = void 0;
  let liveStartIdx = 0;
  let liveEndIdx = liveCollection.length - 1;
  const duplicateKeys = ngDevMode ? /* @__PURE__ */ new Map() : void 0;
  if (Array.isArray(newCollection)) {
    let newEndIdx = newCollection.length - 1;
    while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {
      const liveStartValue = liveCollection.at(liveStartIdx);
      const newStartValue = newCollection[liveStartIdx];
      if (ngDevMode) {
        recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newStartValue), liveStartIdx);
      }
      const isStartMatching = valuesMatching(liveStartIdx, liveStartValue, liveStartIdx, newStartValue, trackByFn);
      if (isStartMatching !== 0) {
        if (isStartMatching < 0) {
          liveCollection.updateValue(liveStartIdx, newStartValue);
        }
        liveStartIdx++;
        continue;
      }
      const liveEndValue = liveCollection.at(liveEndIdx);
      const newEndValue = newCollection[newEndIdx];
      if (ngDevMode) {
        recordDuplicateKeys(duplicateKeys, trackByFn(newEndIdx, newEndValue), newEndIdx);
      }
      const isEndMatching = valuesMatching(liveEndIdx, liveEndValue, newEndIdx, newEndValue, trackByFn);
      if (isEndMatching !== 0) {
        if (isEndMatching < 0) {
          liveCollection.updateValue(liveEndIdx, newEndValue);
        }
        liveEndIdx--;
        newEndIdx--;
        continue;
      }
      const liveStartKey = trackByFn(liveStartIdx, liveStartValue);
      const liveEndKey = trackByFn(liveEndIdx, liveEndValue);
      const newStartKey = trackByFn(liveStartIdx, newStartValue);
      if (Object.is(newStartKey, liveEndKey)) {
        const newEndKey = trackByFn(newEndIdx, newEndValue);
        if (Object.is(newEndKey, liveStartKey)) {
          liveCollection.swap(liveStartIdx, liveEndIdx);
          liveCollection.updateValue(liveEndIdx, newEndValue);
          newEndIdx--;
          liveEndIdx--;
        } else {
          liveCollection.move(liveEndIdx, liveStartIdx);
        }
        liveCollection.updateValue(liveStartIdx, newStartValue);
        liveStartIdx++;
        continue;
      }
      detachedItems ??= new UniqueValueMultiKeyMap();
      liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);
      if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {
        liveCollection.updateValue(liveStartIdx, newStartValue);
        liveStartIdx++;
        liveEndIdx++;
      } else if (!liveKeysInTheFuture.has(newStartKey)) {
        const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);
        liveCollection.attach(liveStartIdx, newItem);
        liveStartIdx++;
        liveEndIdx++;
      } else {
        detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));
        liveEndIdx--;
      }
    }
    while (liveStartIdx <= newEndIdx) {
      createOrAttach(liveCollection, detachedItems, trackByFn, liveStartIdx, newCollection[liveStartIdx]);
      liveStartIdx++;
    }
  } else if (newCollection != null) {
    const newCollectionIterator = newCollection[Symbol.iterator]();
    let newIterationResult = newCollectionIterator.next();
    while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {
      const liveValue = liveCollection.at(liveStartIdx);
      const newValue = newIterationResult.value;
      if (ngDevMode) {
        recordDuplicateKeys(duplicateKeys, trackByFn(liveStartIdx, newValue), liveStartIdx);
      }
      const isStartMatching = valuesMatching(liveStartIdx, liveValue, liveStartIdx, newValue, trackByFn);
      if (isStartMatching !== 0) {
        if (isStartMatching < 0) {
          liveCollection.updateValue(liveStartIdx, newValue);
        }
        liveStartIdx++;
        newIterationResult = newCollectionIterator.next();
      } else {
        detachedItems ??= new UniqueValueMultiKeyMap();
        liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);
        const newKey = trackByFn(liveStartIdx, newValue);
        if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {
          liveCollection.updateValue(liveStartIdx, newValue);
          liveStartIdx++;
          liveEndIdx++;
          newIterationResult = newCollectionIterator.next();
        } else if (!liveKeysInTheFuture.has(newKey)) {
          liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));
          liveStartIdx++;
          liveEndIdx++;
          newIterationResult = newCollectionIterator.next();
        } else {
          const liveKey = trackByFn(liveStartIdx, liveValue);
          detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));
          liveEndIdx--;
        }
      }
    }
    while (!newIterationResult.done) {
      createOrAttach(liveCollection, detachedItems, trackByFn, liveCollection.length, newIterationResult.value);
      newIterationResult = newCollectionIterator.next();
    }
  }
  while (liveStartIdx <= liveEndIdx) {
    liveCollection.destroy(liveCollection.detach(liveEndIdx--));
  }
  detachedItems?.forEach((item) => {
    liveCollection.destroy(item);
  });
  if (ngDevMode) {
    let duplicatedKeysMsg = [];
    for (const [key, idxSet] of duplicateKeys) {
      if (idxSet.size > 1) {
        const idx = [...idxSet].sort((a, b) => a - b);
        for (let i = 1; i < idx.length; i++) {
          duplicatedKeysMsg.push(`key "${stringifyForError(key)}" at index "${idx[i - 1]}" and "${idx[i]}"`);
        }
      }
    }
    if (duplicatedKeysMsg.length > 0) {
      const message = formatRuntimeError(-955, "The provided track expression resulted in duplicated keys for a given collection. Adjust the tracking expression such that it uniquely identifies all the items in the collection. Duplicated keys were: \n" + duplicatedKeysMsg.join(", \n") + ".");
      console.warn(message);
    }
  }
}
function attachPreviouslyDetached(prevCollection, detachedItems, index, key) {
  if (detachedItems !== void 0 && detachedItems.has(key)) {
    prevCollection.attach(index, detachedItems.get(key));
    detachedItems.delete(key);
    return true;
  }
  return false;
}
function createOrAttach(liveCollection, detachedItems, trackByFn, index, value) {
  if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {
    const newItem = liveCollection.create(index, value);
    liveCollection.attach(index, newItem);
  } else {
    liveCollection.updateValue(index, value);
  }
}
function initLiveItemsInTheFuture(liveCollection, start, end, trackByFn) {
  const keys = /* @__PURE__ */ new Set();
  for (let i = start; i <= end; i++) {
    keys.add(trackByFn(i, liveCollection.at(i)));
  }
  return keys;
}
var UniqueValueMultiKeyMap = class {
  constructor() {
    this.kvMap = /* @__PURE__ */ new Map();
    this._vMap = void 0;
  }
  has(key) {
    return this.kvMap.has(key);
  }
  delete(key) {
    if (!this.has(key)) return false;
    const value = this.kvMap.get(key);
    if (this._vMap !== void 0 && this._vMap.has(value)) {
      this.kvMap.set(key, this._vMap.get(value));
      this._vMap.delete(value);
    } else {
      this.kvMap.delete(key);
    }
    return true;
  }
  get(key) {
    return this.kvMap.get(key);
  }
  set(key, value) {
    if (this.kvMap.has(key)) {
      let prevValue = this.kvMap.get(key);
      ngDevMode && assertNotSame(prevValue, value, `Detected a duplicated value ${value} for the key ${key}`);
      if (this._vMap === void 0) {
        this._vMap = /* @__PURE__ */ new Map();
      }
      const vMap = this._vMap;
      while (vMap.has(prevValue)) {
        prevValue = vMap.get(prevValue);
      }
      vMap.set(prevValue, value);
    } else {
      this.kvMap.set(key, value);
    }
  }
  forEach(cb) {
    for (let [key, value] of this.kvMap) {
      cb(value, key);
      if (this._vMap !== void 0) {
        const vMap = this._vMap;
        while (vMap.has(value)) {
          value = vMap.get(value);
          cb(value, key);
        }
      }
    }
  }
};
function \u0275\u0275conditional(matchingTemplateIndex, contextValue) {
  performanceMarkFeature("NgControlFlow");
  const hostLView = getLView();
  const bindingIndex = nextBindingIndex();
  const prevMatchingTemplateIndex = hostLView[bindingIndex] !== NO_CHANGE ? hostLView[bindingIndex] : -1;
  const prevContainer = prevMatchingTemplateIndex !== -1 ? getLContainer(hostLView, HEADER_OFFSET + prevMatchingTemplateIndex) : void 0;
  const viewInContainerIdx = 0;
  if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      if (prevContainer !== void 0) {
        removeLViewFromLContainer(prevContainer, viewInContainerIdx);
      }
      if (matchingTemplateIndex !== -1) {
        const nextLContainerIndex = HEADER_OFFSET + matchingTemplateIndex;
        const nextContainer = getLContainer(hostLView, nextLContainerIndex);
        const templateTNode = getExistingTNode(hostLView[TVIEW], nextLContainerIndex);
        const dehydratedView = findMatchingDehydratedView(nextContainer, templateTNode.tView.ssrId);
        const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, contextValue, {
          dehydratedView
        });
        addLViewToLContainer(nextContainer, embeddedLView, viewInContainerIdx, shouldAddViewToDom(templateTNode, dehydratedView));
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  } else if (prevContainer !== void 0) {
    const lView = getLViewFromLContainer(prevContainer, viewInContainerIdx);
    if (lView !== void 0) {
      lView[CONTEXT] = contextValue;
    }
  }
}
var RepeaterContext = class {
  constructor(lContainer, $implicit, $index) {
    this.lContainer = lContainer;
    this.$implicit = $implicit;
    this.$index = $index;
  }
  get $count() {
    return this.lContainer.length - CONTAINER_HEADER_OFFSET;
  }
};
function \u0275\u0275repeaterTrackByIndex(index) {
  return index;
}
function \u0275\u0275repeaterTrackByIdentity(_, value) {
  return value;
}
var RepeaterMetadata = class {
  constructor(hasEmptyBlock, trackByFn, liveCollection) {
    this.hasEmptyBlock = hasEmptyBlock;
    this.trackByFn = trackByFn;
    this.liveCollection = liveCollection;
  }
};
function \u0275\u0275repeaterCreate(index, templateFn, decls, vars, tagName, attrsIndex, trackByFn, trackByUsesComponentInstance, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, emptyAttrsIndex) {
  performanceMarkFeature("NgControlFlow");
  ngDevMode && assertFunction(trackByFn, `A track expression must be a function, was ${typeof trackByFn} instead.`);
  const lView = getLView();
  const tView = getTView();
  const hasEmptyBlock = emptyTemplateFn !== void 0;
  const hostLView = getLView();
  const boundTrackBy = trackByUsesComponentInstance ? (
    // We only want to bind when necessary, because it produces a
    // new function. For pure functions it's not necessary.
    trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT])
  ) : trackByFn;
  const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);
  hostLView[HEADER_OFFSET + index] = metadata;
  declareTemplate(lView, tView, index + 1, templateFn, decls, vars, tagName, getConstant(tView.consts, attrsIndex));
  if (hasEmptyBlock) {
    ngDevMode && assertDefined(emptyDecls, "Missing number of declarations for the empty repeater block.");
    ngDevMode && assertDefined(emptyVars, "Missing number of bindings for the empty repeater block.");
    declareTemplate(lView, tView, index + 2, emptyTemplateFn, emptyDecls, emptyVars, emptyTagName, getConstant(tView.consts, emptyAttrsIndex));
  }
}
function isViewExpensiveToRecreate(lView) {
  return lView.length - HEADER_OFFSET > 2;
}
var OperationsCounter = class {
  constructor() {
    this.created = 0;
    this.destroyed = 0;
  }
  reset() {
    this.created = 0;
    this.destroyed = 0;
  }
  recordCreate() {
    this.created++;
  }
  recordDestroy() {
    this.destroyed++;
  }
  /**
   * A method indicating if the entire collection was re-created as part of the reconciliation pass.
   * Used to warn developers about the usage of a tracking function that might result in excessive
   * amount of view creation / destroy operations.
   *
   * @returns boolean value indicating if a live collection was re-created
   */
  wasReCreated(collectionLen) {
    return collectionLen > 0 && this.created === this.destroyed && this.created === collectionLen;
  }
};
var LiveCollectionLContainerImpl = class extends LiveCollection {
  constructor(lContainer, hostLView, templateTNode) {
    super();
    this.lContainer = lContainer;
    this.hostLView = hostLView;
    this.templateTNode = templateTNode;
    this.operationsCounter = ngDevMode ? new OperationsCounter() : void 0;
    this.needsIndexUpdate = false;
  }
  get length() {
    return this.lContainer.length - CONTAINER_HEADER_OFFSET;
  }
  at(index) {
    return this.getLView(index)[CONTEXT].$implicit;
  }
  attach(index, lView) {
    const dehydratedView = lView[HYDRATION];
    this.needsIndexUpdate ||= index !== this.length;
    addLViewToLContainer(this.lContainer, lView, index, shouldAddViewToDom(this.templateTNode, dehydratedView));
  }
  detach(index) {
    this.needsIndexUpdate ||= index !== this.length - 1;
    return detachExistingView(this.lContainer, index);
  }
  create(index, value) {
    const dehydratedView = findMatchingDehydratedView(this.lContainer, this.templateTNode.tView.ssrId);
    const embeddedLView = createAndRenderEmbeddedLView(this.hostLView, this.templateTNode, new RepeaterContext(this.lContainer, value, index), {
      dehydratedView
    });
    this.operationsCounter?.recordCreate();
    return embeddedLView;
  }
  destroy(lView) {
    destroyLView(lView[TVIEW], lView);
    this.operationsCounter?.recordDestroy();
  }
  updateValue(index, value) {
    this.getLView(index)[CONTEXT].$implicit = value;
  }
  reset() {
    this.needsIndexUpdate = false;
    this.operationsCounter?.reset();
  }
  updateIndexes() {
    if (this.needsIndexUpdate) {
      for (let i = 0; i < this.length; i++) {
        this.getLView(i)[CONTEXT].$index = i;
      }
    }
  }
  getLView(index) {
    return getExistingLViewFromLContainer(this.lContainer, index);
  }
};
function \u0275\u0275repeater(collection) {
  const prevConsumer = setActiveConsumer(null);
  const metadataSlotIdx = getSelectedIndex();
  try {
    const hostLView = getLView();
    const hostTView = hostLView[TVIEW];
    const metadata = hostLView[metadataSlotIdx];
    const containerIndex = metadataSlotIdx + 1;
    const lContainer = getLContainer(hostLView, containerIndex);
    if (metadata.liveCollection === void 0) {
      const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);
      metadata.liveCollection = new LiveCollectionLContainerImpl(lContainer, hostLView, itemTemplateTNode);
    } else {
      metadata.liveCollection.reset();
    }
    const liveCollection = metadata.liveCollection;
    reconcile(liveCollection, collection, metadata.trackByFn);
    if (ngDevMode && metadata.trackByFn === \u0275\u0275repeaterTrackByIdentity && liveCollection.operationsCounter?.wasReCreated(liveCollection.length) && isViewExpensiveToRecreate(getExistingLViewFromLContainer(lContainer, 0))) {
      const message = formatRuntimeError(-956, `The configured tracking expression (track by identity) caused re-creation of the entire collection of size ${liveCollection.length}. This is an expensive operation requiring destruction and subsequent creation of DOM nodes, directives, components etc. Please review the "track expression" and make sure that it uniquely identifies items in a collection.`);
      console.warn(message);
    }
    liveCollection.updateIndexes();
    if (metadata.hasEmptyBlock) {
      const bindingIndex = nextBindingIndex();
      const isCollectionEmpty = liveCollection.length === 0;
      if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {
        const emptyTemplateIndex = metadataSlotIdx + 2;
        const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);
        if (isCollectionEmpty) {
          const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);
          const dehydratedView = findMatchingDehydratedView(lContainerForEmpty, emptyTemplateTNode.tView.ssrId);
          const embeddedLView = createAndRenderEmbeddedLView(hostLView, emptyTemplateTNode, void 0, {
            dehydratedView
          });
          addLViewToLContainer(lContainerForEmpty, embeddedLView, 0, shouldAddViewToDom(emptyTemplateTNode, dehydratedView));
        } else {
          removeLViewFromLContainer(lContainerForEmpty, 0);
        }
      }
    }
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function getLContainer(lView, index) {
  const lContainer = lView[index];
  ngDevMode && assertLContainer(lContainer);
  return lContainer;
}
function detachExistingView(lContainer, index) {
  const existingLView = detachView(lContainer, index);
  ngDevMode && assertLView(existingLView);
  return existingLView;
}
function getExistingLViewFromLContainer(lContainer, index) {
  const existingLView = getLViewFromLContainer(lContainer, index);
  ngDevMode && assertLView(existingLView);
  return existingLView;
}
function getExistingTNode(tView, index) {
  const tNode = getTNode(tView, index);
  ngDevMode && assertTNode(tNode);
  return tNode;
}
function elementStartFirstCreatePass(index, tView, lView, name, attrsIndex, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const attrs = getConstant(tViewConsts, attrsIndex);
  const tNode = getOrCreateTNode(tView, index, 2, name, attrs);
  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
  if (tNode.attrs !== null) {
    computeStaticStyling(tNode, tNode.attrs, false);
  }
  if (tNode.mergedAttrs !== null) {
    computeStaticStyling(tNode, tNode.mergedAttrs, true);
  }
  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }
  return tNode;
}
function \u0275\u0275elementStart(index, name, attrsIndex, localRefsIndex) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "elements should be created before any bindings");
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  const renderer = lView[RENDERER];
  const tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  const native = _locateOrCreateElementNode(tView, lView, tNode, renderer, name, index);
  lView[adjustedIndex] = native;
  const hasDirectives = isDirectiveHost(tNode);
  if (ngDevMode && tView.firstCreatePass) {
    validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);
  }
  setCurrentTNode(tNode, true);
  setupStaticAttributes(renderer, native, tNode);
  if (!isDetachedByI18n(tNode) && wasLastNodeCreated()) {
    appendChild(tView, lView, native, tNode);
  }
  if (getElementDepthCount() === 0) {
    attachPatchData(native, lView);
  }
  increaseElementDepthCount();
  if (hasDirectives) {
    createDirectivesInstances(tView, lView, tNode);
    executeContentQueries(tView, tNode, lView);
  }
  if (localRefsIndex !== null) {
    saveResolvedLocalsInData(lView, tNode);
  }
  return \u0275\u0275elementStart;
}
function \u0275\u0275elementEnd() {
  let currentTNode = getCurrentTNode();
  ngDevMode && assertDefined(currentTNode, "No parent node to close.");
  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(getCurrentTNode());
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }
  const tNode = currentTNode;
  ngDevMode && assertTNodeType(
    tNode,
    3
    /* TNodeType.AnyRNode */
  );
  if (isSkipHydrationRootTNode(tNode)) {
    leaveSkipHydrationBlock();
  }
  decreaseElementDepthCount();
  const tView = getTView();
  if (tView.firstCreatePass) {
    registerPostOrderHooks(tView, currentTNode);
    if (isContentQueryHost(currentTNode)) {
      tView.queries.elementEnd(currentTNode);
    }
  }
  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);
  }
  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);
  }
  return \u0275\u0275elementEnd;
}
function \u0275\u0275element(index, name, attrsIndex, localRefsIndex) {
  \u0275\u0275elementStart(index, name, attrsIndex, localRefsIndex);
  \u0275\u0275elementEnd();
  return \u0275\u0275element;
}
var _locateOrCreateElementNode = (tView, lView, tNode, renderer, name, index) => {
  lastNodeWasCreated(true);
  return createElementNode(renderer, name, getNamespace$1());
};
function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const attrs = getConstant(tViewConsts, attrsIndex);
  const tNode = getOrCreateTNode(tView, index, 8, "ng-container", attrs);
  if (attrs !== null) {
    computeStaticStyling(tNode, attrs, true);
  }
  const localRefs = getConstant(tViewConsts, localRefsIndex);
  resolveDirectives(tView, lView, tNode, localRefs);
  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }
  return tNode;
}
function \u0275\u0275elementContainerStart(index, attrsIndex, localRefsIndex) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "element containers should be created before any bindings");
  const tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  setCurrentTNode(tNode, true);
  const comment = _locateOrCreateElementContainerNode(tView, lView, tNode, index);
  lView[adjustedIndex] = comment;
  if (wasLastNodeCreated()) {
    appendChild(tView, lView, comment, tNode);
  }
  attachPatchData(comment, lView);
  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(tView, lView, tNode);
    executeContentQueries(tView, tNode, lView);
  }
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode);
  }
  return \u0275\u0275elementContainerStart;
}
function \u0275\u0275elementContainerEnd() {
  let currentTNode = getCurrentTNode();
  const tView = getTView();
  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(currentTNode);
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }
  ngDevMode && assertTNodeType(
    currentTNode,
    8
    /* TNodeType.ElementContainer */
  );
  if (tView.firstCreatePass) {
    registerPostOrderHooks(tView, currentTNode);
    if (isContentQueryHost(currentTNode)) {
      tView.queries.elementEnd(currentTNode);
    }
  }
  return \u0275\u0275elementContainerEnd;
}
function \u0275\u0275elementContainer(index, attrsIndex, localRefsIndex) {
  \u0275\u0275elementContainerStart(index, attrsIndex, localRefsIndex);
  \u0275\u0275elementContainerEnd();
  return \u0275\u0275elementContainer;
}
var _locateOrCreateElementContainerNode = (tView, lView, tNode, index) => {
  lastNodeWasCreated(true);
  return createCommentNode(lView[RENDERER], ngDevMode ? "ng-container" : "");
};
function \u0275\u0275getCurrentView() {
  return getLView();
}
function \u0275\u0275hostProperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275hostProperty;
}
function \u0275\u0275syntheticHostProperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    const currentDef = getCurrentDirectiveDef(tView.data);
    const renderer = loadComponentRenderer(currentDef, tNode, lView);
    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275syntheticHostProperty;
}
if (false) {
  (function() {
    _global["ngI18nClosureMode"] = // TODO(FW-1250): validate that this actually, you know, works.
    // tslint:disable-next-line:no-toplevel-property-access
    typeof goog !== "undefined" && typeof goog.getMsg === "function";
  })();
}
var u = void 0;
function plural(val) {
  const n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\.?/, "").length;
  if (i === 1 && v === 0) return 1;
  return 5;
}
var localeEn = ["en", [["a", "p"], ["AM", "PM"], u], [["AM", "PM"], u, u], [["S", "M", "T", "W", "T", "F", "S"], ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]], u, [["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]], u, [["B", "A"], ["BC", "AD"], ["Before Christ", "Anno Domini"]], 0, [6, 0], ["M/d/yy", "MMM d, y", "MMMM d, y", "EEEE, MMMM d, y"], ["h:mm a", "h:mm:ss a", "h:mm:ss a z", "h:mm:ss a zzzz"], ["{1}, {0}", u, "{1} 'at' {0}", u], [".", ",", ";", "%", "+", "-", "E", "\xD7", "\u2030", "\u221E", "NaN", ":"], ["#,##0.###", "#,##0%", "\xA4#,##0.00", "#E0"], "USD", "$", "US Dollar", {}, "ltr", plural];
var LOCALE_DATA = {};
function findLocaleData(locale) {
  const normalizedLocale = normalizeLocale(locale);
  let match2 = getLocaleData(normalizedLocale);
  if (match2) {
    return match2;
  }
  const parentLocale = normalizedLocale.split("-")[0];
  match2 = getLocaleData(parentLocale);
  if (match2) {
    return match2;
  }
  if (parentLocale === "en") {
    return localeEn;
  }
  throw new RuntimeError(701, ngDevMode && `Missing locale data for the locale "${locale}".`);
}
function getLocalePluralCase(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.PluralCase];
}
function getLocaleData(normalizedLocale) {
  if (!(normalizedLocale in LOCALE_DATA)) {
    LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];
  }
  return LOCALE_DATA[normalizedLocale];
}
var LocaleDataIndex;
(function(LocaleDataIndex2) {
  LocaleDataIndex2[LocaleDataIndex2["LocaleId"] = 0] = "LocaleId";
  LocaleDataIndex2[LocaleDataIndex2["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
  LocaleDataIndex2[LocaleDataIndex2["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
  LocaleDataIndex2[LocaleDataIndex2["DaysFormat"] = 3] = "DaysFormat";
  LocaleDataIndex2[LocaleDataIndex2["DaysStandalone"] = 4] = "DaysStandalone";
  LocaleDataIndex2[LocaleDataIndex2["MonthsFormat"] = 5] = "MonthsFormat";
  LocaleDataIndex2[LocaleDataIndex2["MonthsStandalone"] = 6] = "MonthsStandalone";
  LocaleDataIndex2[LocaleDataIndex2["Eras"] = 7] = "Eras";
  LocaleDataIndex2[LocaleDataIndex2["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
  LocaleDataIndex2[LocaleDataIndex2["WeekendRange"] = 9] = "WeekendRange";
  LocaleDataIndex2[LocaleDataIndex2["DateFormat"] = 10] = "DateFormat";
  LocaleDataIndex2[LocaleDataIndex2["TimeFormat"] = 11] = "TimeFormat";
  LocaleDataIndex2[LocaleDataIndex2["DateTimeFormat"] = 12] = "DateTimeFormat";
  LocaleDataIndex2[LocaleDataIndex2["NumberSymbols"] = 13] = "NumberSymbols";
  LocaleDataIndex2[LocaleDataIndex2["NumberFormats"] = 14] = "NumberFormats";
  LocaleDataIndex2[LocaleDataIndex2["CurrencyCode"] = 15] = "CurrencyCode";
  LocaleDataIndex2[LocaleDataIndex2["CurrencySymbol"] = 16] = "CurrencySymbol";
  LocaleDataIndex2[LocaleDataIndex2["CurrencyName"] = 17] = "CurrencyName";
  LocaleDataIndex2[LocaleDataIndex2["Currencies"] = 18] = "Currencies";
  LocaleDataIndex2[LocaleDataIndex2["Directionality"] = 19] = "Directionality";
  LocaleDataIndex2[LocaleDataIndex2["PluralCase"] = 20] = "PluralCase";
  LocaleDataIndex2[LocaleDataIndex2["ExtraData"] = 21] = "ExtraData";
})(LocaleDataIndex || (LocaleDataIndex = {}));
function normalizeLocale(locale) {
  return locale.toLowerCase().replace(/_/g, "-");
}
var pluralMapping = ["zero", "one", "two", "few", "many"];
function getPluralCase(value, locale) {
  const plural2 = getLocalePluralCase(locale)(parseInt(value, 10));
  const result = pluralMapping[plural2];
  return result !== void 0 ? result : "other";
}
var DEFAULT_LOCALE_ID = "en-US";
var USD_CURRENCY_CODE = "USD";
var ELEMENT_MARKER = {
  marker: "element"
};
var ICU_MARKER = {
  marker: "ICU"
};
var I18nCreateOpCode;
(function(I18nCreateOpCode2) {
  I18nCreateOpCode2[I18nCreateOpCode2["SHIFT"] = 2] = "SHIFT";
  I18nCreateOpCode2[I18nCreateOpCode2["APPEND_EAGERLY"] = 1] = "APPEND_EAGERLY";
  I18nCreateOpCode2[I18nCreateOpCode2["COMMENT"] = 2] = "COMMENT";
})(I18nCreateOpCode || (I18nCreateOpCode = {}));
var LOCALE_ID$1 = DEFAULT_LOCALE_ID;
function setLocaleId(localeId) {
  ngDevMode && assertDefined(localeId, `Expected localeId to be defined`);
  if (typeof localeId === "string") {
    LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, "-");
  }
}
function getLocaleId() {
  return LOCALE_ID$1;
}
var changeMask = 0;
var changeMaskCounter = 0;
function setMaskBit(hasChange) {
  if (hasChange) {
    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);
  }
  changeMaskCounter++;
}
function applyI18n(tView, lView, index) {
  if (changeMaskCounter > 0) {
    ngDevMode && assertDefined(tView, `tView should be defined`);
    const tI18n = tView.data[index];
    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;
    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;
    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);
  }
  changeMask = 0;
  changeMaskCounter = 0;
}
function createNodeWithoutHydration(lView, textOrName, nodeType) {
  const renderer = lView[RENDERER];
  switch (nodeType) {
    case Node.COMMENT_NODE:
      return createCommentNode(renderer, textOrName);
    case Node.TEXT_NODE:
      return createTextNode(renderer, textOrName);
    case Node.ELEMENT_NODE:
      return createElementNode(renderer, textOrName, null);
  }
}
var _locateOrCreateNode = (lView, index, textOrName, nodeType) => {
  lastNodeWasCreated(true);
  return createNodeWithoutHydration(lView, textOrName, nodeType);
};
function applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {
  const renderer = lView[RENDERER];
  for (let i = 0; i < createOpCodes.length; i++) {
    const opCode = createOpCodes[i++];
    const text = createOpCodes[i];
    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    const index = opCode >>> I18nCreateOpCode.SHIFT;
    let rNode = lView[index];
    let lastNodeWasCreated2 = false;
    if (rNode === null) {
      rNode = lView[index] = _locateOrCreateNode(lView, index, text, isComment ? Node.COMMENT_NODE : Node.TEXT_NODE);
      lastNodeWasCreated2 = wasLastNodeCreated();
    }
    if (appendNow && parentRNode !== null && lastNodeWasCreated2) {
      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);
    }
  }
}
function applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {
  ngDevMode && assertDomNode(anchorRNode);
  const renderer = lView[RENDERER];
  let rootIdx = null;
  let rootRNode;
  for (let i = 0; i < mutableOpCodes.length; i++) {
    const opCode = mutableOpCodes[i];
    if (typeof opCode == "string") {
      const textNodeIndex = mutableOpCodes[++i];
      if (lView[textNodeIndex] === null) {
        ngDevMode && ngDevMode.rendererCreateTextNode++;
        ngDevMode && assertIndexInRange(lView, textNodeIndex);
        lView[textNodeIndex] = _locateOrCreateNode(lView, textNodeIndex, opCode, Node.TEXT_NODE);
      }
    } else if (typeof opCode == "number") {
      switch (opCode & 1) {
        case 0:
          const parentIdx = getParentFromIcuCreateOpCode(opCode);
          if (rootIdx === null) {
            rootIdx = parentIdx;
            rootRNode = nativeParentNode(renderer, anchorRNode);
          }
          let insertInFrontOf;
          let parentRNode;
          if (parentIdx === rootIdx) {
            insertInFrontOf = anchorRNode;
            parentRNode = rootRNode;
          } else {
            insertInFrontOf = null;
            parentRNode = unwrapRNode(lView[parentIdx]);
          }
          if (parentRNode !== null) {
            ngDevMode && assertDomNode(parentRNode);
            const refIdx = getRefFromIcuCreateOpCode(opCode);
            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, "Missing ref");
            const child = lView[refIdx];
            ngDevMode && assertDomNode(child);
            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);
            const tIcu = getTIcu(tView, refIdx);
            if (tIcu !== null && typeof tIcu === "object") {
              ngDevMode && assertTIcu(tIcu);
              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);
              if (caseIndex !== null) {
                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);
              }
            }
          }
          break;
        case 1:
          const elementNodeIndex = opCode >>> 1;
          const attrName = mutableOpCodes[++i];
          const attrValue = mutableOpCodes[++i];
          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);
          break;
        default:
          if (ngDevMode) {
            throw new RuntimeError(700, `Unable to determine the type of mutate operation for "${opCode}"`);
          }
      }
    } else {
      switch (opCode) {
        case ICU_MARKER:
          const commentValue = mutableOpCodes[++i];
          const commentNodeIndex = mutableOpCodes[++i];
          if (lView[commentNodeIndex] === null) {
            ngDevMode && assertEqual(typeof commentValue, "string", `Expected "${commentValue}" to be a comment node value`);
            ngDevMode && ngDevMode.rendererCreateComment++;
            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);
            const commentRNode = lView[commentNodeIndex] = _locateOrCreateNode(lView, commentNodeIndex, commentValue, Node.COMMENT_NODE);
            attachPatchData(commentRNode, lView);
          }
          break;
        case ELEMENT_MARKER:
          const tagName = mutableOpCodes[++i];
          const elementNodeIndex = mutableOpCodes[++i];
          if (lView[elementNodeIndex] === null) {
            ngDevMode && assertEqual(typeof tagName, "string", `Expected "${tagName}" to be an element node tag name`);
            ngDevMode && ngDevMode.rendererCreateElement++;
            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);
            const elementRNode = lView[elementNodeIndex] = _locateOrCreateNode(lView, elementNodeIndex, tagName, Node.ELEMENT_NODE);
            attachPatchData(elementRNode, lView);
          }
          break;
        default:
          ngDevMode && throwError2(`Unable to determine the type of mutate operation for "${opCode}"`);
      }
    }
  }
}
function applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask2) {
  for (let i = 0; i < updateOpCodes.length; i++) {
    const checkBit = updateOpCodes[i];
    const skipCodes = updateOpCodes[++i];
    if (checkBit & changeMask2) {
      let value = "";
      for (let j = i + 1; j <= i + skipCodes; j++) {
        const opCode = updateOpCodes[j];
        if (typeof opCode == "string") {
          value += opCode;
        } else if (typeof opCode == "number") {
          if (opCode < 0) {
            value += renderStringify(lView[bindingsStartIndex - opCode]);
          } else {
            const nodeIndex = opCode >>> 2;
            switch (opCode & 3) {
              case 1:
                const propName = updateOpCodes[++j];
                const sanitizeFn = updateOpCodes[++j];
                const tNodeOrTagName = tView.data[nodeIndex];
                ngDevMode && assertDefined(tNodeOrTagName, "Experting TNode or string");
                if (typeof tNodeOrTagName === "string") {
                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);
                } else {
                  elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);
                }
                break;
              case 0:
                const rText = lView[nodeIndex];
                rText !== null && updateTextNode(lView[RENDERER], rText, value);
                break;
              case 2:
                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);
                break;
              case 3:
                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);
                break;
            }
          }
        }
      }
    } else {
      const opCode = updateOpCodes[i + 1];
      if (opCode > 0 && (opCode & 3) === 3) {
        const nodeIndex = opCode >>> 2;
        const tIcu = getTIcu(tView, nodeIndex);
        const currentIndex = lView[tIcu.currentCaseLViewIndex];
        if (currentIndex < 0) {
          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);
        }
      }
    }
    i += skipCodes;
  }
}
function applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {
  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];
  if (activeCaseIndex !== null) {
    let mask = changeMask;
    if (activeCaseIndex < 0) {
      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;
      mask = -1;
    }
    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
  }
}
function applyIcuSwitchCase(tView, tIcu, lView, value) {
  const caseIndex = getCaseIndex(tIcu, value);
  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
  if (activeCaseIndex !== caseIndex) {
    applyIcuSwitchCaseRemove(tView, tIcu, lView);
    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;
    if (caseIndex !== null) {
      const anchorRNode = lView[tIcu.anchorIdx];
      if (anchorRNode) {
        ngDevMode && assertDomNode(anchorRNode);
        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);
      }
      claimDehydratedIcuCase(lView, tIcu.anchorIdx, caseIndex);
    }
  }
}
function applyIcuSwitchCaseRemove(tView, tIcu, lView) {
  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
  if (activeCaseIndex !== null) {
    const removeCodes = tIcu.remove[activeCaseIndex];
    for (let i = 0; i < removeCodes.length; i++) {
      const nodeOrIcuIndex = removeCodes[i];
      if (nodeOrIcuIndex > 0) {
        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);
        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);
      } else {
        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);
      }
    }
  }
}
function getCaseIndex(icuExpression, bindingValue) {
  let index = icuExpression.cases.indexOf(bindingValue);
  if (index === -1) {
    switch (icuExpression.type) {
      case 1: {
        const resolvedCase = getPluralCase(bindingValue, getLocaleId());
        index = icuExpression.cases.indexOf(resolvedCase);
        if (index === -1 && resolvedCase !== "other") {
          index = icuExpression.cases.indexOf("other");
        }
        break;
      }
      case 0: {
        index = icuExpression.cases.indexOf("other");
        break;
      }
    }
  }
  return index === -1 ? null : index;
}
function i18nCreateOpCodesToString(opcodes) {
  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);
  let lines = [];
  for (let i = 0; i < createOpCodes.length; i++) {
    const opCode = createOpCodes[i++];
    const text = createOpCodes[i];
    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    const index = opCode >>> I18nCreateOpCode.SHIFT;
    lines.push(`lView[${index}] = document.${isComment ? "createComment" : "createText"}(${JSON.stringify(text)});`);
    if (appendNow) {
      lines.push(`parent.appendChild(lView[${index}]);`);
    }
  }
  return lines;
}
function i18nUpdateOpCodesToString(opcodes) {
  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  let lines = [];
  function consumeOpCode(value) {
    const ref = value >>> 2;
    const opCode = value & 3;
    switch (opCode) {
      case 0:
        return `(lView[${ref}] as Text).textContent = $$$`;
      case 1:
        const attrName = parser.consumeString();
        const sanitizationFn = parser.consumeFunction();
        const value2 = sanitizationFn ? `(${sanitizationFn})($$$)` : "$$$";
        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value2})`;
      case 2:
        return `icuSwitchCase(${ref}, $$$)`;
      case 3:
        return `icuUpdateCase(${ref})`;
    }
    throw new Error("unexpected OpCode");
  }
  while (parser.hasMore()) {
    let mask = parser.consumeNumber();
    let size = parser.consumeNumber();
    const end = parser.i + size;
    const statements = [];
    let statement = "";
    while (parser.i < end) {
      let value = parser.consumeNumberOrString();
      if (typeof value === "string") {
        statement += value;
      } else if (value < 0) {
        statement += "${lView[i" + value + "]}";
      } else {
        const opCodeText = consumeOpCode(value);
        statements.push(opCodeText.replace("$$$", "`" + statement + "`") + ";");
        statement = "";
      }
    }
    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(" ")} }`);
  }
  return lines;
}
function icuCreateOpCodesToString(opcodes) {
  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  let lines = [];
  function consumeOpCode(opCode) {
    const parent = getParentFromIcuCreateOpCode(opCode);
    const ref = getRefFromIcuCreateOpCode(opCode);
    switch (getInstructionFromIcuCreateOpCode(opCode)) {
      case 0:
        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;
      case 1:
        return `(lView[${ref}] as Element).setAttribute("${parser.consumeString()}", "${parser.consumeString()}")`;
    }
    throw new Error("Unexpected OpCode: " + getInstructionFromIcuCreateOpCode(opCode));
  }
  let lastRef = -1;
  while (parser.hasMore()) {
    let value = parser.consumeNumberStringOrMarker();
    if (value === ICU_MARKER) {
      const text = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createComment("${text}")`);
    } else if (value === ELEMENT_MARKER) {
      const text = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createElement("${text}")`);
    } else if (typeof value === "string") {
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createTextNode("${value}")`);
    } else if (typeof value === "number") {
      const line = consumeOpCode(value);
      line && lines.push(line);
    } else {
      throw new Error("Unexpected value");
    }
  }
  return lines;
}
function i18nRemoveOpCodesToString(opcodes) {
  const removeCodes = opcodes || (Array.isArray(this) ? this : []);
  let lines = [];
  for (let i = 0; i < removeCodes.length; i++) {
    const nodeOrIcuIndex = removeCodes[i];
    if (nodeOrIcuIndex > 0) {
      lines.push(`remove(lView[${nodeOrIcuIndex}])`);
    } else {
      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);
    }
  }
  return lines;
}
var OpCodeParser = class {
  constructor(codes) {
    this.i = 0;
    this.codes = codes;
  }
  hasMore() {
    return this.i < this.codes.length;
  }
  consumeNumber() {
    let value = this.codes[this.i++];
    assertNumber(value, "expecting number in OpCode");
    return value;
  }
  consumeString() {
    let value = this.codes[this.i++];
    assertString(value, "expecting string in OpCode");
    return value;
  }
  consumeFunction() {
    let value = this.codes[this.i++];
    if (value === null || typeof value === "function") {
      return value;
    }
    throw new Error("expecting function in OpCode");
  }
  consumeNumberOrString() {
    let value = this.codes[this.i++];
    if (typeof value === "string") {
      return value;
    }
    assertNumber(value, "expecting number or string in OpCode");
    return value;
  }
  consumeNumberStringOrMarker() {
    let value = this.codes[this.i++];
    if (typeof value === "string" || typeof value === "number" || value == ICU_MARKER || value == ELEMENT_MARKER) {
      return value;
    }
    assertNumber(value, "expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode");
    return value;
  }
};
var BINDING_REGEXP = /�(\d+):?\d*�/gi;
var ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
var NESTED_ICU = /�(\d+)�/;
var ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/;
var MARKER = `\uFFFD`;
var SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
var PH_REGEXP = /�(\/?[#*]\d+):?\d*�/gi;
var NGSP_UNICODE_REGEXP = /\uE500/g;
function replaceNgsp(value) {
  return value.replace(NGSP_UNICODE_REGEXP, " ");
}
function attachDebugGetter(obj, debugGetter) {
  if (ngDevMode) {
    Object.defineProperty(obj, "debug", {
      get: debugGetter,
      enumerable: false
    });
  } else {
    throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");
  }
}
function i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {
  const rootTNode = getCurrentParentTNode();
  const createOpCodes = [];
  const updateOpCodes = [];
  const existingTNodeStack = [[]];
  const astStack = [[]];
  if (ngDevMode) {
    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  message = getTranslationForTemplate(message, subTemplateIndex);
  const msgParts = replaceNgsp(message).split(PH_REGEXP);
  for (let i = 0; i < msgParts.length; i++) {
    let value = msgParts[i];
    if ((i & 1) === 0) {
      const parts = i18nParseTextIntoPartsAndICU(value);
      for (let j = 0; j < parts.length; j++) {
        let part = parts[j];
        if ((j & 1) === 0) {
          const text = part;
          ngDevMode && assertString(text, "Parsed ICU part should be string");
          if (text !== "") {
            i18nStartFirstCreatePassProcessTextNode(astStack[0], tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);
          }
        } else {
          const icuExpression = part;
          if (typeof icuExpression !== "object") {
            throw new Error(`Unable to parse ICU expression in "${message}" message.`);
          }
          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : "", true);
          const icuNodeIndex = icuContainerTNode.index;
          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, "Index must be in absolute LView offset");
          icuStart(astStack[0], tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);
        }
      }
    } else {
      const isClosing = value.charCodeAt(0) === 47;
      const type = value.charCodeAt(isClosing ? 1 : 0);
      ngDevMode && assertOneOf(
        type,
        42,
        35
        /* CharCode.HASH */
      );
      const index2 = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));
      if (isClosing) {
        existingTNodeStack.shift();
        astStack.shift();
        setCurrentTNode(getCurrentParentTNode(), false);
      } else {
        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index2);
        existingTNodeStack.unshift([]);
        setCurrentTNode(tNode, true);
        const placeholderNode = {
          kind: 2,
          index: index2,
          children: [],
          type: type === 35 ? 0 : 1
          /* I18nPlaceholderType.SUBTEMPLATE */
        };
        astStack[0].push(placeholderNode);
        astStack.unshift(placeholderNode.children);
      }
    }
  }
  tView.data[index] = {
    create: createOpCodes,
    update: updateOpCodes,
    ast: astStack[0],
    parentTNodeIndex
  };
}
function createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {
  const i18nNodeIdx = allocExpando(tView, lView, 1, null);
  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;
  let parentTNode = getCurrentParentTNode();
  if (rootTNode === parentTNode) {
    parentTNode = null;
  }
  if (parentTNode === null) {
    opCode |= I18nCreateOpCode.APPEND_EAGERLY;
  }
  if (isICU) {
    opCode |= I18nCreateOpCode.COMMENT;
    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);
  }
  createOpCodes.push(opCode, text === null ? "" : text);
  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 : 1, text === null ? ngDevMode ? "{{?}}" : "" : text, null);
  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);
  const tNodeIdx = tNode.index;
  setCurrentTNode(
    tNode,
    false
    /* Text nodes are self closing */
  );
  if (parentTNode !== null && rootTNode !== parentTNode) {
    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);
  }
  return tNode;
}
function i18nStartFirstCreatePassProcessTextNode(ast, tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {
  const hasBinding = text.match(BINDING_REGEXP);
  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);
  const index = tNode.index;
  if (hasBinding) {
    generateBindingUpdateOpCodes(updateOpCodes, text, index, null, 0, null);
  }
  ast.push({
    kind: 0,
    index
  });
}
function i18nAttributesFirstPass(tView, index, values) {
  const previousElement = getCurrentTNode();
  const previousElementIndex = previousElement.index;
  const updateOpCodes = [];
  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  if (tView.firstCreatePass && tView.data[index] === null) {
    for (let i = 0; i < values.length; i += 2) {
      const attrName = values[i];
      const message = values[i + 1];
      if (message !== "") {
        if (ICU_REGEXP.test(message)) {
          throw new Error(`ICU expressions are not supported in attributes. Message: "${message}".`);
        }
        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);
      }
    }
    tView.data[index] = updateOpCodes;
  }
}
function generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {
  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, "Index must be in absolute LView offset");
  const maskIndex = updateOpCodes.length;
  const sizeIndex = maskIndex + 1;
  updateOpCodes.push(null, null);
  const startIndex = maskIndex + 2;
  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  const textParts = str.split(BINDING_REGEXP);
  let mask = 0;
  for (let j = 0; j < textParts.length; j++) {
    const textValue = textParts[j];
    if (j & 1) {
      const bindingIndex = bindingStart + parseInt(textValue, 10);
      updateOpCodes.push(-1 - bindingIndex);
      mask = mask | toMaskBit(bindingIndex);
    } else if (textValue !== "") {
      updateOpCodes.push(textValue);
    }
  }
  updateOpCodes.push(destinationNode << 2 | (attrName ? 1 : 0));
  if (attrName) {
    updateOpCodes.push(attrName, sanitizeFn);
  }
  updateOpCodes[maskIndex] = mask;
  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;
  return mask;
}
function countBindings(opCodes) {
  let count = 0;
  for (let i = 0; i < opCodes.length; i++) {
    const opCode = opCodes[i];
    if (typeof opCode === "number" && opCode < 0) {
      count++;
    }
  }
  return count;
}
function toMaskBit(bindingIndex) {
  return 1 << Math.min(bindingIndex, 31);
}
function removeInnerTemplateTranslation(message) {
  let match2;
  let res = "";
  let index = 0;
  let inTemplate = false;
  let tagMatched;
  while ((match2 = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
    if (!inTemplate) {
      res += message.substring(index, match2.index + match2[0].length);
      tagMatched = match2[1];
      inTemplate = true;
    } else {
      if (match2[0] === `${MARKER}/*${tagMatched}${MARKER}`) {
        index = match2.index;
        inTemplate = false;
      }
    }
  }
  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation "${message}"`);
  res += message.slice(index);
  return res;
}
function getTranslationForTemplate(message, subTemplateIndex) {
  if (isRootTemplateMessage(subTemplateIndex)) {
    return removeInnerTemplateTranslation(message);
  } else {
    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;
    const end = message.search(new RegExp(`${MARKER}\\/\\*\\d+:${subTemplateIndex}${MARKER}`));
    return removeInnerTemplateTranslation(message.substring(start, end));
  }
}
function icuStart(ast, tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {
  ngDevMode && assertDefined(icuExpression, "ICU expression must be defined");
  let bindingMask = 0;
  const tIcu = {
    type: icuExpression.type,
    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),
    anchorIdx,
    cases: [],
    create: [],
    remove: [],
    update: []
  };
  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);
  setTIcu(tView, anchorIdx, tIcu);
  const values = icuExpression.values;
  const cases = [];
  for (let i = 0; i < values.length; i++) {
    const valueArr = values[i];
    const nestedIcus = [];
    for (let j = 0; j < valueArr.length; j++) {
      const value = valueArr[j];
      if (typeof value !== "string") {
        const icuIndex = nestedIcus.push(value) - 1;
        valueArr[j] = `<!--\uFFFD${icuIndex}\uFFFD-->`;
      }
    }
    const caseAst = [];
    cases.push(caseAst);
    bindingMask = parseIcuCase(caseAst, tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(""), nestedIcus) | bindingMask;
  }
  if (bindingMask) {
    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);
  }
  ast.push({
    kind: 3,
    index: anchorIdx,
    cases,
    currentCaseLViewIndex: tIcu.currentCaseLViewIndex
  });
}
function parseICUBlock(pattern) {
  const cases = [];
  const values = [];
  let icuType = 1;
  let mainBinding = 0;
  pattern = pattern.replace(ICU_BLOCK_REGEXP, function(str, binding, type) {
    if (type === "select") {
      icuType = 0;
    } else {
      icuType = 1;
    }
    mainBinding = parseInt(binding.slice(1), 10);
    return "";
  });
  const parts = i18nParseTextIntoPartsAndICU(pattern);
  for (let pos = 0; pos < parts.length; ) {
    let key = parts[pos++].trim();
    if (icuType === 1) {
      key = key.replace(/\s*(?:=)?(\w+)\s*/, "$1");
    }
    if (key.length) {
      cases.push(key);
    }
    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);
    if (cases.length > values.length) {
      values.push(blocks);
    }
  }
  return {
    type: icuType,
    mainBinding,
    cases,
    values
  };
}
function i18nParseTextIntoPartsAndICU(pattern) {
  if (!pattern) {
    return [];
  }
  let prevPos = 0;
  const braceStack = [];
  const results = [];
  const braces = /[{}]/g;
  braces.lastIndex = 0;
  let match2;
  while (match2 = braces.exec(pattern)) {
    const pos = match2.index;
    if (match2[0] == "}") {
      braceStack.pop();
      if (braceStack.length == 0) {
        const block = pattern.substring(prevPos, pos);
        if (ICU_BLOCK_REGEXP.test(block)) {
          results.push(parseICUBlock(block));
        } else {
          results.push(block);
        }
        prevPos = pos + 1;
      }
    } else {
      if (braceStack.length == 0) {
        const substring2 = pattern.substring(prevPos, pos);
        results.push(substring2);
        prevPos = pos + 1;
      }
      braceStack.push("{");
    }
  }
  const substring = pattern.substring(prevPos);
  results.push(substring);
  return results;
}
function parseIcuCase(ast, tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {
  const create = [];
  const remove2 = [];
  const update = [];
  if (ngDevMode) {
    attachDebugGetter(create, icuCreateOpCodesToString);
    attachDebugGetter(remove2, i18nRemoveOpCodesToString);
    attachDebugGetter(update, i18nUpdateOpCodesToString);
  }
  tIcu.cases.push(caseName);
  tIcu.create.push(create);
  tIcu.remove.push(remove2);
  tIcu.update.push(update);
  const inertBodyHelper2 = getInertBodyHelper(getDocument());
  const inertBodyElement = inertBodyHelper2.getInertBodyElement(unsafeCaseHtml);
  ngDevMode && assertDefined(inertBodyElement, "Unable to generate inert body element");
  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;
  if (inertRootNode) {
    return walkIcuTree(ast, tView, tIcu, lView, updateOpCodes, create, remove2, update, inertRootNode, parentIdx, nestedIcus, 0);
  } else {
    return 0;
  }
}
function walkIcuTree(ast, tView, tIcu, lView, sharedUpdateOpCodes, create, remove2, update, parentNode, parentIdx, nestedIcus, depth) {
  let bindingMask = 0;
  let currentNode = parentNode.firstChild;
  while (currentNode) {
    const newIndex = allocExpando(tView, lView, 1, null);
    switch (currentNode.nodeType) {
      case Node.ELEMENT_NODE:
        const element = currentNode;
        const tagName = element.tagName.toLowerCase();
        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {
          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);
          tView.data[newIndex] = tagName;
          const elAttrs = element.attributes;
          for (let i = 0; i < elAttrs.length; i++) {
            const attr = elAttrs.item(i);
            const lowerAttrName = attr.name.toLowerCase();
            const hasBinding2 = !!attr.value.match(BINDING_REGEXP);
            if (hasBinding2) {
              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                if (URI_ATTRS[lowerAttrName]) {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);
                } else {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);
                }
              } else {
                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see ${XSS_SECURITY_URL})`);
              }
            } else {
              addCreateAttribute(create, newIndex, attr);
            }
          }
          const elementNode = {
            kind: 1,
            index: newIndex,
            children: []
          };
          ast.push(elementNode);
          bindingMask = walkIcuTree(elementNode.children, tView, tIcu, lView, sharedUpdateOpCodes, create, remove2, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;
          addRemoveNode(remove2, newIndex, depth);
        }
        break;
      case Node.TEXT_NODE:
        const value = currentNode.textContent || "";
        const hasBinding = value.match(BINDING_REGEXP);
        addCreateNodeAndAppend(create, null, hasBinding ? "" : value, parentIdx, newIndex);
        addRemoveNode(remove2, newIndex, depth);
        if (hasBinding) {
          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;
        }
        ast.push({
          kind: 0,
          index: newIndex
        });
        break;
      case Node.COMMENT_NODE:
        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || "");
        if (isNestedIcu) {
          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);
          const icuExpression = nestedIcus[nestedIcuIndex];
          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : "", parentIdx, newIndex);
          icuStart(ast, tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);
          addRemoveNestedIcu(remove2, newIndex, depth);
        }
        break;
    }
    currentNode = currentNode.nextSibling;
  }
  return bindingMask;
}
function addRemoveNode(remove2, index, depth) {
  if (depth === 0) {
    remove2.push(index);
  }
}
function addRemoveNestedIcu(remove2, index, depth) {
  if (depth === 0) {
    remove2.push(~index);
    remove2.push(index);
  }
}
function addUpdateIcuSwitch(update, icuExpression, index) {
  update.push(
    toMaskBit(icuExpression.mainBinding),
    2,
    -1 - icuExpression.mainBinding,
    index << 2 | 2
    /* I18nUpdateOpCode.IcuSwitch */
  );
}
function addUpdateIcuUpdate(update, bindingMask, index) {
  update.push(
    bindingMask,
    1,
    index << 2 | 3
    /* I18nUpdateOpCode.IcuUpdate */
  );
}
function addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {
  if (marker !== null) {
    create.push(marker);
  }
  create.push(text, createAtIdx, icuCreateOpCode(0, appendToParentIdx, createAtIdx));
}
function addCreateAttribute(create, newIndex, attr) {
  create.push(newIndex << 1 | 1, attr.name, attr.value);
}
var ROOT_TEMPLATE_ID = 0;
var PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
var PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
var PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
var PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
var PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
var PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
var PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
function i18nPostprocess(message, replacements = {}) {
  let result = message;
  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
    const matches = {};
    const templateIdsStack = [ROOT_TEMPLATE_ID];
    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {
      const content = phs || tmpl;
      const placeholders = matches[content] || [];
      if (!placeholders.length) {
        content.split("|").forEach((placeholder2) => {
          const match2 = placeholder2.match(PP_TEMPLATE_ID_REGEXP);
          const templateId2 = match2 ? parseInt(match2[1], 10) : ROOT_TEMPLATE_ID;
          const isCloseTemplateTag2 = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder2);
          placeholders.push([templateId2, isCloseTemplateTag2, placeholder2]);
        });
        matches[content] = placeholders;
      }
      if (!placeholders.length) {
        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);
      }
      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
      let idx = 0;
      for (let i = 0; i < placeholders.length; i++) {
        if (placeholders[i][0] === currentTemplateId) {
          idx = i;
          break;
        }
      }
      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];
      if (isCloseTemplateTag) {
        templateIdsStack.pop();
      } else if (currentTemplateId !== templateId) {
        templateIdsStack.push(templateId);
      }
      placeholders.splice(idx, 1);
      return placeholder;
    });
  }
  if (!Object.keys(replacements).length) {
    return result;
  }
  result = result.replace(PP_ICU_VARS_REGEXP, (match2, start, key, _type, _idx, end) => {
    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match2;
  });
  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match2, key) => {
    return replacements.hasOwnProperty(key) ? replacements[key] : match2;
  });
  result = result.replace(PP_ICUS_REGEXP, (match2, key) => {
    if (replacements.hasOwnProperty(key)) {
      const list = replacements[key];
      if (!list.length) {
        throw new Error(`i18n postprocess: unmatched ICU - ${match2} with key: ${key}`);
      }
      return list.shift();
    }
    return match2;
  });
  return result;
}
function \u0275\u0275i18nStart(index, messageIndex, subTemplateIndex = -1) {
  const tView = getTView();
  const lView = getLView();
  const adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertDefined(tView, `tView should be defined`);
  const message = getConstant(tView.consts, messageIndex);
  const parentTNode = getCurrentParentTNode();
  if (tView.firstCreatePass) {
    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);
  }
  if (tView.type === 2) {
    const componentLView = lView[DECLARATION_COMPONENT_VIEW];
    componentLView[FLAGS] |= 32;
  } else {
    lView[FLAGS] |= 32;
  }
  const tI18n = tView.data[adjustedIndex];
  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;
  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);
  const insertInFrontOf = parentTNode && parentTNode.type & 8 ? lView[parentTNode.index] : null;
  prepareI18nBlockForHydration(lView, adjustedIndex, parentTNode, subTemplateIndex);
  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);
  setInI18nBlock(true);
}
function \u0275\u0275i18nEnd() {
  setInI18nBlock(false);
}
function \u0275\u0275i18n(index, messageIndex, subTemplateIndex) {
  \u0275\u0275i18nStart(index, messageIndex, subTemplateIndex);
  \u0275\u0275i18nEnd();
}
function \u0275\u0275i18nAttributes(index, attrsIndex) {
  const tView = getTView();
  ngDevMode && assertDefined(tView, `tView should be defined`);
  const attrs = getConstant(tView.consts, attrsIndex);
  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);
}
function \u0275\u0275i18nExp(value) {
  const lView = getLView();
  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
  return \u0275\u0275i18nExp;
}
function \u0275\u0275i18nApply(index) {
  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);
}
function \u0275\u0275i18nPostprocess(message, replacements = {}) {
  return i18nPostprocess(message, replacements);
}
var stashEventListener = (el, eventName, listenerFn) => {
};
function \u0275\u0275listener(eventName, listenerFn, useCapture, eventTargetResolver) {
  const lView = getLView();
  const tView = getTView();
  const tNode = getCurrentTNode();
  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);
  return \u0275\u0275listener;
}
function \u0275\u0275syntheticHostListener(eventName, listenerFn) {
  const tNode = getCurrentTNode();
  const lView = getLView();
  const tView = getTView();
  const currentDef = getCurrentDirectiveDef(tView.data);
  const renderer = loadComponentRenderer(currentDef, tNode, lView);
  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);
  return \u0275\u0275syntheticHostListener;
}
function findExistingListener(tView, lView, eventName, tNodeIdx) {
  const tCleanup = tView.cleanup;
  if (tCleanup != null) {
    for (let i = 0; i < tCleanup.length - 1; i += 2) {
      const cleanupEventName = tCleanup[i];
      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
        const lCleanup = lView[CLEANUP];
        const listenerIdxInLCleanup = tCleanup[i + 2];
        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
      }
      if (typeof cleanupEventName === "string") {
        i += 2;
      }
    }
  }
  return null;
}
function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {
  const isTNodeDirectiveHost = isDirectiveHost(tNode);
  const firstCreatePass = tView.firstCreatePass;
  const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);
  const context2 = lView[CONTEXT];
  const lCleanup = getOrCreateLViewCleanup(lView);
  ngDevMode && assertTNodeType(
    tNode,
    3 | 12
    /* TNodeType.AnyContainer */
  );
  let processOutputs = true;
  if (tNode.type & 3 || eventTargetResolver) {
    const native = getNativeByTNode(tNode, lView);
    const target = eventTargetResolver ? eventTargetResolver(native) : native;
    const lCleanupIndex = lCleanup.length;
    const idxOrTargetGetter = eventTargetResolver ? (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index;
    let existingListener = null;
    if (!eventTargetResolver && isTNodeDirectiveHost) {
      existingListener = findExistingListener(tView, lView, eventName, tNode.index);
    }
    if (existingListener !== null) {
      const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
      lastListenerFn.__ngNextListenerFn__ = listenerFn;
      existingListener.__ngLastListenerFn__ = listenerFn;
      processOutputs = false;
    } else {
      listenerFn = wrapListener(tNode, lView, context2, listenerFn);
      stashEventListener(native, eventName, listenerFn);
      const cleanupFn = renderer.listen(target, eventName, listenerFn);
      ngDevMode && ngDevMode.rendererAddEventListener++;
      lCleanup.push(listenerFn, cleanupFn);
      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
    }
  } else {
    listenerFn = wrapListener(tNode, lView, context2, listenerFn);
  }
  const outputs = tNode.outputs;
  let props;
  if (processOutputs && outputs !== null && (props = outputs[eventName])) {
    const propsLength = props.length;
    if (propsLength) {
      for (let i = 0; i < propsLength; i += 2) {
        const index = props[i];
        ngDevMode && assertIndexInRange(lView, index);
        const minifiedName = props[i + 1];
        const directiveInstance = lView[index];
        const output = directiveInstance[minifiedName];
        if (ngDevMode && !isOutputSubscribable(output)) {
          throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);
        }
        const subscription = output.subscribe(listenerFn);
        const idx = lCleanup.length;
        lCleanup.push(listenerFn, subscription);
        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
      }
    }
  }
}
function executeListenerWithErrorHandling(lView, context2, listenerFn, e) {
  const prevConsumer = setActiveConsumer(null);
  try {
    profiler(6, context2, listenerFn);
    return listenerFn(e) !== false;
  } catch (error) {
    handleError(lView, error);
    return false;
  } finally {
    profiler(7, context2, listenerFn);
    setActiveConsumer(prevConsumer);
  }
}
function wrapListener(tNode, lView, context2, listenerFn) {
  return function wrapListenerIn_markDirtyAndPreventDefault(e) {
    if (e === Function) {
      return listenerFn;
    }
    const startView = tNode.componentOffset > -1 ? getComponentLViewByIndex(tNode.index, lView) : lView;
    markViewDirty(
      startView,
      5
      /* NotificationSource.Listener */
    );
    let result = executeListenerWithErrorHandling(lView, context2, listenerFn, e);
    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;
    while (nextListenerFn) {
      result = executeListenerWithErrorHandling(lView, context2, nextListenerFn, e) && result;
      nextListenerFn = nextListenerFn.__ngNextListenerFn__;
    }
    return result;
  };
}
function isOutputSubscribable(value) {
  return value != null && typeof value.subscribe === "function";
}
function \u0275\u0275nextContext(level = 1) {
  return nextContextImpl(level);
}
function matchingProjectionSlotIndex(tNode, projectionSlots) {
  let wildcardNgContentIndex = null;
  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);
  for (let i = 0; i < projectionSlots.length; i++) {
    const slotValue = projectionSlots[i];
    if (slotValue === "*") {
      wildcardNgContentIndex = i;
      continue;
    }
    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(
      tNode,
      slotValue,
      /* isProjectionMode */
      true
    ) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
      return i;
    }
  }
  return wildcardNgContentIndex;
}
function \u0275\u0275projectionDef(projectionSlots) {
  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];
  if (!componentNode.projection) {
    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);
    const tails = projectionHeads.slice();
    let componentChild = componentNode.child;
    while (componentChild !== null) {
      if (componentChild.type !== 128) {
        const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;
        if (slotIndex !== null) {
          if (tails[slotIndex]) {
            tails[slotIndex].projectionNext = componentChild;
          } else {
            projectionHeads[slotIndex] = componentChild;
          }
          tails[slotIndex] = componentChild;
        }
      }
      componentChild = componentChild.next;
    }
  }
}
function \u0275\u0275projection(nodeIndex, selectorIndex = 0, attrs, fallbackTemplateFn, fallbackDecls, fallbackVars) {
  const lView = getLView();
  const tView = getTView();
  const fallbackIndex = fallbackTemplateFn ? nodeIndex + 1 : null;
  if (fallbackIndex !== null) {
    declareTemplate(lView, tView, fallbackIndex, fallbackTemplateFn, fallbackDecls, fallbackVars, null, attrs);
  }
  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16, null, attrs || null);
  if (tProjectionNode.projection === null) {
    tProjectionNode.projection = selectorIndex;
  }
  setCurrentTNodeAsNotParent();
  const hydrationInfo = lView[HYDRATION];
  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();
  const componentHostNode = lView[DECLARATION_COMPONENT_VIEW][T_HOST];
  const isEmpty = componentHostNode.projection[tProjectionNode.projection] === null;
  if (isEmpty && fallbackIndex !== null) {
    insertFallbackContent(lView, tView, fallbackIndex);
  } else if (isNodeCreationMode && (tProjectionNode.flags & 32) !== 32) {
    applyProjection(tView, lView, tProjectionNode);
  }
}
function insertFallbackContent(lView, tView, fallbackIndex) {
  const adjustedIndex = HEADER_OFFSET + fallbackIndex;
  const fallbackTNode = tView.data[adjustedIndex];
  const fallbackLContainer = lView[adjustedIndex];
  ngDevMode && assertTNode(fallbackTNode);
  ngDevMode && assertLContainer(fallbackLContainer);
  const dehydratedView = findMatchingDehydratedView(fallbackLContainer, fallbackTNode.tView.ssrId);
  const fallbackLView = createAndRenderEmbeddedLView(lView, fallbackTNode, void 0, {
    dehydratedView
  });
  addLViewToLContainer(fallbackLContainer, fallbackLView, 0, shouldAddViewToDom(fallbackTNode, dehydratedView));
}
function \u0275\u0275propertyInterpolate(propName, v0, sanitizer) {
  \u0275\u0275propertyInterpolate1(propName, "", v0, "", sanitizer);
  return \u0275\u0275propertyInterpolate;
}
function \u0275\u0275propertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
  }
  return \u0275\u0275propertyInterpolate1;
}
function \u0275\u0275propertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
  }
  return \u0275\u0275propertyInterpolate2;
}
function \u0275\u0275propertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
  }
  return \u0275\u0275propertyInterpolate3;
}
function \u0275\u0275propertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
  }
  return \u0275\u0275propertyInterpolate4;
}
function \u0275\u0275propertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
  }
  return \u0275\u0275propertyInterpolate5;
}
function \u0275\u0275propertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
  }
  return \u0275\u0275propertyInterpolate6;
}
function \u0275\u0275propertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
  }
  return \u0275\u0275propertyInterpolate7;
}
function \u0275\u0275propertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
  }
  return \u0275\u0275propertyInterpolate8;
}
function \u0275\u0275propertyInterpolateV(propName, values, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    if (ngDevMode) {
      const interpolationInBetween = [values[0]];
      for (let i = 2; i < values.length; i += 2) {
        interpolationInBetween.push(values[i]);
      }
      storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
    }
  }
  return \u0275\u0275propertyInterpolateV;
}
function \u0275\u0275contentQuery(directiveIndex, predicate, flags, read) {
  createContentQuery(directiveIndex, predicate, flags, read);
}
function \u0275\u0275viewQuery(predicate, flags, read) {
  createViewQuery(predicate, flags, read);
}
function \u0275\u0275queryRefresh(queryList) {
  const lView = getLView();
  const tView = getTView();
  const queryIndex = getCurrentQueryIndex();
  setCurrentQueryIndex(queryIndex + 1);
  const tQuery = getTQuery(tView, queryIndex);
  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2) === 2)) {
    if (tQuery.matches === null) {
      queryList.reset([]);
    } else {
      const result = getQueryResults(lView, queryIndex);
      queryList.reset(result, unwrapElementRef);
      queryList.notifyOnChanges();
    }
    return true;
  }
  return false;
}
function \u0275\u0275loadQuery() {
  return loadQueryInternal(getLView(), getCurrentQueryIndex());
}
function \u0275\u0275contentQuerySignal(directiveIndex, target, predicate, flags, read) {
  bindQueryToSignal(target, createContentQuery(directiveIndex, predicate, flags, read));
}
function \u0275\u0275viewQuerySignal(target, predicate, flags, read) {
  bindQueryToSignal(target, createViewQuery(predicate, flags, read));
}
function \u0275\u0275queryAdvance(indexOffset = 1) {
  setCurrentQueryIndex(getCurrentQueryIndex() + indexOffset);
}
function store(tView, lView, index, value) {
  if (index >= tView.data.length) {
    tView.data[index] = null;
    tView.blueprint[index] = null;
  }
  lView[index] = value;
}
function \u0275\u0275reference(index) {
  const contextLView = getContextLView();
  return load(contextLView, HEADER_OFFSET + index);
}
function \u0275\u0275styleMapInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolateV(values) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275stylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate1;
}
function \u0275\u0275stylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate2;
}
function \u0275\u0275stylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate3;
}
function \u0275\u0275stylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate4;
}
function \u0275\u0275stylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate5;
}
function \u0275\u0275stylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate6;
}
function \u0275\u0275stylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate7;
}
function \u0275\u0275stylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate8;
}
function \u0275\u0275stylePropInterpolateV(prop, values, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolateV;
}
function \u0275\u0275text(index, value = "") {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "text nodes should be created before any bindings");
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1, value, null) : tView.data[adjustedIndex];
  const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);
  lView[adjustedIndex] = textNative;
  if (wasLastNodeCreated()) {
    appendChild(tView, lView, textNative, tNode);
  }
  setCurrentTNode(tNode, false);
}
var _locateOrCreateTextNode = (tView, lView, tNode, value, index) => {
  lastNodeWasCreated(true);
  return createTextNode(lView[RENDERER], value);
};
function \u0275\u0275textInterpolate(v0) {
  \u0275\u0275textInterpolate1("", v0, "");
  return \u0275\u0275textInterpolate;
}
function \u0275\u0275textInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolated = interpolation1(lView, prefix, v0, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate1;
}
function \u0275\u0275textInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate2;
}
function \u0275\u0275textInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate3;
}
function \u0275\u0275textInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate4;
}
function \u0275\u0275textInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix) {
  const lView = getLView();
  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate5;
}
function \u0275\u0275textInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix) {
  const lView = getLView();
  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate6;
}
function \u0275\u0275textInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate7;
}
function \u0275\u0275textInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v42, i4, v5, i5, v6, i6, v7, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate8;
}
function \u0275\u0275textInterpolateV(values) {
  const lView = getLView();
  const interpolated = interpolationV(lView, values);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolateV;
}
function \u0275\u0275twoWayProperty(propName, value, sanitizer) {
  if (isWritableSignal(value)) {
    value = value();
  }
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275twoWayProperty;
}
function \u0275\u0275twoWayBindingSet(target, value) {
  const canWrite = isWritableSignal(target);
  canWrite && target.set(value);
  return canWrite;
}
function \u0275\u0275twoWayListener(eventName, listenerFn) {
  const lView = getLView();
  const tView = getTView();
  const tNode = getCurrentTNode();
  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn);
  return \u0275\u0275twoWayListener;
}
var UNINITIALIZED_LET = {};
function \u0275\u0275declareLet(index) {
  const tView = getTView();
  const lView = getLView();
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = getOrCreateTNode(tView, adjustedIndex, 128, null, null);
  setCurrentTNode(tNode, false);
  store(tView, lView, adjustedIndex, UNINITIALIZED_LET);
  return \u0275\u0275declareLet;
}
function \u0275\u0275storeLet(value) {
  performanceMarkFeature("NgLet");
  const tView = getTView();
  const lView = getLView();
  const index = getSelectedIndex();
  store(tView, lView, index, value);
  return value;
}
function \u0275\u0275readContextLet(index) {
  const contextLView = getContextLView();
  const value = load(contextLView, HEADER_OFFSET + index);
  if (value === UNINITIALIZED_LET) {
    throw new RuntimeError(314, ngDevMode && "Attempting to access a @let declaration whose value is not available yet");
  }
  return value;
}
function providersResolver(def, providers, viewProviders) {
  const tView = getTView();
  if (tView.firstCreatePass) {
    const isComponent2 = isComponentDef(def);
    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent2, true);
    resolveProvider(providers, tView.data, tView.blueprint, isComponent2, false);
  }
}
function resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent2, isViewProvider) {
  provider = resolveForwardRef(provider);
  if (Array.isArray(provider)) {
    for (let i = 0; i < provider.length; i++) {
      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent2, isViewProvider);
    }
  } else {
    const tView = getTView();
    const lView = getLView();
    const tNode = getCurrentTNode();
    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
    const providerFactory = providerToFactory(provider);
    if (ngDevMode) {
      const injector = new NodeInjector(tNode, lView);
      runInInjectorProfilerContext(injector, token, () => {
        emitProviderConfiguredEvent(provider, isViewProvider);
      });
    }
    const beginIndex = tNode.providerIndexes & 1048575;
    const endIndex = tNode.directiveStart;
    const cptViewProvidersCount = tNode.providerIndexes >> 20;
    if (isTypeProvider(provider) || !provider.multi) {
      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, \u0275\u0275directiveInject);
      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);
      if (existingFactoryIndex === -1) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;
        if (isViewProvider) {
          tNode.providerIndexes += 1048576;
        }
        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        lInjectablesBlueprint[existingFactoryIndex] = factory;
        lView[existingFactoryIndex] = factory;
      }
    } else {
      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];
      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];
      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent2, providerFactory);
        if (!isViewProvider && doesViewProvidersFactoryExist) {
          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;
        }
        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;
        if (isViewProvider) {
          tNode.providerIndexes += 1048576;
        }
        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent2);
        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);
      }
      if (!isViewProvider && isComponent2 && doesViewProvidersFactoryExist) {
        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
      }
    }
  }
}
function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
  const providerIsTypeProvider = isTypeProvider(provider);
  const providerIsClassProvider = isClassProvider(provider);
  if (providerIsTypeProvider || providerIsClassProvider) {
    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;
    const prototype = classToken.prototype;
    const ngOnDestroy = prototype.ngOnDestroy;
    if (ngOnDestroy) {
      const hooks = tView.destroyHooks || (tView.destroyHooks = []);
      if (!providerIsTypeProvider && provider.multi) {
        ngDevMode && assertDefined(indexInFactory, "indexInFactory when registering multi factory destroy hook");
        const existingCallbacksIndex = hooks.indexOf(contextIndex);
        if (existingCallbacksIndex === -1) {
          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
        } else {
          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
        }
      } else {
        hooks.push(contextIndex, ngOnDestroy);
      }
    }
  }
}
function multiFactoryAdd(multiFactory2, factory, isComponentProvider) {
  if (isComponentProvider) {
    multiFactory2.componentProviders++;
  }
  return multiFactory2.multi.push(factory) - 1;
}
function indexOf(item, arr, begin, end) {
  for (let i = begin; i < end; i++) {
    if (arr[i] === item) return i;
  }
  return -1;
}
function multiProvidersFactoryResolver(_, tData, lData, tNode) {
  return multiResolve(this.multi, []);
}
function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
  const factories = this.multi;
  let result;
  if (this.providerFactory) {
    const componentCount = this.providerFactory.componentProviders;
    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);
    result = multiProviders.slice(0, componentCount);
    multiResolve(factories, result);
    for (let i = componentCount; i < multiProviders.length; i++) {
      result.push(multiProviders[i]);
    }
  } else {
    result = [];
    multiResolve(factories, result);
  }
  return result;
}
function multiResolve(factories, result) {
  for (let i = 0; i < factories.length; i++) {
    const factory = factories[i];
    result.push(factory());
  }
  return result;
}
function multiFactory(factoryFn, index, isViewProvider, isComponent2, f) {
  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, \u0275\u0275directiveInject);
  factory.multi = [];
  factory.index = index;
  factory.componentProviders = 0;
  multiFactoryAdd(factory, f, isComponent2 && !isViewProvider);
  return factory;
}
function \u0275\u0275ProvidersFeature(providers, viewProviders = []) {
  return (definition) => {
    definition.providersResolver = (def, processProvidersFn) => {
      return providersResolver(
        def,
        //
        processProvidersFn ? processProvidersFn(providers) : providers,
        //
        viewProviders
      );
    };
  };
}
var _StandaloneService = class _StandaloneService {
  constructor(_injector) {
    this._injector = _injector;
    this.cachedInjectors = /* @__PURE__ */ new Map();
  }
  getOrCreateStandaloneInjector(componentDef) {
    if (!componentDef.standalone) {
      return null;
    }
    if (!this.cachedInjectors.has(componentDef)) {
      const providers = internalImportProvidersFrom(false, componentDef.type);
      const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;
      this.cachedInjectors.set(componentDef, standaloneInjector);
    }
    return this.cachedInjectors.get(componentDef);
  }
  ngOnDestroy() {
    try {
      for (const injector of this.cachedInjectors.values()) {
        if (injector !== null) {
          injector.destroy();
        }
      }
    } finally {
      this.cachedInjectors.clear();
    }
  }
};
_StandaloneService.\u0275prov = \u0275\u0275defineInjectable({
  token: _StandaloneService,
  providedIn: "environment",
  factory: () => new _StandaloneService(\u0275\u0275inject(EnvironmentInjector))
});
var StandaloneService = _StandaloneService;
function \u0275\u0275StandaloneFeature(definition) {
  performanceMarkFeature("NgStandalone");
  definition.getStandaloneInjector = (parentInjector) => {
    return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);
  };
}
function \u0275\u0275setComponentScope(type, directives, pipes) {
  const def = type.\u0275cmp;
  def.directiveDefs = extractDefListOrFactory(
    directives,
    /* pipeDef */
    false
  );
  def.pipeDefs = extractDefListOrFactory(
    pipes,
    /* pipeDef */
    true
  );
}
function \u0275\u0275setNgModuleScope(type, scope) {
  return noSideEffects(() => {
    const ngModuleDef = getNgModuleDef(type, true);
    ngModuleDef.declarations = convertToTypeArray(scope.declarations || EMPTY_ARRAY);
    ngModuleDef.imports = convertToTypeArray(scope.imports || EMPTY_ARRAY);
    ngModuleDef.exports = convertToTypeArray(scope.exports || EMPTY_ARRAY);
    if (scope.bootstrap) {
      ngModuleDef.bootstrap = convertToTypeArray(scope.bootstrap);
    }
    depsTracker.registerNgModule(type, scope);
  });
}
function convertToTypeArray(values) {
  if (typeof values === "function") {
    return values;
  }
  const flattenValues = flatten(values);
  if (flattenValues.some(isForwardRef)) {
    return () => flattenValues.map(resolveForwardRef).map(maybeUnwrapModuleWithProviders);
  } else {
    return flattenValues.map(maybeUnwrapModuleWithProviders);
  }
}
function maybeUnwrapModuleWithProviders(value) {
  return isModuleWithProviders(value) ? value.ngModule : value;
}
function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
  return noSideEffects(() => {
    const clazz = type;
    if (decorators !== null) {
      if (clazz.hasOwnProperty("decorators") && clazz.decorators !== void 0) {
        clazz.decorators.push(...decorators);
      } else {
        clazz.decorators = decorators;
      }
    }
    if (ctorParameters !== null) {
      clazz.ctorParameters = ctorParameters;
    }
    if (propDecorators !== null) {
      if (clazz.hasOwnProperty("propDecorators") && clazz.propDecorators !== void 0) {
        clazz.propDecorators = __spreadValues(__spreadValues({}, clazz.propDecorators), propDecorators);
      } else {
        clazz.propDecorators = propDecorators;
      }
    }
  });
}
function \u0275\u0275pureFunction0(slotOffset, pureFn, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);
}
function \u0275\u0275pureFunction1(slotOffset, pureFn, exp, thisArg) {
  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
}
function \u0275\u0275pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
}
function \u0275\u0275pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
}
function \u0275\u0275pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
}
function \u0275\u0275pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);
}
function \u0275\u0275pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);
}
function \u0275\u0275pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);
}
function \u0275\u0275pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);
}
function \u0275\u0275pureFunctionV(slotOffset, pureFn, exps, thisArg) {
  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
}
function getPureFunctionReturnValue(lView, returnValueIndex) {
  ngDevMode && assertIndexInRange(lView, returnValueIndex);
  const lastReturnValue = lView[returnValueIndex];
  return lastReturnValue === NO_CHANGE ? void 0 : lastReturnValue;
}
function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);
}
function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);
}
function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);
}
function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);
}
function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
  let bindingIndex = bindingRoot + slotOffset;
  let different = false;
  for (let i = 0; i < exps.length; i++) {
    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
  }
  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);
}
function \u0275\u0275pipe(index, pipeName) {
  const tView = getTView();
  let pipeDef;
  const adjustedIndex = index + HEADER_OFFSET;
  if (tView.firstCreatePass) {
    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);
    tView.data[adjustedIndex] = pipeDef;
    if (pipeDef.onDestroy) {
      (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);
    }
  } else {
    pipeDef = tView.data[adjustedIndex];
  }
  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
  let previousInjectorProfilerContext;
  if (ngDevMode) {
    previousInjectorProfilerContext = setInjectorProfilerContext({
      injector: new NodeInjector(getCurrentTNode(), getLView()),
      token: pipeDef.type
    });
  }
  const previousInjectImplementation = setInjectImplementation(\u0275\u0275directiveInject);
  try {
    const previousIncludeViewProviders = setIncludeViewProviders(false);
    const pipeInstance = pipeFactory();
    setIncludeViewProviders(previousIncludeViewProviders);
    store(tView, getLView(), adjustedIndex, pipeInstance);
    return pipeInstance;
  } finally {
    setInjectImplementation(previousInjectImplementation);
    ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext);
  }
}
function getPipeDef(name, registry) {
  if (registry) {
    if (ngDevMode) {
      const pipes = registry.filter((pipe2) => pipe2.name === name);
      if (pipes.length > 1) {
        console.warn(formatRuntimeError(313, getMultipleMatchingPipesMessage(name)));
      }
    }
    for (let i = registry.length - 1; i >= 0; i--) {
      const pipeDef = registry[i];
      if (name === pipeDef.name) {
        return pipeDef;
      }
    }
  }
  if (ngDevMode) {
    throw new RuntimeError(-302, getPipeNotFoundErrorMessage(name));
  }
  return;
}
function getMultipleMatchingPipesMessage(name) {
  const lView = getLView();
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  const hostIsStandalone = isHostComponentStandalone(lView);
  const componentInfoMessage = context2 ? ` in the '${context2.constructor.name}' component` : "";
  const verifyMessage = `check ${hostIsStandalone ? "'@Component.imports' of this component" : "the imports of this module"}`;
  const errorMessage = `Multiple pipes match the name \`${name}\`${componentInfoMessage}. ${verifyMessage}`;
  return errorMessage;
}
function getPipeNotFoundErrorMessage(name) {
  const lView = getLView();
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  const hostIsStandalone = isHostComponentStandalone(lView);
  const componentInfoMessage = context2 ? ` in the '${context2.constructor.name}' component` : "";
  const verifyMessage = `Verify that it is ${hostIsStandalone ? "included in the '@Component.imports' of this component" : "declared or imported in this module"}`;
  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;
  return errorMessage;
}
function \u0275\u0275pipeBind1(index, offset, v1) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), offset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);
}
function \u0275\u0275pipeBind2(index, slotOffset, v1, v2) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);
}
function \u0275\u0275pipeBind3(index, slotOffset, v1, v2, v3) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);
}
function \u0275\u0275pipeBind4(index, slotOffset, v1, v2, v3, v42) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v42, pipeInstance) : pipeInstance.transform(v1, v2, v3, v42);
}
function \u0275\u0275pipeBindV(index, slotOffset, values) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);
}
function isPure(lView, index) {
  return lView[TVIEW].data[index].pure;
}
function \u0275\u0275templateRefExtractor(tNode, lView) {
  return createTemplateRef(tNode, lView);
}
function \u0275\u0275getComponentDepsFactory(type, rawImports) {
  return () => {
    try {
      return depsTracker.getComponentDependencies(type, rawImports).dependencies;
    } catch (e) {
      console.error(`Computing dependencies in local compilation mode for the component "${type.name}" failed with the exception:`, e);
      throw e;
    }
  };
}
function \u0275setClassDebugInfo(type, debugInfo) {
  const def = getComponentDef(type);
  if (def !== null) {
    def.debugInfo = debugInfo;
  }
}
var angularCoreEnv = /* @__PURE__ */ (() => ({
  "\u0275\u0275attribute": \u0275\u0275attribute,
  "\u0275\u0275attributeInterpolate1": \u0275\u0275attributeInterpolate1,
  "\u0275\u0275attributeInterpolate2": \u0275\u0275attributeInterpolate2,
  "\u0275\u0275attributeInterpolate3": \u0275\u0275attributeInterpolate3,
  "\u0275\u0275attributeInterpolate4": \u0275\u0275attributeInterpolate4,
  "\u0275\u0275attributeInterpolate5": \u0275\u0275attributeInterpolate5,
  "\u0275\u0275attributeInterpolate6": \u0275\u0275attributeInterpolate6,
  "\u0275\u0275attributeInterpolate7": \u0275\u0275attributeInterpolate7,
  "\u0275\u0275attributeInterpolate8": \u0275\u0275attributeInterpolate8,
  "\u0275\u0275attributeInterpolateV": \u0275\u0275attributeInterpolateV,
  "\u0275\u0275defineComponent": \u0275\u0275defineComponent,
  "\u0275\u0275defineDirective": \u0275\u0275defineDirective,
  "\u0275\u0275defineInjectable": \u0275\u0275defineInjectable,
  "\u0275\u0275defineInjector": \u0275\u0275defineInjector,
  "\u0275\u0275defineNgModule": \u0275\u0275defineNgModule,
  "\u0275\u0275definePipe": \u0275\u0275definePipe,
  "\u0275\u0275directiveInject": \u0275\u0275directiveInject,
  "\u0275\u0275getInheritedFactory": \u0275\u0275getInheritedFactory,
  "\u0275\u0275inject": \u0275\u0275inject,
  "\u0275\u0275injectAttribute": \u0275\u0275injectAttribute,
  "\u0275\u0275invalidFactory": \u0275\u0275invalidFactory,
  "\u0275\u0275invalidFactoryDep": \u0275\u0275invalidFactoryDep,
  "\u0275\u0275templateRefExtractor": \u0275\u0275templateRefExtractor,
  "\u0275\u0275resetView": \u0275\u0275resetView,
  "\u0275\u0275HostDirectivesFeature": \u0275\u0275HostDirectivesFeature,
  "\u0275\u0275NgOnChangesFeature": \u0275\u0275NgOnChangesFeature,
  "\u0275\u0275ProvidersFeature": \u0275\u0275ProvidersFeature,
  "\u0275\u0275CopyDefinitionFeature": \u0275\u0275CopyDefinitionFeature,
  "\u0275\u0275InheritDefinitionFeature": \u0275\u0275InheritDefinitionFeature,
  "\u0275\u0275InputTransformsFeature": \u0275\u0275InputTransformsFeature,
  "\u0275\u0275StandaloneFeature": \u0275\u0275StandaloneFeature,
  "\u0275\u0275nextContext": \u0275\u0275nextContext,
  "\u0275\u0275namespaceHTML": \u0275\u0275namespaceHTML,
  "\u0275\u0275namespaceMathML": \u0275\u0275namespaceMathML,
  "\u0275\u0275namespaceSVG": \u0275\u0275namespaceSVG,
  "\u0275\u0275enableBindings": \u0275\u0275enableBindings,
  "\u0275\u0275disableBindings": \u0275\u0275disableBindings,
  "\u0275\u0275elementStart": \u0275\u0275elementStart,
  "\u0275\u0275elementEnd": \u0275\u0275elementEnd,
  "\u0275\u0275element": \u0275\u0275element,
  "\u0275\u0275elementContainerStart": \u0275\u0275elementContainerStart,
  "\u0275\u0275elementContainerEnd": \u0275\u0275elementContainerEnd,
  "\u0275\u0275elementContainer": \u0275\u0275elementContainer,
  "\u0275\u0275pureFunction0": \u0275\u0275pureFunction0,
  "\u0275\u0275pureFunction1": \u0275\u0275pureFunction1,
  "\u0275\u0275pureFunction2": \u0275\u0275pureFunction2,
  "\u0275\u0275pureFunction3": \u0275\u0275pureFunction3,
  "\u0275\u0275pureFunction4": \u0275\u0275pureFunction4,
  "\u0275\u0275pureFunction5": \u0275\u0275pureFunction5,
  "\u0275\u0275pureFunction6": \u0275\u0275pureFunction6,
  "\u0275\u0275pureFunction7": \u0275\u0275pureFunction7,
  "\u0275\u0275pureFunction8": \u0275\u0275pureFunction8,
  "\u0275\u0275pureFunctionV": \u0275\u0275pureFunctionV,
  "\u0275\u0275getCurrentView": \u0275\u0275getCurrentView,
  "\u0275\u0275restoreView": \u0275\u0275restoreView,
  "\u0275\u0275listener": \u0275\u0275listener,
  "\u0275\u0275projection": \u0275\u0275projection,
  "\u0275\u0275syntheticHostProperty": \u0275\u0275syntheticHostProperty,
  "\u0275\u0275syntheticHostListener": \u0275\u0275syntheticHostListener,
  "\u0275\u0275pipeBind1": \u0275\u0275pipeBind1,
  "\u0275\u0275pipeBind2": \u0275\u0275pipeBind2,
  "\u0275\u0275pipeBind3": \u0275\u0275pipeBind3,
  "\u0275\u0275pipeBind4": \u0275\u0275pipeBind4,
  "\u0275\u0275pipeBindV": \u0275\u0275pipeBindV,
  "\u0275\u0275projectionDef": \u0275\u0275projectionDef,
  "\u0275\u0275hostProperty": \u0275\u0275hostProperty,
  "\u0275\u0275property": \u0275\u0275property,
  "\u0275\u0275propertyInterpolate": \u0275\u0275propertyInterpolate,
  "\u0275\u0275propertyInterpolate1": \u0275\u0275propertyInterpolate1,
  "\u0275\u0275propertyInterpolate2": \u0275\u0275propertyInterpolate2,
  "\u0275\u0275propertyInterpolate3": \u0275\u0275propertyInterpolate3,
  "\u0275\u0275propertyInterpolate4": \u0275\u0275propertyInterpolate4,
  "\u0275\u0275propertyInterpolate5": \u0275\u0275propertyInterpolate5,
  "\u0275\u0275propertyInterpolate6": \u0275\u0275propertyInterpolate6,
  "\u0275\u0275propertyInterpolate7": \u0275\u0275propertyInterpolate7,
  "\u0275\u0275propertyInterpolate8": \u0275\u0275propertyInterpolate8,
  "\u0275\u0275propertyInterpolateV": \u0275\u0275propertyInterpolateV,
  "\u0275\u0275pipe": \u0275\u0275pipe,
  "\u0275\u0275queryRefresh": \u0275\u0275queryRefresh,
  "\u0275\u0275queryAdvance": \u0275\u0275queryAdvance,
  "\u0275\u0275viewQuery": \u0275\u0275viewQuery,
  "\u0275\u0275viewQuerySignal": \u0275\u0275viewQuerySignal,
  "\u0275\u0275loadQuery": \u0275\u0275loadQuery,
  "\u0275\u0275contentQuery": \u0275\u0275contentQuery,
  "\u0275\u0275contentQuerySignal": \u0275\u0275contentQuerySignal,
  "\u0275\u0275reference": \u0275\u0275reference,
  "\u0275\u0275classMap": \u0275\u0275classMap,
  "\u0275\u0275classMapInterpolate1": \u0275\u0275classMapInterpolate1,
  "\u0275\u0275classMapInterpolate2": \u0275\u0275classMapInterpolate2,
  "\u0275\u0275classMapInterpolate3": \u0275\u0275classMapInterpolate3,
  "\u0275\u0275classMapInterpolate4": \u0275\u0275classMapInterpolate4,
  "\u0275\u0275classMapInterpolate5": \u0275\u0275classMapInterpolate5,
  "\u0275\u0275classMapInterpolate6": \u0275\u0275classMapInterpolate6,
  "\u0275\u0275classMapInterpolate7": \u0275\u0275classMapInterpolate7,
  "\u0275\u0275classMapInterpolate8": \u0275\u0275classMapInterpolate8,
  "\u0275\u0275classMapInterpolateV": \u0275\u0275classMapInterpolateV,
  "\u0275\u0275styleMap": \u0275\u0275styleMap,
  "\u0275\u0275styleMapInterpolate1": \u0275\u0275styleMapInterpolate1,
  "\u0275\u0275styleMapInterpolate2": \u0275\u0275styleMapInterpolate2,
  "\u0275\u0275styleMapInterpolate3": \u0275\u0275styleMapInterpolate3,
  "\u0275\u0275styleMapInterpolate4": \u0275\u0275styleMapInterpolate4,
  "\u0275\u0275styleMapInterpolate5": \u0275\u0275styleMapInterpolate5,
  "\u0275\u0275styleMapInterpolate6": \u0275\u0275styleMapInterpolate6,
  "\u0275\u0275styleMapInterpolate7": \u0275\u0275styleMapInterpolate7,
  "\u0275\u0275styleMapInterpolate8": \u0275\u0275styleMapInterpolate8,
  "\u0275\u0275styleMapInterpolateV": \u0275\u0275styleMapInterpolateV,
  "\u0275\u0275styleProp": \u0275\u0275styleProp,
  "\u0275\u0275stylePropInterpolate1": \u0275\u0275stylePropInterpolate1,
  "\u0275\u0275stylePropInterpolate2": \u0275\u0275stylePropInterpolate2,
  "\u0275\u0275stylePropInterpolate3": \u0275\u0275stylePropInterpolate3,
  "\u0275\u0275stylePropInterpolate4": \u0275\u0275stylePropInterpolate4,
  "\u0275\u0275stylePropInterpolate5": \u0275\u0275stylePropInterpolate5,
  "\u0275\u0275stylePropInterpolate6": \u0275\u0275stylePropInterpolate6,
  "\u0275\u0275stylePropInterpolate7": \u0275\u0275stylePropInterpolate7,
  "\u0275\u0275stylePropInterpolate8": \u0275\u0275stylePropInterpolate8,
  "\u0275\u0275stylePropInterpolateV": \u0275\u0275stylePropInterpolateV,
  "\u0275\u0275classProp": \u0275\u0275classProp,
  "\u0275\u0275advance": \u0275\u0275advance,
  "\u0275\u0275template": \u0275\u0275template,
  "\u0275\u0275conditional": \u0275\u0275conditional,
  "\u0275\u0275defer": \u0275\u0275defer,
  "\u0275\u0275deferWhen": \u0275\u0275deferWhen,
  "\u0275\u0275deferOnIdle": \u0275\u0275deferOnIdle,
  "\u0275\u0275deferOnImmediate": \u0275\u0275deferOnImmediate,
  "\u0275\u0275deferOnTimer": \u0275\u0275deferOnTimer,
  "\u0275\u0275deferOnHover": \u0275\u0275deferOnHover,
  "\u0275\u0275deferOnInteraction": \u0275\u0275deferOnInteraction,
  "\u0275\u0275deferOnViewport": \u0275\u0275deferOnViewport,
  "\u0275\u0275deferPrefetchWhen": \u0275\u0275deferPrefetchWhen,
  "\u0275\u0275deferPrefetchOnIdle": \u0275\u0275deferPrefetchOnIdle,
  "\u0275\u0275deferPrefetchOnImmediate": \u0275\u0275deferPrefetchOnImmediate,
  "\u0275\u0275deferPrefetchOnTimer": \u0275\u0275deferPrefetchOnTimer,
  "\u0275\u0275deferPrefetchOnHover": \u0275\u0275deferPrefetchOnHover,
  "\u0275\u0275deferPrefetchOnInteraction": \u0275\u0275deferPrefetchOnInteraction,
  "\u0275\u0275deferPrefetchOnViewport": \u0275\u0275deferPrefetchOnViewport,
  "\u0275\u0275deferEnableTimerScheduling": \u0275\u0275deferEnableTimerScheduling,
  "\u0275\u0275repeater": \u0275\u0275repeater,
  "\u0275\u0275repeaterCreate": \u0275\u0275repeaterCreate,
  "\u0275\u0275repeaterTrackByIndex": \u0275\u0275repeaterTrackByIndex,
  "\u0275\u0275repeaterTrackByIdentity": \u0275\u0275repeaterTrackByIdentity,
  "\u0275\u0275componentInstance": \u0275\u0275componentInstance,
  "\u0275\u0275text": \u0275\u0275text,
  "\u0275\u0275textInterpolate": \u0275\u0275textInterpolate,
  "\u0275\u0275textInterpolate1": \u0275\u0275textInterpolate1,
  "\u0275\u0275textInterpolate2": \u0275\u0275textInterpolate2,
  "\u0275\u0275textInterpolate3": \u0275\u0275textInterpolate3,
  "\u0275\u0275textInterpolate4": \u0275\u0275textInterpolate4,
  "\u0275\u0275textInterpolate5": \u0275\u0275textInterpolate5,
  "\u0275\u0275textInterpolate6": \u0275\u0275textInterpolate6,
  "\u0275\u0275textInterpolate7": \u0275\u0275textInterpolate7,
  "\u0275\u0275textInterpolate8": \u0275\u0275textInterpolate8,
  "\u0275\u0275textInterpolateV": \u0275\u0275textInterpolateV,
  "\u0275\u0275i18n": \u0275\u0275i18n,
  "\u0275\u0275i18nAttributes": \u0275\u0275i18nAttributes,
  "\u0275\u0275i18nExp": \u0275\u0275i18nExp,
  "\u0275\u0275i18nStart": \u0275\u0275i18nStart,
  "\u0275\u0275i18nEnd": \u0275\u0275i18nEnd,
  "\u0275\u0275i18nApply": \u0275\u0275i18nApply,
  "\u0275\u0275i18nPostprocess": \u0275\u0275i18nPostprocess,
  "\u0275\u0275resolveWindow": \u0275\u0275resolveWindow,
  "\u0275\u0275resolveDocument": \u0275\u0275resolveDocument,
  "\u0275\u0275resolveBody": \u0275\u0275resolveBody,
  "\u0275\u0275setComponentScope": \u0275\u0275setComponentScope,
  "\u0275\u0275setNgModuleScope": \u0275\u0275setNgModuleScope,
  "\u0275\u0275registerNgModuleType": registerNgModuleType,
  "\u0275\u0275getComponentDepsFactory": \u0275\u0275getComponentDepsFactory,
  "\u0275setClassDebugInfo": \u0275setClassDebugInfo,
  "\u0275\u0275declareLet": \u0275\u0275declareLet,
  "\u0275\u0275storeLet": \u0275\u0275storeLet,
  "\u0275\u0275readContextLet": \u0275\u0275readContextLet,
  "\u0275\u0275sanitizeHtml": \u0275\u0275sanitizeHtml,
  "\u0275\u0275sanitizeStyle": \u0275\u0275sanitizeStyle,
  "\u0275\u0275sanitizeResourceUrl": \u0275\u0275sanitizeResourceUrl,
  "\u0275\u0275sanitizeScript": \u0275\u0275sanitizeScript,
  "\u0275\u0275sanitizeUrl": \u0275\u0275sanitizeUrl,
  "\u0275\u0275sanitizeUrlOrResourceUrl": \u0275\u0275sanitizeUrlOrResourceUrl,
  "\u0275\u0275trustConstantHtml": \u0275\u0275trustConstantHtml,
  "\u0275\u0275trustConstantResourceUrl": \u0275\u0275trustConstantResourceUrl,
  "\u0275\u0275validateIframeAttribute": \u0275\u0275validateIframeAttribute,
  "forwardRef": forwardRef,
  "resolveForwardRef": resolveForwardRef,
  "\u0275\u0275twoWayProperty": \u0275\u0275twoWayProperty,
  "\u0275\u0275twoWayBindingSet": \u0275\u0275twoWayBindingSet,
  "\u0275\u0275twoWayListener": \u0275\u0275twoWayListener
}))();
var jitOptions = null;
function setJitOptions(options) {
  if (jitOptions !== null) {
    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
      ngDevMode && console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set.");
      return;
    }
    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
      ngDevMode && console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set.");
      return;
    }
  }
  jitOptions = options;
}
function getJitOptions() {
  return jitOptions;
}
function patchModuleCompilation() {
}
var moduleQueue = [];
function enqueueModuleForDelayedScoping(moduleType, ngModule) {
  moduleQueue.push({
    moduleType,
    ngModule
  });
}
var flushingModuleQueue = false;
function flushModuleScopingQueueAsMuchAsPossible() {
  if (!flushingModuleQueue) {
    flushingModuleQueue = true;
    try {
      for (let i = moduleQueue.length - 1; i >= 0; i--) {
        const {
          moduleType,
          ngModule
        } = moduleQueue[i];
        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
          moduleQueue.splice(i, 1);
          setScopeOnDeclaredComponents(moduleType, ngModule);
        }
      }
    } finally {
      flushingModuleQueue = false;
    }
  }
}
function isResolvedDeclaration(declaration) {
  if (Array.isArray(declaration)) {
    return declaration.every(isResolvedDeclaration);
  }
  return !!resolveForwardRef(declaration);
}
function compileNgModule(moduleType, ngModule = {}) {
  patchModuleCompilation();
  compileNgModuleDefs(moduleType, ngModule);
  if (ngModule.id !== void 0) {
    registerNgModuleType(moduleType, ngModule.id);
  }
  enqueueModuleForDelayedScoping(moduleType, ngModule);
}
function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {
  ngDevMode && assertDefined(moduleType, "Required value moduleType");
  ngDevMode && assertDefined(ngModule, "Required value ngModule");
  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  let ngModuleDef = null;
  Object.defineProperty(moduleType, NG_MOD_DEF, {
    configurable: true,
    get: () => {
      if (ngModuleDef === null) {
        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);
        }
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "NgModule",
          type: moduleType
        });
        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/\u0275mod.js`, {
          type: moduleType,
          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),
          declarations: declarations.map(resolveForwardRef),
          imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
          id: ngModule.id || null
        });
        if (!ngModuleDef.schemas) {
          ngModuleDef.schemas = [];
        }
      }
      return ngModuleDef;
    }
  });
  let ngFactoryDef = null;
  Object.defineProperty(moduleType, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "NgModule",
          type: moduleType
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/\u0275fac.js`, {
          name: moduleType.name,
          type: moduleType,
          deps: reflectDependencies(moduleType),
          target: compiler.FactoryTarget.NgModule,
          typeArgumentCount: 0
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  let ngInjectorDef = null;
  Object.defineProperty(moduleType, NG_INJ_DEF, {
    get: () => {
      if (ngInjectorDef === null) {
        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
        const meta = {
          name: moduleType.name,
          type: moduleType,
          providers: ngModule.providers || EMPTY_ARRAY,
          imports: [(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)]
        };
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "NgModule",
          type: moduleType
        });
        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/\u0275inj.js`, meta);
      }
      return ngInjectorDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function generateStandaloneInDeclarationsError(type, location2) {
  const prefix = `Unexpected "${stringifyForError(type)}" found in the "declarations" array of the`;
  const suffix = `"${stringifyForError(type)}" is marked as standalone and can't be declared in any NgModule - did you intend to import it instead (by adding it to the "imports" array)?`;
  return `${prefix} ${location2}, ${suffix}`;
}
function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
  if (verifiedNgModule.get(moduleType)) return;
  if (isStandalone(moduleType)) return;
  verifiedNgModule.set(moduleType, true);
  moduleType = resolveForwardRef(moduleType);
  let ngModuleDef;
  if (importingModule) {
    ngModuleDef = getNgModuleDef(moduleType);
    if (!ngModuleDef) {
      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
    }
  } else {
    ngModuleDef = getNgModuleDef(moduleType, true);
  }
  const errors = [];
  const declarations = maybeUnwrapFn(ngModuleDef.declarations);
  const imports = maybeUnwrapFn(ngModuleDef.imports);
  flatten(imports).map(unwrapModuleWithProvidersImports).forEach((modOrStandaloneCmpt) => {
    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);
    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);
  });
  const exports = maybeUnwrapFn(ngModuleDef.exports);
  declarations.forEach(verifyDeclarationsHaveDefinitions);
  declarations.forEach(verifyDirectivesHaveSelector);
  declarations.forEach((declarationType) => verifyNotStandalone(declarationType, moduleType));
  const combinedDeclarations = [...declarations.map(resolveForwardRef), ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)];
  exports.forEach(verifyExportsAreDeclaredOrReExported);
  declarations.forEach((decl) => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));
  const ngModule = getAnnotation(moduleType, "NgModule");
  if (ngModule) {
    ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach((mod) => {
      verifySemanticsOfNgModuleImport(mod, moduleType);
      verifySemanticsOfNgModuleDef(mod, false, moduleType);
    });
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
  }
  if (errors.length) {
    throw new Error(errors.join("\n"));
  }
  function verifyDeclarationsHaveDefinitions(type) {
    type = resolveForwardRef(type);
    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
    if (!def) {
      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);
    }
  }
  function verifyDirectivesHaveSelector(type) {
    type = resolveForwardRef(type);
    const def = getDirectiveDef(type);
    if (!getComponentDef(type) && def && def.selectors.length == 0) {
      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);
    }
  }
  function verifyNotStandalone(type, moduleType2) {
    type = resolveForwardRef(type);
    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
    if (def?.standalone) {
      const location2 = `"${stringifyForError(moduleType2)}" NgModule`;
      errors.push(generateStandaloneInDeclarationsError(type, location2));
    }
  }
  function verifyExportsAreDeclaredOrReExported(type) {
    type = resolveForwardRef(type);
    const kind = getComponentDef(type) && "component" || getDirectiveDef(type) && "directive" || getPipeDef$1(type) && "pipe";
    if (kind) {
      if (combinedDeclarations.lastIndexOf(type) === -1) {
        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);
      }
    }
  }
  function verifyDeclarationIsUnique(type, suppressErrors) {
    type = resolveForwardRef(type);
    const existingModule = ownerNgModule.get(type);
    if (existingModule && existingModule !== moduleType) {
      if (!suppressErrors) {
        const modules2 = [existingModule, moduleType].map(stringifyForError).sort();
        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules2[0]} and ${modules2[1]}! Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules2[0]} and ${modules2[1]}. You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules2[0]} and ${modules2[1]}.`);
      }
    } else {
      ownerNgModule.set(type, moduleType);
    }
  }
  function verifyComponentIsPartOfNgModule(type) {
    type = resolveForwardRef(type);
    const existingModule = ownerNgModule.get(type);
    if (!existingModule && !isStandalone(type)) {
      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);
    }
  }
  function verifyCorrectBootstrapType(type) {
    type = resolveForwardRef(type);
    if (!getComponentDef(type)) {
      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);
    }
    if (isStandalone(type)) {
      errors.push(`The \`${stringifyForError(type)}\` class is a standalone component, which can not be used in the \`@NgModule.bootstrap\` array. Use the \`bootstrapApplication\` function for bootstrap instead.`);
    }
  }
  function verifySemanticsOfNgModuleImport(type, importingModule2) {
    type = resolveForwardRef(type);
    const directiveDef = getComponentDef(type) || getDirectiveDef(type);
    if (directiveDef !== null && !directiveDef.standalone) {
      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule2.name}'. Please add an @NgModule annotation.`);
    }
    const pipeDef = getPipeDef$1(type);
    if (pipeDef !== null && !pipeDef.standalone) {
      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule2.name}'. Please add an @NgModule annotation.`);
    }
  }
}
function unwrapModuleWithProvidersImports(typeOrWithProviders) {
  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
  return typeOrWithProviders.ngModule || typeOrWithProviders;
}
function getAnnotation(type, name) {
  let annotation = null;
  collect(type.__annotations__);
  collect(type.decorators);
  return annotation;
  function collect(annotations) {
    if (annotations) {
      annotations.forEach(readAnnotation);
    }
  }
  function readAnnotation(decorator) {
    if (!annotation) {
      const proto = Object.getPrototypeOf(decorator);
      if (proto.ngMetadataName == name) {
        annotation = decorator;
      } else if (decorator.type) {
        const proto2 = Object.getPrototypeOf(decorator.type);
        if (proto2.ngMetadataName == name) {
          annotation = decorator.args[0];
        }
      }
    }
  }
}
var ownerNgModule = /* @__PURE__ */ new WeakMap();
var verifiedNgModule = /* @__PURE__ */ new WeakMap();
function computeCombinedExports(type) {
  type = resolveForwardRef(type);
  const ngModuleDef = getNgModuleDef(type);
  if (ngModuleDef === null) {
    return [type];
  }
  return flatten(maybeUnwrapFn(ngModuleDef.exports).map((type2) => {
    const ngModuleDef2 = getNgModuleDef(type2);
    if (ngModuleDef2) {
      verifySemanticsOfNgModuleDef(type2, false);
      return computeCombinedExports(type2);
    } else {
      return type2;
    }
  }));
}
function setScopeOnDeclaredComponents(moduleType, ngModule) {
  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  const transitiveScopes = transitiveScopesFor(moduleType);
  declarations.forEach((declaration) => {
    declaration = resolveForwardRef(declaration);
    if (declaration.hasOwnProperty(NG_COMP_DEF)) {
      const component = declaration;
      const componentDef = getComponentDef(component);
      patchComponentDefWithScope(componentDef, transitiveScopes);
    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
      declaration.ngSelectorScope = moduleType;
    }
  });
}
function patchComponentDefWithScope(componentDef, transitiveScopes) {
  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map((dir) => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir)).filter((def) => !!def);
  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map((pipe2) => getPipeDef$1(pipe2));
  componentDef.schemas = transitiveScopes.schemas;
  componentDef.tView = null;
}
function transitiveScopesFor(type) {
  if (isNgModule(type)) {
    if (USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {
      const scope = depsTracker.getNgModuleScope(type);
      const def = getNgModuleDef(type, true);
      return __spreadValues({
        schemas: def.schemas || null
      }, scope);
    } else {
      return transitiveScopesForNgModule(type);
    }
  } else if (isStandalone(type)) {
    const directiveDef = getComponentDef(type) || getDirectiveDef(type);
    if (directiveDef !== null) {
      return {
        schemas: null,
        compilation: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set()
        },
        exported: {
          directives: /* @__PURE__ */ new Set([type]),
          pipes: /* @__PURE__ */ new Set()
        }
      };
    }
    const pipeDef = getPipeDef$1(type);
    if (pipeDef !== null) {
      return {
        schemas: null,
        compilation: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set()
        },
        exported: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set([type])
        }
      };
    }
  }
  throw new Error(`${type.name} does not have a module def (\u0275mod property)`);
}
function transitiveScopesForNgModule(moduleType) {
  const def = getNgModuleDef(moduleType, true);
  if (def.transitiveCompileScopes !== null) {
    return def.transitiveCompileScopes;
  }
  const scopes = {
    schemas: def.schemas || null,
    compilation: {
      directives: /* @__PURE__ */ new Set(),
      pipes: /* @__PURE__ */ new Set()
    },
    exported: {
      directives: /* @__PURE__ */ new Set(),
      pipes: /* @__PURE__ */ new Set()
    }
  };
  maybeUnwrapFn(def.imports).forEach((imported) => {
    const importedScope = transitiveScopesFor(imported);
    importedScope.exported.directives.forEach((entry) => scopes.compilation.directives.add(entry));
    importedScope.exported.pipes.forEach((entry) => scopes.compilation.pipes.add(entry));
  });
  maybeUnwrapFn(def.declarations).forEach((declared) => {
    const declaredWithDefs = declared;
    if (getPipeDef$1(declaredWithDefs)) {
      scopes.compilation.pipes.add(declared);
    } else {
      scopes.compilation.directives.add(declared);
    }
  });
  maybeUnwrapFn(def.exports).forEach((exported) => {
    const exportedType = exported;
    if (isNgModule(exportedType)) {
      const exportedScope = transitiveScopesFor(exportedType);
      exportedScope.exported.directives.forEach((entry) => {
        scopes.compilation.directives.add(entry);
        scopes.exported.directives.add(entry);
      });
      exportedScope.exported.pipes.forEach((entry) => {
        scopes.compilation.pipes.add(entry);
        scopes.exported.pipes.add(entry);
      });
    } else if (getPipeDef$1(exportedType)) {
      scopes.exported.pipes.add(exportedType);
    } else {
      scopes.exported.directives.add(exportedType);
    }
  });
  def.transitiveCompileScopes = scopes;
  return scopes;
}
function expandModuleWithProviders(value) {
  if (isModuleWithProviders(value)) {
    return value.ngModule;
  }
  return value;
}
var compilationDepth = 0;
function compileComponent(type, metadata) {
  (typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode();
  let ngComponentDef = null;
  maybeQueueResolutionOfComponentResources(type, metadata);
  addDirectiveFactoryDef(type, metadata);
  Object.defineProperty(type, NG_COMP_DEF, {
    get: () => {
      if (ngComponentDef === null) {
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "component",
          type
        });
        if (componentNeedsResolution(metadata)) {
          const error = [`Component '${type.name}' is not resolved:`];
          if (metadata.templateUrl) {
            error.push(` - templateUrl: ${metadata.templateUrl}`);
          }
          if (metadata.styleUrls && metadata.styleUrls.length) {
            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);
          }
          if (metadata.styleUrl) {
            error.push(` - styleUrl: ${metadata.styleUrl}`);
          }
          error.push(`Did you run and wait for 'resolveComponentResources()'?`);
          throw new Error(error.join("\n"));
        }
        const options = getJitOptions();
        let preserveWhitespaces = metadata.preserveWhitespaces;
        if (preserveWhitespaces === void 0) {
          if (options !== null && options.preserveWhitespaces !== void 0) {
            preserveWhitespaces = options.preserveWhitespaces;
          } else {
            preserveWhitespaces = false;
          }
        }
        let encapsulation = metadata.encapsulation;
        if (encapsulation === void 0) {
          if (options !== null && options.defaultEncapsulation !== void 0) {
            encapsulation = options.defaultEncapsulation;
          } else {
            encapsulation = ViewEncapsulation$1.Emulated;
          }
        }
        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;
        const meta = __spreadProps(__spreadValues({}, directiveMetadata(type, metadata)), {
          typeSourceSpan: compiler.createParseSourceSpan("Component", type.name, templateUrl),
          template: metadata.template || "",
          preserveWhitespaces,
          styles: typeof metadata.styles === "string" ? [metadata.styles] : metadata.styles || EMPTY_ARRAY,
          animations: metadata.animations,
          // JIT components are always compiled against an empty set of `declarations`. Instead, the
          // `directiveDefs` and `pipeDefs` are updated at a later point:
          //  * for NgModule-based components, they're set when the NgModule which declares the
          //    component resolves in the module scoping queue
          //  * for standalone components, they're set just below, after `compileComponent`.
          declarations: [],
          changeDetection: metadata.changeDetection,
          encapsulation,
          interpolation: metadata.interpolation,
          viewProviders: metadata.viewProviders || null
        });
        compilationDepth++;
        try {
          if (meta.usesInheritance) {
            addDirectiveDefToUndecoratedParents(type);
          }
          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
          if (metadata.standalone) {
            const imports = flatten(metadata.imports || EMPTY_ARRAY);
            const {
              directiveDefs,
              pipeDefs
            } = getStandaloneDefFunctions(type, imports);
            ngComponentDef.directiveDefs = directiveDefs;
            ngComponentDef.pipeDefs = pipeDefs;
            ngComponentDef.dependencies = () => imports.map(resolveForwardRef);
          }
        } finally {
          compilationDepth--;
        }
        if (compilationDepth === 0) {
          flushModuleScopingQueueAsMuchAsPossible();
        }
        if (hasSelectorScope(type)) {
          const scopes = transitiveScopesFor(type.ngSelectorScope);
          patchComponentDefWithScope(ngComponentDef, scopes);
        }
        if (metadata.schemas) {
          if (metadata.standalone) {
            ngComponentDef.schemas = metadata.schemas;
          } else {
            throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);
          }
        } else if (metadata.standalone) {
          ngComponentDef.schemas = [];
        }
      }
      return ngComponentDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getStandaloneDefFunctions(type, imports) {
  let cachedDirectiveDefs = null;
  let cachedPipeDefs = null;
  const directiveDefs = () => {
    if (!USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {
      if (cachedDirectiveDefs === null) {
        cachedDirectiveDefs = [getComponentDef(type)];
        const seen = /* @__PURE__ */ new Set([type]);
        for (const rawDep of imports) {
          ngDevMode && verifyStandaloneImport(rawDep, type);
          const dep = resolveForwardRef(rawDep);
          if (seen.has(dep)) {
            continue;
          }
          seen.add(dep);
          if (!!getNgModuleDef(dep)) {
            const scope = transitiveScopesFor(dep);
            for (const dir of scope.exported.directives) {
              const def = getComponentDef(dir) || getDirectiveDef(dir);
              if (def && !seen.has(dir)) {
                seen.add(dir);
                cachedDirectiveDefs.push(def);
              }
            }
          } else {
            const def = getComponentDef(dep) || getDirectiveDef(dep);
            if (def) {
              cachedDirectiveDefs.push(def);
            }
          }
        }
      }
      return cachedDirectiveDefs;
    } else {
      if (ngDevMode) {
        for (const rawDep of imports) {
          verifyStandaloneImport(rawDep, type);
        }
      }
      if (!isComponent(type)) {
        return [];
      }
      const scope = depsTracker.getStandaloneComponentScope(type, imports);
      return [...scope.compilation.directives].map((p) => getComponentDef(p) || getDirectiveDef(p)).filter((d) => d !== null);
    }
  };
  const pipeDefs = () => {
    if (!USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {
      if (cachedPipeDefs === null) {
        cachedPipeDefs = [];
        const seen = /* @__PURE__ */ new Set();
        for (const rawDep of imports) {
          const dep = resolveForwardRef(rawDep);
          if (seen.has(dep)) {
            continue;
          }
          seen.add(dep);
          if (!!getNgModuleDef(dep)) {
            const scope = transitiveScopesFor(dep);
            for (const pipe2 of scope.exported.pipes) {
              const def = getPipeDef$1(pipe2);
              if (def && !seen.has(pipe2)) {
                seen.add(pipe2);
                cachedPipeDefs.push(def);
              }
            }
          } else {
            const def = getPipeDef$1(dep);
            if (def) {
              cachedPipeDefs.push(def);
            }
          }
        }
      }
      return cachedPipeDefs;
    } else {
      if (ngDevMode) {
        for (const rawDep of imports) {
          verifyStandaloneImport(rawDep, type);
        }
      }
      if (!isComponent(type)) {
        return [];
      }
      const scope = depsTracker.getStandaloneComponentScope(type, imports);
      return [...scope.compilation.pipes].map((p) => getPipeDef$1(p)).filter((d) => d !== null);
    }
  };
  return {
    directiveDefs,
    pipeDefs
  };
}
function hasSelectorScope(component) {
  return component.ngSelectorScope !== void 0;
}
function compileDirective(type, directive) {
  let ngDirectiveDef = null;
  addDirectiveFactoryDef(type, directive || {});
  Object.defineProperty(type, NG_DIR_DEF, {
    get: () => {
      if (ngDirectiveDef === null) {
        const meta = getDirectiveMetadata(type, directive || {});
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "directive",
          type
        });
        ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
      }
      return ngDirectiveDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getDirectiveMetadata(type, metadata) {
  const name = type && type.name;
  const sourceMapUrl = `ng:///${name}/\u0275dir.js`;
  const compiler = getCompilerFacade({
    usage: 0,
    kind: "directive",
    type
  });
  const facade = directiveMetadata(type, metadata);
  facade.typeSourceSpan = compiler.createParseSourceSpan("Directive", name, sourceMapUrl);
  if (facade.usesInheritance) {
    addDirectiveDefToUndecoratedParents(type);
  }
  return {
    metadata: facade,
    sourceMapUrl
  };
}
function addDirectiveFactoryDef(type, metadata) {
  let ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const meta = getDirectiveMetadata(type, metadata);
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "directive",
          type
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/\u0275fac.js`, {
          name: meta.metadata.name,
          type: meta.metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Directive
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function extendsDirectlyFromObject(type) {
  return Object.getPrototypeOf(type.prototype) === Object.prototype;
}
function directiveMetadata(type, metadata) {
  const reflect = getReflect();
  const propMetadata = reflect.ownPropMetadata(type);
  return {
    name: type.name,
    type,
    selector: metadata.selector !== void 0 ? metadata.selector : null,
    host: metadata.host || EMPTY_OBJ,
    propMetadata,
    inputs: metadata.inputs || EMPTY_ARRAY,
    outputs: metadata.outputs || EMPTY_ARRAY,
    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
    lifecycle: {
      usesOnChanges: reflect.hasLifecycleHook(type, "ngOnChanges")
    },
    typeSourceSpan: null,
    usesInheritance: !extendsDirectlyFromObject(type),
    exportAs: extractExportAs(metadata.exportAs),
    providers: metadata.providers || null,
    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),
    isStandalone: !!metadata.standalone,
    isSignal: !!metadata.signals,
    hostDirectives: metadata.hostDirectives?.map((directive) => typeof directive === "function" ? {
      directive
    } : directive) || null
  };
}
function addDirectiveDefToUndecoratedParents(type) {
  const objPrototype = Object.prototype;
  let parent = Object.getPrototypeOf(type.prototype).constructor;
  while (parent && parent !== objPrototype) {
    if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {
      compileDirective(parent, null);
    }
    parent = Object.getPrototypeOf(parent);
  }
}
function convertToR3QueryPredicate(selector) {
  return typeof selector === "string" ? splitByComma(selector) : resolveForwardRef(selector);
}
function convertToR3QueryMetadata(propertyName, ann) {
  return {
    propertyName,
    predicate: convertToR3QueryPredicate(ann.selector),
    descendants: ann.descendants,
    first: ann.first,
    read: ann.read ? ann.read : null,
    static: !!ann.static,
    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,
    isSignal: !!ann.isSignal
  };
}
function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
  const queriesMeta = [];
  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      const annotations = propMetadata[field];
      annotations.forEach((ann) => {
        if (isQueryAnn(ann)) {
          if (!ann.selector) {
            throw new Error(`Can't construct a query for the property "${field}" of "${stringifyForError(type)}" since the query selector wasn't defined.`);
          }
          if (annotations.some(isInputAnnotation)) {
            throw new Error(`Cannot combine @Input decorators with query decorators`);
          }
          queriesMeta.push(convertToR3QueryMetadata(field, ann));
        }
      });
    }
  }
  return queriesMeta;
}
function extractExportAs(exportAs) {
  return exportAs === void 0 ? null : splitByComma(exportAs);
}
function isContentQuery(value) {
  const name = value.ngMetadataName;
  return name === "ContentChild" || name === "ContentChildren";
}
function isViewQuery(value) {
  const name = value.ngMetadataName;
  return name === "ViewChild" || name === "ViewChildren";
}
function isInputAnnotation(value) {
  return value.ngMetadataName === "Input";
}
function splitByComma(value) {
  return value.split(",").map((piece) => piece.trim());
}
var LIFECYCLE_HOOKS = ["ngOnChanges", "ngOnInit", "ngOnDestroy", "ngDoCheck", "ngAfterViewInit", "ngAfterViewChecked", "ngAfterContentInit", "ngAfterContentChecked"];
function shouldAddAbstractDirective(type) {
  const reflect = getReflect();
  if (LIFECYCLE_HOOKS.some((hookName) => reflect.hasLifecycleHook(type, hookName))) {
    return true;
  }
  const propMetadata = reflect.propMetadata(type);
  for (const field in propMetadata) {
    const annotations = propMetadata[field];
    for (let i = 0; i < annotations.length; i++) {
      const current = annotations[i];
      const metadataName = current.ngMetadataName;
      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === "Output" || metadataName === "HostBinding" || metadataName === "HostListener") {
        return true;
      }
    }
  }
  return false;
}
function compilePipe(type, meta) {
  let ngPipeDef = null;
  let ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const metadata = getPipeMetadata(type, meta);
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "pipe",
          type: metadata.type
        });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/\u0275fac.js`, {
          name: metadata.name,
          type: metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Pipe
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  Object.defineProperty(type, NG_PIPE_DEF, {
    get: () => {
      if (ngPipeDef === null) {
        const metadata = getPipeMetadata(type, meta);
        const compiler = getCompilerFacade({
          usage: 0,
          kind: "pipe",
          type: metadata.type
        });
        ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/\u0275pipe.js`, metadata);
      }
      return ngPipeDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getPipeMetadata(type, meta) {
  return {
    type,
    name: type.name,
    pipeName: meta.name,
    pure: meta.pure !== void 0 ? meta.pure : true,
    isStandalone: !!meta.standalone
  };
}
var Directive = makeDecorator("Directive", (dir = {}) => dir, void 0, void 0, (type, meta) => compileDirective(type, meta));
var Component = makeDecorator("Component", (c = {}) => __spreadValues({
  changeDetection: ChangeDetectionStrategy.Default
}, c), Directive, void 0, (type, meta) => compileComponent(type, meta));
var Pipe = makeDecorator("Pipe", (p) => __spreadValues({
  pure: true
}, p), void 0, void 0, (type, meta) => compilePipe(type, meta));
var Input = makePropDecorator("Input", (arg) => {
  if (!arg) {
    return {};
  }
  return typeof arg === "string" ? {
    alias: arg
  } : arg;
});
var Output = makePropDecorator("Output", (alias) => ({
  alias
}));
var HostBinding = makePropDecorator("HostBinding", (hostPropertyName) => ({
  hostPropertyName
}));
var HostListener = makePropDecorator("HostListener", (eventName, args) => ({
  eventName,
  args
}));
var NgModule = makeDecorator(
  "NgModule",
  (ngModule) => ngModule,
  void 0,
  void 0,
  /**
   * Decorator that marks the following class as an NgModule, and supplies
   * configuration metadata for it.
   *
   * * The `declarations` option configures the compiler
   * with information about what belongs to the NgModule.
   * * The `providers` options configures the NgModule's injector to provide
   * dependencies the NgModule members.
   * * The `imports` and `exports` options bring in members from other modules, and make
   * this module's members available to others.
   */
  (type, meta) => compileNgModule(type, meta)
);
var Version = class {
  constructor(full) {
    this.full = full;
    const parts = full.split(".");
    this.major = parts[0];
    this.minor = parts[1];
    this.patch = parts.slice(2).join(".");
  }
};
var VERSION = new Version("18.2.2");
var _Console = class _Console {
  log(message) {
    console.log(message);
  }
  // Note: for reporting errors use `DOM.logError()` as it is platform specific
  warn(message) {
    console.warn(message);
  }
};
_Console.\u0275fac = function Console_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _Console)();
};
_Console.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Console,
  factory: _Console.\u0275fac,
  providedIn: "platform"
});
var Console = _Console;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Console, [{
    type: Injectable,
    args: [{
      providedIn: "platform"
    }]
  }], null, null);
})();
var DIDebugData = class {
  constructor() {
    this.resolverToTokenToDependencies = /* @__PURE__ */ new WeakMap();
    this.resolverToProviders = /* @__PURE__ */ new WeakMap();
    this.standaloneInjectorToComponent = /* @__PURE__ */ new WeakMap();
  }
  reset() {
    this.resolverToTokenToDependencies = /* @__PURE__ */ new WeakMap();
    this.resolverToProviders = /* @__PURE__ */ new WeakMap();
    this.standaloneInjectorToComponent = /* @__PURE__ */ new WeakMap();
  }
};
var frameworkDIDebugData = new DIDebugData();
function getFrameworkDIDebugData() {
  return frameworkDIDebugData;
}
function setupFrameworkInjectorProfiler() {
  frameworkDIDebugData.reset();
  setInjectorProfiler((injectorProfilerEvent) => handleInjectorProfilerEvent(injectorProfilerEvent));
}
function handleInjectorProfilerEvent(injectorProfilerEvent) {
  const {
    context: context2,
    type
  } = injectorProfilerEvent;
  if (type === 0) {
    handleInjectEvent(context2, injectorProfilerEvent.service);
  } else if (type === 1) {
    handleInstanceCreatedByInjectorEvent(context2, injectorProfilerEvent.instance);
  } else if (type === 2) {
    handleProviderConfiguredEvent(context2, injectorProfilerEvent.providerRecord);
  }
}
function handleInjectEvent(context2, data) {
  const diResolver = getDIResolver(context2.injector);
  if (diResolver === null) {
    throwError2("An Inject event must be run within an injection context.");
  }
  const diResolverToInstantiatedToken = frameworkDIDebugData.resolverToTokenToDependencies;
  if (!diResolverToInstantiatedToken.has(diResolver)) {
    diResolverToInstantiatedToken.set(diResolver, /* @__PURE__ */ new WeakMap());
  }
  if (!canBeHeldWeakly(context2.token)) {
    return;
  }
  const instantiatedTokenToDependencies = diResolverToInstantiatedToken.get(diResolver);
  if (!instantiatedTokenToDependencies.has(context2.token)) {
    instantiatedTokenToDependencies.set(context2.token, []);
  }
  const {
    token,
    value,
    flags
  } = data;
  assertDefined(context2.token, "Injector profiler context token is undefined.");
  const dependencies = instantiatedTokenToDependencies.get(context2.token);
  assertDefined(dependencies, "Could not resolve dependencies for token.");
  if (context2.injector instanceof NodeInjector) {
    dependencies.push({
      token,
      value,
      flags,
      injectedIn: getNodeInjectorContext(context2.injector)
    });
  } else {
    dependencies.push({
      token,
      value,
      flags
    });
  }
}
function getNodeInjectorContext(injector) {
  if (!(injector instanceof NodeInjector)) {
    throwError2("getNodeInjectorContext must be called with a NodeInjector");
  }
  const lView = getNodeInjectorLView(injector);
  const tNode = getNodeInjectorTNode(injector);
  if (tNode === null) {
    return;
  }
  assertTNodeForLView(tNode, lView);
  return {
    lView,
    tNode
  };
}
function handleInstanceCreatedByInjectorEvent(context2, data) {
  const {
    value
  } = data;
  if (getDIResolver(context2.injector) === null) {
    throwError2("An InjectorCreatedInstance event must be run within an injection context.");
  }
  let standaloneComponent = void 0;
  if (typeof value === "object") {
    standaloneComponent = value?.constructor;
  }
  if (standaloneComponent == void 0 || !isStandaloneComponent(standaloneComponent)) {
    return;
  }
  const environmentInjector = context2.injector.get(EnvironmentInjector, null, {
    optional: true
  });
  if (environmentInjector === null) {
    return;
  }
  const {
    standaloneInjectorToComponent
  } = frameworkDIDebugData;
  if (standaloneInjectorToComponent.has(environmentInjector)) {
    return;
  }
  standaloneInjectorToComponent.set(environmentInjector, standaloneComponent);
}
function isStandaloneComponent(value) {
  const def = getComponentDef(value);
  return !!def?.standalone;
}
function handleProviderConfiguredEvent(context2, data) {
  const {
    resolverToProviders
  } = frameworkDIDebugData;
  let diResolver;
  if (context2?.injector instanceof NodeInjector) {
    diResolver = getNodeInjectorTNode(context2.injector);
  } else {
    diResolver = context2.injector;
  }
  if (diResolver === null) {
    throwError2("A ProviderConfigured event must be run within an injection context.");
  }
  if (!resolverToProviders.has(diResolver)) {
    resolverToProviders.set(diResolver, []);
  }
  resolverToProviders.get(diResolver).push(data);
}
function getDIResolver(injector) {
  let diResolver = null;
  if (injector === void 0) {
    return diResolver;
  }
  if (injector instanceof NodeInjector) {
    diResolver = getNodeInjectorLView(injector);
  } else {
    diResolver = injector;
  }
  return diResolver;
}
function canBeHeldWeakly(value) {
  return value !== null && (typeof value === "object" || typeof value === "function" || typeof value === "symbol");
}
function applyChanges(component) {
  ngDevMode && assertDefined(component, "component");
  markViewDirty(
    getComponentViewByInstance(component),
    3
    /* NotificationSource.DebugApplyChanges */
  );
  getRootComponents(component).forEach((rootComponent) => detectChanges(rootComponent));
}
function detectChanges(component) {
  const view = getComponentViewByInstance(component);
  view[FLAGS] |= 1024;
  detectChangesInternal(view);
}
function getDependenciesFromInjectable(injector, token) {
  const instance = injector.get(token, null, {
    self: true,
    optional: true
  });
  if (instance === null) {
    throw new Error(`Unable to determine instance of ${token} in given injector`);
  }
  const unformattedDependencies = getDependenciesForTokenInInjector(token, injector);
  const resolutionPath = getInjectorResolutionPath(injector);
  const dependencies = unformattedDependencies.map((dep) => {
    const formattedDependency = {
      value: dep.value
    };
    const flags = dep.flags;
    formattedDependency.flags = {
      optional: (8 & flags) === 8,
      host: (1 & flags) === 1,
      self: (2 & flags) === 2,
      skipSelf: (4 & flags) === 4
      /* InternalInjectFlags.SkipSelf */
    };
    for (let i = 0; i < resolutionPath.length; i++) {
      const injectorToCheck = resolutionPath[i];
      if (i === 0 && formattedDependency.flags.skipSelf) {
        continue;
      }
      if (formattedDependency.flags.host && injectorToCheck instanceof EnvironmentInjector) {
        break;
      }
      const instance2 = injectorToCheck.get(dep.token, null, {
        self: true,
        optional: true
      });
      if (instance2 !== null) {
        if (formattedDependency.flags.host) {
          const firstInjector = resolutionPath[0];
          const lookupFromFirstInjector = firstInjector.get(dep.token, null, __spreadProps(__spreadValues({}, formattedDependency.flags), {
            optional: true
          }));
          if (lookupFromFirstInjector !== null) {
            formattedDependency.providedIn = injectorToCheck;
          }
          break;
        }
        formattedDependency.providedIn = injectorToCheck;
        break;
      }
      if (i === 0 && formattedDependency.flags.self) {
        break;
      }
    }
    if (dep.token) formattedDependency.token = dep.token;
    return formattedDependency;
  });
  return {
    instance,
    dependencies
  };
}
function getDependenciesForTokenInInjector(token, injector) {
  const {
    resolverToTokenToDependencies
  } = getFrameworkDIDebugData();
  if (!(injector instanceof NodeInjector)) {
    return resolverToTokenToDependencies.get(injector)?.get?.(token) ?? [];
  }
  const lView = getNodeInjectorLView(injector);
  const tokenDependencyMap = resolverToTokenToDependencies.get(lView);
  const dependencies = tokenDependencyMap?.get(token) ?? [];
  return dependencies.filter((dependency) => {
    const dependencyNode = dependency.injectedIn?.tNode;
    if (dependencyNode === void 0) {
      return false;
    }
    const instanceNode = getNodeInjectorTNode(injector);
    assertTNode(dependencyNode);
    assertTNode(instanceNode);
    return dependencyNode === instanceNode;
  });
}
function getProviderImportsContainer(injector) {
  const {
    standaloneInjectorToComponent
  } = getFrameworkDIDebugData();
  if (standaloneInjectorToComponent.has(injector)) {
    return standaloneInjectorToComponent.get(injector);
  }
  const defTypeRef = injector.get(NgModuleRef$1, null, {
    self: true,
    optional: true
  });
  if (defTypeRef === null) {
    return null;
  }
  if (defTypeRef.instance === null) {
    return null;
  }
  return defTypeRef.instance.constructor;
}
function getNodeInjectorProviders(injector) {
  const diResolver = getNodeInjectorTNode(injector);
  const {
    resolverToProviders
  } = getFrameworkDIDebugData();
  return resolverToProviders.get(diResolver) ?? [];
}
function getProviderImportPaths(providerImportsContainer) {
  const providerToPath = /* @__PURE__ */ new Map();
  const visitedContainers = /* @__PURE__ */ new Set();
  const visitor = walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers);
  walkProviderTree(providerImportsContainer, visitor, [], /* @__PURE__ */ new Set());
  return providerToPath;
}
function walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers) {
  return (provider, container) => {
    if (!providerToPath.has(provider)) {
      providerToPath.set(provider, [container]);
    }
    if (!visitedContainers.has(container)) {
      for (const prov of providerToPath.keys()) {
        const existingImportPath = providerToPath.get(prov);
        let containerDef = getInjectorDef(container);
        if (!containerDef) {
          const ngModule = container.ngModule;
          containerDef = getInjectorDef(ngModule);
        }
        if (!containerDef) {
          return;
        }
        const lastContainerAddedToPath = existingImportPath[0];
        let isNextStepInPath = false;
        deepForEach(containerDef.imports, (moduleImport) => {
          if (isNextStepInPath) {
            return;
          }
          isNextStepInPath = moduleImport.ngModule === lastContainerAddedToPath || moduleImport === lastContainerAddedToPath;
          if (isNextStepInPath) {
            providerToPath.get(prov)?.unshift(container);
          }
        });
      }
    }
    visitedContainers.add(container);
  };
}
function getEnvironmentInjectorProviders(injector) {
  const providerRecordsWithoutImportPaths = getFrameworkDIDebugData().resolverToProviders.get(injector) ?? [];
  if (isPlatformInjector(injector)) {
    return providerRecordsWithoutImportPaths;
  }
  const providerImportsContainer = getProviderImportsContainer(injector);
  if (providerImportsContainer === null) {
    return providerRecordsWithoutImportPaths;
  }
  const providerToPath = getProviderImportPaths(providerImportsContainer);
  const providerRecords = [];
  for (const providerRecord of providerRecordsWithoutImportPaths) {
    const provider = providerRecord.provider;
    const token = provider.provide;
    if (token === ENVIRONMENT_INITIALIZER || token === INJECTOR_DEF_TYPES) {
      continue;
    }
    let importPath = providerToPath.get(provider) ?? [];
    const def = getComponentDef(providerImportsContainer);
    const isStandaloneComponent2 = !!def?.standalone;
    if (isStandaloneComponent2) {
      importPath = [providerImportsContainer, ...importPath];
    }
    providerRecords.push(__spreadProps(__spreadValues({}, providerRecord), {
      importPath
    }));
  }
  return providerRecords;
}
function isPlatformInjector(injector) {
  return injector instanceof R3Injector && injector.scopes.has("platform");
}
function getInjectorProviders(injector) {
  if (injector instanceof NodeInjector) {
    return getNodeInjectorProviders(injector);
  } else if (injector instanceof EnvironmentInjector) {
    return getEnvironmentInjectorProviders(injector);
  }
  throwError2("getInjectorProviders only supports NodeInjector and EnvironmentInjector");
}
function getInjectorMetadata(injector) {
  if (injector instanceof NodeInjector) {
    const lView = getNodeInjectorLView(injector);
    const tNode = getNodeInjectorTNode(injector);
    assertTNodeForLView(tNode, lView);
    return {
      type: "element",
      source: getNativeByTNode(tNode, lView)
    };
  }
  if (injector instanceof R3Injector) {
    return {
      type: "environment",
      source: injector.source ?? null
    };
  }
  if (injector instanceof NullInjector) {
    return {
      type: "null",
      source: null
    };
  }
  return null;
}
function getInjectorResolutionPath(injector) {
  const resolutionPath = [injector];
  getInjectorResolutionPathHelper(injector, resolutionPath);
  return resolutionPath;
}
function getInjectorResolutionPathHelper(injector, resolutionPath) {
  const parent = getInjectorParent(injector);
  if (parent === null) {
    if (injector instanceof NodeInjector) {
      const firstInjector = resolutionPath[0];
      if (firstInjector instanceof NodeInjector) {
        const moduleInjector = getModuleInjectorOfNodeInjector(firstInjector);
        if (moduleInjector === null) {
          throwError2("NodeInjector must have some connection to the module injector tree");
        }
        resolutionPath.push(moduleInjector);
        getInjectorResolutionPathHelper(moduleInjector, resolutionPath);
      }
      return resolutionPath;
    }
  } else {
    resolutionPath.push(parent);
    getInjectorResolutionPathHelper(parent, resolutionPath);
  }
  return resolutionPath;
}
function getInjectorParent(injector) {
  if (injector instanceof R3Injector) {
    const parent = injector.parent;
    if (isRouterOutletInjector(parent)) {
      return parent.parentInjector;
    }
    return parent;
  }
  let tNode;
  let lView;
  if (injector instanceof NodeInjector) {
    tNode = getNodeInjectorTNode(injector);
    lView = getNodeInjectorLView(injector);
  } else if (injector instanceof NullInjector) {
    return null;
  } else if (injector instanceof ChainedInjector) {
    return injector.parentInjector;
  } else {
    throwError2("getInjectorParent only support injectors of type R3Injector, NodeInjector, NullInjector");
  }
  const parentLocation = getParentInjectorLocation(tNode, lView);
  if (hasParentInjector(parentLocation)) {
    const parentInjectorIndex = getParentInjectorIndex(parentLocation);
    const parentLView = getParentInjectorView(parentLocation, lView);
    const parentTView = parentLView[TVIEW];
    const parentTNode = parentTView.data[
      parentInjectorIndex + 8
      /* NodeInjectorOffset.TNODE */
    ];
    return new NodeInjector(parentTNode, parentLView);
  } else {
    const chainedInjector = lView[INJECTOR];
    const injectorParent = chainedInjector.injector?.parent;
    if (injectorParent instanceof NodeInjector) {
      return injectorParent;
    }
  }
  return null;
}
function getModuleInjectorOfNodeInjector(injector) {
  let lView;
  if (injector instanceof NodeInjector) {
    lView = getNodeInjectorLView(injector);
  } else {
    throwError2("getModuleInjectorOfNodeInjector must be called with a NodeInjector");
  }
  const inj = lView[INJECTOR];
  const moduleInjector = inj instanceof ChainedInjector ? inj.parentInjector : inj.parent;
  if (!moduleInjector) {
    throwError2("NodeInjector must have some connection to the module injector tree");
  }
  return moduleInjector;
}
var GLOBAL_PUBLISH_EXPANDO_KEY = "ng";
var globalUtilsFunctions = {
  /**
   * Warning: functions that start with `ɵ` are considered *INTERNAL* and should not be relied upon
   * in application's code. The contract of those functions might be changed in any release and/or a
   * function can be removed completely.
   */
  "\u0275getDependenciesFromInjectable": getDependenciesFromInjectable,
  "\u0275getInjectorProviders": getInjectorProviders,
  "\u0275getInjectorResolutionPath": getInjectorResolutionPath,
  "\u0275getInjectorMetadata": getInjectorMetadata,
  "\u0275setProfiler": setProfiler,
  "getDirectiveMetadata": getDirectiveMetadata$1,
  "getComponent": getComponent$1,
  "getContext": getContext,
  "getListeners": getListeners,
  "getOwningComponent": getOwningComponent,
  "getHostElement": getHostElement,
  "getInjector": getInjector,
  "getRootComponents": getRootComponents,
  "getDirectives": getDirectives,
  "applyChanges": applyChanges,
  "isSignal": isSignal
};
var _published = false;
function publishDefaultGlobalUtils$1() {
  if (!_published) {
    _published = true;
    if (typeof window !== "undefined") {
      setupFrameworkInjectorProfiler();
    }
    for (const [methodName, method] of Object.entries(globalUtilsFunctions)) {
      publishGlobalUtil(methodName, method);
    }
  }
}
function publishGlobalUtil(name, fn) {
  if (typeof COMPILED === "undefined" || !COMPILED) {
    const w = _global;
    ngDevMode && assertDefined(fn, "function not defined");
    w[GLOBAL_PUBLISH_EXPANDO_KEY] ??= {};
    w[GLOBAL_PUBLISH_EXPANDO_KEY][name] = fn;
  }
}
var TESTABILITY = new InjectionToken("");
var TESTABILITY_GETTER = new InjectionToken("");
var _Testability = class _Testability {
  constructor(_ngZone, registry, testabilityGetter) {
    this._ngZone = _ngZone;
    this.registry = registry;
    this._isZoneStable = true;
    this._callbacks = [];
    this.taskTrackingZone = null;
    if (!_testabilityGetter) {
      setTestabilityGetter(testabilityGetter);
      testabilityGetter.addToWindow(registry);
    }
    this._watchAngularEvents();
    _ngZone.run(() => {
      this.taskTrackingZone = typeof Zone == "undefined" ? null : Zone.current.get("TaskTrackingZone");
    });
  }
  _watchAngularEvents() {
    this._ngZone.onUnstable.subscribe({
      next: () => {
        this._isZoneStable = false;
      }
    });
    this._ngZone.runOutsideAngular(() => {
      this._ngZone.onStable.subscribe({
        next: () => {
          NgZone.assertNotInAngularZone();
          queueMicrotask(() => {
            this._isZoneStable = true;
            this._runCallbacksIfReady();
          });
        }
      });
    });
  }
  /**
   * Whether an associated application is stable
   */
  isStable() {
    return this._isZoneStable && !this._ngZone.hasPendingMacrotasks;
  }
  _runCallbacksIfReady() {
    if (this.isStable()) {
      queueMicrotask(() => {
        while (this._callbacks.length !== 0) {
          let cb = this._callbacks.pop();
          clearTimeout(cb.timeoutId);
          cb.doneCb();
        }
      });
    } else {
      let pending = this.getPendingTasks();
      this._callbacks = this._callbacks.filter((cb) => {
        if (cb.updateCb && cb.updateCb(pending)) {
          clearTimeout(cb.timeoutId);
          return false;
        }
        return true;
      });
    }
  }
  getPendingTasks() {
    if (!this.taskTrackingZone) {
      return [];
    }
    return this.taskTrackingZone.macroTasks.map((t) => {
      return {
        source: t.source,
        // From TaskTrackingZone:
        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
        creationLocation: t.creationLocation,
        data: t.data
      };
    });
  }
  addCallback(cb, timeout, updateCb) {
    let timeoutId = -1;
    if (timeout && timeout > 0) {
      timeoutId = setTimeout(() => {
        this._callbacks = this._callbacks.filter((cb2) => cb2.timeoutId !== timeoutId);
        cb();
      }, timeout);
    }
    this._callbacks.push({
      doneCb: cb,
      timeoutId,
      updateCb
    });
  }
  /**
   * Wait for the application to be stable with a timeout. If the timeout is reached before that
   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
   *
   * @param doneCb The callback to invoke when Angular is stable or the timeout expires
   *    whichever comes first.
   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
   *    specified, whenStable() will wait forever.
   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
   *    and no further updates will be issued.
   */
  whenStable(doneCb, timeout, updateCb) {
    if (updateCb && !this.taskTrackingZone) {
      throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');
    }
    this.addCallback(doneCb, timeout, updateCb);
    this._runCallbacksIfReady();
  }
  /**
   * Registers an application with a testability hook so that it can be tracked.
   * @param token token of application, root element
   *
   * @internal
   */
  registerApplication(token) {
    this.registry.registerApplication(token, this);
  }
  /**
   * Unregisters an application.
   * @param token token of application, root element
   *
   * @internal
   */
  unregisterApplication(token) {
    this.registry.unregisterApplication(token);
  }
  /**
   * Find providers by name
   * @param using The root element to search from
   * @param provider The name of binding variable
   * @param exactMatch Whether using exactMatch
   */
  findProviders(using, provider, exactMatch) {
    return [];
  }
};
_Testability.\u0275fac = function Testability_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _Testability)(\u0275\u0275inject(NgZone), \u0275\u0275inject(TestabilityRegistry), \u0275\u0275inject(TESTABILITY_GETTER));
};
_Testability.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Testability,
  factory: _Testability.\u0275fac
});
var Testability = _Testability;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Testability, [{
    type: Injectable
  }], () => [{
    type: NgZone
  }, {
    type: TestabilityRegistry
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [TESTABILITY_GETTER]
    }]
  }], null);
})();
var _TestabilityRegistry = class _TestabilityRegistry {
  constructor() {
    this._applications = /* @__PURE__ */ new Map();
  }
  /**
   * Registers an application with a testability hook so that it can be tracked
   * @param token token of application, root element
   * @param testability Testability hook
   */
  registerApplication(token, testability) {
    this._applications.set(token, testability);
  }
  /**
   * Unregisters an application.
   * @param token token of application, root element
   */
  unregisterApplication(token) {
    this._applications.delete(token);
  }
  /**
   * Unregisters all applications
   */
  unregisterAllApplications() {
    this._applications.clear();
  }
  /**
   * Get a testability hook associated with the application
   * @param elem root element
   */
  getTestability(elem) {
    return this._applications.get(elem) || null;
  }
  /**
   * Get all registered testabilities
   */
  getAllTestabilities() {
    return Array.from(this._applications.values());
  }
  /**
   * Get all registered applications(root elements)
   */
  getAllRootElements() {
    return Array.from(this._applications.keys());
  }
  /**
   * Find testability of a node in the Tree
   * @param elem node
   * @param findInAncestors whether finding testability in ancestors if testability was not found in
   * current node
   */
  findTestabilityInTree(elem, findInAncestors = true) {
    return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;
  }
};
_TestabilityRegistry.\u0275fac = function TestabilityRegistry_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _TestabilityRegistry)();
};
_TestabilityRegistry.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _TestabilityRegistry,
  factory: _TestabilityRegistry.\u0275fac,
  providedIn: "platform"
});
var TestabilityRegistry = _TestabilityRegistry;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{
    type: Injectable,
    args: [{
      providedIn: "platform"
    }]
  }], null, null);
})();
function setTestabilityGetter(getter) {
  _testabilityGetter = getter;
}
var _testabilityGetter;
function isPromise2(obj) {
  return !!obj && typeof obj.then === "function";
}
function isSubscribable(obj) {
  return !!obj && typeof obj.subscribe === "function";
}
var APP_INITIALIZER = new InjectionToken(ngDevMode ? "Application Initializer" : "");
var _ApplicationInitStatus = class _ApplicationInitStatus {
  constructor() {
    this.initialized = false;
    this.done = false;
    this.donePromise = new Promise((res, rej) => {
      this.resolve = res;
      this.reject = rej;
    });
    this.appInits = inject(APP_INITIALIZER, {
      optional: true
    }) ?? [];
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !Array.isArray(this.appInits)) {
      throw new RuntimeError(-209, `Unexpected type of the \`APP_INITIALIZER\` token value (expected an array, but got ${typeof this.appInits}). Please check that the \`APP_INITIALIZER\` token is configured as a \`multi: true\` provider.`);
    }
  }
  /** @internal */
  runInitializers() {
    if (this.initialized) {
      return;
    }
    const asyncInitPromises = [];
    for (const appInits of this.appInits) {
      const initResult = appInits();
      if (isPromise2(initResult)) {
        asyncInitPromises.push(initResult);
      } else if (isSubscribable(initResult)) {
        const observableAsPromise = new Promise((resolve, reject) => {
          initResult.subscribe({
            complete: resolve,
            error: reject
          });
        });
        asyncInitPromises.push(observableAsPromise);
      }
    }
    const complete = () => {
      this.done = true;
      this.resolve();
    };
    Promise.all(asyncInitPromises).then(() => {
      complete();
    }).catch((e) => {
      this.reject(e);
    });
    if (asyncInitPromises.length === 0) {
      complete();
    }
    this.initialized = true;
  }
};
_ApplicationInitStatus.\u0275fac = function ApplicationInitStatus_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ApplicationInitStatus)();
};
_ApplicationInitStatus.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ApplicationInitStatus,
  factory: _ApplicationInitStatus.\u0275fac,
  providedIn: "root"
});
var ApplicationInitStatus = _ApplicationInitStatus;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
var APP_BOOTSTRAP_LISTENER = new InjectionToken(ngDevMode ? "appBootstrapListener" : "");
function publishDefaultGlobalUtils() {
  ngDevMode && publishDefaultGlobalUtils$1();
}
function publishSignalConfiguration() {
  setThrowInvalidWriteToSignalError(() => {
    throw new RuntimeError(600, ngDevMode && "Writing to signals is not allowed in a `computed` or an `effect` by default. Use `allowSignalWrites` in the `CreateEffectOptions` to enable this inside effects.");
  });
}
function isBoundToModule(cf) {
  return cf.isBoundToModule;
}
var MAXIMUM_REFRESH_RERUNS = 10;
function _callAndReportToErrorHandler(errorHandler2, ngZone, callback) {
  try {
    const result = callback();
    if (isPromise2(result)) {
      return result.catch((e) => {
        ngZone.runOutsideAngular(() => errorHandler2.handleError(e));
        throw e;
      });
    }
    return result;
  } catch (e) {
    ngZone.runOutsideAngular(() => errorHandler2.handleError(e));
    throw e;
  }
}
function optionsReducer(dst, objs) {
  if (Array.isArray(objs)) {
    return objs.reduce(optionsReducer, dst);
  }
  return __spreadValues(__spreadValues({}, dst), objs);
}
var _ApplicationRef = class _ApplicationRef {
  constructor() {
    this._bootstrapListeners = [];
    this._runningTick = false;
    this._destroyed = false;
    this._destroyListeners = [];
    this._views = [];
    this.internalErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);
    this.afterRenderManager = inject(AfterRenderManager);
    this.zonelessEnabled = inject(ZONELESS_ENABLED);
    this.dirtyFlags = 0;
    this.deferredDirtyFlags = 0;
    this.externalTestViews = /* @__PURE__ */ new Set();
    this.beforeRender = new Subject();
    this.afterTick = new Subject();
    this.componentTypes = [];
    this.components = [];
    this.isStable = inject(PendingTasks).hasPendingTasks.pipe(map((pending) => !pending));
    this._injector = inject(EnvironmentInjector);
  }
  /** @internal */
  get allViews() {
    return [...this.externalTestViews.keys(), ...this._views];
  }
  /**
   * Indicates whether this instance was destroyed.
   */
  get destroyed() {
    return this._destroyed;
  }
  /**
   * @returns A promise that resolves when the application becomes stable
   */
  whenStable() {
    let subscription;
    return new Promise((resolve) => {
      subscription = this.isStable.subscribe({
        next: (stable) => {
          if (stable) {
            resolve();
          }
        }
      });
    }).finally(() => {
      subscription.unsubscribe();
    });
  }
  /**
   * The `EnvironmentInjector` used to create this application.
   */
  get injector() {
    return this._injector;
  }
  /**
   * Bootstrap a component onto the element identified by its selector or, optionally, to a
   * specified element.
   *
   * @usageNotes
   * ### Bootstrap process
   *
   * When bootstrapping a component, Angular mounts it onto a target DOM element
   * and kicks off automatic change detection. The target DOM element can be
   * provided using the `rootSelectorOrNode` argument.
   *
   * If the target DOM element is not provided, Angular tries to find one on a page
   * using the `selector` of the component that is being bootstrapped
   * (first matched element is used).
   *
   * ### Example
   *
   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,
   * but it requires us to know the component while writing the application code.
   *
   * Imagine a situation where we have to wait for an API call to decide about the component to
   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to
   * dynamically bootstrap a component.
   *
   * {@example core/ts/platform/platform.ts region='componentSelector'}
   *
   * Optionally, a component can be mounted onto a DOM element that does not match the
   * selector of the bootstrapped component.
   *
   * In the following example, we are providing a CSS selector to match the target element.
   *
   * {@example core/ts/platform/platform.ts region='cssSelector'}
   *
   * While in this example, we are providing reference to a DOM node.
   *
   * {@example core/ts/platform/platform.ts region='domNode'}
   */
  bootstrap(componentOrFactory, rootSelectorOrNode) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
    const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;
    const initStatus = this._injector.get(ApplicationInitStatus);
    if (!initStatus.done) {
      const standalone = !isComponentFactory && isStandalone(componentOrFactory);
      const errorMessage = (typeof ngDevMode === "undefined" || ngDevMode) && "Cannot bootstrap as there are still asynchronous initializers running." + (standalone ? "" : " Bootstrap components in the `ngDoBootstrap` method of the root module.");
      throw new RuntimeError(405, errorMessage);
    }
    let componentFactory;
    if (isComponentFactory) {
      componentFactory = componentOrFactory;
    } else {
      const resolver = this._injector.get(ComponentFactoryResolver$1);
      componentFactory = resolver.resolveComponentFactory(componentOrFactory);
    }
    this.componentTypes.push(componentFactory.componentType);
    const ngModule = isBoundToModule(componentFactory) ? void 0 : this._injector.get(NgModuleRef$1);
    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;
    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
    const nativeElement = compRef.location.nativeElement;
    const testability = compRef.injector.get(TESTABILITY, null);
    testability?.registerApplication(nativeElement);
    compRef.onDestroy(() => {
      this.detachView(compRef.hostView);
      remove(this.components, compRef);
      testability?.unregisterApplication(nativeElement);
    });
    this._loadComponent(compRef);
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const _console = this._injector.get(Console);
      _console.log(`Angular is running in development mode.`);
    }
    return compRef;
  }
  /**
   * Invoke this method to explicitly process change detection and its side-effects.
   *
   * In development mode, `tick()` also performs a second change detection cycle to ensure that no
   * further changes are detected. If additional changes are picked up during this second cycle,
   * bindings in the app have side-effects that cannot be resolved in a single change detection
   * pass.
   * In this case, Angular throws an error, since an Angular application can only have one change
   * detection pass during which all change detection must complete.
   */
  tick() {
    if (!this.zonelessEnabled) {
      this.dirtyFlags |= 1;
    }
    this._tick();
  }
  /** @internal */
  _tick() {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
    if (this._runningTick) {
      throw new RuntimeError(101, ngDevMode && "ApplicationRef.tick is called recursively");
    }
    const prevConsumer = setActiveConsumer(null);
    try {
      this._runningTick = true;
      this.synchronize();
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        for (let view of this._views) {
          view.checkNoChanges();
        }
      }
    } catch (e) {
      this.internalErrorHandler(e);
    } finally {
      this._runningTick = false;
      setActiveConsumer(prevConsumer);
      this.afterTick.next();
    }
  }
  /**
   * Performs the core work of synchronizing the application state with the UI, resolving any
   * pending dirtiness (potentially in a loop).
   */
  synchronize() {
    let rendererFactory = null;
    if (!this._injector.destroyed) {
      rendererFactory = this._injector.get(RendererFactory2, null, {
        optional: true
      });
    }
    this.dirtyFlags |= this.deferredDirtyFlags;
    this.deferredDirtyFlags = 0;
    let runs = 0;
    while (this.dirtyFlags !== 0 && runs++ < MAXIMUM_REFRESH_RERUNS) {
      this.synchronizeOnce(rendererFactory);
    }
    if ((typeof ngDevMode === "undefined" || ngDevMode) && runs >= MAXIMUM_REFRESH_RERUNS) {
      throw new RuntimeError(103, ngDevMode && "Infinite change detection while refreshing application views. Ensure views are not calling `markForCheck` on every template execution or that afterRender hooks always mark views for check.");
    }
  }
  /**
   * Perform a single synchronization pass.
   */
  synchronizeOnce(rendererFactory) {
    this.dirtyFlags |= this.deferredDirtyFlags;
    this.deferredDirtyFlags = 0;
    if (this.dirtyFlags & 7) {
      const useGlobalCheck = Boolean(
        this.dirtyFlags & 1
        /* ApplicationRefDirtyFlags.ViewTreeGlobal */
      );
      this.dirtyFlags &= ~7;
      this.dirtyFlags |= 8;
      this.beforeRender.next(useGlobalCheck);
      for (let {
        _lView,
        notifyErrorHandler
      } of this._views) {
        detectChangesInViewIfRequired(_lView, notifyErrorHandler, useGlobalCheck, this.zonelessEnabled);
      }
      this.dirtyFlags &= ~4;
      this.syncDirtyFlagsWithViews();
      if (this.dirtyFlags & 7) {
        return;
      }
    } else {
      rendererFactory?.begin?.();
      rendererFactory?.end?.();
    }
    if (this.dirtyFlags & 8) {
      this.dirtyFlags &= ~8;
      this.afterRenderManager.execute();
    }
    this.syncDirtyFlagsWithViews();
  }
  /**
   * Checks `allViews` for views which require refresh/traversal, and updates `dirtyFlags`
   * accordingly, with two potential behaviors:
   *
   * 1. If any of our views require updating, then this adds the `ViewTreeTraversal` dirty flag.
   *    This _should_ be a no-op, since the scheduler should've added the flag at the same time the
   *    view was marked as needing updating.
   *
   *    TODO(alxhub): figure out if this behavior is still needed for edge cases.
   *
   * 2. If none of our views require updating, then clear the view-related `dirtyFlag`s. This
   *    happens when the scheduler is notified of a view becoming dirty, but the view itself isn't
   *    reachable through traversal from our roots (e.g. it's detached from the CD tree).
   */
  syncDirtyFlagsWithViews() {
    if (this.allViews.some(({
      _lView
    }) => requiresRefreshOrTraversal(_lView))) {
      this.dirtyFlags |= 2;
      return;
    } else {
      this.dirtyFlags &= ~7;
    }
  }
  /**
   * Attaches a view so that it will be dirty checked.
   * The view will be automatically detached when it is destroyed.
   * This will throw if the view is already attached to a ViewContainer.
   */
  attachView(viewRef) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
    const view = viewRef;
    this._views.push(view);
    view.attachToAppRef(this);
  }
  /**
   * Detaches a view from dirty checking again.
   */
  detachView(viewRef) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
    const view = viewRef;
    remove(this._views, view);
    view.detachFromAppRef();
  }
  _loadComponent(componentRef) {
    this.attachView(componentRef.hostView);
    this.tick();
    this.components.push(componentRef);
    const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);
    if (ngDevMode && !Array.isArray(listeners)) {
      throw new RuntimeError(-209, `Unexpected type of the \`APP_BOOTSTRAP_LISTENER\` token value (expected an array, but got ${typeof listeners}). Please check that the \`APP_BOOTSTRAP_LISTENER\` token is configured as a \`multi: true\` provider.`);
    }
    [...this._bootstrapListeners, ...listeners].forEach((listener) => listener(componentRef));
  }
  /** @internal */
  ngOnDestroy() {
    if (this._destroyed) return;
    try {
      this._destroyListeners.forEach((listener) => listener());
      this._views.slice().forEach((view) => view.destroy());
    } finally {
      this._destroyed = true;
      this._views = [];
      this._bootstrapListeners = [];
      this._destroyListeners = [];
    }
  }
  /**
   * Registers a listener to be called when an instance is destroyed.
   *
   * @param callback A callback function to add as a listener.
   * @returns A function which unregisters a listener.
   */
  onDestroy(callback) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
    this._destroyListeners.push(callback);
    return () => remove(this._destroyListeners, callback);
  }
  /**
   * Destroys an Angular application represented by this `ApplicationRef`. Calling this function
   * will destroy the associated environment injectors as well as all the bootstrapped components
   * with their views.
   */
  destroy() {
    if (this._destroyed) {
      throw new RuntimeError(406, ngDevMode && "This instance of the `ApplicationRef` has already been destroyed.");
    }
    const injector = this._injector;
    if (injector.destroy && !injector.destroyed) {
      injector.destroy();
    }
  }
  /**
   * Returns the number of attached views.
   */
  get viewCount() {
    return this._views.length;
  }
  warnIfDestroyed() {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && this._destroyed) {
      console.warn(formatRuntimeError(406, "This instance of the `ApplicationRef` has already been destroyed."));
    }
  }
};
_ApplicationRef.\u0275fac = function ApplicationRef_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ApplicationRef)();
};
_ApplicationRef.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ApplicationRef,
  factory: _ApplicationRef.\u0275fac,
  providedIn: "root"
});
var ApplicationRef = _ApplicationRef;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationRef, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
function remove(list, el) {
  const index = list.indexOf(el);
  if (index > -1) {
    list.splice(index, 1);
  }
}
var whenStableStore;
function whenStable(applicationRef) {
  whenStableStore ??= /* @__PURE__ */ new WeakMap();
  const cachedWhenStable = whenStableStore.get(applicationRef);
  if (cachedWhenStable) {
    return cachedWhenStable;
  }
  const whenStablePromise = applicationRef.isStable.pipe(first((isStable) => isStable)).toPromise().then(() => void 0);
  whenStableStore.set(applicationRef, whenStablePromise);
  applicationRef.onDestroy(() => whenStableStore?.delete(applicationRef));
  return whenStablePromise;
}
function detectChangesInViewIfRequired(lView, notifyErrorHandler, isFirstPass, zonelessEnabled) {
  if (!isFirstPass && !requiresRefreshOrTraversal(lView)) {
    return;
  }
  const mode = isFirstPass && !zonelessEnabled ? (
    // The first pass is always in Global mode, which includes `CheckAlways` views.
    0
  ) : (
    // Only refresh views with the `RefreshView` flag or views is a changed signal
    1
  );
  detectChangesInternal(lView, notifyErrorHandler, mode);
}
var ModuleWithComponentFactories = class {
  constructor(ngModuleFactory, componentFactories) {
    this.ngModuleFactory = ngModuleFactory;
    this.componentFactories = componentFactories;
  }
};
var _Compiler = class _Compiler {
  /**
   * Compiles the given NgModule and all of its components. All templates of the components
   * have to be inlined.
   */
  compileModuleSync(moduleType) {
    return new NgModuleFactory(moduleType);
  }
  /**
   * Compiles the given NgModule and all of its components
   */
  compileModuleAsync(moduleType) {
    return Promise.resolve(this.compileModuleSync(moduleType));
  }
  /**
   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
   */
  compileModuleAndAllComponentsSync(moduleType) {
    const ngModuleFactory = this.compileModuleSync(moduleType);
    const moduleDef = getNgModuleDef(moduleType);
    const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {
      const componentDef = getComponentDef(declaration);
      componentDef && factories.push(new ComponentFactory(componentDef));
      return factories;
    }, []);
    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
  }
  /**
   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
   */
  compileModuleAndAllComponentsAsync(moduleType) {
    return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));
  }
  /**
   * Clears all caches.
   */
  clearCache() {
  }
  /**
   * Clears the cache for the given component/ngModule.
   */
  clearCacheFor(type) {
  }
  /**
   * Returns the id for a given NgModule, if one is defined and known to the compiler.
   */
  getModuleId(moduleType) {
    return void 0;
  }
};
_Compiler.\u0275fac = function Compiler_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _Compiler)();
};
_Compiler.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Compiler,
  factory: _Compiler.\u0275fac,
  providedIn: "root"
});
var Compiler = _Compiler;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Compiler, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var COMPILER_OPTIONS = new InjectionToken(ngDevMode ? "compilerOptions" : "");
function compileNgModuleFactory(injector, options, moduleType) {
  ngDevMode && assertNgModuleType(moduleType);
  const moduleFactory = new NgModuleFactory(moduleType);
  if (true) {
    return Promise.resolve(moduleFactory);
  }
  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);
  setJitOptions({
    defaultEncapsulation: _lastDefined(compilerOptions.map((opts) => opts.defaultEncapsulation)),
    preserveWhitespaces: _lastDefined(compilerOptions.map((opts) => opts.preserveWhitespaces))
  });
  if (isComponentResourceResolutionQueueEmpty()) {
    return Promise.resolve(moduleFactory);
  }
  const compilerProviders = compilerOptions.flatMap((option) => option.providers ?? []);
  if (compilerProviders.length === 0) {
    return Promise.resolve(moduleFactory);
  }
  const compiler = getCompilerFacade({
    usage: 0,
    kind: "NgModule",
    type: moduleType
  });
  const compilerInjector = Injector.create({
    providers: compilerProviders
  });
  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);
  return resolveComponentResources((url) => Promise.resolve(resourceLoader.get(url))).then(() => moduleFactory);
}
function _lastDefined(args) {
  for (let i = args.length - 1; i >= 0; i--) {
    if (args[i] !== void 0) {
      return args[i];
    }
  }
  return void 0;
}
var _NgZoneChangeDetectionScheduler = class _NgZoneChangeDetectionScheduler {
  constructor() {
    this.zone = inject(NgZone);
    this.changeDetectionScheduler = inject(ChangeDetectionScheduler);
    this.applicationRef = inject(ApplicationRef);
  }
  initialize() {
    if (this._onMicrotaskEmptySubscription) {
      return;
    }
    this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({
      next: () => {
        if (this.changeDetectionScheduler.runningTick) {
          return;
        }
        this.zone.run(() => {
          this.applicationRef.tick();
        });
      }
    });
  }
  ngOnDestroy() {
    this._onMicrotaskEmptySubscription?.unsubscribe();
  }
};
_NgZoneChangeDetectionScheduler.\u0275fac = function NgZoneChangeDetectionScheduler_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgZoneChangeDetectionScheduler)();
};
_NgZoneChangeDetectionScheduler.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NgZoneChangeDetectionScheduler,
  factory: _NgZoneChangeDetectionScheduler.\u0275fac,
  providedIn: "root"
});
var NgZoneChangeDetectionScheduler = _NgZoneChangeDetectionScheduler;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgZoneChangeDetectionScheduler, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var PROVIDED_NG_ZONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "provideZoneChangeDetection token" : "", {
  factory: () => false
});
function internalProvideZoneChangeDetection({
  ngZoneFactory,
  ignoreChangesOutsideZone,
  scheduleInRootZone
}) {
  ngZoneFactory ??= () => new NgZone(__spreadProps(__spreadValues({}, getNgZoneOptions()), {
    scheduleInRootZone
  }));
  return [
    {
      provide: NgZone,
      useFactory: ngZoneFactory
    },
    {
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, {
          optional: true
        });
        if ((typeof ngDevMode === "undefined" || ngDevMode) && ngZoneChangeDetectionScheduler === null) {
          throw new RuntimeError(402, `A required Injectable was not found in the dependency injection tree. If you are bootstrapping an NgModule, make sure that the \`BrowserModule\` is imported.`);
        }
        return () => ngZoneChangeDetectionScheduler.initialize();
      }
    },
    {
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const service = inject(ZoneStablePendingTask);
        return () => {
          service.initialize();
        };
      }
    },
    // Always disable scheduler whenever explicitly disabled, even if another place called
    // `provideZoneChangeDetection` without the 'ignore' option.
    ignoreChangesOutsideZone === true ? {
      provide: ZONELESS_SCHEDULER_DISABLED,
      useValue: true
    } : [],
    {
      provide: SCHEDULE_IN_ROOT_ZONE,
      useValue: scheduleInRootZone ?? SCHEDULE_IN_ROOT_ZONE_DEFAULT
    }
  ];
}
function getNgZoneOptions(options) {
  return {
    enableLongStackTrace: typeof ngDevMode === "undefined" ? false : !!ngDevMode,
    shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,
    shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false
  };
}
var _ZoneStablePendingTask = class _ZoneStablePendingTask {
  constructor() {
    this.subscription = new Subscription();
    this.initialized = false;
    this.zone = inject(NgZone);
    this.pendingTasks = inject(PendingTasks);
  }
  initialize() {
    if (this.initialized) {
      return;
    }
    this.initialized = true;
    let task = null;
    if (!this.zone.isStable && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {
      task = this.pendingTasks.add();
    }
    this.zone.runOutsideAngular(() => {
      this.subscription.add(this.zone.onStable.subscribe(() => {
        NgZone.assertNotInAngularZone();
        queueMicrotask(() => {
          if (task !== null && !this.zone.hasPendingMacrotasks && !this.zone.hasPendingMicrotasks) {
            this.pendingTasks.remove(task);
            task = null;
          }
        });
      }));
    });
    this.subscription.add(this.zone.onUnstable.subscribe(() => {
      NgZone.assertInAngularZone();
      task ??= this.pendingTasks.add();
    }));
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
};
_ZoneStablePendingTask.\u0275fac = function ZoneStablePendingTask_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ZoneStablePendingTask)();
};
_ZoneStablePendingTask.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ZoneStablePendingTask,
  factory: _ZoneStablePendingTask.\u0275fac,
  providedIn: "root"
});
var ZoneStablePendingTask = _ZoneStablePendingTask;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ZoneStablePendingTask, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT = 100;
var consecutiveMicrotaskNotifications = 0;
var stackFromLastFewNotifications = [];
function trackMicrotaskNotificationForDebugging() {
  consecutiveMicrotaskNotifications++;
  if (CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT - consecutiveMicrotaskNotifications < 5) {
    const stack = new Error().stack;
    if (stack) {
      stackFromLastFewNotifications.push(stack);
    }
  }
  if (consecutiveMicrotaskNotifications === CONSECUTIVE_MICROTASK_NOTIFICATION_LIMIT) {
    throw new RuntimeError(103, "Angular could not stabilize because there were endless change notifications within the browser event loop. The stack from the last several notifications: \n" + stackFromLastFewNotifications.join("\n"));
  }
}
var _ChangeDetectionSchedulerImpl = class _ChangeDetectionSchedulerImpl {
  constructor() {
    this.appRef = inject(ApplicationRef);
    this.taskService = inject(PendingTasks);
    this.ngZone = inject(NgZone);
    this.zonelessEnabled = inject(ZONELESS_ENABLED);
    this.disableScheduling = inject(ZONELESS_SCHEDULER_DISABLED, {
      optional: true
    }) ?? false;
    this.zoneIsDefined = typeof Zone !== "undefined" && !!Zone.root.run;
    this.schedulerTickApplyArgs = [{
      data: {
        "__scheduler_tick__": true
      }
    }];
    this.subscriptions = new Subscription();
    this.angularZoneId = this.zoneIsDefined ? this.ngZone._inner?.get(angularZoneInstanceIdProperty) : null;
    this.scheduleInRootZone = !this.zonelessEnabled && this.zoneIsDefined && (inject(SCHEDULE_IN_ROOT_ZONE, {
      optional: true
    }) ?? false);
    this.cancelScheduledCallback = null;
    this.useMicrotaskScheduler = false;
    this.runningTick = false;
    this.pendingRenderTaskId = null;
    this.subscriptions.add(this.appRef.afterTick.subscribe(() => {
      if (!this.runningTick) {
        this.cleanup();
      }
    }));
    this.subscriptions.add(this.ngZone.onUnstable.subscribe(() => {
      if (!this.runningTick) {
        this.cleanup();
      }
    }));
    this.disableScheduling ||= !this.zonelessEnabled && // NoopNgZone without enabling zoneless means no scheduling whatsoever
    (this.ngZone instanceof NoopNgZone || // The same goes for the lack of Zone without enabling zoneless scheduling
    !this.zoneIsDefined);
  }
  notify(source) {
    if (!this.zonelessEnabled && source === 5) {
      return;
    }
    switch (source) {
      case 0: {
        this.appRef.dirtyFlags |= 2;
        break;
      }
      case 3:
      case 2:
      case 4:
      case 5:
      case 1: {
        this.appRef.dirtyFlags |= 4;
        break;
      }
      case 7: {
        this.appRef.deferredDirtyFlags |= 8;
        break;
      }
      case 9:
      case 8:
      case 6:
      case 10:
      default: {
        this.appRef.dirtyFlags |= 8;
      }
    }
    if (!this.shouldScheduleTick()) {
      return;
    }
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (this.useMicrotaskScheduler) {
        trackMicrotaskNotificationForDebugging();
      } else {
        consecutiveMicrotaskNotifications = 0;
        stackFromLastFewNotifications.length = 0;
      }
    }
    const scheduleCallback = this.useMicrotaskScheduler ? scheduleCallbackWithMicrotask : scheduleCallbackWithRafRace;
    this.pendingRenderTaskId = this.taskService.add();
    if (this.scheduleInRootZone) {
      this.cancelScheduledCallback = Zone.root.run(() => scheduleCallback(() => this.tick()));
    } else {
      this.cancelScheduledCallback = this.ngZone.runOutsideAngular(() => scheduleCallback(() => this.tick()));
    }
  }
  shouldScheduleTick() {
    if (this.disableScheduling) {
      return false;
    }
    if (this.pendingRenderTaskId !== null || this.runningTick || this.appRef._runningTick) {
      return false;
    }
    if (!this.zonelessEnabled && this.zoneIsDefined && Zone.current.get(angularZoneInstanceIdProperty + this.angularZoneId)) {
      return false;
    }
    return true;
  }
  /**
   * Calls ApplicationRef._tick inside the `NgZone`.
   *
   * Calling `tick` directly runs change detection and cancels any change detection that had been
   * scheduled previously.
   *
   * @param shouldRefreshViews Passed directly to `ApplicationRef._tick` and skips straight to
   *     render hooks when `false`.
   */
  tick() {
    if (this.runningTick || this.appRef.destroyed) {
      return;
    }
    if (!this.zonelessEnabled && this.appRef.dirtyFlags & 7) {
      this.appRef.dirtyFlags |= 1;
    }
    const task = this.taskService.add();
    try {
      this.ngZone.run(() => {
        this.runningTick = true;
        this.appRef._tick();
      }, void 0, this.schedulerTickApplyArgs);
    } catch (e) {
      this.taskService.remove(task);
      throw e;
    } finally {
      this.cleanup();
    }
    this.useMicrotaskScheduler = true;
    scheduleCallbackWithMicrotask(() => {
      this.useMicrotaskScheduler = false;
      this.taskService.remove(task);
    });
  }
  ngOnDestroy() {
    this.subscriptions.unsubscribe();
    this.cleanup();
  }
  cleanup() {
    this.runningTick = false;
    this.cancelScheduledCallback?.();
    this.cancelScheduledCallback = null;
    if (this.pendingRenderTaskId !== null) {
      const taskId = this.pendingRenderTaskId;
      this.pendingRenderTaskId = null;
      this.taskService.remove(taskId);
    }
  }
};
_ChangeDetectionSchedulerImpl.\u0275fac = function ChangeDetectionSchedulerImpl_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ChangeDetectionSchedulerImpl)();
};
_ChangeDetectionSchedulerImpl.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ChangeDetectionSchedulerImpl,
  factory: _ChangeDetectionSchedulerImpl.\u0275fac,
  providedIn: "root"
});
var ChangeDetectionSchedulerImpl = _ChangeDetectionSchedulerImpl;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChangeDetectionSchedulerImpl, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function getGlobalLocale() {
  if (false) {
    return goog.LOCALE;
  } else {
    return typeof $localize !== "undefined" && $localize.locale || DEFAULT_LOCALE_ID;
  }
}
var LOCALE_ID = new InjectionToken(ngDevMode ? "LocaleId" : "", {
  providedIn: "root",
  factory: () => inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale()
});
var DEFAULT_CURRENCY_CODE = new InjectionToken(ngDevMode ? "DefaultCurrencyCode" : "", {
  providedIn: "root",
  factory: () => USD_CURRENCY_CODE
});
var TRANSLATIONS = new InjectionToken(ngDevMode ? "Translations" : "");
var TRANSLATIONS_FORMAT = new InjectionToken(ngDevMode ? "TranslationsFormat" : "");
var MissingTranslationStrategy;
(function(MissingTranslationStrategy2) {
  MissingTranslationStrategy2[MissingTranslationStrategy2["Error"] = 0] = "Error";
  MissingTranslationStrategy2[MissingTranslationStrategy2["Warning"] = 1] = "Warning";
  MissingTranslationStrategy2[MissingTranslationStrategy2["Ignore"] = 2] = "Ignore";
})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
var SCAN_DELAY = 200;
var OVERSIZED_IMAGE_TOLERANCE = 1200;
var _ImagePerformanceWarning = class _ImagePerformanceWarning {
  constructor() {
    this.window = null;
    this.observer = null;
    this.options = inject(IMAGE_CONFIG);
    this.isBrowser = inject(PLATFORM_ID) === "browser";
  }
  start() {
    if (!this.isBrowser || typeof PerformanceObserver === "undefined" || this.options?.disableImageSizeWarning && this.options?.disableImageLazyLoadWarning) {
      return;
    }
    this.observer = this.initPerformanceObserver();
    const doc = getDocument();
    const win = doc.defaultView;
    if (typeof win !== "undefined") {
      this.window = win;
      const waitToScan = () => {
        setTimeout(this.scanImages.bind(this), SCAN_DELAY);
      };
      const setup = () => {
        if (doc.readyState === "complete") {
          waitToScan();
        } else {
          this.window?.addEventListener("load", waitToScan, {
            once: true
          });
        }
      };
      if (typeof Zone !== "undefined") {
        Zone.root.run(() => setup());
      } else {
        setup();
      }
    }
  }
  ngOnDestroy() {
    this.observer?.disconnect();
  }
  initPerformanceObserver() {
    if (typeof PerformanceObserver === "undefined") {
      return null;
    }
    const observer = new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries();
      if (entries.length === 0) return;
      const lcpElement = entries[entries.length - 1];
      const imgSrc = lcpElement.element?.src ?? "";
      if (imgSrc.startsWith("data:") || imgSrc.startsWith("blob:")) return;
      this.lcpImageUrl = imgSrc;
    });
    observer.observe({
      type: "largest-contentful-paint",
      buffered: true
    });
    return observer;
  }
  scanImages() {
    const images = getDocument().querySelectorAll("img");
    let lcpElementFound, lcpElementLoadedCorrectly = false;
    images.forEach((image) => {
      if (!this.options?.disableImageSizeWarning) {
        for (const image2 of images) {
          if (!image2.getAttribute("ng-img") && this.isOversized(image2)) {
            logOversizedImageWarning(image2.src);
          }
        }
      }
      if (!this.options?.disableImageLazyLoadWarning && this.lcpImageUrl) {
        if (image.src === this.lcpImageUrl) {
          lcpElementFound = true;
          if (image.loading !== "lazy" || image.getAttribute("ng-img")) {
            lcpElementLoadedCorrectly = true;
          }
        }
      }
    });
    if (lcpElementFound && !lcpElementLoadedCorrectly && this.lcpImageUrl && !this.options?.disableImageLazyLoadWarning) {
      logLazyLCPWarning(this.lcpImageUrl);
    }
  }
  isOversized(image) {
    if (!this.window) {
      return false;
    }
    const computedStyle = this.window.getComputedStyle(image);
    let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
    let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
    const boxSizing = computedStyle.getPropertyValue("box-sizing");
    const objectFit = computedStyle.getPropertyValue("object-fit");
    if (objectFit === `cover`) {
      return false;
    }
    if (boxSizing === "border-box") {
      const paddingTop = computedStyle.getPropertyValue("padding-top");
      const paddingRight = computedStyle.getPropertyValue("padding-right");
      const paddingBottom = computedStyle.getPropertyValue("padding-bottom");
      const paddingLeft = computedStyle.getPropertyValue("padding-left");
      renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);
      renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);
    }
    const intrinsicWidth = image.naturalWidth;
    const intrinsicHeight = image.naturalHeight;
    const recommendedWidth = this.window.devicePixelRatio * renderedWidth;
    const recommendedHeight = this.window.devicePixelRatio * renderedHeight;
    const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE;
    const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE;
    return oversizedWidth || oversizedHeight;
  }
};
_ImagePerformanceWarning.\u0275fac = function ImagePerformanceWarning_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ImagePerformanceWarning)();
};
_ImagePerformanceWarning.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ImagePerformanceWarning,
  factory: _ImagePerformanceWarning.\u0275fac,
  providedIn: "root"
});
var ImagePerformanceWarning = _ImagePerformanceWarning;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ImagePerformanceWarning, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
function logLazyLCPWarning(src) {
  console.warn(formatRuntimeError(-913, `An image with src ${src} is the Largest Contentful Paint (LCP) element but was given a "loading" value of "lazy", which can negatively impact application loading performance. This warning can be addressed by changing the loading value of the LCP image to "eager", or by using the NgOptimizedImage directive's prioritization utilities. For more information about addressing or disabling this warning, see https://angular.dev/errors/NG0913`));
}
function logOversizedImageWarning(src) {
  console.warn(formatRuntimeError(-913, `An image with src ${src} has intrinsic file dimensions much larger than its rendered size. This can negatively impact application loading performance. For more information about addressing or disabling this warning, see https://angular.dev/errors/NG0913`));
}
var PLATFORM_DESTROY_LISTENERS = new InjectionToken(ngDevMode ? "PlatformDestroyListeners" : "");
function isApplicationBootstrapConfig(config2) {
  return !!config2.platformInjector;
}
function bootstrap(config2) {
  const envInjector = isApplicationBootstrapConfig(config2) ? config2.r3Injector : config2.moduleRef.injector;
  const ngZone = envInjector.get(NgZone);
  return ngZone.run(() => {
    if (isApplicationBootstrapConfig(config2)) {
      config2.r3Injector.resolveInjectorInitializers();
    } else {
      config2.moduleRef.resolveInjectorInitializers();
    }
    const exceptionHandler = envInjector.get(ErrorHandler, null);
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (exceptionHandler === null) {
        const errorMessage = isApplicationBootstrapConfig(config2) ? "No `ErrorHandler` found in the Dependency Injection tree." : "No ErrorHandler. Is platform module (BrowserModule) included";
        throw new RuntimeError(402, errorMessage);
      }
      if (envInjector.get(PROVIDED_ZONELESS) && envInjector.get(PROVIDED_NG_ZONE)) {
        throw new RuntimeError(408, "Invalid change detection configuration: provideZoneChangeDetection and provideExperimentalZonelessChangeDetection cannot be used together.");
      }
    }
    let onErrorSubscription;
    ngZone.runOutsideAngular(() => {
      onErrorSubscription = ngZone.onError.subscribe({
        next: (error) => {
          exceptionHandler.handleError(error);
        }
      });
    });
    if (isApplicationBootstrapConfig(config2)) {
      const destroyListener = () => envInjector.destroy();
      const onPlatformDestroyListeners = config2.platformInjector.get(PLATFORM_DESTROY_LISTENERS);
      onPlatformDestroyListeners.add(destroyListener);
      envInjector.onDestroy(() => {
        onErrorSubscription.unsubscribe();
        onPlatformDestroyListeners.delete(destroyListener);
      });
    } else {
      config2.moduleRef.onDestroy(() => {
        remove(config2.allPlatformModules, config2.moduleRef);
        onErrorSubscription.unsubscribe();
      });
    }
    return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {
      const initStatus = envInjector.get(ApplicationInitStatus);
      initStatus.runInitializers();
      return initStatus.donePromise.then(() => {
        const localeId = envInjector.get(LOCALE_ID, DEFAULT_LOCALE_ID);
        setLocaleId(localeId || DEFAULT_LOCALE_ID);
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          const imagePerformanceService = envInjector.get(ImagePerformanceWarning);
          imagePerformanceService.start();
        }
        if (isApplicationBootstrapConfig(config2)) {
          const appRef = envInjector.get(ApplicationRef);
          if (config2.rootComponent !== void 0) {
            appRef.bootstrap(config2.rootComponent);
          }
          return appRef;
        } else {
          moduleDoBootstrap(config2.moduleRef, config2.allPlatformModules);
          return config2.moduleRef;
        }
      });
    });
  });
}
function moduleDoBootstrap(moduleRef, allPlatformModules) {
  const appRef = moduleRef.injector.get(ApplicationRef);
  if (moduleRef._bootstrapComponents.length > 0) {
    moduleRef._bootstrapComponents.forEach((f) => appRef.bootstrap(f));
  } else if (moduleRef.instance.ngDoBootstrap) {
    moduleRef.instance.ngDoBootstrap(appRef);
  } else {
    throw new RuntimeError(-403, ngDevMode && `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`);
  }
  allPlatformModules.push(moduleRef);
}
var _PlatformRef = class _PlatformRef {
  /** @internal */
  constructor(_injector) {
    this._injector = _injector;
    this._modules = [];
    this._destroyListeners = [];
    this._destroyed = false;
  }
  /**
   * Creates an instance of an `@NgModule` for the given platform.
   *
   * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function
   *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.
   */
  bootstrapModuleFactory(moduleFactory, options) {
    const scheduleInRootZone = options?.scheduleInRootZone;
    const ngZoneFactory = () => getNgZone(options?.ngZone, __spreadProps(__spreadValues({}, getNgZoneOptions({
      eventCoalescing: options?.ngZoneEventCoalescing,
      runCoalescing: options?.ngZoneRunCoalescing
    })), {
      scheduleInRootZone
    }));
    const ignoreChangesOutsideZone = options?.ignoreChangesOutsideZone;
    const allAppProviders = [internalProvideZoneChangeDetection({
      ngZoneFactory,
      ignoreChangesOutsideZone
    }), {
      provide: ChangeDetectionScheduler,
      useExisting: ChangeDetectionSchedulerImpl
    }];
    const moduleRef = createNgModuleRefWithProviders(moduleFactory.moduleType, this.injector, allAppProviders);
    return bootstrap({
      moduleRef,
      allPlatformModules: this._modules
    });
  }
  /**
   * Creates an instance of an `@NgModule` for a given platform.
   *
   * @usageNotes
   * ### Simple Example
   *
   * ```typescript
   * @NgModule({
   *   imports: [BrowserModule]
   * })
   * class MyModule {}
   *
   * let moduleRef = platformBrowser().bootstrapModule(MyModule);
   * ```
   *
   */
  bootstrapModule(moduleType, compilerOptions = []) {
    const options = optionsReducer({}, compilerOptions);
    return compileNgModuleFactory(this.injector, options, moduleType).then((moduleFactory) => this.bootstrapModuleFactory(moduleFactory, options));
  }
  /**
   * Registers a listener to be called when the platform is destroyed.
   */
  onDestroy(callback) {
    this._destroyListeners.push(callback);
  }
  /**
   * Retrieves the platform {@link Injector}, which is the parent injector for
   * every Angular application on the page and provides singleton providers.
   */
  get injector() {
    return this._injector;
  }
  /**
   * Destroys the current Angular platform and all Angular applications on the page.
   * Destroys all modules and listeners registered with the platform.
   */
  destroy() {
    if (this._destroyed) {
      throw new RuntimeError(404, ngDevMode && "The platform has already been destroyed!");
    }
    this._modules.slice().forEach((module) => module.destroy());
    this._destroyListeners.forEach((listener) => listener());
    const destroyListeners = this._injector.get(PLATFORM_DESTROY_LISTENERS, null);
    if (destroyListeners) {
      destroyListeners.forEach((listener) => listener());
      destroyListeners.clear();
    }
    this._destroyed = true;
  }
  /**
   * Indicates whether this instance was destroyed.
   */
  get destroyed() {
    return this._destroyed;
  }
};
_PlatformRef.\u0275fac = function PlatformRef_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _PlatformRef)(\u0275\u0275inject(Injector));
};
_PlatformRef.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PlatformRef,
  factory: _PlatformRef.\u0275fac,
  providedIn: "platform"
});
var PlatformRef = _PlatformRef;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformRef, [{
    type: Injectable,
    args: [{
      providedIn: "platform"
    }]
  }], () => [{
    type: Injector
  }], null);
})();
var _platformInjector = null;
var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken(ngDevMode ? "AllowMultipleToken" : "");
function createPlatform(injector) {
  if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
    throw new RuntimeError(400, ngDevMode && "There can be only one platform. Destroy the previous one to create a new one.");
  }
  publishDefaultGlobalUtils();
  publishSignalConfiguration();
  _platformInjector = injector;
  const platform = injector.get(PlatformRef);
  runPlatformInitializers(injector);
  return platform;
}
function createPlatformFactory(parentPlatformFactory, name, providers = []) {
  const desc = `Platform: ${name}`;
  const marker = new InjectionToken(desc);
  return (extraProviders = []) => {
    let platform = getPlatform();
    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
      const platformProviders = [...providers, ...extraProviders, {
        provide: marker,
        useValue: true
      }];
      if (parentPlatformFactory) {
        parentPlatformFactory(platformProviders);
      } else {
        createPlatform(createPlatformInjector(platformProviders, desc));
      }
    }
    return assertPlatform(marker);
  };
}
function createPlatformInjector(providers = [], name) {
  return Injector.create({
    name,
    providers: [{
      provide: INJECTOR_SCOPE,
      useValue: "platform"
    }, {
      provide: PLATFORM_DESTROY_LISTENERS,
      useValue: /* @__PURE__ */ new Set([() => _platformInjector = null])
    }, ...providers]
  });
}
function assertPlatform(requiredToken) {
  const platform = getPlatform();
  if (!platform) {
    throw new RuntimeError(401, ngDevMode && "No platform exists!");
  }
  if ((typeof ngDevMode === "undefined" || ngDevMode) && !platform.injector.get(requiredToken, null)) {
    throw new RuntimeError(400, "A platform with a different configuration has been created. Please destroy it first.");
  }
  return platform;
}
function getPlatform() {
  return _platformInjector?.get(PlatformRef) ?? null;
}
function runPlatformInitializers(injector) {
  const inits = injector.get(PLATFORM_INITIALIZER, null);
  inits?.forEach((init) => init());
}
function enableProdMode() {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    _global["ngDevMode"] = false;
  }
}
var _ChangeDetectorRef = class _ChangeDetectorRef {
};
_ChangeDetectorRef.__NG_ELEMENT_ID__ = injectChangeDetectorRef;
var ChangeDetectorRef = _ChangeDetectorRef;
function injectChangeDetectorRef(flags) {
  return createViewRef(
    getCurrentTNode(),
    getLView(),
    (flags & 16) === 16
    /* InternalInjectFlags.ForPipe */
  );
}
function createViewRef(tNode, lView, isPipe2) {
  if (isComponentHost(tNode) && !isPipe2) {
    const componentView = getComponentLViewByIndex(tNode.index, lView);
    return new ViewRef$1(componentView, componentView);
  } else if (tNode.type & (3 | 12 | 32 | 128)) {
    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW];
    return new ViewRef$1(hostComponentView, lView);
  }
  return null;
}
var DefaultIterableDifferFactory = class {
  constructor() {
  }
  supports(obj) {
    return isListLikeIterable(obj);
  }
  create(trackByFn) {
    return new DefaultIterableDiffer(trackByFn);
  }
};
var trackByIdentity = (index, item) => item;
var DefaultIterableDiffer = class {
  constructor(trackByFn) {
    this.length = 0;
    this._linkedRecords = null;
    this._unlinkedRecords = null;
    this._previousItHead = null;
    this._itHead = null;
    this._itTail = null;
    this._additionsHead = null;
    this._additionsTail = null;
    this._movesHead = null;
    this._movesTail = null;
    this._removalsHead = null;
    this._removalsTail = null;
    this._identityChangesHead = null;
    this._identityChangesTail = null;
    this._trackByFn = trackByFn || trackByIdentity;
  }
  forEachItem(fn) {
    let record;
    for (record = this._itHead; record !== null; record = record._next) {
      fn(record);
    }
  }
  forEachOperation(fn) {
    let nextIt = this._itHead;
    let nextRemove = this._removalsHead;
    let addRemoveOffset = 0;
    let moveOffsets = null;
    while (nextIt || nextRemove) {
      const record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
      const currentIndex = record.currentIndex;
      if (record === nextRemove) {
        addRemoveOffset--;
        nextRemove = nextRemove._nextRemoved;
      } else {
        nextIt = nextIt._next;
        if (record.previousIndex == null) {
          addRemoveOffset++;
        } else {
          if (!moveOffsets) moveOffsets = [];
          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
          const localCurrentIndex = currentIndex - addRemoveOffset;
          if (localMovePreviousIndex != localCurrentIndex) {
            for (let i = 0; i < localMovePreviousIndex; i++) {
              const offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
              const index = offset + i;
              if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                moveOffsets[i] = offset + 1;
              }
            }
            const previousIndex = record.previousIndex;
            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
          }
        }
      }
      if (adjPreviousIndex !== currentIndex) {
        fn(record, adjPreviousIndex, currentIndex);
      }
    }
  }
  forEachPreviousItem(fn) {
    let record;
    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
      fn(record);
    }
  }
  forEachAddedItem(fn) {
    let record;
    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
      fn(record);
    }
  }
  forEachMovedItem(fn) {
    let record;
    for (record = this._movesHead; record !== null; record = record._nextMoved) {
      fn(record);
    }
  }
  forEachRemovedItem(fn) {
    let record;
    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
      fn(record);
    }
  }
  forEachIdentityChange(fn) {
    let record;
    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
      fn(record);
    }
  }
  diff(collection) {
    if (collection == null) collection = [];
    if (!isListLikeIterable(collection)) {
      throw new RuntimeError(900, ngDevMode && `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);
    }
    if (this.check(collection)) {
      return this;
    } else {
      return null;
    }
  }
  onDestroy() {
  }
  check(collection) {
    this._reset();
    let record = this._itHead;
    let mayBeDirty = false;
    let index;
    let item;
    let itemTrackBy;
    if (Array.isArray(collection)) {
      this.length = collection.length;
      for (let index2 = 0; index2 < this.length; index2++) {
        item = collection[index2];
        itemTrackBy = this._trackByFn(index2, item);
        if (record === null || !Object.is(record.trackById, itemTrackBy)) {
          record = this._mismatch(record, item, itemTrackBy, index2);
          mayBeDirty = true;
        } else {
          if (mayBeDirty) {
            record = this._verifyReinsertion(record, item, itemTrackBy, index2);
          }
          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
        }
        record = record._next;
      }
    } else {
      index = 0;
      iterateListLike(collection, (item2) => {
        itemTrackBy = this._trackByFn(index, item2);
        if (record === null || !Object.is(record.trackById, itemTrackBy)) {
          record = this._mismatch(record, item2, itemTrackBy, index);
          mayBeDirty = true;
        } else {
          if (mayBeDirty) {
            record = this._verifyReinsertion(record, item2, itemTrackBy, index);
          }
          if (!Object.is(record.item, item2)) this._addIdentityChange(record, item2);
        }
        record = record._next;
        index++;
      });
      this.length = index;
    }
    this._truncate(record);
    this.collection = collection;
    return this.isDirty;
  }
  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
   * changes.
   */
  get isDirty() {
    return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
  }
  /**
   * Reset the state of the change objects to show no changes. This means set previousKey to
   * currentKey, and clear all of the queues (additions, moves, removals).
   * Set the previousIndexes of moved and added items to their currentIndexes
   * Reset the list of additions, moves and removals
   *
   * @internal
   */
  _reset() {
    if (this.isDirty) {
      let record;
      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
        record._nextPrevious = record._next;
      }
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        record.previousIndex = record.currentIndex;
      }
      this._additionsHead = this._additionsTail = null;
      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        record.previousIndex = record.currentIndex;
      }
      this._movesHead = this._movesTail = null;
      this._removalsHead = this._removalsTail = null;
      this._identityChangesHead = this._identityChangesTail = null;
    }
  }
  /**
   * This is the core function which handles differences between collections.
   *
   * - `record` is the record which we saw at this position last time. If null then it is a new
   *   item.
   * - `item` is the current item in the collection
   * - `index` is the position of the item in the collection
   *
   * @internal
   */
  _mismatch(record, item, itemTrackBy, index) {
    let previousRecord;
    if (record === null) {
      previousRecord = this._itTail;
    } else {
      previousRecord = record._prev;
      this._remove(record);
    }
    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
    if (record !== null) {
      if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
      this._reinsertAfter(record, previousRecord, index);
    } else {
      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
      if (record !== null) {
        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);
        this._moveAfter(record, previousRecord, index);
      } else {
        record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
      }
    }
    return record;
  }
  /**
   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
   *
   * Use case: `[a, a]` => `[b, a, a]`
   *
   * If we did not have this check then the insertion of `b` would:
   *   1) evict first `a`
   *   2) insert `b` at `0` index.
   *   3) leave `a` at index `1` as is. <-- this is wrong!
   *   3) reinsert `a` at index 2. <-- this is wrong!
   *
   * The correct behavior is:
   *   1) evict first `a`
   *   2) insert `b` at `0` index.
   *   3) reinsert `a` at index 1.
   *   3) move `a` at from `1` to `2`.
   *
   *
   * Double check that we have not evicted a duplicate item. We need to check if the item type may
   * have already been removed:
   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
   * at the end.
   *
   * @internal
   */
  _verifyReinsertion(record, item, itemTrackBy, index) {
    let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
    if (reinsertRecord !== null) {
      record = this._reinsertAfter(reinsertRecord, record._prev, index);
    } else if (record.currentIndex != index) {
      record.currentIndex = index;
      this._addToMoves(record, index);
    }
    return record;
  }
  /**
   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
   *
   * - `record` The first excess {@link IterableChangeRecord_}.
   *
   * @internal
   */
  _truncate(record) {
    while (record !== null) {
      const nextRecord = record._next;
      this._addToRemovals(this._unlink(record));
      record = nextRecord;
    }
    if (this._unlinkedRecords !== null) {
      this._unlinkedRecords.clear();
    }
    if (this._additionsTail !== null) {
      this._additionsTail._nextAdded = null;
    }
    if (this._movesTail !== null) {
      this._movesTail._nextMoved = null;
    }
    if (this._itTail !== null) {
      this._itTail._next = null;
    }
    if (this._removalsTail !== null) {
      this._removalsTail._nextRemoved = null;
    }
    if (this._identityChangesTail !== null) {
      this._identityChangesTail._nextIdentityChange = null;
    }
  }
  /** @internal */
  _reinsertAfter(record, prevRecord, index) {
    if (this._unlinkedRecords !== null) {
      this._unlinkedRecords.remove(record);
    }
    const prev = record._prevRemoved;
    const next = record._nextRemoved;
    if (prev === null) {
      this._removalsHead = next;
    } else {
      prev._nextRemoved = next;
    }
    if (next === null) {
      this._removalsTail = prev;
    } else {
      next._prevRemoved = prev;
    }
    this._insertAfter(record, prevRecord, index);
    this._addToMoves(record, index);
    return record;
  }
  /** @internal */
  _moveAfter(record, prevRecord, index) {
    this._unlink(record);
    this._insertAfter(record, prevRecord, index);
    this._addToMoves(record, index);
    return record;
  }
  /** @internal */
  _addAfter(record, prevRecord, index) {
    this._insertAfter(record, prevRecord, index);
    if (this._additionsTail === null) {
      this._additionsTail = this._additionsHead = record;
    } else {
      this._additionsTail = this._additionsTail._nextAdded = record;
    }
    return record;
  }
  /** @internal */
  _insertAfter(record, prevRecord, index) {
    const next = prevRecord === null ? this._itHead : prevRecord._next;
    record._next = next;
    record._prev = prevRecord;
    if (next === null) {
      this._itTail = record;
    } else {
      next._prev = record;
    }
    if (prevRecord === null) {
      this._itHead = record;
    } else {
      prevRecord._next = record;
    }
    if (this._linkedRecords === null) {
      this._linkedRecords = new _DuplicateMap();
    }
    this._linkedRecords.put(record);
    record.currentIndex = index;
    return record;
  }
  /** @internal */
  _remove(record) {
    return this._addToRemovals(this._unlink(record));
  }
  /** @internal */
  _unlink(record) {
    if (this._linkedRecords !== null) {
      this._linkedRecords.remove(record);
    }
    const prev = record._prev;
    const next = record._next;
    if (prev === null) {
      this._itHead = next;
    } else {
      prev._next = next;
    }
    if (next === null) {
      this._itTail = prev;
    } else {
      next._prev = prev;
    }
    return record;
  }
  /** @internal */
  _addToMoves(record, toIndex) {
    if (record.previousIndex === toIndex) {
      return record;
    }
    if (this._movesTail === null) {
      this._movesTail = this._movesHead = record;
    } else {
      this._movesTail = this._movesTail._nextMoved = record;
    }
    return record;
  }
  _addToRemovals(record) {
    if (this._unlinkedRecords === null) {
      this._unlinkedRecords = new _DuplicateMap();
    }
    this._unlinkedRecords.put(record);
    record.currentIndex = null;
    record._nextRemoved = null;
    if (this._removalsTail === null) {
      this._removalsTail = this._removalsHead = record;
      record._prevRemoved = null;
    } else {
      record._prevRemoved = this._removalsTail;
      this._removalsTail = this._removalsTail._nextRemoved = record;
    }
    return record;
  }
  /** @internal */
  _addIdentityChange(record, item) {
    record.item = item;
    if (this._identityChangesTail === null) {
      this._identityChangesTail = this._identityChangesHead = record;
    } else {
      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
    }
    return record;
  }
};
var IterableChangeRecord_ = class {
  constructor(item, trackById) {
    this.item = item;
    this.trackById = trackById;
    this.currentIndex = null;
    this.previousIndex = null;
    this._nextPrevious = null;
    this._prev = null;
    this._next = null;
    this._prevDup = null;
    this._nextDup = null;
    this._prevRemoved = null;
    this._nextRemoved = null;
    this._nextAdded = null;
    this._nextMoved = null;
    this._nextIdentityChange = null;
  }
};
var _DuplicateItemRecordList = class {
  constructor() {
    this._head = null;
    this._tail = null;
  }
  /**
   * Append the record to the list of duplicates.
   *
   * Note: by design all records in the list of duplicates hold the same value in record.item.
   */
  add(record) {
    if (this._head === null) {
      this._head = this._tail = record;
      record._nextDup = null;
      record._prevDup = null;
    } else {
      this._tail._nextDup = record;
      record._prevDup = this._tail;
      record._nextDup = null;
      this._tail = record;
    }
  }
  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
  // IterableChangeRecord_.currentIndex >= atOrAfterIndex
  get(trackById, atOrAfterIndex) {
    let record;
    for (record = this._head; record !== null; record = record._nextDup) {
      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {
        return record;
      }
    }
    return null;
  }
  /**
   * Remove one {@link IterableChangeRecord_} from the list of duplicates.
   *
   * Returns whether the list of duplicates is empty.
   */
  remove(record) {
    const prev = record._prevDup;
    const next = record._nextDup;
    if (prev === null) {
      this._head = next;
    } else {
      prev._nextDup = next;
    }
    if (next === null) {
      this._tail = prev;
    } else {
      next._prevDup = prev;
    }
    return this._head === null;
  }
};
var _DuplicateMap = class {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  put(record) {
    const key = record.trackById;
    let duplicates = this.map.get(key);
    if (!duplicates) {
      duplicates = new _DuplicateItemRecordList();
      this.map.set(key, duplicates);
    }
    duplicates.add(record);
  }
  /**
   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
   *
   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
   * have any more `a`s needs to return the second `a`.
   */
  get(trackById, atOrAfterIndex) {
    const key = trackById;
    const recordList = this.map.get(key);
    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
  }
  /**
   * Removes a {@link IterableChangeRecord_} from the list of duplicates.
   *
   * The list of duplicates also is removed from the map if it gets empty.
   */
  remove(record) {
    const key = record.trackById;
    const recordList = this.map.get(key);
    if (recordList.remove(record)) {
      this.map.delete(key);
    }
    return record;
  }
  get isEmpty() {
    return this.map.size === 0;
  }
  clear() {
    this.map.clear();
  }
};
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
  const previousIndex = item.previousIndex;
  if (previousIndex === null) return previousIndex;
  let moveOffset = 0;
  if (moveOffsets && previousIndex < moveOffsets.length) {
    moveOffset = moveOffsets[previousIndex];
  }
  return previousIndex + addRemoveOffset + moveOffset;
}
var DefaultKeyValueDifferFactory = class {
  constructor() {
  }
  supports(obj) {
    return obj instanceof Map || isJsObject(obj);
  }
  create() {
    return new DefaultKeyValueDiffer();
  }
};
var DefaultKeyValueDiffer = class {
  constructor() {
    this._records = /* @__PURE__ */ new Map();
    this._mapHead = null;
    this._appendAfter = null;
    this._previousMapHead = null;
    this._changesHead = null;
    this._changesTail = null;
    this._additionsHead = null;
    this._additionsTail = null;
    this._removalsHead = null;
    this._removalsTail = null;
  }
  get isDirty() {
    return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
  }
  forEachItem(fn) {
    let record;
    for (record = this._mapHead; record !== null; record = record._next) {
      fn(record);
    }
  }
  forEachPreviousItem(fn) {
    let record;
    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
      fn(record);
    }
  }
  forEachChangedItem(fn) {
    let record;
    for (record = this._changesHead; record !== null; record = record._nextChanged) {
      fn(record);
    }
  }
  forEachAddedItem(fn) {
    let record;
    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
      fn(record);
    }
  }
  forEachRemovedItem(fn) {
    let record;
    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
      fn(record);
    }
  }
  diff(map2) {
    if (!map2) {
      map2 = /* @__PURE__ */ new Map();
    } else if (!(map2 instanceof Map || isJsObject(map2))) {
      throw new RuntimeError(900, ngDevMode && `Error trying to diff '${stringify(map2)}'. Only maps and objects are allowed`);
    }
    return this.check(map2) ? this : null;
  }
  onDestroy() {
  }
  /**
   * Check the current state of the map vs the previous.
   * The algorithm is optimised for when the keys do no change.
   */
  check(map2) {
    this._reset();
    let insertBefore = this._mapHead;
    this._appendAfter = null;
    this._forEach(map2, (value, key) => {
      if (insertBefore && insertBefore.key === key) {
        this._maybeAddToChanges(insertBefore, value);
        this._appendAfter = insertBefore;
        insertBefore = insertBefore._next;
      } else {
        const record = this._getOrCreateRecordForKey(key, value);
        insertBefore = this._insertBeforeOrAppend(insertBefore, record);
      }
    });
    if (insertBefore) {
      if (insertBefore._prev) {
        insertBefore._prev._next = null;
      }
      this._removalsHead = insertBefore;
      for (let record = insertBefore; record !== null; record = record._nextRemoved) {
        if (record === this._mapHead) {
          this._mapHead = null;
        }
        this._records.delete(record.key);
        record._nextRemoved = record._next;
        record.previousValue = record.currentValue;
        record.currentValue = null;
        record._prev = null;
        record._next = null;
      }
    }
    if (this._changesTail) this._changesTail._nextChanged = null;
    if (this._additionsTail) this._additionsTail._nextAdded = null;
    return this.isDirty;
  }
  /**
   * Inserts a record before `before` or append at the end of the list when `before` is null.
   *
   * Notes:
   * - This method appends at `this._appendAfter`,
   * - This method updates `this._appendAfter`,
   * - The return value is the new value for the insertion pointer.
   */
  _insertBeforeOrAppend(before, record) {
    if (before) {
      const prev = before._prev;
      record._next = before;
      record._prev = prev;
      before._prev = record;
      if (prev) {
        prev._next = record;
      }
      if (before === this._mapHead) {
        this._mapHead = record;
      }
      this._appendAfter = before;
      return before;
    }
    if (this._appendAfter) {
      this._appendAfter._next = record;
      record._prev = this._appendAfter;
    } else {
      this._mapHead = record;
    }
    this._appendAfter = record;
    return null;
  }
  _getOrCreateRecordForKey(key, value) {
    if (this._records.has(key)) {
      const record2 = this._records.get(key);
      this._maybeAddToChanges(record2, value);
      const prev = record2._prev;
      const next = record2._next;
      if (prev) {
        prev._next = next;
      }
      if (next) {
        next._prev = prev;
      }
      record2._next = null;
      record2._prev = null;
      return record2;
    }
    const record = new KeyValueChangeRecord_(key);
    this._records.set(key, record);
    record.currentValue = value;
    this._addToAdditions(record);
    return record;
  }
  /** @internal */
  _reset() {
    if (this.isDirty) {
      let record;
      this._previousMapHead = this._mapHead;
      for (record = this._previousMapHead; record !== null; record = record._next) {
        record._nextPrevious = record._next;
      }
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        record.previousValue = record.currentValue;
      }
      for (record = this._additionsHead; record != null; record = record._nextAdded) {
        record.previousValue = record.currentValue;
      }
      this._changesHead = this._changesTail = null;
      this._additionsHead = this._additionsTail = null;
      this._removalsHead = null;
    }
  }
  // Add the record or a given key to the list of changes only when the value has actually changed
  _maybeAddToChanges(record, newValue) {
    if (!Object.is(newValue, record.currentValue)) {
      record.previousValue = record.currentValue;
      record.currentValue = newValue;
      this._addToChanges(record);
    }
  }
  _addToAdditions(record) {
    if (this._additionsHead === null) {
      this._additionsHead = this._additionsTail = record;
    } else {
      this._additionsTail._nextAdded = record;
      this._additionsTail = record;
    }
  }
  _addToChanges(record) {
    if (this._changesHead === null) {
      this._changesHead = this._changesTail = record;
    } else {
      this._changesTail._nextChanged = record;
      this._changesTail = record;
    }
  }
  /** @internal */
  _forEach(obj, fn) {
    if (obj instanceof Map) {
      obj.forEach(fn);
    } else {
      Object.keys(obj).forEach((k) => fn(obj[k], k));
    }
  }
};
var KeyValueChangeRecord_ = class {
  constructor(key) {
    this.key = key;
    this.previousValue = null;
    this.currentValue = null;
    this._nextPrevious = null;
    this._next = null;
    this._prev = null;
    this._nextAdded = null;
    this._nextRemoved = null;
    this._nextChanged = null;
  }
};
function defaultIterableDiffersFactory() {
  return new IterableDiffers([new DefaultIterableDifferFactory()]);
}
var _IterableDiffers = class _IterableDiffers {
  constructor(factories) {
    this.factories = factories;
  }
  static create(factories, parent) {
    if (parent != null) {
      const copied = parent.factories.slice();
      factories = factories.concat(copied);
    }
    return new _IterableDiffers(factories);
  }
  /**
   * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
   * inherited {@link IterableDiffers} instance with the provided factories and return a new
   * {@link IterableDiffers} instance.
   *
   * @usageNotes
   * ### Example
   *
   * The following example shows how to extend an existing list of factories,
   * which will only be applied to the injector for this component and its children.
   * This step is all that's required to make a new {@link IterableDiffer} available.
   *
   * ```
   * @Component({
   *   viewProviders: [
   *     IterableDiffers.extend([new ImmutableListDiffer()])
   *   ]
   * })
   * ```
   */
  static extend(factories) {
    return {
      provide: _IterableDiffers,
      useFactory: (parent) => {
        return _IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());
      },
      // Dependency technically isn't optional, but we can provide a better error message this way.
      deps: [[_IterableDiffers, new SkipSelf(), new Optional()]]
    };
  }
  find(iterable) {
    const factory = this.factories.find((f) => f.supports(iterable));
    if (factory != null) {
      return factory;
    } else {
      throw new RuntimeError(901, ngDevMode && `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);
    }
  }
};
_IterableDiffers.\u0275prov = \u0275\u0275defineInjectable({
  token: _IterableDiffers,
  providedIn: "root",
  factory: defaultIterableDiffersFactory
});
var IterableDiffers = _IterableDiffers;
function getTypeNameForDebugging(type) {
  return type["name"] || typeof type;
}
function defaultKeyValueDiffersFactory() {
  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
}
var _KeyValueDiffers = class _KeyValueDiffers {
  constructor(factories) {
    this.factories = factories;
  }
  static create(factories, parent) {
    if (parent) {
      const copied = parent.factories.slice();
      factories = factories.concat(copied);
    }
    return new _KeyValueDiffers(factories);
  }
  /**
   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
   * {@link KeyValueDiffers} instance.
   *
   * @usageNotes
   * ### Example
   *
   * The following example shows how to extend an existing list of factories,
   * which will only be applied to the injector for this component and its children.
   * This step is all that's required to make a new {@link KeyValueDiffer} available.
   *
   * ```
   * @Component({
   *   viewProviders: [
   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
   *   ]
   * })
   * ```
   */
  static extend(factories) {
    return {
      provide: _KeyValueDiffers,
      useFactory: (parent) => {
        return _KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());
      },
      // Dependency technically isn't optional, but we can provide a better error message this way.
      deps: [[_KeyValueDiffers, new SkipSelf(), new Optional()]]
    };
  }
  find(kv) {
    const factory = this.factories.find((f) => f.supports(kv));
    if (factory) {
      return factory;
    }
    throw new RuntimeError(901, ngDevMode && `Cannot find a differ supporting object '${kv}'`);
  }
};
_KeyValueDiffers.\u0275prov = \u0275\u0275defineInjectable({
  token: _KeyValueDiffers,
  providedIn: "root",
  factory: defaultKeyValueDiffersFactory
});
var KeyValueDiffers = _KeyValueDiffers;
var keyValDiff = [new DefaultKeyValueDifferFactory()];
var iterableDiff = [new DefaultIterableDifferFactory()];
var defaultIterableDiffers = new IterableDiffers(iterableDiff);
var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
var platformCore = createPlatformFactory(null, "core", []);
var _ApplicationModule = class _ApplicationModule {
  // Inject ApplicationRef to make it eager...
  constructor(appRef) {
  }
};
_ApplicationModule.\u0275fac = function ApplicationModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ApplicationModule)(\u0275\u0275inject(ApplicationRef));
};
_ApplicationModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _ApplicationModule
});
_ApplicationModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var ApplicationModule = _ApplicationModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationModule, [{
    type: NgModule
  }], () => [{
    type: ApplicationRef
  }], null);
})();
var sharedStashFunction = (rEl, eventType, listenerFn) => {
  const el = rEl;
  const eventListenerMap = el.__jsaction_fns ?? /* @__PURE__ */ new Map();
  const eventListeners = eventListenerMap.get(eventType) ?? [];
  eventListeners.push(listenerFn);
  eventListenerMap.set(eventType, eventListeners);
  el.__jsaction_fns = eventListenerMap;
};
var JSACTION_EVENT_CONTRACT = new InjectionToken(ngDevMode ? "EVENT_CONTRACT_DETAILS" : "", {
  providedIn: "root",
  factory: () => ({})
});
var GLOBAL_EVENT_DELEGATION = new InjectionToken(ngDevMode ? "GLOBAL_EVENT_DELEGATION" : "");
var _GlobalEventDelegation = class _GlobalEventDelegation {
  constructor() {
    this.eventContractDetails = inject(JSACTION_EVENT_CONTRACT);
  }
  ngOnDestroy() {
    this.eventContractDetails.instance?.cleanUp();
  }
  supports(eventType) {
    return isEarlyEventType(eventType);
  }
  addEventListener(element, eventType, handler) {
    if (element.nodeType === Node.ELEMENT_NODE) {
      this.eventContractDetails.instance.addEvent(eventType);
      getDefaulted(element)[eventType] = "";
      sharedStashFunction(element, eventType, handler);
    } else {
      element.addEventListener(eventType, handler);
    }
    return () => this.removeEventListener(element, eventType, handler);
  }
  removeEventListener(element, eventType, callback) {
    if (element.nodeType === Node.ELEMENT_NODE) {
      getDefaulted(element)[eventType] = void 0;
    } else {
      element.removeEventListener(eventType, callback);
    }
  }
};
_GlobalEventDelegation.\u0275fac = function GlobalEventDelegation_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _GlobalEventDelegation)();
};
_GlobalEventDelegation.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _GlobalEventDelegation,
  factory: _GlobalEventDelegation.\u0275fac
});
var GlobalEventDelegation = _GlobalEventDelegation;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(GlobalEventDelegation, [{
    type: Injectable
  }], null, null);
})();
function booleanAttribute(value) {
  return typeof value === "boolean" ? value : value != null && value !== "false";
}
function numberAttribute(value, fallbackValue = NaN) {
  const isNumberValue = !isNaN(parseFloat(value)) && !isNaN(Number(value));
  return isNumberValue ? Number(value) : fallbackValue;
}
function untracked(nonReactiveReadsFn) {
  const prevConsumer = setActiveConsumer(null);
  try {
    return nonReactiveReadsFn();
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
var APP_EFFECT_SCHEDULER = new InjectionToken("", {
  providedIn: "root",
  factory: () => inject(EffectScheduler)
});
var _EffectScheduler = class _EffectScheduler {
};
_EffectScheduler.\u0275prov = \u0275\u0275defineInjectable({
  token: _EffectScheduler,
  providedIn: "root",
  factory: () => new ZoneAwareEffectScheduler()
});
var EffectScheduler = _EffectScheduler;
var ZoneAwareEffectScheduler = class {
  constructor() {
    this.queuedEffectCount = 0;
    this.queues = /* @__PURE__ */ new Map();
    this.pendingTasks = inject(PendingTasks);
    this.taskId = null;
  }
  scheduleEffect(handle) {
    this.enqueue(handle);
    if (this.taskId === null) {
      const taskId = this.taskId = this.pendingTasks.add();
      queueMicrotask(() => {
        this.flush();
        this.pendingTasks.remove(taskId);
        this.taskId = null;
      });
    }
  }
  enqueue(handle) {
    const zone = handle.creationZone;
    if (!this.queues.has(zone)) {
      this.queues.set(zone, /* @__PURE__ */ new Set());
    }
    const queue = this.queues.get(zone);
    if (queue.has(handle)) {
      return;
    }
    this.queuedEffectCount++;
    queue.add(handle);
  }
  /**
   * Run all scheduled effects.
   *
   * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no
   * ordering guarantee between effects scheduled in different zones.
   */
  flush() {
    while (this.queuedEffectCount > 0) {
      for (const [zone, queue] of this.queues) {
        if (zone === null) {
          this.flushQueue(queue);
        } else {
          zone.run(() => this.flushQueue(queue));
        }
      }
    }
  }
  flushQueue(queue) {
    for (const handle of queue) {
      queue.delete(handle);
      this.queuedEffectCount--;
      handle.run();
    }
  }
};
function reflectComponentType(component) {
  const componentDef = getComponentDef(component);
  if (!componentDef) return null;
  const factory = new ComponentFactory(componentDef);
  return {
    get selector() {
      return factory.selector;
    },
    get type() {
      return factory.componentType;
    },
    get inputs() {
      return factory.inputs;
    },
    get outputs() {
      return factory.outputs;
    },
    get ngContentSelectors() {
      return factory.ngContentSelectors;
    },
    get isStandalone() {
      return componentDef.standalone;
    },
    get isSignal() {
      return componentDef.signals;
    }
  };
}
if (typeof ngDevMode !== "undefined" && ngDevMode) {
  _global.$localize ??= function() {
    throw new Error("It looks like your application or one of its dependencies is using i18n.\nAngular 9 introduced a global `$localize()` function that needs to be loaded.\nPlease run `ng add @angular/localize` from the Angular CLI.\n(For non-CLI projects, add `import '@angular/localize/init';` to your `polyfills.ts` file.\nFor server-side rendering applications add the import to your `main.server.ts` file.)");
  };
}

// node_modules/@angular/common/fesm2022/common.mjs
var _DOM = null;
function getDOM() {
  return _DOM;
}
function setRootDomAdapter(adapter) {
  _DOM ??= adapter;
}
var DomAdapter = class {
};
var _PlatformNavigation = class _PlatformNavigation {
};
_PlatformNavigation.\u0275fac = function PlatformNavigation_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _PlatformNavigation)();
};
_PlatformNavigation.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PlatformNavigation,
  factory: () => (() => window.navigation)(),
  providedIn: "platform"
});
var PlatformNavigation = _PlatformNavigation;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformNavigation, [{
    type: Injectable,
    args: [{
      providedIn: "platform",
      useFactory: () => window.navigation
    }]
  }], null, null);
})();
var DOCUMENT2 = new InjectionToken(ngDevMode ? "DocumentToken" : "");
var _PlatformLocation = class _PlatformLocation {
  historyGo(relativePosition) {
    throw new Error(ngDevMode ? "Not implemented" : "");
  }
};
_PlatformLocation.\u0275fac = function PlatformLocation_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _PlatformLocation)();
};
_PlatformLocation.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PlatformLocation,
  factory: () => (() => inject(BrowserPlatformLocation))(),
  providedIn: "platform"
});
var PlatformLocation = _PlatformLocation;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformLocation, [{
    type: Injectable,
    args: [{
      providedIn: "platform",
      useFactory: () => inject(BrowserPlatformLocation)
    }]
  }], null, null);
})();
var LOCATION_INITIALIZED = new InjectionToken(ngDevMode ? "Location Initialized" : "");
var _BrowserPlatformLocation = class _BrowserPlatformLocation extends PlatformLocation {
  constructor() {
    super();
    this._doc = inject(DOCUMENT2);
    this._location = window.location;
    this._history = window.history;
  }
  getBaseHrefFromDOM() {
    return getDOM().getBaseHref(this._doc);
  }
  onPopState(fn) {
    const window2 = getDOM().getGlobalEventTarget(this._doc, "window");
    window2.addEventListener("popstate", fn, false);
    return () => window2.removeEventListener("popstate", fn);
  }
  onHashChange(fn) {
    const window2 = getDOM().getGlobalEventTarget(this._doc, "window");
    window2.addEventListener("hashchange", fn, false);
    return () => window2.removeEventListener("hashchange", fn);
  }
  get href() {
    return this._location.href;
  }
  get protocol() {
    return this._location.protocol;
  }
  get hostname() {
    return this._location.hostname;
  }
  get port() {
    return this._location.port;
  }
  get pathname() {
    return this._location.pathname;
  }
  get search() {
    return this._location.search;
  }
  get hash() {
    return this._location.hash;
  }
  set pathname(newPath) {
    this._location.pathname = newPath;
  }
  pushState(state, title, url) {
    this._history.pushState(state, title, url);
  }
  replaceState(state, title, url) {
    this._history.replaceState(state, title, url);
  }
  forward() {
    this._history.forward();
  }
  back() {
    this._history.back();
  }
  historyGo(relativePosition = 0) {
    this._history.go(relativePosition);
  }
  getState() {
    return this._history.state;
  }
};
_BrowserPlatformLocation.\u0275fac = function BrowserPlatformLocation_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _BrowserPlatformLocation)();
};
_BrowserPlatformLocation.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _BrowserPlatformLocation,
  factory: () => (() => new _BrowserPlatformLocation())(),
  providedIn: "platform"
});
var BrowserPlatformLocation = _BrowserPlatformLocation;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserPlatformLocation, [{
    type: Injectable,
    args: [{
      providedIn: "platform",
      useFactory: () => new BrowserPlatformLocation()
    }]
  }], () => [], null);
})();
function joinWithSlash(start, end) {
  if (start.length == 0) {
    return end;
  }
  if (end.length == 0) {
    return start;
  }
  let slashes = 0;
  if (start.endsWith("/")) {
    slashes++;
  }
  if (end.startsWith("/")) {
    slashes++;
  }
  if (slashes == 2) {
    return start + end.substring(1);
  }
  if (slashes == 1) {
    return start + end;
  }
  return start + "/" + end;
}
function stripTrailingSlash(url) {
  const match2 = url.match(/#|\?|$/);
  const pathEndIdx = match2 && match2.index || url.length;
  const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === "/" ? 1 : 0);
  return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
}
function normalizeQueryParams(params) {
  return params && params[0] !== "?" ? "?" + params : params;
}
var _LocationStrategy = class _LocationStrategy {
  historyGo(relativePosition) {
    throw new Error(ngDevMode ? "Not implemented" : "");
  }
};
_LocationStrategy.\u0275fac = function LocationStrategy_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _LocationStrategy)();
};
_LocationStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _LocationStrategy,
  factory: () => (() => inject(PathLocationStrategy))(),
  providedIn: "root"
});
var LocationStrategy = _LocationStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LocationStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(PathLocationStrategy)
    }]
  }], null, null);
})();
var APP_BASE_HREF = new InjectionToken(ngDevMode ? "appBaseHref" : "");
var _PathLocationStrategy = class _PathLocationStrategy extends LocationStrategy {
  constructor(_platformLocation, href) {
    super();
    this._platformLocation = _platformLocation;
    this._removeListenerFns = [];
    this._baseHref = href ?? this._platformLocation.getBaseHrefFromDOM() ?? inject(DOCUMENT2).location?.origin ?? "";
  }
  /** @nodoc */
  ngOnDestroy() {
    while (this._removeListenerFns.length) {
      this._removeListenerFns.pop()();
    }
  }
  onPopState(fn) {
    this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
  }
  getBaseHref() {
    return this._baseHref;
  }
  prepareExternalUrl(internal) {
    return joinWithSlash(this._baseHref, internal);
  }
  path(includeHash = false) {
    const pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
    const hash = this._platformLocation.hash;
    return hash && includeHash ? `${pathname}${hash}` : pathname;
  }
  pushState(state, title, url, queryParams) {
    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
    this._platformLocation.pushState(state, title, externalUrl);
  }
  replaceState(state, title, url, queryParams) {
    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
    this._platformLocation.replaceState(state, title, externalUrl);
  }
  forward() {
    this._platformLocation.forward();
  }
  back() {
    this._platformLocation.back();
  }
  getState() {
    return this._platformLocation.getState();
  }
  historyGo(relativePosition = 0) {
    this._platformLocation.historyGo?.(relativePosition);
  }
};
_PathLocationStrategy.\u0275fac = function PathLocationStrategy_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _PathLocationStrategy)(\u0275\u0275inject(PlatformLocation), \u0275\u0275inject(APP_BASE_HREF, 8));
};
_PathLocationStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PathLocationStrategy,
  factory: _PathLocationStrategy.\u0275fac,
  providedIn: "root"
});
var PathLocationStrategy = _PathLocationStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PathLocationStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: PlatformLocation
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [APP_BASE_HREF]
    }]
  }], null);
})();
var _HashLocationStrategy = class _HashLocationStrategy extends LocationStrategy {
  constructor(_platformLocation, _baseHref) {
    super();
    this._platformLocation = _platformLocation;
    this._baseHref = "";
    this._removeListenerFns = [];
    if (_baseHref != null) {
      this._baseHref = _baseHref;
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    while (this._removeListenerFns.length) {
      this._removeListenerFns.pop()();
    }
  }
  onPopState(fn) {
    this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
  }
  getBaseHref() {
    return this._baseHref;
  }
  path(includeHash = false) {
    const path = this._platformLocation.hash ?? "#";
    return path.length > 0 ? path.substring(1) : path;
  }
  prepareExternalUrl(internal) {
    const url = joinWithSlash(this._baseHref, internal);
    return url.length > 0 ? "#" + url : url;
  }
  pushState(state, title, path, queryParams) {
    let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));
    if (url.length == 0) {
      url = this._platformLocation.pathname;
    }
    this._platformLocation.pushState(state, title, url);
  }
  replaceState(state, title, path, queryParams) {
    let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));
    if (url.length == 0) {
      url = this._platformLocation.pathname;
    }
    this._platformLocation.replaceState(state, title, url);
  }
  forward() {
    this._platformLocation.forward();
  }
  back() {
    this._platformLocation.back();
  }
  getState() {
    return this._platformLocation.getState();
  }
  historyGo(relativePosition = 0) {
    this._platformLocation.historyGo?.(relativePosition);
  }
};
_HashLocationStrategy.\u0275fac = function HashLocationStrategy_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HashLocationStrategy)(\u0275\u0275inject(PlatformLocation), \u0275\u0275inject(APP_BASE_HREF, 8));
};
_HashLocationStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HashLocationStrategy,
  factory: _HashLocationStrategy.\u0275fac
});
var HashLocationStrategy = _HashLocationStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HashLocationStrategy, [{
    type: Injectable
  }], () => [{
    type: PlatformLocation
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [APP_BASE_HREF]
    }]
  }], null);
})();
var _Location = class _Location {
  constructor(locationStrategy) {
    this._subject = new EventEmitter();
    this._urlChangeListeners = [];
    this._urlChangeSubscription = null;
    this._locationStrategy = locationStrategy;
    const baseHref = this._locationStrategy.getBaseHref();
    this._basePath = _stripOrigin(stripTrailingSlash(_stripIndexHtml(baseHref)));
    this._locationStrategy.onPopState((ev) => {
      this._subject.emit({
        "url": this.path(true),
        "pop": true,
        "state": ev.state,
        "type": ev.type
      });
    });
  }
  /** @nodoc */
  ngOnDestroy() {
    this._urlChangeSubscription?.unsubscribe();
    this._urlChangeListeners = [];
  }
  /**
   * Normalizes the URL path for this location.
   *
   * @param includeHash True to include an anchor fragment in the path.
   *
   * @returns The normalized URL path.
   */
  // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
  // removed.
  path(includeHash = false) {
    return this.normalize(this._locationStrategy.path(includeHash));
  }
  /**
   * Reports the current state of the location history.
   * @returns The current value of the `history.state` object.
   */
  getState() {
    return this._locationStrategy.getState();
  }
  /**
   * Normalizes the given path and compares to the current normalized path.
   *
   * @param path The given URL path.
   * @param query Query parameters.
   *
   * @returns True if the given URL path is equal to the current normalized path, false
   * otherwise.
   */
  isCurrentPathEqualTo(path, query = "") {
    return this.path() == this.normalize(path + normalizeQueryParams(query));
  }
  /**
   * Normalizes a URL path by stripping any trailing slashes.
   *
   * @param url String representing a URL.
   *
   * @returns The normalized URL string.
   */
  normalize(url) {
    return _Location.stripTrailingSlash(_stripBasePath(this._basePath, _stripIndexHtml(url)));
  }
  /**
   * Normalizes an external URL path.
   * If the given URL doesn't begin with a leading slash (`'/'`), adds one
   * before normalizing. Adds a hash if `HashLocationStrategy` is
   * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
   *
   * @param url String representing a URL.
   *
   * @returns  A normalized platform-specific URL.
   */
  prepareExternalUrl(url) {
    if (url && url[0] !== "/") {
      url = "/" + url;
    }
    return this._locationStrategy.prepareExternalUrl(url);
  }
  // TODO: rename this method to pushState
  /**
   * Changes the browser's URL to a normalized version of a given URL, and pushes a
   * new item onto the platform's history.
   *
   * @param path  URL path to normalize.
   * @param query Query parameters.
   * @param state Location history state.
   *
   */
  go(path, query = "", state = null) {
    this._locationStrategy.pushState(state, "", path, query);
    this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
  }
  /**
   * Changes the browser's URL to a normalized version of the given URL, and replaces
   * the top item on the platform's history stack.
   *
   * @param path  URL path to normalize.
   * @param query Query parameters.
   * @param state Location history state.
   */
  replaceState(path, query = "", state = null) {
    this._locationStrategy.replaceState(state, "", path, query);
    this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
  }
  /**
   * Navigates forward in the platform's history.
   */
  forward() {
    this._locationStrategy.forward();
  }
  /**
   * Navigates back in the platform's history.
   */
  back() {
    this._locationStrategy.back();
  }
  /**
   * Navigate to a specific page from session history, identified by its relative position to the
   * current page.
   *
   * @param relativePosition  Position of the target page in the history relative to the current
   *     page.
   * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`
   * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go
   * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs
   * when `relativePosition` equals 0.
   * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history
   */
  historyGo(relativePosition = 0) {
    this._locationStrategy.historyGo?.(relativePosition);
  }
  /**
   * Registers a URL change listener. Use to catch updates performed by the Angular
   * framework that are not detectible through "popstate" or "hashchange" events.
   *
   * @param fn The change handler function, which take a URL and a location history state.
   * @returns A function that, when executed, unregisters a URL change listener.
   */
  onUrlChange(fn) {
    this._urlChangeListeners.push(fn);
    this._urlChangeSubscription ??= this.subscribe((v) => {
      this._notifyUrlChangeListeners(v.url, v.state);
    });
    return () => {
      const fnIndex = this._urlChangeListeners.indexOf(fn);
      this._urlChangeListeners.splice(fnIndex, 1);
      if (this._urlChangeListeners.length === 0) {
        this._urlChangeSubscription?.unsubscribe();
        this._urlChangeSubscription = null;
      }
    };
  }
  /** @internal */
  _notifyUrlChangeListeners(url = "", state) {
    this._urlChangeListeners.forEach((fn) => fn(url, state));
  }
  /**
   * Subscribes to the platform's `popState` events.
   *
   * Note: `Location.go()` does not trigger the `popState` event in the browser. Use
   * `Location.onUrlChange()` to subscribe to URL changes instead.
   *
   * @param value Event that is triggered when the state history changes.
   * @param exception The exception to throw.
   *
   * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)
   *
   * @returns Subscribed events.
   */
  subscribe(onNext, onThrow, onReturn) {
    return this._subject.subscribe({
      next: onNext,
      error: onThrow,
      complete: onReturn
    });
  }
};
_Location.normalizeQueryParams = normalizeQueryParams;
_Location.joinWithSlash = joinWithSlash;
_Location.stripTrailingSlash = stripTrailingSlash;
_Location.\u0275fac = function Location_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _Location)(\u0275\u0275inject(LocationStrategy));
};
_Location.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Location,
  factory: () => createLocation(),
  providedIn: "root"
});
var Location = _Location;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Location, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      // See #23917
      useFactory: createLocation
    }]
  }], () => [{
    type: LocationStrategy
  }], null);
})();
function createLocation() {
  return new Location(\u0275\u0275inject(LocationStrategy));
}
function _stripBasePath(basePath, url) {
  if (!basePath || !url.startsWith(basePath)) {
    return url;
  }
  const strippedUrl = url.substring(basePath.length);
  if (strippedUrl === "" || ["/", ";", "?", "#"].includes(strippedUrl[0])) {
    return strippedUrl;
  }
  return url;
}
function _stripIndexHtml(url) {
  return url.replace(/\/index.html$/, "");
}
function _stripOrigin(baseHref) {
  const isAbsoluteUrl2 = new RegExp("^(https?:)?//").test(baseHref);
  if (isAbsoluteUrl2) {
    const [, pathname] = baseHref.split(/\/\/[^\/]+/);
    return pathname;
  }
  return baseHref;
}
var CURRENCIES_EN = {
  "ADP": [void 0, void 0, 0],
  "AFN": [void 0, "\u060B", 0],
  "ALL": [void 0, void 0, 0],
  "AMD": [void 0, "\u058F", 2],
  "AOA": [void 0, "Kz"],
  "ARS": [void 0, "$"],
  "AUD": ["A$", "$"],
  "AZN": [void 0, "\u20BC"],
  "BAM": [void 0, "KM"],
  "BBD": [void 0, "$"],
  "BDT": [void 0, "\u09F3"],
  "BHD": [void 0, void 0, 3],
  "BIF": [void 0, void 0, 0],
  "BMD": [void 0, "$"],
  "BND": [void 0, "$"],
  "BOB": [void 0, "Bs"],
  "BRL": ["R$"],
  "BSD": [void 0, "$"],
  "BWP": [void 0, "P"],
  "BYN": [void 0, void 0, 2],
  "BYR": [void 0, void 0, 0],
  "BZD": [void 0, "$"],
  "CAD": ["CA$", "$", 2],
  "CHF": [void 0, void 0, 2],
  "CLF": [void 0, void 0, 4],
  "CLP": [void 0, "$", 0],
  "CNY": ["CN\xA5", "\xA5"],
  "COP": [void 0, "$", 2],
  "CRC": [void 0, "\u20A1", 2],
  "CUC": [void 0, "$"],
  "CUP": [void 0, "$"],
  "CZK": [void 0, "K\u010D", 2],
  "DJF": [void 0, void 0, 0],
  "DKK": [void 0, "kr", 2],
  "DOP": [void 0, "$"],
  "EGP": [void 0, "E\xA3"],
  "ESP": [void 0, "\u20A7", 0],
  "EUR": ["\u20AC"],
  "FJD": [void 0, "$"],
  "FKP": [void 0, "\xA3"],
  "GBP": ["\xA3"],
  "GEL": [void 0, "\u20BE"],
  "GHS": [void 0, "GH\u20B5"],
  "GIP": [void 0, "\xA3"],
  "GNF": [void 0, "FG", 0],
  "GTQ": [void 0, "Q"],
  "GYD": [void 0, "$", 2],
  "HKD": ["HK$", "$"],
  "HNL": [void 0, "L"],
  "HRK": [void 0, "kn"],
  "HUF": [void 0, "Ft", 2],
  "IDR": [void 0, "Rp", 2],
  "ILS": ["\u20AA"],
  "INR": ["\u20B9"],
  "IQD": [void 0, void 0, 0],
  "IRR": [void 0, void 0, 0],
  "ISK": [void 0, "kr", 0],
  "ITL": [void 0, void 0, 0],
  "JMD": [void 0, "$"],
  "JOD": [void 0, void 0, 3],
  "JPY": ["\xA5", void 0, 0],
  "KHR": [void 0, "\u17DB"],
  "KMF": [void 0, "CF", 0],
  "KPW": [void 0, "\u20A9", 0],
  "KRW": ["\u20A9", void 0, 0],
  "KWD": [void 0, void 0, 3],
  "KYD": [void 0, "$"],
  "KZT": [void 0, "\u20B8"],
  "LAK": [void 0, "\u20AD", 0],
  "LBP": [void 0, "L\xA3", 0],
  "LKR": [void 0, "Rs"],
  "LRD": [void 0, "$"],
  "LTL": [void 0, "Lt"],
  "LUF": [void 0, void 0, 0],
  "LVL": [void 0, "Ls"],
  "LYD": [void 0, void 0, 3],
  "MGA": [void 0, "Ar", 0],
  "MGF": [void 0, void 0, 0],
  "MMK": [void 0, "K", 0],
  "MNT": [void 0, "\u20AE", 2],
  "MRO": [void 0, void 0, 0],
  "MUR": [void 0, "Rs", 2],
  "MXN": ["MX$", "$"],
  "MYR": [void 0, "RM"],
  "NAD": [void 0, "$"],
  "NGN": [void 0, "\u20A6"],
  "NIO": [void 0, "C$"],
  "NOK": [void 0, "kr", 2],
  "NPR": [void 0, "Rs"],
  "NZD": ["NZ$", "$"],
  "OMR": [void 0, void 0, 3],
  "PHP": ["\u20B1"],
  "PKR": [void 0, "Rs", 2],
  "PLN": [void 0, "z\u0142"],
  "PYG": [void 0, "\u20B2", 0],
  "RON": [void 0, "lei"],
  "RSD": [void 0, void 0, 0],
  "RUB": [void 0, "\u20BD"],
  "RWF": [void 0, "RF", 0],
  "SBD": [void 0, "$"],
  "SEK": [void 0, "kr", 2],
  "SGD": [void 0, "$"],
  "SHP": [void 0, "\xA3"],
  "SLE": [void 0, void 0, 2],
  "SLL": [void 0, void 0, 0],
  "SOS": [void 0, void 0, 0],
  "SRD": [void 0, "$"],
  "SSP": [void 0, "\xA3"],
  "STD": [void 0, void 0, 0],
  "STN": [void 0, "Db"],
  "SYP": [void 0, "\xA3", 0],
  "THB": [void 0, "\u0E3F"],
  "TMM": [void 0, void 0, 0],
  "TND": [void 0, void 0, 3],
  "TOP": [void 0, "T$"],
  "TRL": [void 0, void 0, 0],
  "TRY": [void 0, "\u20BA"],
  "TTD": [void 0, "$"],
  "TWD": ["NT$", "$", 2],
  "TZS": [void 0, void 0, 2],
  "UAH": [void 0, "\u20B4"],
  "UGX": [void 0, void 0, 0],
  "USD": ["$"],
  "UYI": [void 0, void 0, 0],
  "UYU": [void 0, "$"],
  "UYW": [void 0, void 0, 4],
  "UZS": [void 0, void 0, 2],
  "VEF": [void 0, "Bs", 2],
  "VND": ["\u20AB", void 0, 0],
  "VUV": [void 0, void 0, 0],
  "XAF": ["FCFA", void 0, 0],
  "XCD": ["EC$", "$"],
  "XOF": ["F\u202FCFA", void 0, 0],
  "XPF": ["CFPF", void 0, 0],
  "XXX": ["\xA4"],
  "YER": [void 0, void 0, 0],
  "ZAR": [void 0, "R"],
  "ZMK": [void 0, void 0, 0],
  "ZMW": [void 0, "ZK"],
  "ZWD": [void 0, void 0, 0]
};
var NumberFormatStyle;
(function(NumberFormatStyle2) {
  NumberFormatStyle2[NumberFormatStyle2["Decimal"] = 0] = "Decimal";
  NumberFormatStyle2[NumberFormatStyle2["Percent"] = 1] = "Percent";
  NumberFormatStyle2[NumberFormatStyle2["Currency"] = 2] = "Currency";
  NumberFormatStyle2[NumberFormatStyle2["Scientific"] = 3] = "Scientific";
})(NumberFormatStyle || (NumberFormatStyle = {}));
var Plural;
(function(Plural2) {
  Plural2[Plural2["Zero"] = 0] = "Zero";
  Plural2[Plural2["One"] = 1] = "One";
  Plural2[Plural2["Two"] = 2] = "Two";
  Plural2[Plural2["Few"] = 3] = "Few";
  Plural2[Plural2["Many"] = 4] = "Many";
  Plural2[Plural2["Other"] = 5] = "Other";
})(Plural || (Plural = {}));
var FormStyle;
(function(FormStyle2) {
  FormStyle2[FormStyle2["Format"] = 0] = "Format";
  FormStyle2[FormStyle2["Standalone"] = 1] = "Standalone";
})(FormStyle || (FormStyle = {}));
var TranslationWidth;
(function(TranslationWidth2) {
  TranslationWidth2[TranslationWidth2["Narrow"] = 0] = "Narrow";
  TranslationWidth2[TranslationWidth2["Abbreviated"] = 1] = "Abbreviated";
  TranslationWidth2[TranslationWidth2["Wide"] = 2] = "Wide";
  TranslationWidth2[TranslationWidth2["Short"] = 3] = "Short";
})(TranslationWidth || (TranslationWidth = {}));
var FormatWidth;
(function(FormatWidth2) {
  FormatWidth2[FormatWidth2["Short"] = 0] = "Short";
  FormatWidth2[FormatWidth2["Medium"] = 1] = "Medium";
  FormatWidth2[FormatWidth2["Long"] = 2] = "Long";
  FormatWidth2[FormatWidth2["Full"] = 3] = "Full";
})(FormatWidth || (FormatWidth = {}));
var NumberSymbol = {
  /**
   * Decimal separator.
   * For `en-US`, the dot character.
   * Example: 2,345`.`67
   */
  Decimal: 0,
  /**
   * Grouping separator, typically for thousands.
   * For `en-US`, the comma character.
   * Example: 2`,`345.67
   */
  Group: 1,
  /**
   * List-item separator.
   * Example: "one, two, and three"
   */
  List: 2,
  /**
   * Sign for percentage (out of 100).
   * Example: 23.4%
   */
  PercentSign: 3,
  /**
   * Sign for positive numbers.
   * Example: +23
   */
  PlusSign: 4,
  /**
   * Sign for negative numbers.
   * Example: -23
   */
  MinusSign: 5,
  /**
   * Computer notation for exponential value (n times a power of 10).
   * Example: 1.2E3
   */
  Exponential: 6,
  /**
   * Human-readable format of exponential.
   * Example: 1.2x103
   */
  SuperscriptingExponent: 7,
  /**
   * Sign for permille (out of 1000).
   * Example: 23.4‰
   */
  PerMille: 8,
  /**
   * Infinity, can be used with plus and minus.
   * Example: ∞, +∞, -∞
   */
  Infinity: 9,
  /**
   * Not a number.
   * Example: NaN
   */
  NaN: 10,
  /**
   * Symbol used between time units.
   * Example: 10:52
   */
  TimeSeparator: 11,
  /**
   * Decimal separator for currency values (fallback to `Decimal`).
   * Example: $2,345.67
   */
  CurrencyDecimal: 12,
  /**
   * Group separator for currency values (fallback to `Group`).
   * Example: $2,345.67
   */
  CurrencyGroup: 13
};
var WeekDay;
(function(WeekDay2) {
  WeekDay2[WeekDay2["Sunday"] = 0] = "Sunday";
  WeekDay2[WeekDay2["Monday"] = 1] = "Monday";
  WeekDay2[WeekDay2["Tuesday"] = 2] = "Tuesday";
  WeekDay2[WeekDay2["Wednesday"] = 3] = "Wednesday";
  WeekDay2[WeekDay2["Thursday"] = 4] = "Thursday";
  WeekDay2[WeekDay2["Friday"] = 5] = "Friday";
  WeekDay2[WeekDay2["Saturday"] = 6] = "Saturday";
})(WeekDay || (WeekDay = {}));
function getLocaleId2(locale) {
  return findLocaleData(locale)[LocaleDataIndex.LocaleId];
}
function getLocaleDayPeriods(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const amPmData = [data[LocaleDataIndex.DayPeriodsFormat], data[LocaleDataIndex.DayPeriodsStandalone]];
  const amPm = getLastDefinedValue(amPmData, formStyle);
  return getLastDefinedValue(amPm, width);
}
function getLocaleDayNames(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const daysData = [data[LocaleDataIndex.DaysFormat], data[LocaleDataIndex.DaysStandalone]];
  const days = getLastDefinedValue(daysData, formStyle);
  return getLastDefinedValue(days, width);
}
function getLocaleMonthNames(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const monthsData = [data[LocaleDataIndex.MonthsFormat], data[LocaleDataIndex.MonthsStandalone]];
  const months = getLastDefinedValue(monthsData, formStyle);
  return getLastDefinedValue(months, width);
}
function getLocaleEraNames(locale, width) {
  const data = findLocaleData(locale);
  const erasData = data[LocaleDataIndex.Eras];
  return getLastDefinedValue(erasData, width);
}
function getLocaleDateFormat(locale, width) {
  const data = findLocaleData(locale);
  return getLastDefinedValue(data[LocaleDataIndex.DateFormat], width);
}
function getLocaleTimeFormat(locale, width) {
  const data = findLocaleData(locale);
  return getLastDefinedValue(data[LocaleDataIndex.TimeFormat], width);
}
function getLocaleDateTimeFormat(locale, width) {
  const data = findLocaleData(locale);
  const dateTimeFormatData = data[LocaleDataIndex.DateTimeFormat];
  return getLastDefinedValue(dateTimeFormatData, width);
}
function getLocaleNumberSymbol(locale, symbol) {
  const data = findLocaleData(locale);
  const res = data[LocaleDataIndex.NumberSymbols][symbol];
  if (typeof res === "undefined") {
    if (symbol === NumberSymbol.CurrencyDecimal) {
      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];
    } else if (symbol === NumberSymbol.CurrencyGroup) {
      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Group];
    }
  }
  return res;
}
function getLocaleNumberFormat(locale, type) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.NumberFormats][type];
}
function getLocaleCurrencies(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.Currencies];
}
var getLocalePluralCase2 = getLocalePluralCase;
function checkFullData(data) {
  if (!data[LocaleDataIndex.ExtraData]) {
    throw new Error(`Missing extra locale data for the locale "${data[LocaleDataIndex.LocaleId]}". Use "registerLocaleData" to load new data. See the "I18n guide" on angular.io to know more.`);
  }
}
function getLocaleExtraDayPeriodRules(locale) {
  const data = findLocaleData(locale);
  checkFullData(data);
  const rules = data[LocaleDataIndex.ExtraData][
    2
    /* ɵExtraLocaleDataIndex.ExtraDayPeriodsRules */
  ] || [];
  return rules.map((rule) => {
    if (typeof rule === "string") {
      return extractTime(rule);
    }
    return [extractTime(rule[0]), extractTime(rule[1])];
  });
}
function getLocaleExtraDayPeriods(locale, formStyle, width) {
  const data = findLocaleData(locale);
  checkFullData(data);
  const dayPeriodsData = [data[LocaleDataIndex.ExtraData][
    0
    /* ɵExtraLocaleDataIndex.ExtraDayPeriodFormats */
  ], data[LocaleDataIndex.ExtraData][
    1
    /* ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone */
  ]];
  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
  return getLastDefinedValue(dayPeriods, width) || [];
}
function getLastDefinedValue(data, index) {
  for (let i = index; i > -1; i--) {
    if (typeof data[i] !== "undefined") {
      return data[i];
    }
  }
  throw new Error("Locale data API: locale data undefined");
}
function extractTime(time) {
  const [h, m] = time.split(":");
  return {
    hours: +h,
    minutes: +m
  };
}
function getCurrencySymbol(code, format, locale = "en") {
  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
  const symbolNarrow = currency[
    1
    /* ɵCurrencyIndex.SymbolNarrow */
  ];
  if (format === "narrow" && typeof symbolNarrow === "string") {
    return symbolNarrow;
  }
  return currency[
    0
    /* ɵCurrencyIndex.Symbol */
  ] || code;
}
var DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
function getNumberOfCurrencyDigits(code) {
  let digits;
  const currency = CURRENCIES_EN[code];
  if (currency) {
    digits = currency[
      2
      /* ɵCurrencyIndex.NbOfDigits */
    ];
  }
  return typeof digits === "number" ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
}
var ISO8601_DATE_REGEX = /^(\d{4,})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
var NAMED_FORMATS = {};
var DATE_FORMATS_SPLIT = /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
var ZoneWidth;
(function(ZoneWidth2) {
  ZoneWidth2[ZoneWidth2["Short"] = 0] = "Short";
  ZoneWidth2[ZoneWidth2["ShortGMT"] = 1] = "ShortGMT";
  ZoneWidth2[ZoneWidth2["Long"] = 2] = "Long";
  ZoneWidth2[ZoneWidth2["Extended"] = 3] = "Extended";
})(ZoneWidth || (ZoneWidth = {}));
var DateType;
(function(DateType2) {
  DateType2[DateType2["FullYear"] = 0] = "FullYear";
  DateType2[DateType2["Month"] = 1] = "Month";
  DateType2[DateType2["Date"] = 2] = "Date";
  DateType2[DateType2["Hours"] = 3] = "Hours";
  DateType2[DateType2["Minutes"] = 4] = "Minutes";
  DateType2[DateType2["Seconds"] = 5] = "Seconds";
  DateType2[DateType2["FractionalSeconds"] = 6] = "FractionalSeconds";
  DateType2[DateType2["Day"] = 7] = "Day";
})(DateType || (DateType = {}));
var TranslationType;
(function(TranslationType2) {
  TranslationType2[TranslationType2["DayPeriods"] = 0] = "DayPeriods";
  TranslationType2[TranslationType2["Days"] = 1] = "Days";
  TranslationType2[TranslationType2["Months"] = 2] = "Months";
  TranslationType2[TranslationType2["Eras"] = 3] = "Eras";
})(TranslationType || (TranslationType = {}));
function formatDate(value, format, locale, timezone) {
  let date = toDate(value);
  const namedFormat = getNamedFormat(locale, format);
  format = namedFormat || format;
  let parts = [];
  let match2;
  while (format) {
    match2 = DATE_FORMATS_SPLIT.exec(format);
    if (match2) {
      parts = parts.concat(match2.slice(1));
      const part = parts.pop();
      if (!part) {
        break;
      }
      format = part;
    } else {
      parts.push(format);
      break;
    }
  }
  let dateTimezoneOffset = date.getTimezoneOffset();
  if (timezone) {
    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    date = convertTimezoneToLocal(date, timezone, true);
  }
  let text = "";
  parts.forEach((value2) => {
    const dateFormatter = getDateFormatter(value2);
    text += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value2 === "''" ? "'" : value2.replace(/(^'|'$)/g, "").replace(/''/g, "'");
  });
  return text;
}
function createDate(year, month, date) {
  const newDate = /* @__PURE__ */ new Date(0);
  newDate.setFullYear(year, month, date);
  newDate.setHours(0, 0, 0);
  return newDate;
}
function getNamedFormat(locale, format) {
  const localeId = getLocaleId2(locale);
  NAMED_FORMATS[localeId] ??= {};
  if (NAMED_FORMATS[localeId][format]) {
    return NAMED_FORMATS[localeId][format];
  }
  let formatValue2 = "";
  switch (format) {
    case "shortDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Short);
      break;
    case "mediumDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Medium);
      break;
    case "longDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Long);
      break;
    case "fullDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Full);
      break;
    case "shortTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Short);
      break;
    case "mediumTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Medium);
      break;
    case "longTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Long);
      break;
    case "fullTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Full);
      break;
    case "short":
      const shortTime = getNamedFormat(locale, "shortTime");
      const shortDate = getNamedFormat(locale, "shortDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);
      break;
    case "medium":
      const mediumTime = getNamedFormat(locale, "mediumTime");
      const mediumDate = getNamedFormat(locale, "mediumDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);
      break;
    case "long":
      const longTime = getNamedFormat(locale, "longTime");
      const longDate = getNamedFormat(locale, "longDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);
      break;
    case "full":
      const fullTime = getNamedFormat(locale, "fullTime");
      const fullDate = getNamedFormat(locale, "fullDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);
      break;
  }
  if (formatValue2) {
    NAMED_FORMATS[localeId][format] = formatValue2;
  }
  return formatValue2;
}
function formatDateTime(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{([^}]+)}/g, function(match2, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match2;
    });
  }
  return str;
}
function padNumber(num, digits, minusSign = "-", trim, negWrap) {
  let neg = "";
  if (num < 0 || negWrap && num <= 0) {
    if (negWrap) {
      num = -num + 1;
    } else {
      num = -num;
      neg = minusSign;
    }
  }
  let strNum = String(num);
  while (strNum.length < digits) {
    strNum = "0" + strNum;
  }
  if (trim) {
    strNum = strNum.slice(strNum.length - digits);
  }
  return neg + strNum;
}
function formatFractionalSeconds(milliseconds, digits) {
  const strMs = padNumber(milliseconds, 3);
  return strMs.substring(0, digits);
}
function dateGetter(name, size, offset = 0, trim = false, negWrap = false) {
  return function(date, locale) {
    let part = getDatePart(name, date);
    if (offset > 0 || part > -offset) {
      part += offset;
    }
    if (name === DateType.Hours) {
      if (part === 0 && offset === -12) {
        part = 12;
      }
    } else if (name === DateType.FractionalSeconds) {
      return formatFractionalSeconds(part, size);
    }
    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    return padNumber(part, size, localeMinus, trim, negWrap);
  };
}
function getDatePart(part, date) {
  switch (part) {
    case DateType.FullYear:
      return date.getFullYear();
    case DateType.Month:
      return date.getMonth();
    case DateType.Date:
      return date.getDate();
    case DateType.Hours:
      return date.getHours();
    case DateType.Minutes:
      return date.getMinutes();
    case DateType.Seconds:
      return date.getSeconds();
    case DateType.FractionalSeconds:
      return date.getMilliseconds();
    case DateType.Day:
      return date.getDay();
    default:
      throw new Error(`Unknown DateType value "${part}".`);
  }
}
function dateStrGetter(name, width, form = FormStyle.Format, extended = false) {
  return function(date, locale) {
    return getDateTranslation(date, locale, name, width, form, extended);
  };
}
function getDateTranslation(date, locale, name, width, form, extended) {
  switch (name) {
    case TranslationType.Months:
      return getLocaleMonthNames(locale, form, width)[date.getMonth()];
    case TranslationType.Days:
      return getLocaleDayNames(locale, form, width)[date.getDay()];
    case TranslationType.DayPeriods:
      const currentHours = date.getHours();
      const currentMinutes = date.getMinutes();
      if (extended) {
        const rules = getLocaleExtraDayPeriodRules(locale);
        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);
        const index = rules.findIndex((rule) => {
          if (Array.isArray(rule)) {
            const [from2, to] = rule;
            const afterFrom = currentHours >= from2.hours && currentMinutes >= from2.minutes;
            const beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes;
            if (from2.hours < to.hours) {
              if (afterFrom && beforeTo) {
                return true;
              }
            } else if (afterFrom || beforeTo) {
              return true;
            }
          } else {
            if (rule.hours === currentHours && rule.minutes === currentMinutes) {
              return true;
            }
          }
          return false;
        });
        if (index !== -1) {
          return dayPeriods[index];
        }
      }
      return getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];
    case TranslationType.Eras:
      return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];
    default:
      const unexpected = name;
      throw new Error(`unexpected translation type ${unexpected}`);
  }
}
function timeZoneGetter(width) {
  return function(date, locale, offset) {
    const zone = -1 * offset;
    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);
    switch (width) {
      case ZoneWidth.Short:
        return (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);
      case ZoneWidth.ShortGMT:
        return "GMT" + (zone >= 0 ? "+" : "") + padNumber(hours, 1, minusSign);
      case ZoneWidth.Long:
        return "GMT" + (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + ":" + padNumber(Math.abs(zone % 60), 2, minusSign);
      case ZoneWidth.Extended:
        if (offset === 0) {
          return "Z";
        } else {
          return (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + ":" + padNumber(Math.abs(zone % 60), 2, minusSign);
        }
      default:
        throw new Error(`Unknown zone width "${width}"`);
    }
  };
}
var JANUARY = 0;
var THURSDAY = 4;
function getFirstThursdayOfYear(year) {
  const firstDayOfYear = createDate(year, JANUARY, 1).getDay();
  return createDate(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
}
function getThursdayThisIsoWeek(datetime) {
  const currentDay = datetime.getDay();
  const deltaToThursday = currentDay === 0 ? -3 : THURSDAY - currentDay;
  return createDate(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + deltaToThursday);
}
function weekGetter(size, monthBased = false) {
  return function(date, locale) {
    let result;
    if (monthBased) {
      const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
      const today = date.getDate();
      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
    } else {
      const thisThurs = getThursdayThisIsoWeek(date);
      const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());
      const diff = thisThurs.getTime() - firstThurs.getTime();
      result = 1 + Math.round(diff / 6048e5);
    }
    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  };
}
function weekNumberingYearGetter(size, trim = false) {
  return function(date, locale) {
    const thisThurs = getThursdayThisIsoWeek(date);
    const weekNumberingYear = thisThurs.getFullYear();
    return padNumber(weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);
  };
}
var DATE_FORMATS = {};
function getDateFormatter(format) {
  if (DATE_FORMATS[format]) {
    return DATE_FORMATS[format];
  }
  let formatter;
  switch (format) {
    case "G":
    case "GG":
    case "GGG":
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);
      break;
    case "GGGG":
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);
      break;
    case "GGGGG":
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);
      break;
    case "y":
      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
      break;
    case "yy":
      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
      break;
    case "yyy":
      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
      break;
    case "yyyy":
      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
      break;
    case "Y":
      formatter = weekNumberingYearGetter(1);
      break;
    case "YY":
      formatter = weekNumberingYearGetter(2, true);
      break;
    case "YYY":
      formatter = weekNumberingYearGetter(3);
      break;
    case "YYYY":
      formatter = weekNumberingYearGetter(4);
      break;
    case "M":
    case "L":
      formatter = dateGetter(DateType.Month, 1, 1);
      break;
    case "MM":
    case "LL":
      formatter = dateGetter(DateType.Month, 2, 1);
      break;
    case "MMM":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);
      break;
    case "MMMM":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);
      break;
    case "MMMMM":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);
      break;
    case "LLL":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;
    case "LLLL":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);
      break;
    case "LLLLL":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);
      break;
    case "w":
      formatter = weekGetter(1);
      break;
    case "ww":
      formatter = weekGetter(2);
      break;
    case "W":
      formatter = weekGetter(1, true);
      break;
    case "d":
      formatter = dateGetter(DateType.Date, 1);
      break;
    case "dd":
      formatter = dateGetter(DateType.Date, 2);
      break;
    case "c":
    case "cc":
      formatter = dateGetter(DateType.Day, 1);
      break;
    case "ccc":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;
    case "cccc":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide, FormStyle.Standalone);
      break;
    case "ccccc":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow, FormStyle.Standalone);
      break;
    case "cccccc":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short, FormStyle.Standalone);
      break;
    case "E":
    case "EE":
    case "EEE":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);
      break;
    case "EEEE":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);
      break;
    case "EEEEE":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);
      break;
    case "EEEEEE":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);
      break;
    case "a":
    case "aa":
    case "aaa":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);
      break;
    case "aaaa":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);
      break;
    case "aaaaa":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);
      break;
    case "b":
    case "bb":
    case "bbb":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
      break;
    case "bbbb":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);
      break;
    case "bbbbb":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);
      break;
    case "B":
    case "BB":
    case "BBB":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);
      break;
    case "BBBB":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);
      break;
    case "BBBBB":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);
      break;
    case "h":
      formatter = dateGetter(DateType.Hours, 1, -12);
      break;
    case "hh":
      formatter = dateGetter(DateType.Hours, 2, -12);
      break;
    case "H":
      formatter = dateGetter(DateType.Hours, 1);
      break;
    case "HH":
      formatter = dateGetter(DateType.Hours, 2);
      break;
    case "m":
      formatter = dateGetter(DateType.Minutes, 1);
      break;
    case "mm":
      formatter = dateGetter(DateType.Minutes, 2);
      break;
    case "s":
      formatter = dateGetter(DateType.Seconds, 1);
      break;
    case "ss":
      formatter = dateGetter(DateType.Seconds, 2);
      break;
    case "S":
      formatter = dateGetter(DateType.FractionalSeconds, 1);
      break;
    case "SS":
      formatter = dateGetter(DateType.FractionalSeconds, 2);
      break;
    case "SSS":
      formatter = dateGetter(DateType.FractionalSeconds, 3);
      break;
    case "Z":
    case "ZZ":
    case "ZZZ":
      formatter = timeZoneGetter(ZoneWidth.Short);
      break;
    case "ZZZZZ":
      formatter = timeZoneGetter(ZoneWidth.Extended);
      break;
    case "O":
    case "OO":
    case "OOO":
    case "z":
    case "zz":
    case "zzz":
      formatter = timeZoneGetter(ZoneWidth.ShortGMT);
      break;
    case "OOOO":
    case "ZZZZ":
    case "zzzz":
      formatter = timeZoneGetter(ZoneWidth.Long);
      break;
    default:
      return null;
  }
  DATE_FORMATS[format] = formatter;
  return formatter;
}
function timezoneToOffset(timezone, fallback) {
  timezone = timezone.replace(/:/g, "");
  const requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}
function addDateMinutes(date, minutes) {
  date = new Date(date.getTime());
  date.setMinutes(date.getMinutes() + minutes);
  return date;
}
function convertTimezoneToLocal(date, timezone, reverse) {
  const reverseValue = reverse ? -1 : 1;
  const dateTimezoneOffset = date.getTimezoneOffset();
  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
}
function toDate(value) {
  if (isDate(value)) {
    return value;
  }
  if (typeof value === "number" && !isNaN(value)) {
    return new Date(value);
  }
  if (typeof value === "string") {
    value = value.trim();
    if (/^(\d{4}(-\d{1,2}(-\d{1,2})?)?)$/.test(value)) {
      const [y, m = 1, d = 1] = value.split("-").map((val) => +val);
      return createDate(y, m - 1, d);
    }
    const parsedNb = parseFloat(value);
    if (!isNaN(value - parsedNb)) {
      return new Date(parsedNb);
    }
    let match2;
    if (match2 = value.match(ISO8601_DATE_REGEX)) {
      return isoStringToDate(match2);
    }
  }
  const date = new Date(value);
  if (!isDate(date)) {
    throw new Error(`Unable to convert "${value}" into a date`);
  }
  return date;
}
function isoStringToDate(match2) {
  const date = /* @__PURE__ */ new Date(0);
  let tzHour = 0;
  let tzMin = 0;
  const dateSetter = match2[8] ? date.setUTCFullYear : date.setFullYear;
  const timeSetter = match2[8] ? date.setUTCHours : date.setHours;
  if (match2[9]) {
    tzHour = Number(match2[9] + match2[10]);
    tzMin = Number(match2[9] + match2[11]);
  }
  dateSetter.call(date, Number(match2[1]), Number(match2[2]) - 1, Number(match2[3]));
  const h = Number(match2[4] || 0) - tzHour;
  const m = Number(match2[5] || 0) - tzMin;
  const s = Number(match2[6] || 0);
  const ms = Math.floor(parseFloat("0." + (match2[7] || 0)) * 1e3);
  timeSetter.call(date, h, m, s, ms);
  return date;
}
function isDate(value) {
  return value instanceof Date && !isNaN(value.valueOf());
}
var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
var MAX_DIGITS = 22;
var DECIMAL_SEP = ".";
var ZERO_CHAR = "0";
var PATTERN_SEP = ";";
var GROUP_SEP = ",";
var DIGIT_CHAR = "#";
var CURRENCY_CHAR = "\xA4";
var PERCENT_CHAR = "%";
function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {
  let formattedText = "";
  let isZero = false;
  if (!isFinite(value)) {
    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
  } else {
    let parsedNumber = parseNumber(value);
    if (isPercent) {
      parsedNumber = toPercent(parsedNumber);
    }
    let minInt = pattern.minInt;
    let minFraction = pattern.minFrac;
    let maxFraction = pattern.maxFrac;
    if (digitsInfo) {
      const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
      if (parts === null) {
        throw new Error(`${digitsInfo} is not a valid digit info`);
      }
      const minIntPart = parts[1];
      const minFractionPart = parts[3];
      const maxFractionPart = parts[5];
      if (minIntPart != null) {
        minInt = parseIntAutoRadix(minIntPart);
      }
      if (minFractionPart != null) {
        minFraction = parseIntAutoRadix(minFractionPart);
      }
      if (maxFractionPart != null) {
        maxFraction = parseIntAutoRadix(maxFractionPart);
      } else if (minFractionPart != null && minFraction > maxFraction) {
        maxFraction = minFraction;
      }
    }
    roundNumber(parsedNumber, minFraction, maxFraction);
    let digits = parsedNumber.digits;
    let integerLen = parsedNumber.integerLen;
    const exponent = parsedNumber.exponent;
    let decimals = [];
    isZero = digits.every((d) => !d);
    for (; integerLen < minInt; integerLen++) {
      digits.unshift(0);
    }
    for (; integerLen < 0; integerLen++) {
      digits.unshift(0);
    }
    if (integerLen > 0) {
      decimals = digits.splice(integerLen, digits.length);
    } else {
      decimals = digits;
      digits = [0];
    }
    const groups = [];
    if (digits.length >= pattern.lgSize) {
      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(""));
    }
    while (digits.length > pattern.gSize) {
      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(""));
    }
    if (digits.length) {
      groups.unshift(digits.join(""));
    }
    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));
    if (decimals.length) {
      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join("");
    }
    if (exponent) {
      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + "+" + exponent;
    }
  }
  if (value < 0 && !isZero) {
    formattedText = pattern.negPre + formattedText + pattern.negSuf;
  } else {
    formattedText = pattern.posPre + formattedText + pattern.posSuf;
  }
  return formattedText;
}
function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);
  pattern.maxFrac = pattern.minFrac;
  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
  return res.replace(CURRENCY_CHAR, currency).replace(CURRENCY_CHAR, "").trim();
}
function formatPercent(value, locale, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
  return res.replace(new RegExp(PERCENT_CHAR, "g"), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
}
function formatNumber(value, locale, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
}
function parseNumberFormat(format, minusSign = "-") {
  const p = {
    minInt: 1,
    minFrac: 0,
    maxFrac: 0,
    posPre: "",
    posSuf: "",
    negPre: "",
    negSuf: "",
    gSize: 0,
    lgSize: 0
  };
  const patternParts = format.split(PATTERN_SEP);
  const positive = patternParts[0];
  const negative = patternParts[1];
  const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1), positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)], integer = positiveParts[0], fraction = positiveParts[1] || "";
  p.posPre = integer.substring(0, integer.indexOf(DIGIT_CHAR));
  for (let i = 0; i < fraction.length; i++) {
    const ch = fraction.charAt(i);
    if (ch === ZERO_CHAR) {
      p.minFrac = p.maxFrac = i + 1;
    } else if (ch === DIGIT_CHAR) {
      p.maxFrac = i + 1;
    } else {
      p.posSuf += ch;
    }
  }
  const groups = integer.split(GROUP_SEP);
  p.gSize = groups[1] ? groups[1].length : 0;
  p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;
  if (negative) {
    const trunkLen = positive.length - p.posPre.length - p.posSuf.length, pos = negative.indexOf(DIGIT_CHAR);
    p.negPre = negative.substring(0, pos).replace(/'/g, "");
    p.negSuf = negative.slice(pos + trunkLen).replace(/'/g, "");
  } else {
    p.negPre = minusSign + p.posPre;
    p.negSuf = p.posSuf;
  }
  return p;
}
function toPercent(parsedNumber) {
  if (parsedNumber.digits[0] === 0) {
    return parsedNumber;
  }
  const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;
  if (parsedNumber.exponent) {
    parsedNumber.exponent += 2;
  } else {
    if (fractionLen === 0) {
      parsedNumber.digits.push(0, 0);
    } else if (fractionLen === 1) {
      parsedNumber.digits.push(0);
    }
    parsedNumber.integerLen += 2;
  }
  return parsedNumber;
}
function parseNumber(num) {
  let numStr = Math.abs(num) + "";
  let exponent = 0, digits, integerLen;
  let i, j, zeros;
  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
    numStr = numStr.replace(DECIMAL_SEP, "");
  }
  if ((i = numStr.search(/e/i)) > 0) {
    if (integerLen < 0) integerLen = i;
    integerLen += +numStr.slice(i + 1);
    numStr = numStr.substring(0, i);
  } else if (integerLen < 0) {
    integerLen = numStr.length;
  }
  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
  }
  if (i === (zeros = numStr.length)) {
    digits = [0];
    integerLen = 1;
  } else {
    zeros--;
    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;
    integerLen -= i;
    digits = [];
    for (j = 0; i <= zeros; i++, j++) {
      digits[j] = Number(numStr.charAt(i));
    }
  }
  if (integerLen > MAX_DIGITS) {
    digits = digits.splice(0, MAX_DIGITS - 1);
    exponent = integerLen - 1;
    integerLen = 1;
  }
  return {
    digits,
    exponent,
    integerLen
  };
}
function roundNumber(parsedNumber, minFrac, maxFrac) {
  if (minFrac > maxFrac) {
    throw new Error(`The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);
  }
  let digits = parsedNumber.digits;
  let fractionLen = digits.length - parsedNumber.integerLen;
  const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);
  let roundAt = fractionSize + parsedNumber.integerLen;
  let digit = digits[roundAt];
  if (roundAt > 0) {
    digits.splice(Math.max(parsedNumber.integerLen, roundAt));
    for (let j = roundAt; j < digits.length; j++) {
      digits[j] = 0;
    }
  } else {
    fractionLen = Math.max(0, fractionLen);
    parsedNumber.integerLen = 1;
    digits.length = Math.max(1, roundAt = fractionSize + 1);
    digits[0] = 0;
    for (let i = 1; i < roundAt; i++) digits[i] = 0;
  }
  if (digit >= 5) {
    if (roundAt - 1 < 0) {
      for (let k = 0; k > roundAt; k--) {
        digits.unshift(0);
        parsedNumber.integerLen++;
      }
      digits.unshift(1);
      parsedNumber.integerLen++;
    } else {
      digits[roundAt - 1]++;
    }
  }
  for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);
  let dropTrailingZeros = fractionSize !== 0;
  const minLen = minFrac + parsedNumber.integerLen;
  const carry = digits.reduceRight(function(carry2, d, i, digits2) {
    d = d + carry2;
    digits2[i] = d < 10 ? d : d - 10;
    if (dropTrailingZeros) {
      if (digits2[i] === 0 && i >= minLen) {
        digits2.pop();
      } else {
        dropTrailingZeros = false;
      }
    }
    return d >= 10 ? 1 : 0;
  }, 0);
  if (carry) {
    digits.unshift(carry);
    parsedNumber.integerLen++;
  }
}
function parseIntAutoRadix(text) {
  const result = parseInt(text);
  if (isNaN(result)) {
    throw new Error("Invalid integer literal when parsing " + text);
  }
  return result;
}
var _NgLocalization = class _NgLocalization {
};
_NgLocalization.\u0275fac = function NgLocalization_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgLocalization)();
};
_NgLocalization.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NgLocalization,
  factory: function NgLocalization_Factory(__ngFactoryType__) {
    let __ngConditionalFactory__ = null;
    if (__ngFactoryType__) {
      __ngConditionalFactory__ = new __ngFactoryType__();
    } else {
      __ngConditionalFactory__ = ((locale) => new NgLocaleLocalization(locale))(\u0275\u0275inject(LOCALE_ID));
    }
    return __ngConditionalFactory__;
  },
  providedIn: "root"
});
var NgLocalization = _NgLocalization;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgLocalization, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: (locale) => new NgLocaleLocalization(locale),
      deps: [LOCALE_ID]
    }]
  }], null, null);
})();
function getPluralCategory(value, cases, ngLocalization, locale) {
  let key = `=${value}`;
  if (cases.indexOf(key) > -1) {
    return key;
  }
  key = ngLocalization.getPluralCategory(value, locale);
  if (cases.indexOf(key) > -1) {
    return key;
  }
  if (cases.indexOf("other") > -1) {
    return "other";
  }
  throw new Error(`No plural message found for value "${value}"`);
}
var _NgLocaleLocalization = class _NgLocaleLocalization extends NgLocalization {
  constructor(locale) {
    super();
    this.locale = locale;
  }
  getPluralCategory(value, locale) {
    const plural2 = getLocalePluralCase2(locale || this.locale)(value);
    switch (plural2) {
      case Plural.Zero:
        return "zero";
      case Plural.One:
        return "one";
      case Plural.Two:
        return "two";
      case Plural.Few:
        return "few";
      case Plural.Many:
        return "many";
      default:
        return "other";
    }
  }
};
_NgLocaleLocalization.\u0275fac = function NgLocaleLocalization_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgLocaleLocalization)(\u0275\u0275inject(LOCALE_ID));
};
_NgLocaleLocalization.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NgLocaleLocalization,
  factory: _NgLocaleLocalization.\u0275fac
});
var NgLocaleLocalization = _NgLocaleLocalization;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgLocaleLocalization, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }], null);
})();
function parseCookieValue(cookieStr, name) {
  name = encodeURIComponent(name);
  for (const cookie of cookieStr.split(";")) {
    const eqIndex = cookie.indexOf("=");
    const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ""] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];
    if (cookieName.trim() === name) {
      return decodeURIComponent(cookieValue);
    }
  }
  return null;
}
var WS_REGEXP = /\s+/;
var EMPTY_ARRAY2 = [];
var _NgClass = class _NgClass {
  constructor(_ngEl, _renderer) {
    this._ngEl = _ngEl;
    this._renderer = _renderer;
    this.initialClasses = EMPTY_ARRAY2;
    this.stateMap = /* @__PURE__ */ new Map();
  }
  set klass(value) {
    this.initialClasses = value != null ? value.trim().split(WS_REGEXP) : EMPTY_ARRAY2;
  }
  set ngClass(value) {
    this.rawClass = typeof value === "string" ? value.trim().split(WS_REGEXP) : value;
  }
  /*
  The NgClass directive uses the custom change detection algorithm for its inputs. The custom
  algorithm is necessary since inputs are represented as complex object or arrays that need to be
  deeply-compared.
     This algorithm is perf-sensitive since NgClass is used very frequently and its poor performance
  might negatively impact runtime performance of the entire change detection cycle. The design of
  this algorithm is making sure that:
  - there is no unnecessary DOM manipulation (CSS classes are added / removed from the DOM only when
  needed), even if references to bound objects change;
  - there is no memory allocation if nothing changes (even relatively modest memory allocation
  during the change detection cycle can result in GC pauses for some of the CD cycles).
     The algorithm works by iterating over the set of bound classes, staring with [class] binding and
  then going over [ngClass] binding. For each CSS class name:
  - check if it was seen before (this information is tracked in the state map) and if its value
  changed;
  - mark it as "touched" - names that are not marked are not present in the latest set of binding
  and we can remove such class name from the internal data structures;
     After iteration over all the CSS class names we've got data structure with all the information
  necessary to synchronize changes to the DOM - it is enough to iterate over the state map, flush
  changes to the DOM and reset internal data structures so those are ready for the next change
  detection cycle.
   */
  ngDoCheck() {
    for (const klass of this.initialClasses) {
      this._updateState(klass, true);
    }
    const rawClass = this.rawClass;
    if (Array.isArray(rawClass) || rawClass instanceof Set) {
      for (const klass of rawClass) {
        this._updateState(klass, true);
      }
    } else if (rawClass != null) {
      for (const klass of Object.keys(rawClass)) {
        this._updateState(klass, Boolean(rawClass[klass]));
      }
    }
    this._applyStateDiff();
  }
  _updateState(klass, nextEnabled) {
    const state = this.stateMap.get(klass);
    if (state !== void 0) {
      if (state.enabled !== nextEnabled) {
        state.changed = true;
        state.enabled = nextEnabled;
      }
      state.touched = true;
    } else {
      this.stateMap.set(klass, {
        enabled: nextEnabled,
        changed: true,
        touched: true
      });
    }
  }
  _applyStateDiff() {
    for (const stateEntry of this.stateMap) {
      const klass = stateEntry[0];
      const state = stateEntry[1];
      if (state.changed) {
        this._toggleClass(klass, state.enabled);
        state.changed = false;
      } else if (!state.touched) {
        if (state.enabled) {
          this._toggleClass(klass, false);
        }
        this.stateMap.delete(klass);
      }
      state.touched = false;
    }
  }
  _toggleClass(klass, enabled) {
    if (ngDevMode) {
      if (typeof klass !== "string") {
        throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${stringify(klass)}`);
      }
    }
    klass = klass.trim();
    if (klass.length > 0) {
      klass.split(WS_REGEXP).forEach((klass2) => {
        if (enabled) {
          this._renderer.addClass(this._ngEl.nativeElement, klass2);
        } else {
          this._renderer.removeClass(this._ngEl.nativeElement, klass2);
        }
      });
    }
  }
};
_NgClass.\u0275fac = function NgClass_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgClass)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2));
};
_NgClass.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgClass,
  selectors: [["", "ngClass", ""]],
  inputs: {
    klass: [0, "class", "klass"],
    ngClass: "ngClass"
  },
  standalone: true
});
var NgClass = _NgClass;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgClass, [{
    type: Directive,
    args: [{
      selector: "[ngClass]",
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }], {
    klass: [{
      type: Input,
      args: ["class"]
    }],
    ngClass: [{
      type: Input,
      args: ["ngClass"]
    }]
  });
})();
var _NgComponentOutlet = class _NgComponentOutlet {
  constructor(_viewContainerRef) {
    this._viewContainerRef = _viewContainerRef;
    this.ngComponentOutlet = null;
    this._inputsUsed = /* @__PURE__ */ new Map();
  }
  _needToReCreateNgModuleInstance(changes) {
    return changes["ngComponentOutletNgModule"] !== void 0 || changes["ngComponentOutletNgModuleFactory"] !== void 0;
  }
  _needToReCreateComponentInstance(changes) {
    return changes["ngComponentOutlet"] !== void 0 || changes["ngComponentOutletContent"] !== void 0 || changes["ngComponentOutletInjector"] !== void 0 || this._needToReCreateNgModuleInstance(changes);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (this._needToReCreateComponentInstance(changes)) {
      this._viewContainerRef.clear();
      this._inputsUsed.clear();
      this._componentRef = void 0;
      if (this.ngComponentOutlet) {
        const injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
        if (this._needToReCreateNgModuleInstance(changes)) {
          this._moduleRef?.destroy();
          if (this.ngComponentOutletNgModule) {
            this._moduleRef = createNgModule(this.ngComponentOutletNgModule, getParentInjector(injector));
          } else if (this.ngComponentOutletNgModuleFactory) {
            this._moduleRef = this.ngComponentOutletNgModuleFactory.create(getParentInjector(injector));
          } else {
            this._moduleRef = void 0;
          }
        }
        this._componentRef = this._viewContainerRef.createComponent(this.ngComponentOutlet, {
          injector,
          ngModuleRef: this._moduleRef,
          projectableNodes: this.ngComponentOutletContent
        });
      }
    }
  }
  /** @nodoc */
  ngDoCheck() {
    if (this._componentRef) {
      if (this.ngComponentOutletInputs) {
        for (const inputName of Object.keys(this.ngComponentOutletInputs)) {
          this._inputsUsed.set(inputName, true);
        }
      }
      this._applyInputStateDiff(this._componentRef);
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    this._moduleRef?.destroy();
  }
  _applyInputStateDiff(componentRef) {
    for (const [inputName, touched] of this._inputsUsed) {
      if (!touched) {
        componentRef.setInput(inputName, void 0);
        this._inputsUsed.delete(inputName);
      } else {
        componentRef.setInput(inputName, this.ngComponentOutletInputs[inputName]);
        this._inputsUsed.set(inputName, false);
      }
    }
  }
};
_NgComponentOutlet.\u0275fac = function NgComponentOutlet_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgComponentOutlet)(\u0275\u0275directiveInject(ViewContainerRef));
};
_NgComponentOutlet.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgComponentOutlet,
  selectors: [["", "ngComponentOutlet", ""]],
  inputs: {
    ngComponentOutlet: "ngComponentOutlet",
    ngComponentOutletInputs: "ngComponentOutletInputs",
    ngComponentOutletInjector: "ngComponentOutletInjector",
    ngComponentOutletContent: "ngComponentOutletContent",
    ngComponentOutletNgModule: "ngComponentOutletNgModule",
    ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var NgComponentOutlet = _NgComponentOutlet;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgComponentOutlet, [{
    type: Directive,
    args: [{
      selector: "[ngComponentOutlet]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }], {
    ngComponentOutlet: [{
      type: Input
    }],
    ngComponentOutletInputs: [{
      type: Input
    }],
    ngComponentOutletInjector: [{
      type: Input
    }],
    ngComponentOutletContent: [{
      type: Input
    }],
    ngComponentOutletNgModule: [{
      type: Input
    }],
    ngComponentOutletNgModuleFactory: [{
      type: Input
    }]
  });
})();
function getParentInjector(injector) {
  const parentNgModule = injector.get(NgModuleRef$1);
  return parentNgModule.injector;
}
var NgForOfContext = class {
  constructor($implicit, ngForOf, index, count) {
    this.$implicit = $implicit;
    this.ngForOf = ngForOf;
    this.index = index;
    this.count = count;
  }
  get first() {
    return this.index === 0;
  }
  get last() {
    return this.index === this.count - 1;
  }
  get even() {
    return this.index % 2 === 0;
  }
  get odd() {
    return !this.even;
  }
};
var _NgForOf = class _NgForOf {
  /**
   * The value of the iterable expression, which can be used as a
   * [template input variable](guide/directives/structural-directives#shorthand).
   */
  set ngForOf(ngForOf) {
    this._ngForOf = ngForOf;
    this._ngForOfDirty = true;
  }
  /**
   * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.
   *
   * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object
   * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)
   * as the key.
   *
   * `NgForOf` uses the computed key to associate items in an iterable with DOM elements
   * it produces for these items.
   *
   * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an
   * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a
   * primary key), and this iterable could be updated with new object instances that still
   * represent the same underlying entity (for example, when data is re-fetched from the server,
   * and the iterable is recreated and re-rendered, but most of the data is still the same).
   *
   * @see {@link TrackByFunction}
   */
  set ngForTrackBy(fn) {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && fn != null && typeof fn !== "function") {
      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}. See https://angular.io/api/common/NgForOf#change-propagation for more information.`);
    }
    this._trackByFn = fn;
  }
  get ngForTrackBy() {
    return this._trackByFn;
  }
  constructor(_viewContainer, _template, _differs) {
    this._viewContainer = _viewContainer;
    this._template = _template;
    this._differs = _differs;
    this._ngForOf = null;
    this._ngForOfDirty = true;
    this._differ = null;
  }
  /**
   * A reference to the template that is stamped out for each item in the iterable.
   * @see [template reference variable](guide/templates/reference-variables)
   */
  set ngForTemplate(value) {
    if (value) {
      this._template = value;
    }
  }
  /**
   * Applies the changes when needed.
   * @nodoc
   */
  ngDoCheck() {
    if (this._ngForOfDirty) {
      this._ngForOfDirty = false;
      const value = this._ngForOf;
      if (!this._differ && value) {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          try {
            this._differ = this._differs.find(value).create(this.ngForTrackBy);
          } catch {
            let errorMessage = `Cannot find a differ supporting object '${value}' of type '${getTypeName(value)}'. NgFor only supports binding to Iterables, such as Arrays.`;
            if (typeof value === "object") {
              errorMessage += " Did you mean to use the keyvalue pipe?";
            }
            throw new RuntimeError(-2200, errorMessage);
          }
        } else {
          this._differ = this._differs.find(value).create(this.ngForTrackBy);
        }
      }
    }
    if (this._differ) {
      const changes = this._differ.diff(this._ngForOf);
      if (changes) this._applyChanges(changes);
    }
  }
  _applyChanges(changes) {
    const viewContainer = this._viewContainer;
    changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {
      if (item.previousIndex == null) {
        viewContainer.createEmbeddedView(this._template, new NgForOfContext(item.item, this._ngForOf, -1, -1), currentIndex === null ? void 0 : currentIndex);
      } else if (currentIndex == null) {
        viewContainer.remove(adjustedPreviousIndex === null ? void 0 : adjustedPreviousIndex);
      } else if (adjustedPreviousIndex !== null) {
        const view = viewContainer.get(adjustedPreviousIndex);
        viewContainer.move(view, currentIndex);
        applyViewChange(view, item);
      }
    });
    for (let i = 0, ilen = viewContainer.length; i < ilen; i++) {
      const viewRef = viewContainer.get(i);
      const context2 = viewRef.context;
      context2.index = i;
      context2.count = ilen;
      context2.ngForOf = this._ngForOf;
    }
    changes.forEachIdentityChange((record) => {
      const viewRef = viewContainer.get(record.currentIndex);
      applyViewChange(viewRef, record);
    });
  }
  /**
   * Asserts the correct type of the context for the template that `NgForOf` will render.
   *
   * The presence of this method is a signal to the Ivy template type-check compiler that the
   * `NgForOf` structural directive renders its template with a specific context type.
   */
  static ngTemplateContextGuard(dir, ctx) {
    return true;
  }
};
_NgForOf.\u0275fac = function NgForOf_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgForOf)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(IterableDiffers));
};
_NgForOf.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgForOf,
  selectors: [["", "ngFor", "", "ngForOf", ""]],
  inputs: {
    ngForOf: "ngForOf",
    ngForTrackBy: "ngForTrackBy",
    ngForTemplate: "ngForTemplate"
  },
  standalone: true
});
var NgForOf = _NgForOf;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgForOf, [{
    type: Directive,
    args: [{
      selector: "[ngFor][ngForOf]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: IterableDiffers
  }], {
    ngForOf: [{
      type: Input
    }],
    ngForTrackBy: [{
      type: Input
    }],
    ngForTemplate: [{
      type: Input
    }]
  });
})();
function applyViewChange(view, record) {
  view.context.$implicit = record.item;
}
function getTypeName(type) {
  return type["name"] || typeof type;
}
var _NgIf = class _NgIf {
  constructor(_viewContainer, templateRef) {
    this._viewContainer = _viewContainer;
    this._context = new NgIfContext();
    this._thenTemplateRef = null;
    this._elseTemplateRef = null;
    this._thenViewRef = null;
    this._elseViewRef = null;
    this._thenTemplateRef = templateRef;
  }
  /**
   * The Boolean expression to evaluate as the condition for showing a template.
   */
  set ngIf(condition) {
    this._context.$implicit = this._context.ngIf = condition;
    this._updateView();
  }
  /**
   * A template to show if the condition expression evaluates to true.
   */
  set ngIfThen(templateRef) {
    assertTemplate("ngIfThen", templateRef);
    this._thenTemplateRef = templateRef;
    this._thenViewRef = null;
    this._updateView();
  }
  /**
   * A template to show if the condition expression evaluates to false.
   */
  set ngIfElse(templateRef) {
    assertTemplate("ngIfElse", templateRef);
    this._elseTemplateRef = templateRef;
    this._elseViewRef = null;
    this._updateView();
  }
  _updateView() {
    if (this._context.$implicit) {
      if (!this._thenViewRef) {
        this._viewContainer.clear();
        this._elseViewRef = null;
        if (this._thenTemplateRef) {
          this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
        }
      }
    } else {
      if (!this._elseViewRef) {
        this._viewContainer.clear();
        this._thenViewRef = null;
        if (this._elseTemplateRef) {
          this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
        }
      }
    }
  }
  /**
   * Asserts the correct type of the context for the template that `NgIf` will render.
   *
   * The presence of this method is a signal to the Ivy template type-check compiler that the
   * `NgIf` structural directive renders its template with a specific context type.
   */
  static ngTemplateContextGuard(dir, ctx) {
    return true;
  }
};
_NgIf.\u0275fac = function NgIf_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgIf)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef));
};
_NgIf.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgIf,
  selectors: [["", "ngIf", ""]],
  inputs: {
    ngIf: "ngIf",
    ngIfThen: "ngIfThen",
    ngIfElse: "ngIfElse"
  },
  standalone: true
});
var NgIf = _NgIf;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgIf, [{
    type: Directive,
    args: [{
      selector: "[ngIf]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }], {
    ngIf: [{
      type: Input
    }],
    ngIfThen: [{
      type: Input
    }],
    ngIfElse: [{
      type: Input
    }]
  });
})();
var NgIfContext = class {
  constructor() {
    this.$implicit = null;
    this.ngIf = null;
  }
};
function assertTemplate(property, templateRef) {
  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);
  if (!isTemplateRefOrNull) {
    throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);
  }
}
var SwitchView = class {
  constructor(_viewContainerRef, _templateRef) {
    this._viewContainerRef = _viewContainerRef;
    this._templateRef = _templateRef;
    this._created = false;
  }
  create() {
    this._created = true;
    this._viewContainerRef.createEmbeddedView(this._templateRef);
  }
  destroy() {
    this._created = false;
    this._viewContainerRef.clear();
  }
  enforceState(created) {
    if (created && !this._created) {
      this.create();
    } else if (!created && this._created) {
      this.destroy();
    }
  }
};
var _NgSwitch = class _NgSwitch {
  constructor() {
    this._defaultViews = [];
    this._defaultUsed = false;
    this._caseCount = 0;
    this._lastCaseCheckIndex = 0;
    this._lastCasesMatched = false;
  }
  set ngSwitch(newValue) {
    this._ngSwitch = newValue;
    if (this._caseCount === 0) {
      this._updateDefaultCases(true);
    }
  }
  /** @internal */
  _addCase() {
    return this._caseCount++;
  }
  /** @internal */
  _addDefault(view) {
    this._defaultViews.push(view);
  }
  /** @internal */
  _matchCase(value) {
    const matched = value === this._ngSwitch;
    this._lastCasesMatched ||= matched;
    this._lastCaseCheckIndex++;
    if (this._lastCaseCheckIndex === this._caseCount) {
      this._updateDefaultCases(!this._lastCasesMatched);
      this._lastCaseCheckIndex = 0;
      this._lastCasesMatched = false;
    }
    return matched;
  }
  _updateDefaultCases(useDefault) {
    if (this._defaultViews.length > 0 && useDefault !== this._defaultUsed) {
      this._defaultUsed = useDefault;
      for (const defaultView of this._defaultViews) {
        defaultView.enforceState(useDefault);
      }
    }
  }
};
_NgSwitch.\u0275fac = function NgSwitch_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgSwitch)();
};
_NgSwitch.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgSwitch,
  selectors: [["", "ngSwitch", ""]],
  inputs: {
    ngSwitch: "ngSwitch"
  },
  standalone: true
});
var NgSwitch = _NgSwitch;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgSwitch, [{
    type: Directive,
    args: [{
      selector: "[ngSwitch]",
      standalone: true
    }]
  }], null, {
    ngSwitch: [{
      type: Input
    }]
  });
})();
var _NgSwitchCase = class _NgSwitchCase {
  constructor(viewContainer, templateRef, ngSwitch) {
    this.ngSwitch = ngSwitch;
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !ngSwitch) {
      throwNgSwitchProviderNotFoundError("ngSwitchCase", "NgSwitchCase");
    }
    ngSwitch._addCase();
    this._view = new SwitchView(viewContainer, templateRef);
  }
  /**
   * Performs case matching. For internal use only.
   * @nodoc
   */
  ngDoCheck() {
    this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
  }
};
_NgSwitchCase.\u0275fac = function NgSwitchCase_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgSwitchCase)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(NgSwitch, 9));
};
_NgSwitchCase.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgSwitchCase,
  selectors: [["", "ngSwitchCase", ""]],
  inputs: {
    ngSwitchCase: "ngSwitchCase"
  },
  standalone: true
});
var NgSwitchCase = _NgSwitchCase;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgSwitchCase, [{
    type: Directive,
    args: [{
      selector: "[ngSwitchCase]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: NgSwitch,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], {
    ngSwitchCase: [{
      type: Input
    }]
  });
})();
var _NgSwitchDefault = class _NgSwitchDefault {
  constructor(viewContainer, templateRef, ngSwitch) {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !ngSwitch) {
      throwNgSwitchProviderNotFoundError("ngSwitchDefault", "NgSwitchDefault");
    }
    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
  }
};
_NgSwitchDefault.\u0275fac = function NgSwitchDefault_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgSwitchDefault)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(NgSwitch, 9));
};
_NgSwitchDefault.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgSwitchDefault,
  selectors: [["", "ngSwitchDefault", ""]],
  standalone: true
});
var NgSwitchDefault = _NgSwitchDefault;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgSwitchDefault, [{
    type: Directive,
    args: [{
      selector: "[ngSwitchDefault]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: NgSwitch,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], null);
})();
function throwNgSwitchProviderNotFoundError(attrName, directiveName) {
  throw new RuntimeError(2e3, `An element with the "${attrName}" attribute (matching the "${directiveName}" directive) must be located inside an element with the "ngSwitch" attribute (matching "NgSwitch" directive)`);
}
var _NgPlural = class _NgPlural {
  constructor(_localization) {
    this._localization = _localization;
    this._caseViews = {};
  }
  set ngPlural(value) {
    this._updateView(value);
  }
  addCase(value, switchView) {
    this._caseViews[value] = switchView;
  }
  _updateView(switchValue) {
    this._clearViews();
    const cases = Object.keys(this._caseViews);
    const key = getPluralCategory(switchValue, cases, this._localization);
    this._activateView(this._caseViews[key]);
  }
  _clearViews() {
    if (this._activeView) this._activeView.destroy();
  }
  _activateView(view) {
    if (view) {
      this._activeView = view;
      this._activeView.create();
    }
  }
};
_NgPlural.\u0275fac = function NgPlural_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgPlural)(\u0275\u0275directiveInject(NgLocalization));
};
_NgPlural.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgPlural,
  selectors: [["", "ngPlural", ""]],
  inputs: {
    ngPlural: "ngPlural"
  },
  standalone: true
});
var NgPlural = _NgPlural;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgPlural, [{
    type: Directive,
    args: [{
      selector: "[ngPlural]",
      standalone: true
    }]
  }], () => [{
    type: NgLocalization
  }], {
    ngPlural: [{
      type: Input
    }]
  });
})();
var _NgPluralCase = class _NgPluralCase {
  constructor(value, template, viewContainer, ngPlural) {
    this.value = value;
    const isANumber = !isNaN(Number(value));
    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));
  }
};
_NgPluralCase.\u0275fac = function NgPluralCase_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgPluralCase)(\u0275\u0275injectAttribute("ngPluralCase"), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(NgPlural, 1));
};
_NgPluralCase.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgPluralCase,
  selectors: [["", "ngPluralCase", ""]],
  standalone: true
});
var NgPluralCase = _NgPluralCase;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgPluralCase, [{
    type: Directive,
    args: [{
      selector: "[ngPluralCase]",
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Attribute2,
      args: ["ngPluralCase"]
    }]
  }, {
    type: TemplateRef
  }, {
    type: ViewContainerRef
  }, {
    type: NgPlural,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var _NgStyle = class _NgStyle {
  constructor(_ngEl, _differs, _renderer) {
    this._ngEl = _ngEl;
    this._differs = _differs;
    this._renderer = _renderer;
    this._ngStyle = null;
    this._differ = null;
  }
  set ngStyle(values) {
    this._ngStyle = values;
    if (!this._differ && values) {
      this._differ = this._differs.find(values).create();
    }
  }
  ngDoCheck() {
    if (this._differ) {
      const changes = this._differ.diff(this._ngStyle);
      if (changes) {
        this._applyChanges(changes);
      }
    }
  }
  _setStyle(nameAndUnit, value) {
    const [name, unit] = nameAndUnit.split(".");
    const flags = name.indexOf("-") === -1 ? void 0 : RendererStyleFlags2.DashCase;
    if (value != null) {
      this._renderer.setStyle(this._ngEl.nativeElement, name, unit ? `${value}${unit}` : value, flags);
    } else {
      this._renderer.removeStyle(this._ngEl.nativeElement, name, flags);
    }
  }
  _applyChanges(changes) {
    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));
    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));
    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));
  }
};
_NgStyle.\u0275fac = function NgStyle_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgStyle)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(KeyValueDiffers), \u0275\u0275directiveInject(Renderer2));
};
_NgStyle.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgStyle,
  selectors: [["", "ngStyle", ""]],
  inputs: {
    ngStyle: "ngStyle"
  },
  standalone: true
});
var NgStyle = _NgStyle;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgStyle, [{
    type: Directive,
    args: [{
      selector: "[ngStyle]",
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: KeyValueDiffers
  }, {
    type: Renderer2
  }], {
    ngStyle: [{
      type: Input,
      args: ["ngStyle"]
    }]
  });
})();
var _NgTemplateOutlet = class _NgTemplateOutlet {
  constructor(_viewContainerRef) {
    this._viewContainerRef = _viewContainerRef;
    this._viewRef = null;
    this.ngTemplateOutletContext = null;
    this.ngTemplateOutlet = null;
    this.ngTemplateOutletInjector = null;
  }
  ngOnChanges(changes) {
    if (this._shouldRecreateView(changes)) {
      const viewContainerRef = this._viewContainerRef;
      if (this._viewRef) {
        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
      }
      if (!this.ngTemplateOutlet) {
        this._viewRef = null;
        return;
      }
      const viewContext = this._createContextForwardProxy();
      this._viewRef = viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, viewContext, {
        injector: this.ngTemplateOutletInjector ?? void 0
      });
    }
  }
  /**
   * We need to re-create existing embedded view if either is true:
   * - the outlet changed.
   * - the injector changed.
   */
  _shouldRecreateView(changes) {
    return !!changes["ngTemplateOutlet"] || !!changes["ngTemplateOutletInjector"];
  }
  /**
   * For a given outlet instance, we create a proxy object that delegates
   * to the user-specified context. This allows changing, or swapping out
   * the context object completely without having to destroy/re-create the view.
   */
  _createContextForwardProxy() {
    return new Proxy({}, {
      set: (_target, prop, newValue) => {
        if (!this.ngTemplateOutletContext) {
          return false;
        }
        return Reflect.set(this.ngTemplateOutletContext, prop, newValue);
      },
      get: (_target, prop, receiver) => {
        if (!this.ngTemplateOutletContext) {
          return void 0;
        }
        return Reflect.get(this.ngTemplateOutletContext, prop, receiver);
      }
    });
  }
};
_NgTemplateOutlet.\u0275fac = function NgTemplateOutlet_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgTemplateOutlet)(\u0275\u0275directiveInject(ViewContainerRef));
};
_NgTemplateOutlet.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgTemplateOutlet,
  selectors: [["", "ngTemplateOutlet", ""]],
  inputs: {
    ngTemplateOutletContext: "ngTemplateOutletContext",
    ngTemplateOutlet: "ngTemplateOutlet",
    ngTemplateOutletInjector: "ngTemplateOutletInjector"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var NgTemplateOutlet = _NgTemplateOutlet;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgTemplateOutlet, [{
    type: Directive,
    args: [{
      selector: "[ngTemplateOutlet]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }], {
    ngTemplateOutletContext: [{
      type: Input
    }],
    ngTemplateOutlet: [{
      type: Input
    }],
    ngTemplateOutletInjector: [{
      type: Input
    }]
  });
})();
var COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
function invalidPipeArgumentError(type, value) {
  return new RuntimeError(2100, ngDevMode && `InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);
}
var SubscribableStrategy = class {
  createSubscription(async, updateLatestValue) {
    return untracked(() => async.subscribe({
      next: updateLatestValue,
      error: (e) => {
        throw e;
      }
    }));
  }
  dispose(subscription) {
    untracked(() => subscription.unsubscribe());
  }
};
var PromiseStrategy = class {
  createSubscription(async, updateLatestValue) {
    return async.then(updateLatestValue, (e) => {
      throw e;
    });
  }
  dispose(subscription) {
  }
};
var _promiseStrategy = new PromiseStrategy();
var _subscribableStrategy = new SubscribableStrategy();
var _AsyncPipe = class _AsyncPipe {
  constructor(ref) {
    this._latestValue = null;
    this.markForCheckOnValueUpdate = true;
    this._subscription = null;
    this._obj = null;
    this._strategy = null;
    this._ref = ref;
  }
  ngOnDestroy() {
    if (this._subscription) {
      this._dispose();
    }
    this._ref = null;
  }
  transform(obj) {
    if (!this._obj) {
      if (obj) {
        try {
          this.markForCheckOnValueUpdate = false;
          this._subscribe(obj);
        } finally {
          this.markForCheckOnValueUpdate = true;
        }
      }
      return this._latestValue;
    }
    if (obj !== this._obj) {
      this._dispose();
      return this.transform(obj);
    }
    return this._latestValue;
  }
  _subscribe(obj) {
    this._obj = obj;
    this._strategy = this._selectStrategy(obj);
    this._subscription = this._strategy.createSubscription(obj, (value) => this._updateLatestValue(obj, value));
  }
  _selectStrategy(obj) {
    if (isPromise2(obj)) {
      return _promiseStrategy;
    }
    if (isSubscribable(obj)) {
      return _subscribableStrategy;
    }
    throw invalidPipeArgumentError(_AsyncPipe, obj);
  }
  _dispose() {
    this._strategy.dispose(this._subscription);
    this._latestValue = null;
    this._subscription = null;
    this._obj = null;
  }
  _updateLatestValue(async, value) {
    if (async === this._obj) {
      this._latestValue = value;
      if (this.markForCheckOnValueUpdate) {
        this._ref?.markForCheck();
      }
    }
  }
};
_AsyncPipe.\u0275fac = function AsyncPipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _AsyncPipe)(\u0275\u0275directiveInject(ChangeDetectorRef, 16));
};
_AsyncPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "async",
  type: _AsyncPipe,
  pure: false,
  standalone: true
});
var AsyncPipe = _AsyncPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AsyncPipe, [{
    type: Pipe,
    args: [{
      name: "async",
      pure: false,
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }], null);
})();
var _LowerCasePipe = class _LowerCasePipe {
  transform(value) {
    if (value == null) return null;
    if (typeof value !== "string") {
      throw invalidPipeArgumentError(_LowerCasePipe, value);
    }
    return value.toLowerCase();
  }
};
_LowerCasePipe.\u0275fac = function LowerCasePipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _LowerCasePipe)();
};
_LowerCasePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "lowercase",
  type: _LowerCasePipe,
  pure: true,
  standalone: true
});
var LowerCasePipe = _LowerCasePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LowerCasePipe, [{
    type: Pipe,
    args: [{
      name: "lowercase",
      standalone: true
    }]
  }], null, null);
})();
var unicodeWordMatch = /(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])\S*/g;
var _TitleCasePipe = class _TitleCasePipe {
  transform(value) {
    if (value == null) return null;
    if (typeof value !== "string") {
      throw invalidPipeArgumentError(_TitleCasePipe, value);
    }
    return value.replace(unicodeWordMatch, (txt) => txt[0].toUpperCase() + txt.slice(1).toLowerCase());
  }
};
_TitleCasePipe.\u0275fac = function TitleCasePipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _TitleCasePipe)();
};
_TitleCasePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "titlecase",
  type: _TitleCasePipe,
  pure: true,
  standalone: true
});
var TitleCasePipe = _TitleCasePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TitleCasePipe, [{
    type: Pipe,
    args: [{
      name: "titlecase",
      standalone: true
    }]
  }], null, null);
})();
var _UpperCasePipe = class _UpperCasePipe {
  transform(value) {
    if (value == null) return null;
    if (typeof value !== "string") {
      throw invalidPipeArgumentError(_UpperCasePipe, value);
    }
    return value.toUpperCase();
  }
};
_UpperCasePipe.\u0275fac = function UpperCasePipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _UpperCasePipe)();
};
_UpperCasePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "uppercase",
  type: _UpperCasePipe,
  pure: true,
  standalone: true
});
var UpperCasePipe = _UpperCasePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UpperCasePipe, [{
    type: Pipe,
    args: [{
      name: "uppercase",
      standalone: true
    }]
  }], null, null);
})();
var DEFAULT_DATE_FORMAT = "mediumDate";
var DATE_PIPE_DEFAULT_TIMEZONE = new InjectionToken(ngDevMode ? "DATE_PIPE_DEFAULT_TIMEZONE" : "");
var DATE_PIPE_DEFAULT_OPTIONS = new InjectionToken(ngDevMode ? "DATE_PIPE_DEFAULT_OPTIONS" : "");
var _DatePipe = class _DatePipe {
  constructor(locale, defaultTimezone, defaultOptions) {
    this.locale = locale;
    this.defaultTimezone = defaultTimezone;
    this.defaultOptions = defaultOptions;
  }
  transform(value, format, timezone, locale) {
    if (value == null || value === "" || value !== value) return null;
    try {
      const _format = format ?? this.defaultOptions?.dateFormat ?? DEFAULT_DATE_FORMAT;
      const _timezone = timezone ?? this.defaultOptions?.timezone ?? this.defaultTimezone ?? void 0;
      return formatDate(value, _format, locale || this.locale, _timezone);
    } catch (error) {
      throw invalidPipeArgumentError(_DatePipe, error.message);
    }
  }
};
_DatePipe.\u0275fac = function DatePipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DatePipe)(\u0275\u0275directiveInject(LOCALE_ID, 16), \u0275\u0275directiveInject(DATE_PIPE_DEFAULT_TIMEZONE, 24), \u0275\u0275directiveInject(DATE_PIPE_DEFAULT_OPTIONS, 24));
};
_DatePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "date",
  type: _DatePipe,
  pure: true,
  standalone: true
});
var DatePipe = _DatePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatePipe, [{
    type: Pipe,
    args: [{
      name: "date",
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DATE_PIPE_DEFAULT_TIMEZONE]
    }, {
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DATE_PIPE_DEFAULT_OPTIONS]
    }, {
      type: Optional
    }]
  }], null);
})();
var _INTERPOLATION_REGEXP = /#/g;
var _I18nPluralPipe = class _I18nPluralPipe {
  constructor(_localization) {
    this._localization = _localization;
  }
  /**
   * @param value the number to be formatted
   * @param pluralMap an object that mimics the ICU format, see
   * https://unicode-org.github.io/icu/userguide/format_parse/messages/.
   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
   * default).
   */
  transform(value, pluralMap, locale) {
    if (value == null) return "";
    if (typeof pluralMap !== "object" || pluralMap === null) {
      throw invalidPipeArgumentError(_I18nPluralPipe, pluralMap);
    }
    const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
  }
};
_I18nPluralPipe.\u0275fac = function I18nPluralPipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _I18nPluralPipe)(\u0275\u0275directiveInject(NgLocalization, 16));
};
_I18nPluralPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "i18nPlural",
  type: _I18nPluralPipe,
  pure: true,
  standalone: true
});
var I18nPluralPipe = _I18nPluralPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(I18nPluralPipe, [{
    type: Pipe,
    args: [{
      name: "i18nPlural",
      standalone: true
    }]
  }], () => [{
    type: NgLocalization
  }], null);
})();
var _I18nSelectPipe = class _I18nSelectPipe {
  /**
   * @param value a string to be internationalized.
   * @param mapping an object that indicates the text that should be displayed
   * for different values of the provided `value`.
   */
  transform(value, mapping) {
    if (value == null) return "";
    if (typeof mapping !== "object" || typeof value !== "string") {
      throw invalidPipeArgumentError(_I18nSelectPipe, mapping);
    }
    if (mapping.hasOwnProperty(value)) {
      return mapping[value];
    }
    if (mapping.hasOwnProperty("other")) {
      return mapping["other"];
    }
    return "";
  }
};
_I18nSelectPipe.\u0275fac = function I18nSelectPipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _I18nSelectPipe)();
};
_I18nSelectPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "i18nSelect",
  type: _I18nSelectPipe,
  pure: true,
  standalone: true
});
var I18nSelectPipe = _I18nSelectPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(I18nSelectPipe, [{
    type: Pipe,
    args: [{
      name: "i18nSelect",
      standalone: true
    }]
  }], null, null);
})();
var _JsonPipe = class _JsonPipe {
  /**
   * @param value A value of any type to convert into a JSON-format string.
   */
  transform(value) {
    return JSON.stringify(value, null, 2);
  }
};
_JsonPipe.\u0275fac = function JsonPipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _JsonPipe)();
};
_JsonPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "json",
  type: _JsonPipe,
  pure: false,
  standalone: true
});
var JsonPipe = _JsonPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(JsonPipe, [{
    type: Pipe,
    args: [{
      name: "json",
      pure: false,
      standalone: true
    }]
  }], null, null);
})();
function makeKeyValuePair(key, value) {
  return {
    key,
    value
  };
}
var _KeyValuePipe = class _KeyValuePipe {
  constructor(differs) {
    this.differs = differs;
    this.keyValues = [];
    this.compareFn = defaultComparator;
  }
  transform(input2, compareFn = defaultComparator) {
    if (!input2 || !(input2 instanceof Map) && typeof input2 !== "object") {
      return null;
    }
    this.differ ??= this.differs.find(input2).create();
    const differChanges = this.differ.diff(input2);
    const compareFnChanged = compareFn !== this.compareFn;
    if (differChanges) {
      this.keyValues = [];
      differChanges.forEachItem((r) => {
        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
      });
    }
    if (differChanges || compareFnChanged) {
      this.keyValues.sort(compareFn);
      this.compareFn = compareFn;
    }
    return this.keyValues;
  }
};
_KeyValuePipe.\u0275fac = function KeyValuePipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _KeyValuePipe)(\u0275\u0275directiveInject(KeyValueDiffers, 16));
};
_KeyValuePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "keyvalue",
  type: _KeyValuePipe,
  pure: false,
  standalone: true
});
var KeyValuePipe = _KeyValuePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(KeyValuePipe, [{
    type: Pipe,
    args: [{
      name: "keyvalue",
      pure: false,
      standalone: true
    }]
  }], () => [{
    type: KeyValueDiffers
  }], null);
})();
function defaultComparator(keyValueA, keyValueB) {
  const a = keyValueA.key;
  const b = keyValueB.key;
  if (a === b) return 0;
  if (a === void 0) return 1;
  if (b === void 0) return -1;
  if (a === null) return 1;
  if (b === null) return -1;
  if (typeof a == "string" && typeof b == "string") {
    return a < b ? -1 : 1;
  }
  if (typeof a == "number" && typeof b == "number") {
    return a - b;
  }
  if (typeof a == "boolean" && typeof b == "boolean") {
    return a < b ? -1 : 1;
  }
  const aString = String(a);
  const bString = String(b);
  return aString == bString ? 0 : aString < bString ? -1 : 1;
}
var _DecimalPipe = class _DecimalPipe {
  constructor(_locale) {
    this._locale = _locale;
  }
  /**
   * @param value The value to be formatted.
   * @param digitsInfo Sets digit and decimal representation.
   * [See more](#digitsinfo).
   * @param locale Specifies what locale format rules to use.
   * [See more](#locale).
   */
  transform(value, digitsInfo, locale) {
    if (!isValue(value)) return null;
    locale ||= this._locale;
    try {
      const num = strToNumber(value);
      return formatNumber(num, locale, digitsInfo);
    } catch (error) {
      throw invalidPipeArgumentError(_DecimalPipe, error.message);
    }
  }
};
_DecimalPipe.\u0275fac = function DecimalPipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DecimalPipe)(\u0275\u0275directiveInject(LOCALE_ID, 16));
};
_DecimalPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "number",
  type: _DecimalPipe,
  pure: true,
  standalone: true
});
var DecimalPipe = _DecimalPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DecimalPipe, [{
    type: Pipe,
    args: [{
      name: "number",
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }], null);
})();
var _PercentPipe = class _PercentPipe {
  constructor(_locale) {
    this._locale = _locale;
  }
  /**
   *
   * @param value The number to be formatted as a percentage.
   * @param digitsInfo Decimal representation options, specified by a string
   * in the following format:<br>
   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
   * Default is `1`.
   *   - `minFractionDigits`: The minimum number of digits after the decimal point.
   * Default is `0`.
   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
   * Default is `0`.
   * @param locale A locale code for the locale format rules to use.
   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
   * See [Setting your app locale](guide/i18n/locale-id).
   */
  transform(value, digitsInfo, locale) {
    if (!isValue(value)) return null;
    locale ||= this._locale;
    try {
      const num = strToNumber(value);
      return formatPercent(num, locale, digitsInfo);
    } catch (error) {
      throw invalidPipeArgumentError(_PercentPipe, error.message);
    }
  }
};
_PercentPipe.\u0275fac = function PercentPipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _PercentPipe)(\u0275\u0275directiveInject(LOCALE_ID, 16));
};
_PercentPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "percent",
  type: _PercentPipe,
  pure: true,
  standalone: true
});
var PercentPipe = _PercentPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PercentPipe, [{
    type: Pipe,
    args: [{
      name: "percent",
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }], null);
})();
var _CurrencyPipe = class _CurrencyPipe {
  constructor(_locale, _defaultCurrencyCode = "USD") {
    this._locale = _locale;
    this._defaultCurrencyCode = _defaultCurrencyCode;
  }
  /**
   *
   * @param value The number to be formatted as currency.
   * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,
   * such as `USD` for the US dollar and `EUR` for the euro. The default currency code can be
   * configured using the `DEFAULT_CURRENCY_CODE` injection token.
   * @param display The format for the currency indicator. One of the following:
   *   - `code`: Show the code (such as `USD`).
   *   - `symbol`(default): Show the symbol (such as `$`).
   *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their
   * currency.
   * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the
   * locale has no narrow symbol, uses the standard symbol for the locale.
   *   - String: Use the given string value instead of a code or a symbol.
   * For example, an empty string will suppress the currency & symbol.
   *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.
   *
   * @param digitsInfo Decimal representation options, specified by a string
   * in the following format:<br>
   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
   * Default is `1`.
   *   - `minFractionDigits`: The minimum number of digits after the decimal point.
   * Default is `2`.
   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
   * Default is `2`.
   * If not provided, the number will be formatted with the proper amount of digits,
   * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.
   * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.
   * @param locale A locale code for the locale format rules to use.
   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
   * See [Setting your app locale](guide/i18n/locale-id).
   */
  transform(value, currencyCode = this._defaultCurrencyCode, display = "symbol", digitsInfo, locale) {
    if (!isValue(value)) return null;
    locale ||= this._locale;
    if (typeof display === "boolean") {
      if ((typeof ngDevMode === "undefined" || ngDevMode) && console && console.warn) {
        console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are "code", "symbol" or "symbol-narrow".`);
      }
      display = display ? "symbol" : "code";
    }
    let currency = currencyCode || this._defaultCurrencyCode;
    if (display !== "code") {
      if (display === "symbol" || display === "symbol-narrow") {
        currency = getCurrencySymbol(currency, display === "symbol" ? "wide" : "narrow", locale);
      } else {
        currency = display;
      }
    }
    try {
      const num = strToNumber(value);
      return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
    } catch (error) {
      throw invalidPipeArgumentError(_CurrencyPipe, error.message);
    }
  }
};
_CurrencyPipe.\u0275fac = function CurrencyPipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _CurrencyPipe)(\u0275\u0275directiveInject(LOCALE_ID, 16), \u0275\u0275directiveInject(DEFAULT_CURRENCY_CODE, 16));
};
_CurrencyPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "currency",
  type: _CurrencyPipe,
  pure: true,
  standalone: true
});
var CurrencyPipe = _CurrencyPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CurrencyPipe, [{
    type: Pipe,
    args: [{
      name: "currency",
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DEFAULT_CURRENCY_CODE]
    }]
  }], null);
})();
function isValue(value) {
  return !(value == null || value === "" || value !== value);
}
function strToNumber(value) {
  if (typeof value === "string" && !isNaN(Number(value) - parseFloat(value))) {
    return Number(value);
  }
  if (typeof value !== "number") {
    throw new Error(`${value} is not a number`);
  }
  return value;
}
var _SlicePipe = class _SlicePipe {
  transform(value, start, end) {
    if (value == null) return null;
    if (!this.supports(value)) {
      throw invalidPipeArgumentError(_SlicePipe, value);
    }
    return value.slice(start, end);
  }
  supports(obj) {
    return typeof obj === "string" || Array.isArray(obj);
  }
};
_SlicePipe.\u0275fac = function SlicePipe_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _SlicePipe)();
};
_SlicePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "slice",
  type: _SlicePipe,
  pure: false,
  standalone: true
});
var SlicePipe = _SlicePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SlicePipe, [{
    type: Pipe,
    args: [{
      name: "slice",
      pure: false,
      standalone: true
    }]
  }], null, null);
})();
var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe];
var _CommonModule = class _CommonModule {
};
_CommonModule.\u0275fac = function CommonModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _CommonModule)();
};
_CommonModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _CommonModule
});
_CommonModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var CommonModule = _CommonModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CommonModule, [{
    type: NgModule,
    args: [{
      imports: [COMMON_DIRECTIVES, COMMON_PIPES],
      exports: [COMMON_DIRECTIVES, COMMON_PIPES]
    }]
  }], null, null);
})();
var PLATFORM_BROWSER_ID = "browser";
var PLATFORM_SERVER_ID = "server";
function isPlatformBrowser2(platformId) {
  return platformId === PLATFORM_BROWSER_ID;
}
function isPlatformServer(platformId) {
  return platformId === PLATFORM_SERVER_ID;
}
var VERSION2 = new Version("18.2.2");
var _ViewportScroller = class _ViewportScroller {
};
_ViewportScroller.\u0275prov = \u0275\u0275defineInjectable({
  token: _ViewportScroller,
  providedIn: "root",
  factory: () => isPlatformBrowser2(inject(PLATFORM_ID)) ? new BrowserViewportScroller(inject(DOCUMENT2), window) : new NullViewportScroller()
});
var ViewportScroller = _ViewportScroller;
var BrowserViewportScroller = class {
  constructor(document2, window2) {
    this.document = document2;
    this.window = window2;
    this.offset = () => [0, 0];
  }
  /**
   * Configures the top offset used when scrolling to an anchor.
   * @param offset A position in screen coordinates (a tuple with x and y values)
   * or a function that returns the top offset position.
   *
   */
  setOffset(offset) {
    if (Array.isArray(offset)) {
      this.offset = () => offset;
    } else {
      this.offset = offset;
    }
  }
  /**
   * Retrieves the current scroll position.
   * @returns The position in screen coordinates.
   */
  getScrollPosition() {
    return [this.window.scrollX, this.window.scrollY];
  }
  /**
   * Sets the scroll position.
   * @param position The new position in screen coordinates.
   */
  scrollToPosition(position) {
    this.window.scrollTo(position[0], position[1]);
  }
  /**
   * Scrolls to an element and attempts to focus the element.
   *
   * Note that the function name here is misleading in that the target string may be an ID for a
   * non-anchor element.
   *
   * @param target The ID of an element or name of the anchor.
   *
   * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document
   * @see https://html.spec.whatwg.org/#scroll-to-fragid
   */
  scrollToAnchor(target) {
    const elSelected = findAnchorFromDocument(this.document, target);
    if (elSelected) {
      this.scrollToElement(elSelected);
      elSelected.focus();
    }
  }
  /**
   * Disables automatic scroll restoration provided by the browser.
   */
  setHistoryScrollRestoration(scrollRestoration) {
    this.window.history.scrollRestoration = scrollRestoration;
  }
  /**
   * Scrolls to an element using the native offset and the specified offset set on this scroller.
   *
   * The offset can be used when we know that there is a floating header and scrolling naively to an
   * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.
   */
  scrollToElement(el) {
    const rect = el.getBoundingClientRect();
    const left = rect.left + this.window.pageXOffset;
    const top = rect.top + this.window.pageYOffset;
    const offset = this.offset();
    this.window.scrollTo(left - offset[0], top - offset[1]);
  }
};
function findAnchorFromDocument(document2, target) {
  const documentResult = document2.getElementById(target) || document2.getElementsByName(target)[0];
  if (documentResult) {
    return documentResult;
  }
  if (typeof document2.createTreeWalker === "function" && document2.body && typeof document2.body.attachShadow === "function") {
    const treeWalker = document2.createTreeWalker(document2.body, NodeFilter.SHOW_ELEMENT);
    let currentNode = treeWalker.currentNode;
    while (currentNode) {
      const shadowRoot = currentNode.shadowRoot;
      if (shadowRoot) {
        const result = shadowRoot.getElementById(target) || shadowRoot.querySelector(`[name="${target}"]`);
        if (result) {
          return result;
        }
      }
      currentNode = treeWalker.nextNode();
    }
  }
  return null;
}
var NullViewportScroller = class {
  /**
   * Empty implementation
   */
  setOffset(offset) {
  }
  /**
   * Empty implementation
   */
  getScrollPosition() {
    return [0, 0];
  }
  /**
   * Empty implementation
   */
  scrollToPosition(position) {
  }
  /**
   * Empty implementation
   */
  scrollToAnchor(anchor) {
  }
  /**
   * Empty implementation
   */
  setHistoryScrollRestoration(scrollRestoration) {
  }
};
var XhrFactory = class {
};
var PLACEHOLDER_QUALITY = "20";
function getUrl(src, win) {
  return isAbsoluteUrl(src) ? new URL(src) : new URL(src, win.location.href);
}
function isAbsoluteUrl(src) {
  return /^https?:\/\//.test(src);
}
function extractHostname(url) {
  return isAbsoluteUrl(url) ? new URL(url).hostname : url;
}
function isValidPath(path) {
  const isString2 = typeof path === "string";
  if (!isString2 || path.trim() === "") {
    return false;
  }
  try {
    const url = new URL(path);
    return true;
  } catch {
    return false;
  }
}
function normalizePath(path) {
  return path.endsWith("/") ? path.slice(0, -1) : path;
}
function normalizeSrc(src) {
  return src.startsWith("/") ? src.slice(1) : src;
}
var noopImageLoader = (config2) => config2.src;
var IMAGE_LOADER = new InjectionToken(ngDevMode ? "ImageLoader" : "", {
  providedIn: "root",
  factory: () => noopImageLoader
});
function createImageLoader(buildUrlFn, exampleUrls) {
  return function provideImageLoader(path) {
    if (!isValidPath(path)) {
      throwInvalidPathError(path, exampleUrls || []);
    }
    path = normalizePath(path);
    const loaderFn = (config2) => {
      if (isAbsoluteUrl(config2.src)) {
        throwUnexpectedAbsoluteUrlError(path, config2.src);
      }
      return buildUrlFn(path, __spreadProps(__spreadValues({}, config2), {
        src: normalizeSrc(config2.src)
      }));
    };
    const providers = [{
      provide: IMAGE_LOADER,
      useValue: loaderFn
    }];
    return providers;
  };
}
function throwInvalidPathError(path, exampleUrls) {
  throw new RuntimeError(2959, ngDevMode && `Image loader has detected an invalid path (\`${path}\`). To fix this, supply a path using one of the following formats: ${exampleUrls.join(" or ")}`);
}
function throwUnexpectedAbsoluteUrlError(path, url) {
  throw new RuntimeError(2959, ngDevMode && `Image loader has detected a \`<img>\` tag with an invalid \`ngSrc\` attribute: ${url}. This image loader expects \`ngSrc\` to be a relative URL - however the provided value is an absolute URL. To fix this, provide \`ngSrc\` as a path relative to the base URL configured for this loader (\`${path}\`).`);
}
var provideCloudflareLoader = createImageLoader(createCloudflareUrl, ngDevMode ? ["https://<ZONE>/cdn-cgi/image/<OPTIONS>/<SOURCE-IMAGE>"] : void 0);
function createCloudflareUrl(path, config2) {
  let params = `format=auto`;
  if (config2.width) {
    params += `,width=${config2.width}`;
  }
  if (config2.isPlaceholder) {
    params += `,quality=${PLACEHOLDER_QUALITY}`;
  }
  return `${path}/cdn-cgi/image/${params}/${config2.src}`;
}
var cloudinaryLoaderInfo = {
  name: "Cloudinary",
  testUrl: isCloudinaryUrl
};
var CLOUDINARY_LOADER_REGEX = /https?\:\/\/[^\/]+\.cloudinary\.com\/.+/;
function isCloudinaryUrl(url) {
  return CLOUDINARY_LOADER_REGEX.test(url);
}
var provideCloudinaryLoader = createImageLoader(createCloudinaryUrl, ngDevMode ? ["https://res.cloudinary.com/mysite", "https://mysite.cloudinary.com", "https://subdomain.mysite.com"] : void 0);
function createCloudinaryUrl(path, config2) {
  const quality = config2.isPlaceholder ? "q_auto:low" : "q_auto";
  let params = `f_auto,${quality}`;
  if (config2.width) {
    params += `,w_${config2.width}`;
  }
  return `${path}/image/upload/${params}/${config2.src}`;
}
var imageKitLoaderInfo = {
  name: "ImageKit",
  testUrl: isImageKitUrl
};
var IMAGE_KIT_LOADER_REGEX = /https?\:\/\/[^\/]+\.imagekit\.io\/.+/;
function isImageKitUrl(url) {
  return IMAGE_KIT_LOADER_REGEX.test(url);
}
var provideImageKitLoader = createImageLoader(createImagekitUrl, ngDevMode ? ["https://ik.imagekit.io/mysite", "https://subdomain.mysite.com"] : void 0);
function createImagekitUrl(path, config2) {
  const {
    src,
    width
  } = config2;
  const params = [];
  if (width) {
    params.push(`w-${width}`);
  }
  if (config2.isPlaceholder) {
    params.push(`q-${PLACEHOLDER_QUALITY}`);
  }
  const urlSegments = params.length ? [path, `tr:${params.join(",")}`, src] : [path, src];
  const url = new URL(urlSegments.join("/"));
  return url.href;
}
var imgixLoaderInfo = {
  name: "Imgix",
  testUrl: isImgixUrl
};
var IMGIX_LOADER_REGEX = /https?\:\/\/[^\/]+\.imgix\.net\/.+/;
function isImgixUrl(url) {
  return IMGIX_LOADER_REGEX.test(url);
}
var provideImgixLoader = createImageLoader(createImgixUrl, ngDevMode ? ["https://somepath.imgix.net/"] : void 0);
function createImgixUrl(path, config2) {
  const url = new URL(`${path}/${config2.src}`);
  url.searchParams.set("auto", "format");
  if (config2.width) {
    url.searchParams.set("w", config2.width.toString());
  }
  if (config2.isPlaceholder) {
    url.searchParams.set("q", PLACEHOLDER_QUALITY);
  }
  return url.href;
}
var netlifyLoaderInfo = {
  name: "Netlify",
  testUrl: isNetlifyUrl
};
var NETLIFY_LOADER_REGEX = /https?\:\/\/[^\/]+\.netlify\.app\/.+/;
function isNetlifyUrl(url) {
  return NETLIFY_LOADER_REGEX.test(url);
}
function imgDirectiveDetails(ngSrc, includeNgSrc = true) {
  const ngSrcInfo = includeNgSrc ? `(activated on an <img> element with the \`ngSrc="${ngSrc}"\`) ` : "";
  return `The NgOptimizedImage directive ${ngSrcInfo}has detected that`;
}
function assertDevMode(checkName) {
  if (!ngDevMode) {
    throw new RuntimeError(2958, `Unexpected invocation of the ${checkName} in the prod mode. Please make sure that the prod mode is enabled for production builds.`);
  }
}
var _LCPImageObserver = class _LCPImageObserver {
  constructor() {
    this.images = /* @__PURE__ */ new Map();
    this.window = null;
    this.observer = null;
    const isBrowser = isPlatformBrowser2(inject(PLATFORM_ID));
    assertDevMode("LCP checker");
    const win = inject(DOCUMENT2).defaultView;
    if (isBrowser && typeof PerformanceObserver !== "undefined") {
      this.window = win;
      this.observer = this.initPerformanceObserver();
    }
  }
  /**
   * Inits PerformanceObserver and subscribes to LCP events.
   * Based on https://web.dev/lcp/#measure-lcp-in-javascript
   */
  initPerformanceObserver() {
    const observer = new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries();
      if (entries.length === 0) return;
      const lcpElement = entries[entries.length - 1];
      const imgSrc = lcpElement.element?.src ?? "";
      if (imgSrc.startsWith("data:") || imgSrc.startsWith("blob:")) return;
      const img = this.images.get(imgSrc);
      if (!img) return;
      if (!img.priority && !img.alreadyWarnedPriority) {
        img.alreadyWarnedPriority = true;
        logMissingPriorityError(imgSrc);
      }
      if (img.modified && !img.alreadyWarnedModified) {
        img.alreadyWarnedModified = true;
        logModifiedWarning(imgSrc);
      }
    });
    observer.observe({
      type: "largest-contentful-paint",
      buffered: true
    });
    return observer;
  }
  registerImage(rewrittenSrc, originalNgSrc, isPriority) {
    if (!this.observer) return;
    const newObservedImageState = {
      priority: isPriority,
      modified: false,
      alreadyWarnedModified: false,
      alreadyWarnedPriority: false
    };
    this.images.set(getUrl(rewrittenSrc, this.window).href, newObservedImageState);
  }
  unregisterImage(rewrittenSrc) {
    if (!this.observer) return;
    this.images.delete(getUrl(rewrittenSrc, this.window).href);
  }
  updateImage(originalSrc, newSrc) {
    if (!this.observer) return;
    const originalUrl = getUrl(originalSrc, this.window).href;
    const img = this.images.get(originalUrl);
    if (img) {
      img.modified = true;
      this.images.set(getUrl(newSrc, this.window).href, img);
      this.images.delete(originalUrl);
    }
  }
  ngOnDestroy() {
    if (!this.observer) return;
    this.observer.disconnect();
    this.images.clear();
  }
};
_LCPImageObserver.\u0275fac = function LCPImageObserver_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _LCPImageObserver)();
};
_LCPImageObserver.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _LCPImageObserver,
  factory: _LCPImageObserver.\u0275fac,
  providedIn: "root"
});
var LCPImageObserver = _LCPImageObserver;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LCPImageObserver, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function logMissingPriorityError(ngSrc) {
  const directiveDetails = imgDirectiveDetails(ngSrc);
  console.error(formatRuntimeError(2955, `${directiveDetails} this image is the Largest Contentful Paint (LCP) element but was not marked "priority". This image should be marked "priority" in order to prioritize its loading. To fix this, add the "priority" attribute.`));
}
function logModifiedWarning(ngSrc) {
  const directiveDetails = imgDirectiveDetails(ngSrc);
  console.warn(formatRuntimeError(2964, `${directiveDetails} this image is the Largest Contentful Paint (LCP) element and has had its "ngSrc" attribute modified. This can cause slower loading performance. It is recommended not to modify the "ngSrc" property on any image which could be the LCP element.`));
}
var INTERNAL_PRECONNECT_CHECK_BLOCKLIST = /* @__PURE__ */ new Set(["localhost", "127.0.0.1", "0.0.0.0"]);
var PRECONNECT_CHECK_BLOCKLIST = new InjectionToken(ngDevMode ? "PRECONNECT_CHECK_BLOCKLIST" : "");
var _PreconnectLinkChecker = class _PreconnectLinkChecker {
  constructor() {
    this.document = inject(DOCUMENT2);
    this.isServer = isPlatformServer(inject(PLATFORM_ID));
    this.preconnectLinks = null;
    this.alreadySeen = /* @__PURE__ */ new Set();
    this.window = null;
    this.blocklist = new Set(INTERNAL_PRECONNECT_CHECK_BLOCKLIST);
    assertDevMode("preconnect link checker");
    const win = this.document.defaultView;
    if (typeof win !== "undefined") {
      this.window = win;
    }
    const blocklist = inject(PRECONNECT_CHECK_BLOCKLIST, {
      optional: true
    });
    if (blocklist) {
      this.populateBlocklist(blocklist);
    }
  }
  populateBlocklist(origins) {
    if (Array.isArray(origins)) {
      deepForEach2(origins, (origin) => {
        this.blocklist.add(extractHostname(origin));
      });
    } else {
      this.blocklist.add(extractHostname(origins));
    }
  }
  /**
   * Checks that a preconnect resource hint exists in the head for the
   * given src.
   *
   * @param rewrittenSrc src formatted with loader
   * @param originalNgSrc ngSrc value
   */
  assertPreconnect(rewrittenSrc, originalNgSrc) {
    if (this.isServer) return;
    const imgUrl = getUrl(rewrittenSrc, this.window);
    if (this.blocklist.has(imgUrl.hostname) || this.alreadySeen.has(imgUrl.origin)) return;
    this.alreadySeen.add(imgUrl.origin);
    this.preconnectLinks ??= this.queryPreconnectLinks();
    if (!this.preconnectLinks.has(imgUrl.origin)) {
      console.warn(formatRuntimeError(2956, `${imgDirectiveDetails(originalNgSrc)} there is no preconnect tag present for this image. Preconnecting to the origin(s) that serve priority images ensures that these images are delivered as soon as possible. To fix this, please add the following element into the <head> of the document:
  <link rel="preconnect" href="${imgUrl.origin}">`));
    }
  }
  queryPreconnectLinks() {
    const preconnectUrls = /* @__PURE__ */ new Set();
    const selector = "link[rel=preconnect]";
    const links = Array.from(this.document.querySelectorAll(selector));
    for (let link of links) {
      const url = getUrl(link.href, this.window);
      preconnectUrls.add(url.origin);
    }
    return preconnectUrls;
  }
  ngOnDestroy() {
    this.preconnectLinks?.clear();
    this.alreadySeen.clear();
  }
};
_PreconnectLinkChecker.\u0275fac = function PreconnectLinkChecker_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _PreconnectLinkChecker)();
};
_PreconnectLinkChecker.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PreconnectLinkChecker,
  factory: _PreconnectLinkChecker.\u0275fac,
  providedIn: "root"
});
var PreconnectLinkChecker = _PreconnectLinkChecker;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PreconnectLinkChecker, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function deepForEach2(input2, fn) {
  for (let value of input2) {
    Array.isArray(value) ? deepForEach2(value, fn) : fn(value);
  }
}
var DEFAULT_PRELOADED_IMAGES_LIMIT = 5;
var PRELOADED_IMAGES = new InjectionToken("NG_OPTIMIZED_PRELOADED_IMAGES", {
  providedIn: "root",
  factory: () => /* @__PURE__ */ new Set()
});
var _PreloadLinkCreator = class _PreloadLinkCreator {
  constructor() {
    this.preloadedImages = inject(PRELOADED_IMAGES);
    this.document = inject(DOCUMENT2);
  }
  /**
   * @description Add a preload `<link>` to the `<head>` of the `index.html` that is served from the
   * server while using Angular Universal and SSR to kick off image loads for high priority images.
   *
   * The `sizes` (passed in from the user) and `srcset` (parsed and formatted from `ngSrcset`)
   * properties used to set the corresponding attributes, `imagesizes` and `imagesrcset`
   * respectively, on the preload `<link>` tag so that the correctly sized image is preloaded from
   * the CDN.
   *
   * {@link https://web.dev/preload-responsive-images/#imagesrcset-and-imagesizes}
   *
   * @param renderer The `Renderer2` passed in from the directive
   * @param src The original src of the image that is set on the `ngSrc` input.
   * @param srcset The parsed and formatted srcset created from the `ngSrcset` input
   * @param sizes The value of the `sizes` attribute passed in to the `<img>` tag
   */
  createPreloadLinkTag(renderer, src, srcset, sizes) {
    if (ngDevMode) {
      if (this.preloadedImages.size >= DEFAULT_PRELOADED_IMAGES_LIMIT) {
        throw new RuntimeError(2961, ngDevMode && `The \`NgOptimizedImage\` directive has detected that more than ${DEFAULT_PRELOADED_IMAGES_LIMIT} images were marked as priority. This might negatively affect an overall performance of the page. To fix this, remove the "priority" attribute from images with less priority.`);
      }
    }
    if (this.preloadedImages.has(src)) {
      return;
    }
    this.preloadedImages.add(src);
    const preload = renderer.createElement("link");
    renderer.setAttribute(preload, "as", "image");
    renderer.setAttribute(preload, "href", src);
    renderer.setAttribute(preload, "rel", "preload");
    renderer.setAttribute(preload, "fetchpriority", "high");
    if (sizes) {
      renderer.setAttribute(preload, "imageSizes", sizes);
    }
    if (srcset) {
      renderer.setAttribute(preload, "imageSrcset", srcset);
    }
    renderer.appendChild(this.document.head, preload);
  }
};
_PreloadLinkCreator.\u0275fac = function PreloadLinkCreator_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _PreloadLinkCreator)();
};
_PreloadLinkCreator.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PreloadLinkCreator,
  factory: _PreloadLinkCreator.\u0275fac,
  providedIn: "root"
});
var PreloadLinkCreator = _PreloadLinkCreator;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PreloadLinkCreator, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var BASE64_IMG_MAX_LENGTH_IN_ERROR = 50;
var VALID_WIDTH_DESCRIPTOR_SRCSET = /^((\s*\d+w\s*(,|$)){1,})$/;
var VALID_DENSITY_DESCRIPTOR_SRCSET = /^((\s*\d+(\.\d+)?x\s*(,|$)){1,})$/;
var ABSOLUTE_SRCSET_DENSITY_CAP = 3;
var RECOMMENDED_SRCSET_DENSITY_CAP = 2;
var DENSITY_SRCSET_MULTIPLIERS = [1, 2];
var VIEWPORT_BREAKPOINT_CUTOFF = 640;
var ASPECT_RATIO_TOLERANCE = 0.1;
var OVERSIZED_IMAGE_TOLERANCE2 = 1e3;
var FIXED_SRCSET_WIDTH_LIMIT = 1920;
var FIXED_SRCSET_HEIGHT_LIMIT = 1080;
var PLACEHOLDER_BLUR_AMOUNT = 15;
var PLACEHOLDER_DIMENSION_LIMIT = 1e3;
var DATA_URL_WARN_LIMIT = 4e3;
var DATA_URL_ERROR_LIMIT = 1e4;
var BUILT_IN_LOADERS = [imgixLoaderInfo, imageKitLoaderInfo, cloudinaryLoaderInfo, netlifyLoaderInfo];
var PRIORITY_COUNT_THRESHOLD = 10;
var IMGS_WITH_PRIORITY_ATTR_COUNT = 0;
var _NgOptimizedImage = class _NgOptimizedImage {
  constructor() {
    this.imageLoader = inject(IMAGE_LOADER);
    this.config = processConfig(inject(IMAGE_CONFIG));
    this.renderer = inject(Renderer2);
    this.imgElement = inject(ElementRef).nativeElement;
    this.injector = inject(Injector);
    this.isServer = isPlatformServer(inject(PLATFORM_ID));
    this.preloadLinkCreator = inject(PreloadLinkCreator);
    this.lcpObserver = ngDevMode ? this.injector.get(LCPImageObserver) : null;
    this._renderedSrc = null;
    this.priority = false;
    this.disableOptimizedSrcset = false;
    this.fill = false;
  }
  /** @nodoc */
  ngOnInit() {
    performanceMarkFeature("NgOptimizedImage");
    if (ngDevMode) {
      const ngZone = this.injector.get(NgZone);
      assertNonEmptyInput(this, "ngSrc", this.ngSrc);
      assertValidNgSrcset(this, this.ngSrcset);
      assertNoConflictingSrc(this);
      if (this.ngSrcset) {
        assertNoConflictingSrcset(this);
      }
      assertNotBase64Image(this);
      assertNotBlobUrl(this);
      if (this.fill) {
        assertEmptyWidthAndHeight(this);
        ngZone.runOutsideAngular(() => assertNonZeroRenderedHeight(this, this.imgElement, this.renderer));
      } else {
        assertNonEmptyWidthAndHeight(this);
        if (this.height !== void 0) {
          assertGreaterThanZero(this, this.height, "height");
        }
        if (this.width !== void 0) {
          assertGreaterThanZero(this, this.width, "width");
        }
        ngZone.runOutsideAngular(() => assertNoImageDistortion(this, this.imgElement, this.renderer));
      }
      assertValidLoadingInput(this);
      if (!this.ngSrcset) {
        assertNoComplexSizes(this);
      }
      assertValidPlaceholder(this, this.imageLoader);
      assertNotMissingBuiltInLoader(this.ngSrc, this.imageLoader);
      assertNoNgSrcsetWithoutLoader(this, this.imageLoader);
      assertNoLoaderParamsWithoutLoader(this, this.imageLoader);
      if (this.lcpObserver !== null) {
        const ngZone2 = this.injector.get(NgZone);
        ngZone2.runOutsideAngular(() => {
          this.lcpObserver.registerImage(this.getRewrittenSrc(), this.ngSrc, this.priority);
        });
      }
      if (this.priority) {
        const checker = this.injector.get(PreconnectLinkChecker);
        checker.assertPreconnect(this.getRewrittenSrc(), this.ngSrc);
        if (!this.isServer) {
          const applicationRef = this.injector.get(ApplicationRef);
          assetPriorityCountBelowThreshold(applicationRef);
        }
      }
    }
    if (this.placeholder) {
      this.removePlaceholderOnLoad(this.imgElement);
    }
    this.setHostAttributes();
  }
  setHostAttributes() {
    if (this.fill) {
      this.sizes ||= "100vw";
    } else {
      this.setHostAttribute("width", this.width.toString());
      this.setHostAttribute("height", this.height.toString());
    }
    this.setHostAttribute("loading", this.getLoadingBehavior());
    this.setHostAttribute("fetchpriority", this.getFetchPriority());
    this.setHostAttribute("ng-img", "true");
    const rewrittenSrcset = this.updateSrcAndSrcset();
    if (this.sizes) {
      this.setHostAttribute("sizes", this.sizes);
    }
    if (this.isServer && this.priority) {
      this.preloadLinkCreator.createPreloadLinkTag(this.renderer, this.getRewrittenSrc(), rewrittenSrcset, this.sizes);
    }
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (ngDevMode) {
      assertNoPostInitInputChange(this, changes, ["ngSrcset", "width", "height", "priority", "fill", "loading", "sizes", "loaderParams", "disableOptimizedSrcset"]);
    }
    if (changes["ngSrc"] && !changes["ngSrc"].isFirstChange()) {
      const oldSrc = this._renderedSrc;
      this.updateSrcAndSrcset(true);
      const newSrc = this._renderedSrc;
      if (this.lcpObserver !== null && oldSrc && newSrc && oldSrc !== newSrc) {
        const ngZone = this.injector.get(NgZone);
        ngZone.runOutsideAngular(() => {
          this.lcpObserver?.updateImage(oldSrc, newSrc);
        });
      }
    }
    if (ngDevMode && changes["placeholder"]?.currentValue && !this.isServer) {
      assertPlaceholderDimensions(this, this.imgElement);
    }
  }
  callImageLoader(configWithoutCustomParams) {
    let augmentedConfig = configWithoutCustomParams;
    if (this.loaderParams) {
      augmentedConfig.loaderParams = this.loaderParams;
    }
    return this.imageLoader(augmentedConfig);
  }
  getLoadingBehavior() {
    if (!this.priority && this.loading !== void 0) {
      return this.loading;
    }
    return this.priority ? "eager" : "lazy";
  }
  getFetchPriority() {
    return this.priority ? "high" : "auto";
  }
  getRewrittenSrc() {
    if (!this._renderedSrc) {
      const imgConfig = {
        src: this.ngSrc
      };
      this._renderedSrc = this.callImageLoader(imgConfig);
    }
    return this._renderedSrc;
  }
  getRewrittenSrcset() {
    const widthSrcSet = VALID_WIDTH_DESCRIPTOR_SRCSET.test(this.ngSrcset);
    const finalSrcs = this.ngSrcset.split(",").filter((src) => src !== "").map((srcStr) => {
      srcStr = srcStr.trim();
      const width = widthSrcSet ? parseFloat(srcStr) : parseFloat(srcStr) * this.width;
      return `${this.callImageLoader({
        src: this.ngSrc,
        width
      })} ${srcStr}`;
    });
    return finalSrcs.join(", ");
  }
  getAutomaticSrcset() {
    if (this.sizes) {
      return this.getResponsiveSrcset();
    } else {
      return this.getFixedSrcset();
    }
  }
  getResponsiveSrcset() {
    const {
      breakpoints
    } = this.config;
    let filteredBreakpoints = breakpoints;
    if (this.sizes?.trim() === "100vw") {
      filteredBreakpoints = breakpoints.filter((bp) => bp >= VIEWPORT_BREAKPOINT_CUTOFF);
    }
    const finalSrcs = filteredBreakpoints.map((bp) => `${this.callImageLoader({
      src: this.ngSrc,
      width: bp
    })} ${bp}w`);
    return finalSrcs.join(", ");
  }
  updateSrcAndSrcset(forceSrcRecalc = false) {
    if (forceSrcRecalc) {
      this._renderedSrc = null;
    }
    const rewrittenSrc = this.getRewrittenSrc();
    this.setHostAttribute("src", rewrittenSrc);
    let rewrittenSrcset = void 0;
    if (this.ngSrcset) {
      rewrittenSrcset = this.getRewrittenSrcset();
    } else if (this.shouldGenerateAutomaticSrcset()) {
      rewrittenSrcset = this.getAutomaticSrcset();
    }
    if (rewrittenSrcset) {
      this.setHostAttribute("srcset", rewrittenSrcset);
    }
    return rewrittenSrcset;
  }
  getFixedSrcset() {
    const finalSrcs = DENSITY_SRCSET_MULTIPLIERS.map((multiplier) => `${this.callImageLoader({
      src: this.ngSrc,
      width: this.width * multiplier
    })} ${multiplier}x`);
    return finalSrcs.join(", ");
  }
  shouldGenerateAutomaticSrcset() {
    let oversizedImage = false;
    if (!this.sizes) {
      oversizedImage = this.width > FIXED_SRCSET_WIDTH_LIMIT || this.height > FIXED_SRCSET_HEIGHT_LIMIT;
    }
    return !this.disableOptimizedSrcset && !this.srcset && this.imageLoader !== noopImageLoader && !oversizedImage;
  }
  /**
   * Returns an image url formatted for use with the CSS background-image property. Expects one of:
   * * A base64 encoded image, which is wrapped and passed through.
   * * A boolean. If true, calls the image loader to generate a small placeholder url.
   */
  generatePlaceholder(placeholderInput) {
    const {
      placeholderResolution
    } = this.config;
    if (placeholderInput === true) {
      return `url(${this.callImageLoader({
        src: this.ngSrc,
        width: placeholderResolution,
        isPlaceholder: true
      })})`;
    } else if (typeof placeholderInput === "string") {
      return `url(${placeholderInput})`;
    }
    return null;
  }
  /**
   * Determines if blur should be applied, based on an optional boolean
   * property `blur` within the optional configuration object `placeholderConfig`.
   */
  shouldBlurPlaceholder(placeholderConfig) {
    if (!placeholderConfig || !placeholderConfig.hasOwnProperty("blur")) {
      return true;
    }
    return Boolean(placeholderConfig.blur);
  }
  removePlaceholderOnLoad(img) {
    const callback = () => {
      const changeDetectorRef = this.injector.get(ChangeDetectorRef);
      removeLoadListenerFn();
      removeErrorListenerFn();
      this.placeholder = false;
      changeDetectorRef.markForCheck();
    };
    const removeLoadListenerFn = this.renderer.listen(img, "load", callback);
    const removeErrorListenerFn = this.renderer.listen(img, "error", callback);
  }
  /** @nodoc */
  ngOnDestroy() {
    if (ngDevMode) {
      if (!this.priority && this._renderedSrc !== null && this.lcpObserver !== null) {
        this.lcpObserver.unregisterImage(this._renderedSrc);
      }
    }
  }
  setHostAttribute(name, value) {
    this.renderer.setAttribute(this.imgElement, name, value);
  }
};
_NgOptimizedImage.\u0275fac = function NgOptimizedImage_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NgOptimizedImage)();
};
_NgOptimizedImage.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgOptimizedImage,
  selectors: [["img", "ngSrc", ""]],
  hostVars: 18,
  hostBindings: function NgOptimizedImage_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275styleProp("position", ctx.fill ? "absolute" : null)("width", ctx.fill ? "100%" : null)("height", ctx.fill ? "100%" : null)("inset", ctx.fill ? "0" : null)("background-size", ctx.placeholder ? "cover" : null)("background-position", ctx.placeholder ? "50% 50%" : null)("background-repeat", ctx.placeholder ? "no-repeat" : null)("background-image", ctx.placeholder ? ctx.generatePlaceholder(ctx.placeholder) : null)("filter", ctx.placeholder && ctx.shouldBlurPlaceholder(ctx.placeholderConfig) ? "blur(15px)" : null);
    }
  },
  inputs: {
    ngSrc: [2, "ngSrc", "ngSrc", unwrapSafeUrl],
    ngSrcset: "ngSrcset",
    sizes: "sizes",
    width: [2, "width", "width", numberAttribute],
    height: [2, "height", "height", numberAttribute],
    loading: "loading",
    priority: [2, "priority", "priority", booleanAttribute],
    loaderParams: "loaderParams",
    disableOptimizedSrcset: [2, "disableOptimizedSrcset", "disableOptimizedSrcset", booleanAttribute],
    fill: [2, "fill", "fill", booleanAttribute],
    placeholder: [2, "placeholder", "placeholder", booleanOrUrlAttribute],
    placeholderConfig: "placeholderConfig",
    src: "src",
    srcset: "srcset"
  },
  standalone: true,
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature]
});
var NgOptimizedImage = _NgOptimizedImage;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgOptimizedImage, [{
    type: Directive,
    args: [{
      standalone: true,
      selector: "img[ngSrc]",
      host: {
        "[style.position]": 'fill ? "absolute" : null',
        "[style.width]": 'fill ? "100%" : null',
        "[style.height]": 'fill ? "100%" : null',
        "[style.inset]": 'fill ? "0" : null',
        "[style.background-size]": 'placeholder ? "cover" : null',
        "[style.background-position]": 'placeholder ? "50% 50%" : null',
        "[style.background-repeat]": 'placeholder ? "no-repeat" : null',
        "[style.background-image]": "placeholder ? generatePlaceholder(placeholder) : null",
        "[style.filter]": `placeholder && shouldBlurPlaceholder(placeholderConfig) ? "blur(${PLACEHOLDER_BLUR_AMOUNT}px)" : null`
      }
    }]
  }], null, {
    ngSrc: [{
      type: Input,
      args: [{
        required: true,
        transform: unwrapSafeUrl
      }]
    }],
    ngSrcset: [{
      type: Input
    }],
    sizes: [{
      type: Input
    }],
    width: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    height: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    loading: [{
      type: Input
    }],
    priority: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    loaderParams: [{
      type: Input
    }],
    disableOptimizedSrcset: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    fill: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    placeholder: [{
      type: Input,
      args: [{
        transform: booleanOrUrlAttribute
      }]
    }],
    placeholderConfig: [{
      type: Input
    }],
    src: [{
      type: Input
    }],
    srcset: [{
      type: Input
    }]
  });
})();
function processConfig(config2) {
  let sortedBreakpoints = {};
  if (config2.breakpoints) {
    sortedBreakpoints.breakpoints = config2.breakpoints.sort((a, b) => a - b);
  }
  return Object.assign({}, IMAGE_CONFIG_DEFAULTS, config2, sortedBreakpoints);
}
function assertNoConflictingSrc(dir) {
  if (dir.src) {
    throw new RuntimeError(2950, `${imgDirectiveDetails(dir.ngSrc)} both \`src\` and \`ngSrc\` have been set. Supplying both of these attributes breaks lazy loading. The NgOptimizedImage directive sets \`src\` itself based on the value of \`ngSrc\`. To fix this, please remove the \`src\` attribute.`);
  }
}
function assertNoConflictingSrcset(dir) {
  if (dir.srcset) {
    throw new RuntimeError(2951, `${imgDirectiveDetails(dir.ngSrc)} both \`srcset\` and \`ngSrcset\` have been set. Supplying both of these attributes breaks lazy loading. The NgOptimizedImage directive sets \`srcset\` itself based on the value of \`ngSrcset\`. To fix this, please remove the \`srcset\` attribute.`);
  }
}
function assertNotBase64Image(dir) {
  let ngSrc = dir.ngSrc.trim();
  if (ngSrc.startsWith("data:")) {
    if (ngSrc.length > BASE64_IMG_MAX_LENGTH_IN_ERROR) {
      ngSrc = ngSrc.substring(0, BASE64_IMG_MAX_LENGTH_IN_ERROR) + "...";
    }
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`ngSrc\` is a Base64-encoded string (${ngSrc}). NgOptimizedImage does not support Base64-encoded strings. To fix this, disable the NgOptimizedImage directive for this element by removing \`ngSrc\` and using a standard \`src\` attribute instead.`);
  }
}
function assertNoComplexSizes(dir) {
  let sizes = dir.sizes;
  if (sizes?.match(/((\)|,)\s|^)\d+px/)) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`sizes\` was set to a string including pixel values. For automatic \`srcset\` generation, \`sizes\` must only include responsive values, such as \`sizes="50vw"\` or \`sizes="(min-width: 768px) 50vw, 100vw"\`. To fix this, modify the \`sizes\` attribute, or provide your own \`ngSrcset\` value directly.`);
  }
}
function assertValidPlaceholder(dir, imageLoader) {
  assertNoPlaceholderConfigWithoutPlaceholder(dir);
  assertNoRelativePlaceholderWithoutLoader(dir, imageLoader);
  assertNoOversizedDataUrl(dir);
}
function assertNoPlaceholderConfigWithoutPlaceholder(dir) {
  if (dir.placeholderConfig && !dir.placeholder) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`placeholderConfig\` options were provided for an image that does not use the \`placeholder\` attribute, and will have no effect.`);
  }
}
function assertNoRelativePlaceholderWithoutLoader(dir, imageLoader) {
  if (dir.placeholder === true && imageLoader === noopImageLoader) {
    throw new RuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to true but no image loader is configured (i.e. the default one is being used), which would result in the same image being used for the primary image and its placeholder. To fix this, provide a loader or remove the \`placeholder\` attribute from the image.`);
  }
}
function assertNoOversizedDataUrl(dir) {
  if (dir.placeholder && typeof dir.placeholder === "string" && dir.placeholder.startsWith("data:")) {
    if (dir.placeholder.length > DATA_URL_ERROR_LIMIT) {
      throw new RuntimeError(2965, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to a data URL which is longer than ${DATA_URL_ERROR_LIMIT} characters. This is strongly discouraged, as large inline placeholders directly increase the bundle size of Angular and hurt page load performance. To fix this, generate a smaller data URL placeholder.`);
    }
    if (dir.placeholder.length > DATA_URL_WARN_LIMIT) {
      console.warn(formatRuntimeError(2965, `${imgDirectiveDetails(dir.ngSrc)} the \`placeholder\` attribute is set to a data URL which is longer than ${DATA_URL_WARN_LIMIT} characters. This is discouraged, as large inline placeholders directly increase the bundle size of Angular and hurt page load performance. For better loading performance, generate a smaller data URL placeholder.`));
    }
  }
}
function assertNotBlobUrl(dir) {
  const ngSrc = dir.ngSrc.trim();
  if (ngSrc.startsWith("blob:")) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`ngSrc\` was set to a blob URL (${ngSrc}). Blob URLs are not supported by the NgOptimizedImage directive. To fix this, disable the NgOptimizedImage directive for this element by removing \`ngSrc\` and using a regular \`src\` attribute instead.`);
  }
}
function assertNonEmptyInput(dir, name, value) {
  const isString2 = typeof value === "string";
  const isEmptyString = isString2 && value.trim() === "";
  if (!isString2 || isEmptyString) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`${name}\` has an invalid value (\`${value}\`). To fix this, change the value to a non-empty string.`);
  }
}
function assertValidNgSrcset(dir, value) {
  if (value == null) return;
  assertNonEmptyInput(dir, "ngSrcset", value);
  const stringVal = value;
  const isValidWidthDescriptor = VALID_WIDTH_DESCRIPTOR_SRCSET.test(stringVal);
  const isValidDensityDescriptor = VALID_DENSITY_DESCRIPTOR_SRCSET.test(stringVal);
  if (isValidDensityDescriptor) {
    assertUnderDensityCap(dir, stringVal);
  }
  const isValidSrcset = isValidWidthDescriptor || isValidDensityDescriptor;
  if (!isValidSrcset) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`ngSrcset\` has an invalid value (\`${value}\`). To fix this, supply \`ngSrcset\` using a comma-separated list of one or more width descriptors (e.g. "100w, 200w") or density descriptors (e.g. "1x, 2x").`);
  }
}
function assertUnderDensityCap(dir, value) {
  const underDensityCap = value.split(",").every((num) => num === "" || parseFloat(num) <= ABSOLUTE_SRCSET_DENSITY_CAP);
  if (!underDensityCap) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`ngSrcset\` contains an unsupported image density:\`${value}\`. NgOptimizedImage generally recommends a max image density of ${RECOMMENDED_SRCSET_DENSITY_CAP}x but supports image densities up to ${ABSOLUTE_SRCSET_DENSITY_CAP}x. The human eye cannot distinguish between image densities greater than ${RECOMMENDED_SRCSET_DENSITY_CAP}x - which makes them unnecessary for most use cases. Images that will be pinch-zoomed are typically the primary use case for ${ABSOLUTE_SRCSET_DENSITY_CAP}x images. Please remove the high density descriptor and try again.`);
  }
}
function postInitInputChangeError(dir, inputName) {
  let reason;
  if (inputName === "width" || inputName === "height") {
    reason = `Changing \`${inputName}\` may result in different attribute value applied to the underlying image element and cause layout shifts on a page.`;
  } else {
    reason = `Changing the \`${inputName}\` would have no effect on the underlying image element, because the resource loading has already occurred.`;
  }
  return new RuntimeError(2953, `${imgDirectiveDetails(dir.ngSrc)} \`${inputName}\` was updated after initialization. The NgOptimizedImage directive will not react to this input change. ${reason} To fix this, either switch \`${inputName}\` to a static value or wrap the image element in an *ngIf that is gated on the necessary value.`);
}
function assertNoPostInitInputChange(dir, changes, inputs) {
  inputs.forEach((input2) => {
    const isUpdated = changes.hasOwnProperty(input2);
    if (isUpdated && !changes[input2].isFirstChange()) {
      if (input2 === "ngSrc") {
        dir = {
          ngSrc: changes[input2].previousValue
        };
      }
      throw postInitInputChangeError(dir, input2);
    }
  });
}
function assertGreaterThanZero(dir, inputValue, inputName) {
  const validNumber = typeof inputValue === "number" && inputValue > 0;
  const validString = typeof inputValue === "string" && /^\d+$/.test(inputValue.trim()) && parseInt(inputValue) > 0;
  if (!validNumber && !validString) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`${inputName}\` has an invalid value. To fix this, provide \`${inputName}\` as a number greater than 0.`);
  }
}
function assertNoImageDistortion(dir, img, renderer) {
  const removeLoadListenerFn = renderer.listen(img, "load", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
    const computedStyle = window.getComputedStyle(img);
    let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
    let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
    const boxSizing = computedStyle.getPropertyValue("box-sizing");
    if (boxSizing === "border-box") {
      const paddingTop = computedStyle.getPropertyValue("padding-top");
      const paddingRight = computedStyle.getPropertyValue("padding-right");
      const paddingBottom = computedStyle.getPropertyValue("padding-bottom");
      const paddingLeft = computedStyle.getPropertyValue("padding-left");
      renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);
      renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);
    }
    const renderedAspectRatio = renderedWidth / renderedHeight;
    const nonZeroRenderedDimensions = renderedWidth !== 0 && renderedHeight !== 0;
    const intrinsicWidth = img.naturalWidth;
    const intrinsicHeight = img.naturalHeight;
    const intrinsicAspectRatio = intrinsicWidth / intrinsicHeight;
    const suppliedWidth = dir.width;
    const suppliedHeight = dir.height;
    const suppliedAspectRatio = suppliedWidth / suppliedHeight;
    const inaccurateDimensions = Math.abs(suppliedAspectRatio - intrinsicAspectRatio) > ASPECT_RATIO_TOLERANCE;
    const stylingDistortion = nonZeroRenderedDimensions && Math.abs(intrinsicAspectRatio - renderedAspectRatio) > ASPECT_RATIO_TOLERANCE;
    if (inaccurateDimensions) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the image does not match the aspect ratio indicated by the width and height attributes. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h (aspect-ratio: ${round(intrinsicAspectRatio)}). 
Supplied width and height attributes: ${suppliedWidth}w x ${suppliedHeight}h (aspect-ratio: ${round(suppliedAspectRatio)}). 
To fix this, update the width and height attributes.`));
    } else if (stylingDistortion) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the rendered image does not match the image's intrinsic aspect ratio. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h (aspect-ratio: ${round(intrinsicAspectRatio)}). 
Rendered image size: ${renderedWidth}w x ${renderedHeight}h (aspect-ratio: ${round(renderedAspectRatio)}). 
This issue can occur if "width" and "height" attributes are added to an image without updating the corresponding image styling. To fix this, adjust image styling. In most cases, adding "height: auto" or "width: auto" to the image styling will fix this issue.`));
    } else if (!dir.ngSrcset && nonZeroRenderedDimensions) {
      const recommendedWidth = RECOMMENDED_SRCSET_DENSITY_CAP * renderedWidth;
      const recommendedHeight = RECOMMENDED_SRCSET_DENSITY_CAP * renderedHeight;
      const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE2;
      const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE2;
      if (oversizedWidth || oversizedHeight) {
        console.warn(formatRuntimeError(2960, `${imgDirectiveDetails(dir.ngSrc)} the intrinsic image is significantly larger than necessary. 
Rendered image size: ${renderedWidth}w x ${renderedHeight}h. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h. 
Recommended intrinsic image size: ${recommendedWidth}w x ${recommendedHeight}h. 
Note: Recommended intrinsic image size is calculated assuming a maximum DPR of ${RECOMMENDED_SRCSET_DENSITY_CAP}. To improve loading time, resize the image or consider using the "ngSrcset" and "sizes" attributes.`));
      }
    }
  });
  const removeErrorListenerFn = renderer.listen(img, "error", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
  });
}
function assertNonEmptyWidthAndHeight(dir) {
  let missingAttributes = [];
  if (dir.width === void 0) missingAttributes.push("width");
  if (dir.height === void 0) missingAttributes.push("height");
  if (missingAttributes.length > 0) {
    throw new RuntimeError(2954, `${imgDirectiveDetails(dir.ngSrc)} these required attributes are missing: ${missingAttributes.map((attr) => `"${attr}"`).join(", ")}. Including "width" and "height" attributes will prevent image-related layout shifts. To fix this, include "width" and "height" attributes on the image tag or turn on "fill" mode with the \`fill\` attribute.`);
  }
}
function assertEmptyWidthAndHeight(dir) {
  if (dir.width || dir.height) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the attributes \`height\` and/or \`width\` are present along with the \`fill\` attribute. Because \`fill\` mode causes an image to fill its containing element, the size attributes have no effect and should be removed.`);
  }
}
function assertNonZeroRenderedHeight(dir, img, renderer) {
  const removeLoadListenerFn = renderer.listen(img, "load", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
    const renderedHeight = img.clientHeight;
    if (dir.fill && renderedHeight === 0) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the height of the fill-mode image is zero. This is likely because the containing element does not have the CSS 'position' property set to one of the following: "relative", "fixed", or "absolute". To fix this problem, make sure the container element has the CSS 'position' property defined and the height of the element is not zero.`));
    }
  });
  const removeErrorListenerFn = renderer.listen(img, "error", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
  });
}
function assertValidLoadingInput(dir) {
  if (dir.loading && dir.priority) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`loading\` attribute was used on an image that was marked "priority". Setting \`loading\` on priority images is not allowed because these images will always be eagerly loaded. To fix this, remove the \u201Cloading\u201D attribute from the priority image.`);
  }
  const validInputs = ["auto", "eager", "lazy"];
  if (typeof dir.loading === "string" && !validInputs.includes(dir.loading)) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`loading\` attribute has an invalid value (\`${dir.loading}\`). To fix this, provide a valid value ("lazy", "eager", or "auto").`);
  }
}
function assertNotMissingBuiltInLoader(ngSrc, imageLoader) {
  if (imageLoader === noopImageLoader) {
    let builtInLoaderName = "";
    for (const loader of BUILT_IN_LOADERS) {
      if (loader.testUrl(ngSrc)) {
        builtInLoaderName = loader.name;
        break;
      }
    }
    if (builtInLoaderName) {
      console.warn(formatRuntimeError(2962, `NgOptimizedImage: It looks like your images may be hosted on the ${builtInLoaderName} CDN, but your app is not using Angular's built-in loader for that CDN. We recommend switching to use the built-in by calling \`provide${builtInLoaderName}Loader()\` in your \`providers\` and passing it your instance's base URL. If you don't want to use the built-in loader, define a custom loader function using IMAGE_LOADER to silence this warning.`));
    }
  }
}
function assertNoNgSrcsetWithoutLoader(dir, imageLoader) {
  if (dir.ngSrcset && imageLoader === noopImageLoader) {
    console.warn(formatRuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`ngSrcset\` attribute is present but no image loader is configured (i.e. the default one is being used), which would result in the same image being used for all configured sizes. To fix this, provide a loader or remove the \`ngSrcset\` attribute from the image.`));
  }
}
function assertNoLoaderParamsWithoutLoader(dir, imageLoader) {
  if (dir.loaderParams && imageLoader === noopImageLoader) {
    console.warn(formatRuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`loaderParams\` attribute is present but no image loader is configured (i.e. the default one is being used), which means that the loaderParams data will not be consumed and will not affect the URL. To fix this, provide a custom loader or remove the \`loaderParams\` attribute from the image.`));
  }
}
function assetPriorityCountBelowThreshold(appRef) {
  return __async(this, null, function* () {
    if (IMGS_WITH_PRIORITY_ATTR_COUNT === 0) {
      IMGS_WITH_PRIORITY_ATTR_COUNT++;
      yield whenStable(appRef);
      if (IMGS_WITH_PRIORITY_ATTR_COUNT > PRIORITY_COUNT_THRESHOLD) {
        console.warn(formatRuntimeError(2966, `NgOptimizedImage: The "priority" attribute is set to true more than ${PRIORITY_COUNT_THRESHOLD} times (${IMGS_WITH_PRIORITY_ATTR_COUNT} times). Marking too many images as "high" priority can hurt your application's LCP (https://web.dev/lcp). "Priority" should only be set on the image expected to be the page's LCP element.`));
      }
    } else {
      IMGS_WITH_PRIORITY_ATTR_COUNT++;
    }
  });
}
function assertPlaceholderDimensions(dir, imgElement) {
  const computedStyle = window.getComputedStyle(imgElement);
  let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
  let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
  if (renderedWidth > PLACEHOLDER_DIMENSION_LIMIT || renderedHeight > PLACEHOLDER_DIMENSION_LIMIT) {
    console.warn(formatRuntimeError(2967, `${imgDirectiveDetails(dir.ngSrc)} it uses a placeholder image, but at least one of the dimensions attribute (height or width) exceeds the limit of ${PLACEHOLDER_DIMENSION_LIMIT}px. To fix this, use a smaller image as a placeholder.`));
  }
}
function round(input2) {
  return Number.isInteger(input2) ? input2 : input2.toFixed(2);
}
function unwrapSafeUrl(value) {
  if (typeof value === "string") {
    return value;
  }
  return unwrapSafeValue(value);
}
function booleanOrUrlAttribute(value) {
  if (typeof value === "string" && value !== "true" && value !== "false" && value !== "") {
    return value;
  }
  return booleanAttribute(value);
}

// node_modules/@angular/common/fesm2022/http.mjs
var HttpHandler = class {
};
var HttpBackend = class {
};
var HttpHeaders = class _HttpHeaders {
  /**  Constructs a new HTTP header object with the given values.*/
  constructor(headers) {
    this.normalizedNames = /* @__PURE__ */ new Map();
    this.lazyUpdate = null;
    if (!headers) {
      this.headers = /* @__PURE__ */ new Map();
    } else if (typeof headers === "string") {
      this.lazyInit = () => {
        this.headers = /* @__PURE__ */ new Map();
        headers.split("\n").forEach((line) => {
          const index = line.indexOf(":");
          if (index > 0) {
            const name = line.slice(0, index);
            const key = name.toLowerCase();
            const value = line.slice(index + 1).trim();
            this.maybeSetNormalizedName(name, key);
            if (this.headers.has(key)) {
              this.headers.get(key).push(value);
            } else {
              this.headers.set(key, [value]);
            }
          }
        });
      };
    } else if (typeof Headers !== "undefined" && headers instanceof Headers) {
      this.headers = /* @__PURE__ */ new Map();
      headers.forEach((values, name) => {
        this.setHeaderEntries(name, values);
      });
    } else {
      this.lazyInit = () => {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          assertValidHeaders(headers);
        }
        this.headers = /* @__PURE__ */ new Map();
        Object.entries(headers).forEach(([name, values]) => {
          this.setHeaderEntries(name, values);
        });
      };
    }
  }
  /**
   * Checks for existence of a given header.
   *
   * @param name The header name to check for existence.
   *
   * @returns True if the header exists, false otherwise.
   */
  has(name) {
    this.init();
    return this.headers.has(name.toLowerCase());
  }
  /**
   * Retrieves the first value of a given header.
   *
   * @param name The header name.
   *
   * @returns The value string if the header exists, null otherwise
   */
  get(name) {
    this.init();
    const values = this.headers.get(name.toLowerCase());
    return values && values.length > 0 ? values[0] : null;
  }
  /**
   * Retrieves the names of the headers.
   *
   * @returns A list of header names.
   */
  keys() {
    this.init();
    return Array.from(this.normalizedNames.values());
  }
  /**
   * Retrieves a list of values for a given header.
   *
   * @param name The header name from which to retrieve values.
   *
   * @returns A string of values if the header exists, null otherwise.
   */
  getAll(name) {
    this.init();
    return this.headers.get(name.toLowerCase()) || null;
  }
  /**
   * Appends a new value to the existing set of values for a header
   * and returns them in a clone of the original instance.
   *
   * @param name The header name for which to append the values.
   * @param value The value to append.
   *
   * @returns A clone of the HTTP headers object with the value appended to the given header.
   */
  append(name, value) {
    return this.clone({
      name,
      value,
      op: "a"
    });
  }
  /**
   * Sets or modifies a value for a given header in a clone of the original instance.
   * If the header already exists, its value is replaced with the given value
   * in the returned object.
   *
   * @param name The header name.
   * @param value The value or values to set or override for the given header.
   *
   * @returns A clone of the HTTP headers object with the newly set header value.
   */
  set(name, value) {
    return this.clone({
      name,
      value,
      op: "s"
    });
  }
  /**
   * Deletes values for a given header in a clone of the original instance.
   *
   * @param name The header name.
   * @param value The value or values to delete for the given header.
   *
   * @returns A clone of the HTTP headers object with the given value deleted.
   */
  delete(name, value) {
    return this.clone({
      name,
      value,
      op: "d"
    });
  }
  maybeSetNormalizedName(name, lcName) {
    if (!this.normalizedNames.has(lcName)) {
      this.normalizedNames.set(lcName, name);
    }
  }
  init() {
    if (!!this.lazyInit) {
      if (this.lazyInit instanceof _HttpHeaders) {
        this.copyFrom(this.lazyInit);
      } else {
        this.lazyInit();
      }
      this.lazyInit = null;
      if (!!this.lazyUpdate) {
        this.lazyUpdate.forEach((update) => this.applyUpdate(update));
        this.lazyUpdate = null;
      }
    }
  }
  copyFrom(other) {
    other.init();
    Array.from(other.headers.keys()).forEach((key) => {
      this.headers.set(key, other.headers.get(key));
      this.normalizedNames.set(key, other.normalizedNames.get(key));
    });
  }
  clone(update) {
    const clone = new _HttpHeaders();
    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof _HttpHeaders ? this.lazyInit : this;
    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
    return clone;
  }
  applyUpdate(update) {
    const key = update.name.toLowerCase();
    switch (update.op) {
      case "a":
      case "s":
        let value = update.value;
        if (typeof value === "string") {
          value = [value];
        }
        if (value.length === 0) {
          return;
        }
        this.maybeSetNormalizedName(update.name, key);
        const base = (update.op === "a" ? this.headers.get(key) : void 0) || [];
        base.push(...value);
        this.headers.set(key, base);
        break;
      case "d":
        const toDelete = update.value;
        if (!toDelete) {
          this.headers.delete(key);
          this.normalizedNames.delete(key);
        } else {
          let existing = this.headers.get(key);
          if (!existing) {
            return;
          }
          existing = existing.filter((value2) => toDelete.indexOf(value2) === -1);
          if (existing.length === 0) {
            this.headers.delete(key);
            this.normalizedNames.delete(key);
          } else {
            this.headers.set(key, existing);
          }
        }
        break;
    }
  }
  setHeaderEntries(name, values) {
    const headerValues = (Array.isArray(values) ? values : [values]).map((value) => value.toString());
    const key = name.toLowerCase();
    this.headers.set(key, headerValues);
    this.maybeSetNormalizedName(name, key);
  }
  /**
   * @internal
   */
  forEach(fn) {
    this.init();
    Array.from(this.normalizedNames.keys()).forEach((key) => fn(this.normalizedNames.get(key), this.headers.get(key)));
  }
};
function assertValidHeaders(headers) {
  for (const [key, value] of Object.entries(headers)) {
    if (!(typeof value === "string" || typeof value === "number") && !Array.isArray(value)) {
      throw new Error(`Unexpected value of the \`${key}\` header provided. Expecting either a string, a number or an array, but got: \`${value}\`.`);
    }
  }
}
var HttpUrlEncodingCodec = class {
  /**
   * Encodes a key name for a URL parameter or query-string.
   * @param key The key name.
   * @returns The encoded key name.
   */
  encodeKey(key) {
    return standardEncoding(key);
  }
  /**
   * Encodes the value of a URL parameter or query-string.
   * @param value The value.
   * @returns The encoded value.
   */
  encodeValue(value) {
    return standardEncoding(value);
  }
  /**
   * Decodes an encoded URL parameter or query-string key.
   * @param key The encoded key name.
   * @returns The decoded key name.
   */
  decodeKey(key) {
    return decodeURIComponent(key);
  }
  /**
   * Decodes an encoded URL parameter or query-string value.
   * @param value The encoded value.
   * @returns The decoded value.
   */
  decodeValue(value) {
    return decodeURIComponent(value);
  }
};
function paramParser(rawParams, codec) {
  const map2 = /* @__PURE__ */ new Map();
  if (rawParams.length > 0) {
    const params = rawParams.replace(/^\?/, "").split("&");
    params.forEach((param) => {
      const eqIdx = param.indexOf("=");
      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ""] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];
      const list = map2.get(key) || [];
      list.push(val);
      map2.set(key, list);
    });
  }
  return map2;
}
var STANDARD_ENCODING_REGEX = /%(\d[a-f0-9])/gi;
var STANDARD_ENCODING_REPLACEMENTS = {
  "40": "@",
  "3A": ":",
  "24": "$",
  "2C": ",",
  "3B": ";",
  "3D": "=",
  "3F": "?",
  "2F": "/"
};
function standardEncoding(v) {
  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);
}
function valueToString(value) {
  return `${value}`;
}
var HttpParams = class _HttpParams {
  constructor(options = {}) {
    this.updates = null;
    this.cloneFrom = null;
    this.encoder = options.encoder || new HttpUrlEncodingCodec();
    if (!!options.fromString) {
      if (!!options.fromObject) {
        throw new Error(`Cannot specify both fromString and fromObject.`);
      }
      this.map = paramParser(options.fromString, this.encoder);
    } else if (!!options.fromObject) {
      this.map = /* @__PURE__ */ new Map();
      Object.keys(options.fromObject).forEach((key) => {
        const value = options.fromObject[key];
        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];
        this.map.set(key, values);
      });
    } else {
      this.map = null;
    }
  }
  /**
   * Reports whether the body includes one or more values for a given parameter.
   * @param param The parameter name.
   * @returns True if the parameter has one or more values,
   * false if it has no value or is not present.
   */
  has(param) {
    this.init();
    return this.map.has(param);
  }
  /**
   * Retrieves the first value for a parameter.
   * @param param The parameter name.
   * @returns The first value of the given parameter,
   * or `null` if the parameter is not present.
   */
  get(param) {
    this.init();
    const res = this.map.get(param);
    return !!res ? res[0] : null;
  }
  /**
   * Retrieves all values for a  parameter.
   * @param param The parameter name.
   * @returns All values in a string array,
   * or `null` if the parameter not present.
   */
  getAll(param) {
    this.init();
    return this.map.get(param) || null;
  }
  /**
   * Retrieves all the parameters for this body.
   * @returns The parameter names in a string array.
   */
  keys() {
    this.init();
    return Array.from(this.map.keys());
  }
  /**
   * Appends a new value to existing values for a parameter.
   * @param param The parameter name.
   * @param value The new value to add.
   * @return A new body with the appended value.
   */
  append(param, value) {
    return this.clone({
      param,
      value,
      op: "a"
    });
  }
  /**
   * Constructs a new body with appended values for the given parameter name.
   * @param params parameters and values
   * @return A new body with the new value.
   */
  appendAll(params) {
    const updates = [];
    Object.keys(params).forEach((param) => {
      const value = params[param];
      if (Array.isArray(value)) {
        value.forEach((_value) => {
          updates.push({
            param,
            value: _value,
            op: "a"
          });
        });
      } else {
        updates.push({
          param,
          value,
          op: "a"
        });
      }
    });
    return this.clone(updates);
  }
  /**
   * Replaces the value for a parameter.
   * @param param The parameter name.
   * @param value The new value.
   * @return A new body with the new value.
   */
  set(param, value) {
    return this.clone({
      param,
      value,
      op: "s"
    });
  }
  /**
   * Removes a given value or all values from a parameter.
   * @param param The parameter name.
   * @param value The value to remove, if provided.
   * @return A new body with the given value removed, or with all values
   * removed if no value is specified.
   */
  delete(param, value) {
    return this.clone({
      param,
      value,
      op: "d"
    });
  }
  /**
   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are
   * separated by `&`s.
   */
  toString() {
    this.init();
    return this.keys().map((key) => {
      const eKey = this.encoder.encodeKey(key);
      return this.map.get(key).map((value) => eKey + "=" + this.encoder.encodeValue(value)).join("&");
    }).filter((param) => param !== "").join("&");
  }
  clone(update) {
    const clone = new _HttpParams({
      encoder: this.encoder
    });
    clone.cloneFrom = this.cloneFrom || this;
    clone.updates = (this.updates || []).concat(update);
    return clone;
  }
  init() {
    if (this.map === null) {
      this.map = /* @__PURE__ */ new Map();
    }
    if (this.cloneFrom !== null) {
      this.cloneFrom.init();
      this.cloneFrom.keys().forEach((key) => this.map.set(key, this.cloneFrom.map.get(key)));
      this.updates.forEach((update) => {
        switch (update.op) {
          case "a":
          case "s":
            const base = (update.op === "a" ? this.map.get(update.param) : void 0) || [];
            base.push(valueToString(update.value));
            this.map.set(update.param, base);
            break;
          case "d":
            if (update.value !== void 0) {
              let base2 = this.map.get(update.param) || [];
              const idx = base2.indexOf(valueToString(update.value));
              if (idx !== -1) {
                base2.splice(idx, 1);
              }
              if (base2.length > 0) {
                this.map.set(update.param, base2);
              } else {
                this.map.delete(update.param);
              }
            } else {
              this.map.delete(update.param);
              break;
            }
        }
      });
      this.cloneFrom = this.updates = null;
    }
  }
};
var HttpContext = class {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  /**
   * Store a value in the context. If a value is already present it will be overwritten.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   * @param value The value to store.
   *
   * @returns A reference to itself for easy chaining.
   */
  set(token, value) {
    this.map.set(token, value);
    return this;
  }
  /**
   * Retrieve the value associated with the given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns The stored value or default if one is defined.
   */
  get(token) {
    if (!this.map.has(token)) {
      this.map.set(token, token.defaultValue());
    }
    return this.map.get(token);
  }
  /**
   * Delete the value associated with the given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns A reference to itself for easy chaining.
   */
  delete(token) {
    this.map.delete(token);
    return this;
  }
  /**
   * Checks for existence of a given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns True if the token exists, false otherwise.
   */
  has(token) {
    return this.map.has(token);
  }
  /**
   * @returns a list of tokens currently stored in the context.
   */
  keys() {
    return this.map.keys();
  }
};
function mightHaveBody(method) {
  switch (method) {
    case "DELETE":
    case "GET":
    case "HEAD":
    case "OPTIONS":
    case "JSONP":
      return false;
    default:
      return true;
  }
}
function isArrayBuffer(value) {
  return typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer;
}
function isBlob(value) {
  return typeof Blob !== "undefined" && value instanceof Blob;
}
function isFormData(value) {
  return typeof FormData !== "undefined" && value instanceof FormData;
}
function isUrlSearchParams(value) {
  return typeof URLSearchParams !== "undefined" && value instanceof URLSearchParams;
}
var HttpRequest = class _HttpRequest {
  constructor(method, url, third, fourth) {
    this.url = url;
    this.body = null;
    this.reportProgress = false;
    this.withCredentials = false;
    this.responseType = "json";
    this.method = method.toUpperCase();
    let options;
    if (mightHaveBody(this.method) || !!fourth) {
      this.body = third !== void 0 ? third : null;
      options = fourth;
    } else {
      options = third;
    }
    if (options) {
      this.reportProgress = !!options.reportProgress;
      this.withCredentials = !!options.withCredentials;
      if (!!options.responseType) {
        this.responseType = options.responseType;
      }
      if (!!options.headers) {
        this.headers = options.headers;
      }
      if (!!options.context) {
        this.context = options.context;
      }
      if (!!options.params) {
        this.params = options.params;
      }
      this.transferCache = options.transferCache;
    }
    this.headers ??= new HttpHeaders();
    this.context ??= new HttpContext();
    if (!this.params) {
      this.params = new HttpParams();
      this.urlWithParams = url;
    } else {
      const params = this.params.toString();
      if (params.length === 0) {
        this.urlWithParams = url;
      } else {
        const qIdx = url.indexOf("?");
        const sep = qIdx === -1 ? "?" : qIdx < url.length - 1 ? "&" : "";
        this.urlWithParams = url + sep + params;
      }
    }
  }
  /**
   * Transform the free-form body into a serialized format suitable for
   * transmission to the server.
   */
  serializeBody() {
    if (this.body === null) {
      return null;
    }
    if (typeof this.body === "string" || isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body)) {
      return this.body;
    }
    if (this.body instanceof HttpParams) {
      return this.body.toString();
    }
    if (typeof this.body === "object" || typeof this.body === "boolean" || Array.isArray(this.body)) {
      return JSON.stringify(this.body);
    }
    return this.body.toString();
  }
  /**
   * Examine the body and attempt to infer an appropriate MIME type
   * for it.
   *
   * If no such type can be inferred, this method will return `null`.
   */
  detectContentTypeHeader() {
    if (this.body === null) {
      return null;
    }
    if (isFormData(this.body)) {
      return null;
    }
    if (isBlob(this.body)) {
      return this.body.type || null;
    }
    if (isArrayBuffer(this.body)) {
      return null;
    }
    if (typeof this.body === "string") {
      return "text/plain";
    }
    if (this.body instanceof HttpParams) {
      return "application/x-www-form-urlencoded;charset=UTF-8";
    }
    if (typeof this.body === "object" || typeof this.body === "number" || typeof this.body === "boolean") {
      return "application/json";
    }
    return null;
  }
  clone(update = {}) {
    const method = update.method || this.method;
    const url = update.url || this.url;
    const responseType = update.responseType || this.responseType;
    const transferCache = update.transferCache ?? this.transferCache;
    const body = update.body !== void 0 ? update.body : this.body;
    const withCredentials = update.withCredentials ?? this.withCredentials;
    const reportProgress = update.reportProgress ?? this.reportProgress;
    let headers = update.headers || this.headers;
    let params = update.params || this.params;
    const context2 = update.context ?? this.context;
    if (update.setHeaders !== void 0) {
      headers = Object.keys(update.setHeaders).reduce((headers2, name) => headers2.set(name, update.setHeaders[name]), headers);
    }
    if (update.setParams) {
      params = Object.keys(update.setParams).reduce((params2, param) => params2.set(param, update.setParams[param]), params);
    }
    return new _HttpRequest(method, url, body, {
      params,
      headers,
      context: context2,
      reportProgress,
      responseType,
      withCredentials,
      transferCache
    });
  }
};
var HttpEventType;
(function(HttpEventType2) {
  HttpEventType2[HttpEventType2["Sent"] = 0] = "Sent";
  HttpEventType2[HttpEventType2["UploadProgress"] = 1] = "UploadProgress";
  HttpEventType2[HttpEventType2["ResponseHeader"] = 2] = "ResponseHeader";
  HttpEventType2[HttpEventType2["DownloadProgress"] = 3] = "DownloadProgress";
  HttpEventType2[HttpEventType2["Response"] = 4] = "Response";
  HttpEventType2[HttpEventType2["User"] = 5] = "User";
})(HttpEventType || (HttpEventType = {}));
var HttpResponseBase = class {
  /**
   * Super-constructor for all responses.
   *
   * The single parameter accepted is an initialization hash. Any properties
   * of the response passed there will override the default values.
   */
  constructor(init, defaultStatus = 200, defaultStatusText = "OK") {
    this.headers = init.headers || new HttpHeaders();
    this.status = init.status !== void 0 ? init.status : defaultStatus;
    this.statusText = init.statusText || defaultStatusText;
    this.url = init.url || null;
    this.ok = this.status >= 200 && this.status < 300;
  }
};
var HttpHeaderResponse = class _HttpHeaderResponse extends HttpResponseBase {
  /**
   * Create a new `HttpHeaderResponse` with the given parameters.
   */
  constructor(init = {}) {
    super(init);
    this.type = HttpEventType.ResponseHeader;
  }
  /**
   * Copy this `HttpHeaderResponse`, overriding its contents with the
   * given parameter hash.
   */
  clone(update = {}) {
    return new _HttpHeaderResponse({
      headers: update.headers || this.headers,
      status: update.status !== void 0 ? update.status : this.status,
      statusText: update.statusText || this.statusText,
      url: update.url || this.url || void 0
    });
  }
};
var HttpResponse = class _HttpResponse extends HttpResponseBase {
  /**
   * Construct a new `HttpResponse`.
   */
  constructor(init = {}) {
    super(init);
    this.type = HttpEventType.Response;
    this.body = init.body !== void 0 ? init.body : null;
  }
  clone(update = {}) {
    return new _HttpResponse({
      body: update.body !== void 0 ? update.body : this.body,
      headers: update.headers || this.headers,
      status: update.status !== void 0 ? update.status : this.status,
      statusText: update.statusText || this.statusText,
      url: update.url || this.url || void 0
    });
  }
};
var HttpErrorResponse = class extends HttpResponseBase {
  constructor(init) {
    super(init, 0, "Unknown Error");
    this.name = "HttpErrorResponse";
    this.ok = false;
    if (this.status >= 200 && this.status < 300) {
      this.message = `Http failure during parsing for ${init.url || "(unknown url)"}`;
    } else {
      this.message = `Http failure response for ${init.url || "(unknown url)"}: ${init.status} ${init.statusText}`;
    }
    this.error = init.error || null;
  }
};
var HTTP_STATUS_CODE_OK = 200;
var HTTP_STATUS_CODE_NO_CONTENT = 204;
var HttpStatusCode;
(function(HttpStatusCode2) {
  HttpStatusCode2[HttpStatusCode2["Continue"] = 100] = "Continue";
  HttpStatusCode2[HttpStatusCode2["SwitchingProtocols"] = 101] = "SwitchingProtocols";
  HttpStatusCode2[HttpStatusCode2["Processing"] = 102] = "Processing";
  HttpStatusCode2[HttpStatusCode2["EarlyHints"] = 103] = "EarlyHints";
  HttpStatusCode2[HttpStatusCode2["Ok"] = 200] = "Ok";
  HttpStatusCode2[HttpStatusCode2["Created"] = 201] = "Created";
  HttpStatusCode2[HttpStatusCode2["Accepted"] = 202] = "Accepted";
  HttpStatusCode2[HttpStatusCode2["NonAuthoritativeInformation"] = 203] = "NonAuthoritativeInformation";
  HttpStatusCode2[HttpStatusCode2["NoContent"] = 204] = "NoContent";
  HttpStatusCode2[HttpStatusCode2["ResetContent"] = 205] = "ResetContent";
  HttpStatusCode2[HttpStatusCode2["PartialContent"] = 206] = "PartialContent";
  HttpStatusCode2[HttpStatusCode2["MultiStatus"] = 207] = "MultiStatus";
  HttpStatusCode2[HttpStatusCode2["AlreadyReported"] = 208] = "AlreadyReported";
  HttpStatusCode2[HttpStatusCode2["ImUsed"] = 226] = "ImUsed";
  HttpStatusCode2[HttpStatusCode2["MultipleChoices"] = 300] = "MultipleChoices";
  HttpStatusCode2[HttpStatusCode2["MovedPermanently"] = 301] = "MovedPermanently";
  HttpStatusCode2[HttpStatusCode2["Found"] = 302] = "Found";
  HttpStatusCode2[HttpStatusCode2["SeeOther"] = 303] = "SeeOther";
  HttpStatusCode2[HttpStatusCode2["NotModified"] = 304] = "NotModified";
  HttpStatusCode2[HttpStatusCode2["UseProxy"] = 305] = "UseProxy";
  HttpStatusCode2[HttpStatusCode2["Unused"] = 306] = "Unused";
  HttpStatusCode2[HttpStatusCode2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
  HttpStatusCode2[HttpStatusCode2["PermanentRedirect"] = 308] = "PermanentRedirect";
  HttpStatusCode2[HttpStatusCode2["BadRequest"] = 400] = "BadRequest";
  HttpStatusCode2[HttpStatusCode2["Unauthorized"] = 401] = "Unauthorized";
  HttpStatusCode2[HttpStatusCode2["PaymentRequired"] = 402] = "PaymentRequired";
  HttpStatusCode2[HttpStatusCode2["Forbidden"] = 403] = "Forbidden";
  HttpStatusCode2[HttpStatusCode2["NotFound"] = 404] = "NotFound";
  HttpStatusCode2[HttpStatusCode2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
  HttpStatusCode2[HttpStatusCode2["NotAcceptable"] = 406] = "NotAcceptable";
  HttpStatusCode2[HttpStatusCode2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
  HttpStatusCode2[HttpStatusCode2["RequestTimeout"] = 408] = "RequestTimeout";
  HttpStatusCode2[HttpStatusCode2["Conflict"] = 409] = "Conflict";
  HttpStatusCode2[HttpStatusCode2["Gone"] = 410] = "Gone";
  HttpStatusCode2[HttpStatusCode2["LengthRequired"] = 411] = "LengthRequired";
  HttpStatusCode2[HttpStatusCode2["PreconditionFailed"] = 412] = "PreconditionFailed";
  HttpStatusCode2[HttpStatusCode2["PayloadTooLarge"] = 413] = "PayloadTooLarge";
  HttpStatusCode2[HttpStatusCode2["UriTooLong"] = 414] = "UriTooLong";
  HttpStatusCode2[HttpStatusCode2["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
  HttpStatusCode2[HttpStatusCode2["RangeNotSatisfiable"] = 416] = "RangeNotSatisfiable";
  HttpStatusCode2[HttpStatusCode2["ExpectationFailed"] = 417] = "ExpectationFailed";
  HttpStatusCode2[HttpStatusCode2["ImATeapot"] = 418] = "ImATeapot";
  HttpStatusCode2[HttpStatusCode2["MisdirectedRequest"] = 421] = "MisdirectedRequest";
  HttpStatusCode2[HttpStatusCode2["UnprocessableEntity"] = 422] = "UnprocessableEntity";
  HttpStatusCode2[HttpStatusCode2["Locked"] = 423] = "Locked";
  HttpStatusCode2[HttpStatusCode2["FailedDependency"] = 424] = "FailedDependency";
  HttpStatusCode2[HttpStatusCode2["TooEarly"] = 425] = "TooEarly";
  HttpStatusCode2[HttpStatusCode2["UpgradeRequired"] = 426] = "UpgradeRequired";
  HttpStatusCode2[HttpStatusCode2["PreconditionRequired"] = 428] = "PreconditionRequired";
  HttpStatusCode2[HttpStatusCode2["TooManyRequests"] = 429] = "TooManyRequests";
  HttpStatusCode2[HttpStatusCode2["RequestHeaderFieldsTooLarge"] = 431] = "RequestHeaderFieldsTooLarge";
  HttpStatusCode2[HttpStatusCode2["UnavailableForLegalReasons"] = 451] = "UnavailableForLegalReasons";
  HttpStatusCode2[HttpStatusCode2["InternalServerError"] = 500] = "InternalServerError";
  HttpStatusCode2[HttpStatusCode2["NotImplemented"] = 501] = "NotImplemented";
  HttpStatusCode2[HttpStatusCode2["BadGateway"] = 502] = "BadGateway";
  HttpStatusCode2[HttpStatusCode2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
  HttpStatusCode2[HttpStatusCode2["GatewayTimeout"] = 504] = "GatewayTimeout";
  HttpStatusCode2[HttpStatusCode2["HttpVersionNotSupported"] = 505] = "HttpVersionNotSupported";
  HttpStatusCode2[HttpStatusCode2["VariantAlsoNegotiates"] = 506] = "VariantAlsoNegotiates";
  HttpStatusCode2[HttpStatusCode2["InsufficientStorage"] = 507] = "InsufficientStorage";
  HttpStatusCode2[HttpStatusCode2["LoopDetected"] = 508] = "LoopDetected";
  HttpStatusCode2[HttpStatusCode2["NotExtended"] = 510] = "NotExtended";
  HttpStatusCode2[HttpStatusCode2["NetworkAuthenticationRequired"] = 511] = "NetworkAuthenticationRequired";
})(HttpStatusCode || (HttpStatusCode = {}));
function addBody(options, body) {
  return {
    body,
    headers: options.headers,
    context: options.context,
    observe: options.observe,
    params: options.params,
    reportProgress: options.reportProgress,
    responseType: options.responseType,
    withCredentials: options.withCredentials,
    transferCache: options.transferCache
  };
}
var _HttpClient = class _HttpClient {
  constructor(handler) {
    this.handler = handler;
  }
  /**
   * Constructs an observable for a generic HTTP request that, when subscribed,
   * fires the request through the chain of registered interceptors and on to the
   * server.
   *
   * You can pass an `HttpRequest` directly as the only parameter. In this case,
   * the call returns an observable of the raw `HttpEvent` stream.
   *
   * Alternatively you can pass an HTTP method as the first parameter,
   * a URL string as the second, and an options hash containing the request body as the third.
   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the
   * type of returned observable.
   *   * The `responseType` value determines how a successful response body is parsed.
   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting
   * object as a type parameter to the call.
   *
   * The `observe` value determines the return type, according to what you are interested in
   * observing.
   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including
   * progress events by default.
   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,
   * where the `T` parameter depends on the `responseType` and any optionally provided type
   * parameter.
   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.
   *
   */
  request(first2, url, options = {}) {
    let req;
    if (first2 instanceof HttpRequest) {
      req = first2;
    } else {
      let headers = void 0;
      if (options.headers instanceof HttpHeaders) {
        headers = options.headers;
      } else {
        headers = new HttpHeaders(options.headers);
      }
      let params = void 0;
      if (!!options.params) {
        if (options.params instanceof HttpParams) {
          params = options.params;
        } else {
          params = new HttpParams({
            fromObject: options.params
          });
        }
      }
      req = new HttpRequest(first2, url, options.body !== void 0 ? options.body : null, {
        headers,
        context: options.context,
        params,
        reportProgress: options.reportProgress,
        // By default, JSON is assumed to be returned for all calls.
        responseType: options.responseType || "json",
        withCredentials: options.withCredentials,
        transferCache: options.transferCache
      });
    }
    const events$ = of(req).pipe(concatMap((req2) => this.handler.handle(req2)));
    if (first2 instanceof HttpRequest || options.observe === "events") {
      return events$;
    }
    const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));
    switch (options.observe || "body") {
      case "body":
        switch (req.responseType) {
          case "arraybuffer":
            return res$.pipe(map((res) => {
              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                throw new Error("Response is not an ArrayBuffer.");
              }
              return res.body;
            }));
          case "blob":
            return res$.pipe(map((res) => {
              if (res.body !== null && !(res.body instanceof Blob)) {
                throw new Error("Response is not a Blob.");
              }
              return res.body;
            }));
          case "text":
            return res$.pipe(map((res) => {
              if (res.body !== null && typeof res.body !== "string") {
                throw new Error("Response is not a string.");
              }
              return res.body;
            }));
          case "json":
          default:
            return res$.pipe(map((res) => res.body));
        }
      case "response":
        return res$;
      default:
        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);
    }
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `DELETE` request to execute on the server. See the individual overloads for
   * details on the return type.
   *
   * @param url     The endpoint URL.
   * @param options The HTTP options to send with the request.
   *
   */
  delete(url, options = {}) {
    return this.request("DELETE", url, options);
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `GET` request to execute on the server. See the individual overloads for
   * details on the return type.
   */
  get(url, options = {}) {
    return this.request("GET", url, options);
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `HEAD` request to execute on the server. The `HEAD` method returns
   * meta information about the resource without transferring the
   * resource itself. See the individual overloads for
   * details on the return type.
   */
  head(url, options = {}) {
    return this.request("HEAD", url, options);
  }
  /**
   * Constructs an `Observable` that, when subscribed, causes a request with the special method
   * `JSONP` to be dispatched via the interceptor pipeline.
   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain
   * API endpoints that don't support newer,
   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.
   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the
   * requests even if the API endpoint is not located on the same domain (origin) as the client-side
   * application making the request.
   * The endpoint API must support JSONP callback for JSONP requests to work.
   * The resource API returns the JSON response wrapped in a callback function.
   * You can pass the callback function name as one of the query parameters.
   * Note that JSONP requests can only be used with `GET` requests.
   *
   * @param url The resource URL.
   * @param callbackParam The callback function name.
   *
   */
  jsonp(url, callbackParam) {
    return this.request("JSONP", url, {
      params: new HttpParams().append(callbackParam, "JSONP_CALLBACK"),
      observe: "body",
      responseType: "json"
    });
  }
  /**
   * Constructs an `Observable` that, when subscribed, causes the configured
   * `OPTIONS` request to execute on the server. This method allows the client
   * to determine the supported HTTP methods and other capabilities of an endpoint,
   * without implying a resource action. See the individual overloads for
   * details on the return type.
   */
  options(url, options = {}) {
    return this.request("OPTIONS", url, options);
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `PATCH` request to execute on the server. See the individual overloads for
   * details on the return type.
   */
  patch(url, body, options = {}) {
    return this.request("PATCH", url, addBody(options, body));
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `POST` request to execute on the server. The server responds with the location of
   * the replaced resource. See the individual overloads for
   * details on the return type.
   */
  post(url, body, options = {}) {
    return this.request("POST", url, addBody(options, body));
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource
   * with a new set of values.
   * See the individual overloads for details on the return type.
   */
  put(url, body, options = {}) {
    return this.request("PUT", url, addBody(options, body));
  }
};
_HttpClient.\u0275fac = function HttpClient_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HttpClient)(\u0275\u0275inject(HttpHandler));
};
_HttpClient.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HttpClient,
  factory: _HttpClient.\u0275fac
});
var HttpClient = _HttpClient;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpClient, [{
    type: Injectable
  }], () => [{
    type: HttpHandler
  }], null);
})();
var XSSI_PREFIX$1 = /^\)\]\}',?\n/;
var REQUEST_URL_HEADER = `X-Request-URL`;
function getResponseUrl$1(response) {
  if (response.url) {
    return response.url;
  }
  const xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();
  return response.headers.get(xRequestUrl);
}
var _FetchBackend = class _FetchBackend {
  constructor() {
    this.fetchImpl = inject(FetchFactory, {
      optional: true
    })?.fetch ?? fetch.bind(globalThis);
    this.ngZone = inject(NgZone);
  }
  handle(request) {
    return new Observable((observer) => {
      const aborter = new AbortController();
      this.doRequest(request, aborter.signal, observer).then(noop3, (error) => observer.error(new HttpErrorResponse({
        error
      })));
      return () => aborter.abort();
    });
  }
  doRequest(request, signal2, observer) {
    return __async(this, null, function* () {
      const init = this.createRequestInit(request);
      let response;
      try {
        const fetchPromise = this.ngZone.runOutsideAngular(() => this.fetchImpl(request.urlWithParams, __spreadValues({
          signal: signal2
        }, init)));
        silenceSuperfluousUnhandledPromiseRejection(fetchPromise);
        observer.next({
          type: HttpEventType.Sent
        });
        response = yield fetchPromise;
      } catch (error) {
        observer.error(new HttpErrorResponse({
          error,
          status: error.status ?? 0,
          statusText: error.statusText,
          url: request.urlWithParams,
          headers: error.headers
        }));
        return;
      }
      const headers = new HttpHeaders(response.headers);
      const statusText = response.statusText;
      const url = getResponseUrl$1(response) ?? request.urlWithParams;
      let status = response.status;
      let body = null;
      if (request.reportProgress) {
        observer.next(new HttpHeaderResponse({
          headers,
          status,
          statusText,
          url
        }));
      }
      if (response.body) {
        const contentLength = response.headers.get("content-length");
        const chunks = [];
        const reader = response.body.getReader();
        let receivedLength = 0;
        let decoder;
        let partialText;
        const reqZone = typeof Zone !== "undefined" && Zone.current;
        yield this.ngZone.runOutsideAngular(() => __async(this, null, function* () {
          while (true) {
            const {
              done,
              value
            } = yield reader.read();
            if (done) {
              break;
            }
            chunks.push(value);
            receivedLength += value.length;
            if (request.reportProgress) {
              partialText = request.responseType === "text" ? (partialText ?? "") + (decoder ??= new TextDecoder()).decode(value, {
                stream: true
              }) : void 0;
              const reportProgress = () => observer.next({
                type: HttpEventType.DownloadProgress,
                total: contentLength ? +contentLength : void 0,
                loaded: receivedLength,
                partialText
              });
              reqZone ? reqZone.run(reportProgress) : reportProgress();
            }
          }
        }));
        const chunksAll = this.concatChunks(chunks, receivedLength);
        try {
          const contentType = response.headers.get("Content-Type") ?? "";
          body = this.parseBody(request, chunksAll, contentType);
        } catch (error) {
          observer.error(new HttpErrorResponse({
            error,
            headers: new HttpHeaders(response.headers),
            status: response.status,
            statusText: response.statusText,
            url: getResponseUrl$1(response) ?? request.urlWithParams
          }));
          return;
        }
      }
      if (status === 0) {
        status = body ? HTTP_STATUS_CODE_OK : 0;
      }
      const ok = status >= 200 && status < 300;
      if (ok) {
        observer.next(new HttpResponse({
          body,
          headers,
          status,
          statusText,
          url
        }));
        observer.complete();
      } else {
        observer.error(new HttpErrorResponse({
          error: body,
          headers,
          status,
          statusText,
          url
        }));
      }
    });
  }
  parseBody(request, binContent, contentType) {
    switch (request.responseType) {
      case "json":
        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, "");
        return text === "" ? null : JSON.parse(text);
      case "text":
        return new TextDecoder().decode(binContent);
      case "blob":
        return new Blob([binContent], {
          type: contentType
        });
      case "arraybuffer":
        return binContent.buffer;
    }
  }
  createRequestInit(req) {
    const headers = {};
    const credentials = req.withCredentials ? "include" : void 0;
    req.headers.forEach((name, values) => headers[name] = values.join(","));
    if (!req.headers.has("Accept")) {
      headers["Accept"] = "application/json, text/plain, */*";
    }
    if (!req.headers.has("Content-Type")) {
      const detectedType = req.detectContentTypeHeader();
      if (detectedType !== null) {
        headers["Content-Type"] = detectedType;
      }
    }
    return {
      body: req.serializeBody(),
      method: req.method,
      headers,
      credentials
    };
  }
  concatChunks(chunks, totalLength) {
    const chunksAll = new Uint8Array(totalLength);
    let position = 0;
    for (const chunk of chunks) {
      chunksAll.set(chunk, position);
      position += chunk.length;
    }
    return chunksAll;
  }
};
_FetchBackend.\u0275fac = function FetchBackend_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _FetchBackend)();
};
_FetchBackend.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _FetchBackend,
  factory: _FetchBackend.\u0275fac
});
var FetchBackend = _FetchBackend;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FetchBackend, [{
    type: Injectable
  }], null, null);
})();
var FetchFactory = class {
};
function noop3() {
}
function silenceSuperfluousUnhandledPromiseRejection(promise) {
  promise.then(noop3, noop3);
}
function interceptorChainEndFn(req, finalHandlerFn) {
  return finalHandlerFn(req);
}
function adaptLegacyInterceptorToChain(chainTailFn, interceptor) {
  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {
    handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn)
  });
}
function chainedInterceptorFn(chainTailFn, interceptorFn, injector) {
  return (initialRequest, finalHandlerFn) => runInInjectionContext(injector, () => interceptorFn(initialRequest, (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn)));
}
var HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? "HTTP_INTERCEPTORS" : "");
var HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? "HTTP_INTERCEPTOR_FNS" : "");
var HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? "HTTP_ROOT_INTERCEPTOR_FNS" : "");
var REQUESTS_CONTRIBUTE_TO_STABILITY = new InjectionToken(ngDevMode ? "REQUESTS_CONTRIBUTE_TO_STABILITY" : "", {
  providedIn: "root",
  factory: () => true
});
function legacyInterceptorFnFactory() {
  let chain = null;
  return (req, handler) => {
    if (chain === null) {
      const interceptors = inject(HTTP_INTERCEPTORS, {
        optional: true
      }) ?? [];
      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);
    }
    const pendingTasks = inject(PendingTasks);
    const contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);
    if (contributeToStability) {
      const taskId = pendingTasks.add();
      return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));
    } else {
      return chain(req, handler);
    }
  };
}
var fetchBackendWarningDisplayed = false;
var _HttpInterceptorHandler = class _HttpInterceptorHandler extends HttpHandler {
  constructor(backend, injector) {
    super();
    this.backend = backend;
    this.injector = injector;
    this.chain = null;
    this.pendingTasks = inject(PendingTasks);
    this.contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !fetchBackendWarningDisplayed) {
      const isServer = isPlatformServer(injector.get(PLATFORM_ID));
      if (isServer && !(this.backend instanceof FetchBackend)) {
        fetchBackendWarningDisplayed = true;
        injector.get(Console).warn(formatRuntimeError(2801, "Angular detected that `HttpClient` is not configured to use `fetch` APIs. It's strongly recommended to enable `fetch` for applications that use Server-Side Rendering for better performance and compatibility. To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` call at the root of the application."));
      }
    }
  }
  handle(initialRequest) {
    if (this.chain === null) {
      const dedupedInterceptorFns = Array.from(/* @__PURE__ */ new Set([...this.injector.get(HTTP_INTERCEPTOR_FNS), ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, [])]));
      this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);
    }
    if (this.contributeToStability) {
      const taskId = this.pendingTasks.add();
      return this.chain(initialRequest, (downstreamRequest) => this.backend.handle(downstreamRequest)).pipe(finalize(() => this.pendingTasks.remove(taskId)));
    } else {
      return this.chain(initialRequest, (downstreamRequest) => this.backend.handle(downstreamRequest));
    }
  }
};
_HttpInterceptorHandler.\u0275fac = function HttpInterceptorHandler_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HttpInterceptorHandler)(\u0275\u0275inject(HttpBackend), \u0275\u0275inject(EnvironmentInjector));
};
_HttpInterceptorHandler.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HttpInterceptorHandler,
  factory: _HttpInterceptorHandler.\u0275fac
});
var HttpInterceptorHandler = _HttpInterceptorHandler;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpInterceptorHandler, [{
    type: Injectable
  }], () => [{
    type: HttpBackend
  }, {
    type: EnvironmentInjector
  }], null);
})();
var nextRequestId = 0;
var foreignDocument;
var JSONP_ERR_NO_CALLBACK = "JSONP injected script did not invoke callback.";
var JSONP_ERR_WRONG_METHOD = "JSONP requests must use JSONP request method.";
var JSONP_ERR_WRONG_RESPONSE_TYPE = "JSONP requests must use Json response type.";
var JSONP_ERR_HEADERS_NOT_SUPPORTED = "JSONP requests do not support headers.";
var JsonpCallbackContext = class {
};
function jsonpCallbackContext() {
  if (typeof window === "object") {
    return window;
  }
  return {};
}
var _JsonpClientBackend = class _JsonpClientBackend {
  constructor(callbackMap, document2) {
    this.callbackMap = callbackMap;
    this.document = document2;
    this.resolvedPromise = Promise.resolve();
  }
  /**
   * Get the name of the next callback method, by incrementing the global `nextRequestId`.
   */
  nextCallback() {
    return `ng_jsonp_callback_${nextRequestId++}`;
  }
  /**
   * Processes a JSONP request and returns an event stream of the results.
   * @param req The request object.
   * @returns An observable of the response events.
   *
   */
  handle(req) {
    if (req.method !== "JSONP") {
      throw new Error(JSONP_ERR_WRONG_METHOD);
    } else if (req.responseType !== "json") {
      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
    }
    if (req.headers.keys().length > 0) {
      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);
    }
    return new Observable((observer) => {
      const callback = this.nextCallback();
      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);
      const node = this.document.createElement("script");
      node.src = url;
      let body = null;
      let finished = false;
      this.callbackMap[callback] = (data) => {
        delete this.callbackMap[callback];
        body = data;
        finished = true;
      };
      const cleanup = () => {
        node.remove();
        delete this.callbackMap[callback];
      };
      const onLoad = (event) => {
        this.resolvedPromise.then(() => {
          cleanup();
          if (!finished) {
            observer.error(new HttpErrorResponse({
              url,
              status: 0,
              statusText: "JSONP Error",
              error: new Error(JSONP_ERR_NO_CALLBACK)
            }));
            return;
          }
          observer.next(new HttpResponse({
            body,
            status: HTTP_STATUS_CODE_OK,
            statusText: "OK",
            url
          }));
          observer.complete();
        });
      };
      const onError = (error) => {
        cleanup();
        observer.error(new HttpErrorResponse({
          error,
          status: 0,
          statusText: "JSONP Error",
          url
        }));
      };
      node.addEventListener("load", onLoad);
      node.addEventListener("error", onError);
      this.document.body.appendChild(node);
      observer.next({
        type: HttpEventType.Sent
      });
      return () => {
        if (!finished) {
          this.removeListeners(node);
        }
        cleanup();
      };
    });
  }
  removeListeners(script) {
    foreignDocument ??= this.document.implementation.createHTMLDocument();
    foreignDocument.adoptNode(script);
  }
};
_JsonpClientBackend.\u0275fac = function JsonpClientBackend_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _JsonpClientBackend)(\u0275\u0275inject(JsonpCallbackContext), \u0275\u0275inject(DOCUMENT2));
};
_JsonpClientBackend.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _JsonpClientBackend,
  factory: _JsonpClientBackend.\u0275fac
});
var JsonpClientBackend = _JsonpClientBackend;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(JsonpClientBackend, [{
    type: Injectable
  }], () => [{
    type: JsonpCallbackContext
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
function jsonpInterceptorFn(req, next) {
  if (req.method === "JSONP") {
    return inject(JsonpClientBackend).handle(req);
  }
  return next(req);
}
var _JsonpInterceptor = class _JsonpInterceptor {
  constructor(injector) {
    this.injector = injector;
  }
  /**
   * Identifies and handles a given JSONP request.
   * @param initialRequest The outgoing request object to handle.
   * @param next The next interceptor in the chain, or the backend
   * if no interceptors remain in the chain.
   * @returns An observable of the event stream.
   */
  intercept(initialRequest, next) {
    return runInInjectionContext(this.injector, () => jsonpInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)));
  }
};
_JsonpInterceptor.\u0275fac = function JsonpInterceptor_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _JsonpInterceptor)(\u0275\u0275inject(EnvironmentInjector));
};
_JsonpInterceptor.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _JsonpInterceptor,
  factory: _JsonpInterceptor.\u0275fac
});
var JsonpInterceptor = _JsonpInterceptor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(JsonpInterceptor, [{
    type: Injectable
  }], () => [{
    type: EnvironmentInjector
  }], null);
})();
var XSSI_PREFIX = /^\)\]\}',?\n/;
function getResponseUrl(xhr) {
  if ("responseURL" in xhr && xhr.responseURL) {
    return xhr.responseURL;
  }
  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
    return xhr.getResponseHeader("X-Request-URL");
  }
  return null;
}
var _HttpXhrBackend = class _HttpXhrBackend {
  constructor(xhrFactory) {
    this.xhrFactory = xhrFactory;
  }
  /**
   * Processes a request and returns a stream of response events.
   * @param req The request object.
   * @returns An observable of the response events.
   */
  handle(req) {
    if (req.method === "JSONP") {
      throw new RuntimeError(-2800, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \`withJsonpSupport()\` call (if \`provideHttpClient()\` is used) or import the \`HttpClientJsonpModule\` in the root NgModule.`);
    }
    const xhrFactory = this.xhrFactory;
    const source = xhrFactory.\u0275loadImpl ? from(xhrFactory.\u0275loadImpl()) : of(null);
    return source.pipe(switchMap(() => {
      return new Observable((observer) => {
        const xhr = xhrFactory.build();
        xhr.open(req.method, req.urlWithParams);
        if (req.withCredentials) {
          xhr.withCredentials = true;
        }
        req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(",")));
        if (!req.headers.has("Accept")) {
          xhr.setRequestHeader("Accept", "application/json, text/plain, */*");
        }
        if (!req.headers.has("Content-Type")) {
          const detectedType = req.detectContentTypeHeader();
          if (detectedType !== null) {
            xhr.setRequestHeader("Content-Type", detectedType);
          }
        }
        if (req.responseType) {
          const responseType = req.responseType.toLowerCase();
          xhr.responseType = responseType !== "json" ? responseType : "text";
        }
        const reqBody = req.serializeBody();
        let headerResponse = null;
        const partialFromXhr = () => {
          if (headerResponse !== null) {
            return headerResponse;
          }
          const statusText = xhr.statusText || "OK";
          const headers = new HttpHeaders(xhr.getAllResponseHeaders());
          const url = getResponseUrl(xhr) || req.url;
          headerResponse = new HttpHeaderResponse({
            headers,
            status: xhr.status,
            statusText,
            url
          });
          return headerResponse;
        };
        const onLoad = () => {
          let {
            headers,
            status,
            statusText,
            url
          } = partialFromXhr();
          let body = null;
          if (status !== HTTP_STATUS_CODE_NO_CONTENT) {
            body = typeof xhr.response === "undefined" ? xhr.responseText : xhr.response;
          }
          if (status === 0) {
            status = !!body ? HTTP_STATUS_CODE_OK : 0;
          }
          let ok = status >= 200 && status < 300;
          if (req.responseType === "json" && typeof body === "string") {
            const originalBody = body;
            body = body.replace(XSSI_PREFIX, "");
            try {
              body = body !== "" ? JSON.parse(body) : null;
            } catch (error) {
              body = originalBody;
              if (ok) {
                ok = false;
                body = {
                  error,
                  text: body
                };
              }
            }
          }
          if (ok) {
            observer.next(new HttpResponse({
              body,
              headers,
              status,
              statusText,
              url: url || void 0
            }));
            observer.complete();
          } else {
            observer.error(new HttpErrorResponse({
              // The error in this case is the response body (error from the server).
              error: body,
              headers,
              status,
              statusText,
              url: url || void 0
            }));
          }
        };
        const onError = (error) => {
          const {
            url
          } = partialFromXhr();
          const res = new HttpErrorResponse({
            error,
            status: xhr.status || 0,
            statusText: xhr.statusText || "Unknown Error",
            url: url || void 0
          });
          observer.error(res);
        };
        let sentHeaders = false;
        const onDownProgress = (event) => {
          if (!sentHeaders) {
            observer.next(partialFromXhr());
            sentHeaders = true;
          }
          let progressEvent = {
            type: HttpEventType.DownloadProgress,
            loaded: event.loaded
          };
          if (event.lengthComputable) {
            progressEvent.total = event.total;
          }
          if (req.responseType === "text" && !!xhr.responseText) {
            progressEvent.partialText = xhr.responseText;
          }
          observer.next(progressEvent);
        };
        const onUpProgress = (event) => {
          let progress = {
            type: HttpEventType.UploadProgress,
            loaded: event.loaded
          };
          if (event.lengthComputable) {
            progress.total = event.total;
          }
          observer.next(progress);
        };
        xhr.addEventListener("load", onLoad);
        xhr.addEventListener("error", onError);
        xhr.addEventListener("timeout", onError);
        xhr.addEventListener("abort", onError);
        if (req.reportProgress) {
          xhr.addEventListener("progress", onDownProgress);
          if (reqBody !== null && xhr.upload) {
            xhr.upload.addEventListener("progress", onUpProgress);
          }
        }
        xhr.send(reqBody);
        observer.next({
          type: HttpEventType.Sent
        });
        return () => {
          xhr.removeEventListener("error", onError);
          xhr.removeEventListener("abort", onError);
          xhr.removeEventListener("load", onLoad);
          xhr.removeEventListener("timeout", onError);
          if (req.reportProgress) {
            xhr.removeEventListener("progress", onDownProgress);
            if (reqBody !== null && xhr.upload) {
              xhr.upload.removeEventListener("progress", onUpProgress);
            }
          }
          if (xhr.readyState !== xhr.DONE) {
            xhr.abort();
          }
        };
      });
    }));
  }
};
_HttpXhrBackend.\u0275fac = function HttpXhrBackend_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HttpXhrBackend)(\u0275\u0275inject(XhrFactory));
};
_HttpXhrBackend.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HttpXhrBackend,
  factory: _HttpXhrBackend.\u0275fac
});
var HttpXhrBackend = _HttpXhrBackend;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpXhrBackend, [{
    type: Injectable
  }], () => [{
    type: XhrFactory
  }], null);
})();
var XSRF_ENABLED = new InjectionToken(ngDevMode ? "XSRF_ENABLED" : "");
var XSRF_DEFAULT_COOKIE_NAME = "XSRF-TOKEN";
var XSRF_COOKIE_NAME = new InjectionToken(ngDevMode ? "XSRF_COOKIE_NAME" : "", {
  providedIn: "root",
  factory: () => XSRF_DEFAULT_COOKIE_NAME
});
var XSRF_DEFAULT_HEADER_NAME = "X-XSRF-TOKEN";
var XSRF_HEADER_NAME = new InjectionToken(ngDevMode ? "XSRF_HEADER_NAME" : "", {
  providedIn: "root",
  factory: () => XSRF_DEFAULT_HEADER_NAME
});
var HttpXsrfTokenExtractor = class {
};
var _HttpXsrfCookieExtractor = class _HttpXsrfCookieExtractor {
  constructor(doc, platform, cookieName) {
    this.doc = doc;
    this.platform = platform;
    this.cookieName = cookieName;
    this.lastCookieString = "";
    this.lastToken = null;
    this.parseCount = 0;
  }
  getToken() {
    if (this.platform === "server") {
      return null;
    }
    const cookieString = this.doc.cookie || "";
    if (cookieString !== this.lastCookieString) {
      this.parseCount++;
      this.lastToken = parseCookieValue(cookieString, this.cookieName);
      this.lastCookieString = cookieString;
    }
    return this.lastToken;
  }
};
_HttpXsrfCookieExtractor.\u0275fac = function HttpXsrfCookieExtractor_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HttpXsrfCookieExtractor)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(PLATFORM_ID), \u0275\u0275inject(XSRF_COOKIE_NAME));
};
_HttpXsrfCookieExtractor.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HttpXsrfCookieExtractor,
  factory: _HttpXsrfCookieExtractor.\u0275fac
});
var HttpXsrfCookieExtractor = _HttpXsrfCookieExtractor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpXsrfCookieExtractor, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [XSRF_COOKIE_NAME]
    }]
  }], null);
})();
function xsrfInterceptorFn(req, next) {
  const lcUrl = req.url.toLowerCase();
  if (!inject(XSRF_ENABLED) || req.method === "GET" || req.method === "HEAD" || lcUrl.startsWith("http://") || lcUrl.startsWith("https://")) {
    return next(req);
  }
  const token = inject(HttpXsrfTokenExtractor).getToken();
  const headerName = inject(XSRF_HEADER_NAME);
  if (token != null && !req.headers.has(headerName)) {
    req = req.clone({
      headers: req.headers.set(headerName, token)
    });
  }
  return next(req);
}
var _HttpXsrfInterceptor = class _HttpXsrfInterceptor {
  constructor(injector) {
    this.injector = injector;
  }
  intercept(initialRequest, next) {
    return runInInjectionContext(this.injector, () => xsrfInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)));
  }
};
_HttpXsrfInterceptor.\u0275fac = function HttpXsrfInterceptor_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HttpXsrfInterceptor)(\u0275\u0275inject(EnvironmentInjector));
};
_HttpXsrfInterceptor.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HttpXsrfInterceptor,
  factory: _HttpXsrfInterceptor.\u0275fac
});
var HttpXsrfInterceptor = _HttpXsrfInterceptor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpXsrfInterceptor, [{
    type: Injectable
  }], () => [{
    type: EnvironmentInjector
  }], null);
})();
var HttpFeatureKind;
(function(HttpFeatureKind2) {
  HttpFeatureKind2[HttpFeatureKind2["Interceptors"] = 0] = "Interceptors";
  HttpFeatureKind2[HttpFeatureKind2["LegacyInterceptors"] = 1] = "LegacyInterceptors";
  HttpFeatureKind2[HttpFeatureKind2["CustomXsrfConfiguration"] = 2] = "CustomXsrfConfiguration";
  HttpFeatureKind2[HttpFeatureKind2["NoXsrfProtection"] = 3] = "NoXsrfProtection";
  HttpFeatureKind2[HttpFeatureKind2["JsonpSupport"] = 4] = "JsonpSupport";
  HttpFeatureKind2[HttpFeatureKind2["RequestsMadeViaParent"] = 5] = "RequestsMadeViaParent";
  HttpFeatureKind2[HttpFeatureKind2["Fetch"] = 6] = "Fetch";
})(HttpFeatureKind || (HttpFeatureKind = {}));
function makeHttpFeature(kind, providers) {
  return {
    \u0275kind: kind,
    \u0275providers: providers
  };
}
function provideHttpClient(...features) {
  if (ngDevMode) {
    const featureKinds = new Set(features.map((f) => f.\u0275kind));
    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {
      throw new Error(ngDevMode ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` : "");
    }
  }
  const providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {
    provide: HttpHandler,
    useExisting: HttpInterceptorHandler
  }, {
    provide: HttpBackend,
    useFactory: () => {
      return inject(FetchBackend, {
        optional: true
      }) ?? inject(HttpXhrBackend);
    }
  }, {
    provide: HTTP_INTERCEPTOR_FNS,
    useValue: xsrfInterceptorFn,
    multi: true
  }, {
    provide: XSRF_ENABLED,
    useValue: true
  }, {
    provide: HttpXsrfTokenExtractor,
    useClass: HttpXsrfCookieExtractor
  }];
  for (const feature of features) {
    providers.push(...feature.\u0275providers);
  }
  return makeEnvironmentProviders(providers);
}
var LEGACY_INTERCEPTOR_FN = new InjectionToken(ngDevMode ? "LEGACY_INTERCEPTOR_FN" : "");
function withInterceptorsFromDi() {
  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{
    provide: LEGACY_INTERCEPTOR_FN,
    useFactory: legacyInterceptorFnFactory
  }, {
    provide: HTTP_INTERCEPTOR_FNS,
    useExisting: LEGACY_INTERCEPTOR_FN,
    multi: true
  }]);
}
function withXsrfConfiguration({
  cookieName,
  headerName
}) {
  const providers = [];
  if (cookieName !== void 0) {
    providers.push({
      provide: XSRF_COOKIE_NAME,
      useValue: cookieName
    });
  }
  if (headerName !== void 0) {
    providers.push({
      provide: XSRF_HEADER_NAME,
      useValue: headerName
    });
  }
  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);
}
function withNoXsrfProtection() {
  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{
    provide: XSRF_ENABLED,
    useValue: false
  }]);
}
function withJsonpSupport() {
  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {
    provide: JsonpCallbackContext,
    useFactory: jsonpCallbackContext
  }, {
    provide: HTTP_INTERCEPTOR_FNS,
    useValue: jsonpInterceptorFn,
    multi: true
  }]);
}
var _HttpClientXsrfModule = class _HttpClientXsrfModule {
  /**
   * Disable the default XSRF protection.
   */
  static disable() {
    return {
      ngModule: _HttpClientXsrfModule,
      providers: [withNoXsrfProtection().\u0275providers]
    };
  }
  /**
   * Configure XSRF protection.
   * @param options An object that can specify either or both
   * cookie name or header name.
   * - Cookie name default is `XSRF-TOKEN`.
   * - Header name default is `X-XSRF-TOKEN`.
   *
   */
  static withOptions(options = {}) {
    return {
      ngModule: _HttpClientXsrfModule,
      providers: withXsrfConfiguration(options).\u0275providers
    };
  }
};
_HttpClientXsrfModule.\u0275fac = function HttpClientXsrfModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HttpClientXsrfModule)();
};
_HttpClientXsrfModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _HttpClientXsrfModule
});
_HttpClientXsrfModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [HttpXsrfInterceptor, {
    provide: HTTP_INTERCEPTORS,
    useExisting: HttpXsrfInterceptor,
    multi: true
  }, {
    provide: HttpXsrfTokenExtractor,
    useClass: HttpXsrfCookieExtractor
  }, withXsrfConfiguration({
    cookieName: XSRF_DEFAULT_COOKIE_NAME,
    headerName: XSRF_DEFAULT_HEADER_NAME
  }).\u0275providers, {
    provide: XSRF_ENABLED,
    useValue: true
  }]
});
var HttpClientXsrfModule = _HttpClientXsrfModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpClientXsrfModule, [{
    type: NgModule,
    args: [{
      providers: [HttpXsrfInterceptor, {
        provide: HTTP_INTERCEPTORS,
        useExisting: HttpXsrfInterceptor,
        multi: true
      }, {
        provide: HttpXsrfTokenExtractor,
        useClass: HttpXsrfCookieExtractor
      }, withXsrfConfiguration({
        cookieName: XSRF_DEFAULT_COOKIE_NAME,
        headerName: XSRF_DEFAULT_HEADER_NAME
      }).\u0275providers, {
        provide: XSRF_ENABLED,
        useValue: true
      }]
    }]
  }], null, null);
})();
var _HttpClientModule = class _HttpClientModule {
};
_HttpClientModule.\u0275fac = function HttpClientModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HttpClientModule)();
};
_HttpClientModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _HttpClientModule
});
_HttpClientModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [provideHttpClient(withInterceptorsFromDi())]
});
var HttpClientModule = _HttpClientModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpClientModule, [{
    type: NgModule,
    args: [{
      /**
       * Configures the dependency injector where it is imported
       * with supporting services for HTTP communications.
       */
      providers: [provideHttpClient(withInterceptorsFromDi())]
    }]
  }], null, null);
})();
var _HttpClientJsonpModule = class _HttpClientJsonpModule {
};
_HttpClientJsonpModule.\u0275fac = function HttpClientJsonpModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HttpClientJsonpModule)();
};
_HttpClientJsonpModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _HttpClientJsonpModule
});
_HttpClientJsonpModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [withJsonpSupport().\u0275providers]
});
var HttpClientJsonpModule = _HttpClientJsonpModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpClientJsonpModule, [{
    type: NgModule,
    args: [{
      providers: [withJsonpSupport().\u0275providers]
    }]
  }], null, null);
})();
var HTTP_TRANSFER_CACHE_ORIGIN_MAP = new InjectionToken(ngDevMode ? "HTTP_TRANSFER_CACHE_ORIGIN_MAP" : "");
var CACHE_OPTIONS = new InjectionToken(ngDevMode ? "HTTP_TRANSFER_STATE_CACHE_OPTIONS" : "");

// node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs
var GenericBrowserDomAdapter = class extends DomAdapter {
  constructor() {
    super(...arguments);
    this.supportsDOMEvents = true;
  }
};
var BrowserDomAdapter = class _BrowserDomAdapter extends GenericBrowserDomAdapter {
  static makeCurrent() {
    setRootDomAdapter(new _BrowserDomAdapter());
  }
  onAndCancel(el, evt, listener) {
    el.addEventListener(evt, listener);
    return () => {
      el.removeEventListener(evt, listener);
    };
  }
  dispatchEvent(el, evt) {
    el.dispatchEvent(evt);
  }
  remove(node) {
    node.remove();
  }
  createElement(tagName, doc) {
    doc = doc || this.getDefaultDocument();
    return doc.createElement(tagName);
  }
  createHtmlDocument() {
    return document.implementation.createHTMLDocument("fakeTitle");
  }
  getDefaultDocument() {
    return document;
  }
  isElementNode(node) {
    return node.nodeType === Node.ELEMENT_NODE;
  }
  isShadowRoot(node) {
    return node instanceof DocumentFragment;
  }
  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */
  getGlobalEventTarget(doc, target) {
    if (target === "window") {
      return window;
    }
    if (target === "document") {
      return doc;
    }
    if (target === "body") {
      return doc.body;
    }
    return null;
  }
  getBaseHref(doc) {
    const href = getBaseElementHref();
    return href == null ? null : relativePath(href);
  }
  resetBaseElement() {
    baseElement = null;
  }
  getUserAgent() {
    return window.navigator.userAgent;
  }
  getCookie(name) {
    return parseCookieValue(document.cookie, name);
  }
};
var baseElement = null;
function getBaseElementHref() {
  baseElement = baseElement || document.querySelector("base");
  return baseElement ? baseElement.getAttribute("href") : null;
}
function relativePath(url) {
  return new URL(url, document.baseURI).pathname;
}
var BrowserGetTestability = class {
  addToWindow(registry) {
    _global["getAngularTestability"] = (elem, findInAncestors = true) => {
      const testability = registry.findTestabilityInTree(elem, findInAncestors);
      if (testability == null) {
        throw new RuntimeError(5103, (typeof ngDevMode === "undefined" || ngDevMode) && "Could not find testability for element.");
      }
      return testability;
    };
    _global["getAllAngularTestabilities"] = () => registry.getAllTestabilities();
    _global["getAllAngularRootElements"] = () => registry.getAllRootElements();
    const whenAllStable = (callback) => {
      const testabilities = _global["getAllAngularTestabilities"]();
      let count = testabilities.length;
      const decrement = function() {
        count--;
        if (count == 0) {
          callback();
        }
      };
      testabilities.forEach((testability) => {
        testability.whenStable(decrement);
      });
    };
    if (!_global["frameworkStabilizers"]) {
      _global["frameworkStabilizers"] = [];
    }
    _global["frameworkStabilizers"].push(whenAllStable);
  }
  findTestabilityInTree(registry, elem, findInAncestors) {
    if (elem == null) {
      return null;
    }
    const t = registry.getTestability(elem);
    if (t != null) {
      return t;
    } else if (!findInAncestors) {
      return null;
    }
    if (getDOM().isShadowRoot(elem)) {
      return this.findTestabilityInTree(registry, elem.host, true);
    }
    return this.findTestabilityInTree(registry, elem.parentElement, true);
  }
};
var _BrowserXhr = class _BrowserXhr {
  build() {
    return new XMLHttpRequest();
  }
};
_BrowserXhr.\u0275fac = function BrowserXhr_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _BrowserXhr)();
};
_BrowserXhr.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _BrowserXhr,
  factory: _BrowserXhr.\u0275fac
});
var BrowserXhr = _BrowserXhr;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserXhr, [{
    type: Injectable
  }], null, null);
})();
var EVENT_MANAGER_PLUGINS = new InjectionToken(ngDevMode ? "EventManagerPlugins" : "");
var _EventManager = class _EventManager {
  /**
   * Initializes an instance of the event-manager service.
   */
  constructor(plugins, _zone) {
    this._zone = _zone;
    this._eventNameToPlugin = /* @__PURE__ */ new Map();
    plugins.forEach((plugin) => {
      plugin.manager = this;
    });
    this._plugins = plugins.slice().reverse();
  }
  /**
   * Registers a handler for a specific element and event.
   *
   * @param element The HTML element to receive event notifications.
   * @param eventName The name of the event to listen for.
   * @param handler A function to call when the notification occurs. Receives the
   * event object as an argument.
   * @returns  A callback function that can be used to remove the handler.
   */
  addEventListener(element, eventName, handler) {
    const plugin = this._findPluginFor(eventName);
    return plugin.addEventListener(element, eventName, handler);
  }
  /**
   * Retrieves the compilation zone in which event listeners are registered.
   */
  getZone() {
    return this._zone;
  }
  /** @internal */
  _findPluginFor(eventName) {
    let plugin = this._eventNameToPlugin.get(eventName);
    if (plugin) {
      return plugin;
    }
    const plugins = this._plugins;
    plugin = plugins.find((plugin2) => plugin2.supports(eventName));
    if (!plugin) {
      throw new RuntimeError(5101, (typeof ngDevMode === "undefined" || ngDevMode) && `No event manager plugin found for event ${eventName}`);
    }
    this._eventNameToPlugin.set(eventName, plugin);
    return plugin;
  }
};
_EventManager.\u0275fac = function EventManager_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _EventManager)(\u0275\u0275inject(EVENT_MANAGER_PLUGINS), \u0275\u0275inject(NgZone));
};
_EventManager.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _EventManager,
  factory: _EventManager.\u0275fac
});
var EventManager = _EventManager;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EventManager, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [EVENT_MANAGER_PLUGINS]
    }]
  }, {
    type: NgZone
  }], null);
})();
var EventManagerPlugin = class {
  // TODO: remove (has some usage in G3)
  constructor(_doc2) {
    this._doc = _doc2;
  }
};
var APP_ID_ATTRIBUTE_NAME = "ng-app-id";
var _SharedStylesHost = class _SharedStylesHost {
  constructor(doc, appId, nonce, platformId = {}) {
    this.doc = doc;
    this.appId = appId;
    this.nonce = nonce;
    this.platformId = platformId;
    this.styleRef = /* @__PURE__ */ new Map();
    this.hostNodes = /* @__PURE__ */ new Set();
    this.styleNodesInDOM = this.collectServerRenderedStyles();
    this.platformIsServer = isPlatformServer(platformId);
    this.resetHostNodes();
  }
  addStyles(styles) {
    for (const style of styles) {
      const usageCount = this.changeUsageCount(style, 1);
      if (usageCount === 1) {
        this.onStyleAdded(style);
      }
    }
  }
  removeStyles(styles) {
    for (const style of styles) {
      const usageCount = this.changeUsageCount(style, -1);
      if (usageCount <= 0) {
        this.onStyleRemoved(style);
      }
    }
  }
  ngOnDestroy() {
    const styleNodesInDOM = this.styleNodesInDOM;
    if (styleNodesInDOM) {
      styleNodesInDOM.forEach((node) => node.remove());
      styleNodesInDOM.clear();
    }
    for (const style of this.getAllStyles()) {
      this.onStyleRemoved(style);
    }
    this.resetHostNodes();
  }
  addHost(hostNode) {
    this.hostNodes.add(hostNode);
    for (const style of this.getAllStyles()) {
      this.addStyleToHost(hostNode, style);
    }
  }
  removeHost(hostNode) {
    this.hostNodes.delete(hostNode);
  }
  getAllStyles() {
    return this.styleRef.keys();
  }
  onStyleAdded(style) {
    for (const host of this.hostNodes) {
      this.addStyleToHost(host, style);
    }
  }
  onStyleRemoved(style) {
    const styleRef = this.styleRef;
    styleRef.get(style)?.elements?.forEach((node) => node.remove());
    styleRef.delete(style);
  }
  collectServerRenderedStyles() {
    const styles = this.doc.head?.querySelectorAll(`style[${APP_ID_ATTRIBUTE_NAME}="${this.appId}"]`);
    if (styles?.length) {
      const styleMap = /* @__PURE__ */ new Map();
      styles.forEach((style) => {
        if (style.textContent != null) {
          styleMap.set(style.textContent, style);
        }
      });
      return styleMap;
    }
    return null;
  }
  changeUsageCount(style, delta) {
    const map2 = this.styleRef;
    if (map2.has(style)) {
      const styleRefValue = map2.get(style);
      styleRefValue.usage += delta;
      return styleRefValue.usage;
    }
    map2.set(style, {
      usage: delta,
      elements: []
    });
    return delta;
  }
  getStyleElement(host, style) {
    const styleNodesInDOM = this.styleNodesInDOM;
    const styleEl = styleNodesInDOM?.get(style);
    if (styleEl?.parentNode === host) {
      styleNodesInDOM.delete(style);
      styleEl.removeAttribute(APP_ID_ATTRIBUTE_NAME);
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        styleEl.setAttribute("ng-style-reused", "");
      }
      return styleEl;
    } else {
      const styleEl2 = this.doc.createElement("style");
      if (this.nonce) {
        styleEl2.setAttribute("nonce", this.nonce);
      }
      styleEl2.textContent = style;
      if (this.platformIsServer) {
        styleEl2.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);
      }
      host.appendChild(styleEl2);
      return styleEl2;
    }
  }
  addStyleToHost(host, style) {
    const styleEl = this.getStyleElement(host, style);
    const styleRef = this.styleRef;
    const styleElRef = styleRef.get(style)?.elements;
    if (styleElRef) {
      styleElRef.push(styleEl);
    } else {
      styleRef.set(style, {
        elements: [styleEl],
        usage: 1
      });
    }
  }
  resetHostNodes() {
    const hostNodes = this.hostNodes;
    hostNodes.clear();
    hostNodes.add(this.doc.head);
  }
};
_SharedStylesHost.\u0275fac = function SharedStylesHost_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _SharedStylesHost)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(APP_ID), \u0275\u0275inject(CSP_NONCE, 8), \u0275\u0275inject(PLATFORM_ID));
};
_SharedStylesHost.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _SharedStylesHost,
  factory: _SharedStylesHost.\u0275fac
});
var SharedStylesHost = _SharedStylesHost;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SharedStylesHost, [{
    type: Injectable
  }], () => [{
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [APP_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CSP_NONCE]
    }, {
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }], null);
})();
var NAMESPACE_URIS = {
  "svg": "http://www.w3.org/2000/svg",
  "xhtml": "http://www.w3.org/1999/xhtml",
  "xlink": "http://www.w3.org/1999/xlink",
  "xml": "http://www.w3.org/XML/1998/namespace",
  "xmlns": "http://www.w3.org/2000/xmlns/",
  "math": "http://www.w3.org/1998/Math/MathML"
};
var COMPONENT_REGEX = /%COMP%/g;
var COMPONENT_VARIABLE = "%COMP%";
var HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
var CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
var REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;
var REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken(ngDevMode ? "RemoveStylesOnCompDestroy" : "", {
  providedIn: "root",
  factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT
});
function shimContentAttribute(componentShortId) {
  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function shimHostAttribute(componentShortId) {
  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function shimStylesContent(compId, styles) {
  return styles.map((s) => s.replace(COMPONENT_REGEX, compId));
}
var _DomRendererFactory2 = class _DomRendererFactory2 {
  constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestroy, doc, platformId, ngZone, nonce = null) {
    this.eventManager = eventManager;
    this.sharedStylesHost = sharedStylesHost;
    this.appId = appId;
    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;
    this.doc = doc;
    this.platformId = platformId;
    this.ngZone = ngZone;
    this.nonce = nonce;
    this.rendererByCompId = /* @__PURE__ */ new Map();
    this.platformIsServer = isPlatformServer(platformId);
    this.defaultRenderer = new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer);
  }
  createRenderer(element, type) {
    if (!element || !type) {
      return this.defaultRenderer;
    }
    if (this.platformIsServer && type.encapsulation === ViewEncapsulation$1.ShadowDom) {
      type = __spreadProps(__spreadValues({}, type), {
        encapsulation: ViewEncapsulation$1.Emulated
      });
    }
    const renderer = this.getOrCreateRenderer(element, type);
    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {
      renderer.applyToHost(element);
    } else if (renderer instanceof NoneEncapsulationDomRenderer) {
      renderer.applyStyles();
    }
    return renderer;
  }
  getOrCreateRenderer(element, type) {
    const rendererByCompId = this.rendererByCompId;
    let renderer = rendererByCompId.get(type.id);
    if (!renderer) {
      const doc = this.doc;
      const ngZone = this.ngZone;
      const eventManager = this.eventManager;
      const sharedStylesHost = this.sharedStylesHost;
      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;
      const platformIsServer = this.platformIsServer;
      switch (type.encapsulation) {
        case ViewEncapsulation$1.Emulated:
          renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer);
          break;
        case ViewEncapsulation$1.ShadowDom:
          return new ShadowDomRenderer(eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce, platformIsServer);
        default:
          renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone, platformIsServer);
          break;
      }
      rendererByCompId.set(type.id, renderer);
    }
    return renderer;
  }
  ngOnDestroy() {
    this.rendererByCompId.clear();
  }
};
_DomRendererFactory2.\u0275fac = function DomRendererFactory2_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DomRendererFactory2)(\u0275\u0275inject(EventManager), \u0275\u0275inject(SharedStylesHost), \u0275\u0275inject(APP_ID), \u0275\u0275inject(REMOVE_STYLES_ON_COMPONENT_DESTROY), \u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(PLATFORM_ID), \u0275\u0275inject(NgZone), \u0275\u0275inject(CSP_NONCE));
};
_DomRendererFactory2.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DomRendererFactory2,
  factory: _DomRendererFactory2.\u0275fac
});
var DomRendererFactory2 = _DomRendererFactory2;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomRendererFactory2, [{
    type: Injectable
  }], () => [{
    type: EventManager
  }, {
    type: SharedStylesHost
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [APP_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [REMOVE_STYLES_ON_COMPONENT_DESTROY]
    }]
  }, {
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: Object,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CSP_NONCE]
    }]
  }], null);
})();
var DefaultDomRenderer2 = class {
  constructor(eventManager, doc, ngZone, platformIsServer) {
    this.eventManager = eventManager;
    this.doc = doc;
    this.ngZone = ngZone;
    this.platformIsServer = platformIsServer;
    this.data = /* @__PURE__ */ Object.create(null);
    this.throwOnSyntheticProps = true;
    this.destroyNode = null;
  }
  destroy() {
  }
  createElement(name, namespace) {
    if (namespace) {
      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
    }
    return this.doc.createElement(name);
  }
  createComment(value) {
    return this.doc.createComment(value);
  }
  createText(value) {
    return this.doc.createTextNode(value);
  }
  appendChild(parent, newChild) {
    const targetParent = isTemplateNode(parent) ? parent.content : parent;
    targetParent.appendChild(newChild);
  }
  insertBefore(parent, newChild, refChild) {
    if (parent) {
      const targetParent = isTemplateNode(parent) ? parent.content : parent;
      targetParent.insertBefore(newChild, refChild);
    }
  }
  removeChild(_parent, oldChild) {
    oldChild.remove();
  }
  selectRootElement(selectorOrNode, preserveContent) {
    let el = typeof selectorOrNode === "string" ? this.doc.querySelector(selectorOrNode) : selectorOrNode;
    if (!el) {
      throw new RuntimeError(-5104, (typeof ngDevMode === "undefined" || ngDevMode) && `The selector "${selectorOrNode}" did not match any elements`);
    }
    if (!preserveContent) {
      el.textContent = "";
    }
    return el;
  }
  parentNode(node) {
    return node.parentNode;
  }
  nextSibling(node) {
    return node.nextSibling;
  }
  setAttribute(el, name, value, namespace) {
    if (namespace) {
      name = namespace + ":" + name;
      const namespaceUri = NAMESPACE_URIS[namespace];
      if (namespaceUri) {
        el.setAttributeNS(namespaceUri, name, value);
      } else {
        el.setAttribute(name, value);
      }
    } else {
      el.setAttribute(name, value);
    }
  }
  removeAttribute(el, name, namespace) {
    if (namespace) {
      const namespaceUri = NAMESPACE_URIS[namespace];
      if (namespaceUri) {
        el.removeAttributeNS(namespaceUri, name);
      } else {
        el.removeAttribute(`${namespace}:${name}`);
      }
    } else {
      el.removeAttribute(name);
    }
  }
  addClass(el, name) {
    el.classList.add(name);
  }
  removeClass(el, name) {
    el.classList.remove(name);
  }
  setStyle(el, style, value, flags) {
    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {
      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? "important" : "");
    } else {
      el.style[style] = value;
    }
  }
  removeStyle(el, style, flags) {
    if (flags & RendererStyleFlags2.DashCase) {
      el.style.removeProperty(style);
    } else {
      el.style[style] = "";
    }
  }
  setProperty(el, name, value) {
    if (el == null) {
      return;
    }
    (typeof ngDevMode === "undefined" || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(name, "property");
    el[name] = value;
  }
  setValue(node, value) {
    node.nodeValue = value;
  }
  listen(target, event, callback) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(event, "listener");
    if (typeof target === "string") {
      target = getDOM().getGlobalEventTarget(this.doc, target);
      if (!target) {
        throw new Error(`Unsupported event target ${target} for event ${event}`);
      }
    }
    return this.eventManager.addEventListener(target, event, this.decoratePreventDefault(callback));
  }
  decoratePreventDefault(eventHandler) {
    return (event) => {
      if (event === "__ngUnwrap__") {
        return eventHandler;
      }
      const allowDefaultBehavior = this.platformIsServer ? this.ngZone.runGuarded(() => eventHandler(event)) : eventHandler(event);
      if (allowDefaultBehavior === false) {
        event.preventDefault();
      }
      return void 0;
    };
  }
};
var AT_CHARCODE = (() => "@".charCodeAt(0))();
function checkNoSyntheticProp(name, nameKind) {
  if (name.charCodeAt(0) === AT_CHARCODE) {
    throw new RuntimeError(5105, `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:
  - Either \`BrowserAnimationsModule\` or \`NoopAnimationsModule\` are imported in your application.
  - There is corresponding configuration for the animation named \`${name}\` defined in the \`animations\` field of the \`@Component\` decorator (see https://angular.io/api/core/Component#animations).`);
  }
}
function isTemplateNode(node) {
  return node.tagName === "TEMPLATE" && node.content !== void 0;
}
var ShadowDomRenderer = class extends DefaultDomRenderer2 {
  constructor(eventManager, sharedStylesHost, hostEl, component, doc, ngZone, nonce, platformIsServer) {
    super(eventManager, doc, ngZone, platformIsServer);
    this.sharedStylesHost = sharedStylesHost;
    this.hostEl = hostEl;
    this.shadowRoot = hostEl.attachShadow({
      mode: "open"
    });
    this.sharedStylesHost.addHost(this.shadowRoot);
    const styles = shimStylesContent(component.id, component.styles);
    for (const style of styles) {
      const styleEl = document.createElement("style");
      if (nonce) {
        styleEl.setAttribute("nonce", nonce);
      }
      styleEl.textContent = style;
      this.shadowRoot.appendChild(styleEl);
    }
  }
  nodeOrShadowRoot(node) {
    return node === this.hostEl ? this.shadowRoot : node;
  }
  appendChild(parent, newChild) {
    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);
  }
  insertBefore(parent, newChild, refChild) {
    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);
  }
  removeChild(_parent, oldChild) {
    return super.removeChild(null, oldChild);
  }
  parentNode(node) {
    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));
  }
  destroy() {
    this.sharedStylesHost.removeHost(this.shadowRoot);
  }
};
var NoneEncapsulationDomRenderer = class extends DefaultDomRenderer2 {
  constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, compId) {
    super(eventManager, doc, ngZone, platformIsServer);
    this.sharedStylesHost = sharedStylesHost;
    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;
    this.styles = compId ? shimStylesContent(compId, component.styles) : component.styles;
  }
  applyStyles() {
    this.sharedStylesHost.addStyles(this.styles);
  }
  destroy() {
    if (!this.removeStylesOnCompDestroy) {
      return;
    }
    this.sharedStylesHost.removeStyles(this.styles);
  }
};
var EmulatedEncapsulationDomRenderer2 = class extends NoneEncapsulationDomRenderer {
  constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer) {
    const compId = appId + "-" + component.id;
    super(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, compId);
    this.contentAttr = shimContentAttribute(compId);
    this.hostAttr = shimHostAttribute(compId);
  }
  applyToHost(element) {
    this.applyStyles();
    this.setAttribute(element, this.hostAttr, "");
  }
  createElement(parent, name) {
    const el = super.createElement(parent, name);
    super.setAttribute(el, this.contentAttr, "");
    return el;
  }
};
var _DomEventsPlugin = class _DomEventsPlugin extends EventManagerPlugin {
  constructor(doc) {
    super(doc);
  }
  // This plugin should come last in the list of plugins, because it accepts all
  // events.
  supports(eventName) {
    return true;
  }
  addEventListener(element, eventName, handler) {
    element.addEventListener(eventName, handler, false);
    return () => this.removeEventListener(element, eventName, handler);
  }
  removeEventListener(target, eventName, callback) {
    return target.removeEventListener(eventName, callback);
  }
};
_DomEventsPlugin.\u0275fac = function DomEventsPlugin_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DomEventsPlugin)(\u0275\u0275inject(DOCUMENT2));
};
_DomEventsPlugin.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DomEventsPlugin,
  factory: _DomEventsPlugin.\u0275fac
});
var DomEventsPlugin = _DomEventsPlugin;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomEventsPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var _EventDelegationPlugin = class _EventDelegationPlugin extends EventManagerPlugin {
  constructor(doc) {
    super(doc);
    this.delegate = inject(GLOBAL_EVENT_DELEGATION, {
      optional: true
    });
  }
  supports(eventName) {
    return this.delegate ? this.delegate.supports(eventName) : false;
  }
  addEventListener(element, eventName, handler) {
    return this.delegate.addEventListener(element, eventName, handler);
  }
  removeEventListener(element, eventName, callback) {
    return this.delegate.removeEventListener(element, eventName, callback);
  }
};
_EventDelegationPlugin.\u0275fac = function EventDelegationPlugin_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _EventDelegationPlugin)(\u0275\u0275inject(DOCUMENT2));
};
_EventDelegationPlugin.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _EventDelegationPlugin,
  factory: _EventDelegationPlugin.\u0275fac
});
var EventDelegationPlugin = _EventDelegationPlugin;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EventDelegationPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var MODIFIER_KEYS = ["alt", "control", "meta", "shift"];
var _keyMap = {
  "\b": "Backspace",
  "	": "Tab",
  "\x7F": "Delete",
  "\x1B": "Escape",
  "Del": "Delete",
  "Esc": "Escape",
  "Left": "ArrowLeft",
  "Right": "ArrowRight",
  "Up": "ArrowUp",
  "Down": "ArrowDown",
  "Menu": "ContextMenu",
  "Scroll": "ScrollLock",
  "Win": "OS"
};
var MODIFIER_KEY_GETTERS = {
  "alt": (event) => event.altKey,
  "control": (event) => event.ctrlKey,
  "meta": (event) => event.metaKey,
  "shift": (event) => event.shiftKey
};
var _KeyEventsPlugin = class _KeyEventsPlugin extends EventManagerPlugin {
  /**
   * Initializes an instance of the browser plug-in.
   * @param doc The document in which key events will be detected.
   */
  constructor(doc) {
    super(doc);
  }
  /**
   * Reports whether a named key event is supported.
   * @param eventName The event name to query.
   * @return True if the named key event is supported.
   */
  supports(eventName) {
    return _KeyEventsPlugin.parseEventName(eventName) != null;
  }
  /**
   * Registers a handler for a specific element and key event.
   * @param element The HTML element to receive event notifications.
   * @param eventName The name of the key event to listen for.
   * @param handler A function to call when the notification occurs. Receives the
   * event object as an argument.
   * @returns The key event that was registered.
   */
  addEventListener(element, eventName, handler) {
    const parsedEvent = _KeyEventsPlugin.parseEventName(eventName);
    const outsideHandler = _KeyEventsPlugin.eventCallback(parsedEvent["fullKey"], handler, this.manager.getZone());
    return this.manager.getZone().runOutsideAngular(() => {
      return getDOM().onAndCancel(element, parsedEvent["domEventName"], outsideHandler);
    });
  }
  /**
   * Parses the user provided full keyboard event definition and normalizes it for
   * later internal use. It ensures the string is all lowercase, converts special
   * characters to a standard spelling, and orders all the values consistently.
   *
   * @param eventName The name of the key event to listen for.
   * @returns an object with the full, normalized string, and the dom event name
   * or null in the case when the event doesn't match a keyboard event.
   */
  static parseEventName(eventName) {
    const parts = eventName.toLowerCase().split(".");
    const domEventName = parts.shift();
    if (parts.length === 0 || !(domEventName === "keydown" || domEventName === "keyup")) {
      return null;
    }
    const key = _KeyEventsPlugin._normalizeKey(parts.pop());
    let fullKey = "";
    let codeIX = parts.indexOf("code");
    if (codeIX > -1) {
      parts.splice(codeIX, 1);
      fullKey = "code.";
    }
    MODIFIER_KEYS.forEach((modifierName) => {
      const index = parts.indexOf(modifierName);
      if (index > -1) {
        parts.splice(index, 1);
        fullKey += modifierName + ".";
      }
    });
    fullKey += key;
    if (parts.length != 0 || key.length === 0) {
      return null;
    }
    const result = {};
    result["domEventName"] = domEventName;
    result["fullKey"] = fullKey;
    return result;
  }
  /**
   * Determines whether the actual keys pressed match the configured key code string.
   * The `fullKeyCode` event is normalized in the `parseEventName` method when the
   * event is attached to the DOM during the `addEventListener` call. This is unseen
   * by the end user and is normalized for internal consistency and parsing.
   *
   * @param event The keyboard event.
   * @param fullKeyCode The normalized user defined expected key event string
   * @returns boolean.
   */
  static matchEventFullKeyCode(event, fullKeyCode) {
    let keycode = _keyMap[event.key] || event.key;
    let key = "";
    if (fullKeyCode.indexOf("code.") > -1) {
      keycode = event.code;
      key = "code.";
    }
    if (keycode == null || !keycode) return false;
    keycode = keycode.toLowerCase();
    if (keycode === " ") {
      keycode = "space";
    } else if (keycode === ".") {
      keycode = "dot";
    }
    MODIFIER_KEYS.forEach((modifierName) => {
      if (modifierName !== keycode) {
        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
        if (modifierGetter(event)) {
          key += modifierName + ".";
        }
      }
    });
    key += keycode;
    return key === fullKeyCode;
  }
  /**
   * Configures a handler callback for a key event.
   * @param fullKey The event name that combines all simultaneous keystrokes.
   * @param handler The function that responds to the key event.
   * @param zone The zone in which the event occurred.
   * @returns A callback function.
   */
  static eventCallback(fullKey, handler, zone) {
    return (event) => {
      if (_KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {
        zone.runGuarded(() => handler(event));
      }
    };
  }
  /** @internal */
  static _normalizeKey(keyName) {
    return keyName === "esc" ? "escape" : keyName;
  }
};
_KeyEventsPlugin.\u0275fac = function KeyEventsPlugin_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _KeyEventsPlugin)(\u0275\u0275inject(DOCUMENT2));
};
_KeyEventsPlugin.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _KeyEventsPlugin,
  factory: _KeyEventsPlugin.\u0275fac
});
var KeyEventsPlugin = _KeyEventsPlugin;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(KeyEventsPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
function initDomAdapter() {
  BrowserDomAdapter.makeCurrent();
}
function errorHandler() {
  return new ErrorHandler();
}
function _document() {
  setDocument(document);
  return document;
}
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
  provide: PLATFORM_ID,
  useValue: PLATFORM_BROWSER_ID
}, {
  provide: PLATFORM_INITIALIZER,
  useValue: initDomAdapter,
  multi: true
}, {
  provide: DOCUMENT2,
  useFactory: _document,
  deps: []
}];
var platformBrowser = createPlatformFactory(platformCore, "browser", INTERNAL_BROWSER_PLATFORM_PROVIDERS);
var BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "BrowserModule Providers Marker" : "");
var TESTABILITY_PROVIDERS = [{
  provide: TESTABILITY_GETTER,
  useClass: BrowserGetTestability,
  deps: []
}, {
  provide: TESTABILITY,
  useClass: Testability,
  deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]
}, {
  provide: Testability,
  // Also provide as `Testability` for backwards-compatibility.
  useClass: Testability,
  deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]
}];
var BROWSER_MODULE_PROVIDERS = [{
  provide: INJECTOR_SCOPE,
  useValue: "root"
}, {
  provide: ErrorHandler,
  useFactory: errorHandler,
  deps: []
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: DomEventsPlugin,
  multi: true,
  deps: [DOCUMENT2, NgZone, PLATFORM_ID]
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: KeyEventsPlugin,
  multi: true,
  deps: [DOCUMENT2]
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: EventDelegationPlugin,
  multi: true
}, DomRendererFactory2, SharedStylesHost, EventManager, {
  provide: RendererFactory2,
  useExisting: DomRendererFactory2
}, {
  provide: XhrFactory,
  useClass: BrowserXhr,
  deps: []
}, typeof ngDevMode === "undefined" || ngDevMode ? {
  provide: BROWSER_MODULE_PROVIDERS_MARKER,
  useValue: true
} : []];
var _BrowserModule = class _BrowserModule {
  constructor(providersAlreadyPresent) {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && providersAlreadyPresent) {
      throw new RuntimeError(5100, `Providers from the \`BrowserModule\` have already been loaded. If you need access to common directives such as NgIf and NgFor, import the \`CommonModule\` instead.`);
    }
  }
  /**
   * Configures a browser-based app to transition from a server-rendered app, if
   * one is present on the page.
   *
   * @param params An object containing an identifier for the app to transition.
   * The ID must match between the client and server versions of the app.
   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.
   *
   * @deprecated Use {@link APP_ID} instead to set the application ID.
   */
  static withServerTransition(params) {
    return {
      ngModule: _BrowserModule,
      providers: [{
        provide: APP_ID,
        useValue: params.appId
      }]
    };
  }
};
_BrowserModule.\u0275fac = function BrowserModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _BrowserModule)(\u0275\u0275inject(BROWSER_MODULE_PROVIDERS_MARKER, 12));
};
_BrowserModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _BrowserModule
});
_BrowserModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],
  imports: [CommonModule, ApplicationModule]
});
var BrowserModule = _BrowserModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserModule, [{
    type: NgModule,
    args: [{
      providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],
      exports: [CommonModule, ApplicationModule]
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: SkipSelf
    }, {
      type: Inject,
      args: [BROWSER_MODULE_PROVIDERS_MARKER]
    }]
  }], null);
})();
var _Meta = class _Meta {
  constructor(_doc2) {
    this._doc = _doc2;
    this._dom = getDOM();
  }
  /**
   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.
   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
   * values in the provided tag definition, and verifies that all other attribute values are equal.
   * If an existing element is found, it is returned and is not modified in any way.
   * @param tag The definition of a `<meta>` element to match or create.
   * @param forceCreation True to create a new element without checking whether one already exists.
   * @returns The existing element with the same attributes and values if found,
   * the new element if no match is found, or `null` if the tag parameter is not defined.
   */
  addTag(tag, forceCreation = false) {
    if (!tag) return null;
    return this._getOrCreateElement(tag, forceCreation);
  }
  /**
   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.
   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
   * values in the provided tag definition, and verifies that all other attribute values are equal.
   * @param tags An array of tag definitions to match or create.
   * @param forceCreation True to create new elements without checking whether they already exist.
   * @returns The matching elements if found, or the new elements.
   */
  addTags(tags, forceCreation = false) {
    if (!tags) return [];
    return tags.reduce((result, tag) => {
      if (tag) {
        result.push(this._getOrCreateElement(tag, forceCreation));
      }
      return result;
    }, []);
  }
  /**
   * Retrieves a `<meta>` tag element in the current HTML document.
   * @param attrSelector The tag attribute and value to match against, in the format
   * `"tag_attribute='value string'"`.
   * @returns The matching element, if any.
   */
  getTag(attrSelector) {
    if (!attrSelector) return null;
    return this._doc.querySelector(`meta[${attrSelector}]`) || null;
  }
  /**
   * Retrieves a set of `<meta>` tag elements in the current HTML document.
   * @param attrSelector The tag attribute and value to match against, in the format
   * `"tag_attribute='value string'"`.
   * @returns The matching elements, if any.
   */
  getTags(attrSelector) {
    if (!attrSelector) return [];
    const list = this._doc.querySelectorAll(`meta[${attrSelector}]`);
    return list ? [].slice.call(list) : [];
  }
  /**
   * Modifies an existing `<meta>` tag element in the current HTML document.
   * @param tag The tag description with which to replace the existing tag content.
   * @param selector A tag attribute and value to match against, to identify
   * an existing tag. A string in the format `"tag_attribute=`value string`"`.
   * If not supplied, matches a tag with the same `name` or `property` attribute value as the
   * replacement tag.
   * @return The modified element.
   */
  updateTag(tag, selector) {
    if (!tag) return null;
    selector = selector || this._parseSelector(tag);
    const meta = this.getTag(selector);
    if (meta) {
      return this._setMetaElementAttributes(tag, meta);
    }
    return this._getOrCreateElement(tag, true);
  }
  /**
   * Removes an existing `<meta>` tag element from the current HTML document.
   * @param attrSelector A tag attribute and value to match against, to identify
   * an existing tag. A string in the format `"tag_attribute=`value string`"`.
   */
  removeTag(attrSelector) {
    this.removeTagElement(this.getTag(attrSelector));
  }
  /**
   * Removes an existing `<meta>` tag element from the current HTML document.
   * @param meta The tag definition to match against to identify an existing tag.
   */
  removeTagElement(meta) {
    if (meta) {
      this._dom.remove(meta);
    }
  }
  _getOrCreateElement(meta, forceCreation = false) {
    if (!forceCreation) {
      const selector = this._parseSelector(meta);
      const elem = this.getTags(selector).filter((elem2) => this._containsAttributes(meta, elem2))[0];
      if (elem !== void 0) return elem;
    }
    const element = this._dom.createElement("meta");
    this._setMetaElementAttributes(meta, element);
    const head = this._doc.getElementsByTagName("head")[0];
    head.appendChild(element);
    return element;
  }
  _setMetaElementAttributes(tag, el) {
    Object.keys(tag).forEach((prop) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));
    return el;
  }
  _parseSelector(tag) {
    const attr = tag.name ? "name" : "property";
    return `${attr}="${tag[attr]}"`;
  }
  _containsAttributes(tag, elem) {
    return Object.keys(tag).every((key) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);
  }
  _getMetaKeyMap(prop) {
    return META_KEYS_MAP[prop] || prop;
  }
};
_Meta.\u0275fac = function Meta_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _Meta)(\u0275\u0275inject(DOCUMENT2));
};
_Meta.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Meta,
  factory: _Meta.\u0275fac,
  providedIn: "root"
});
var Meta = _Meta;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Meta, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var META_KEYS_MAP = {
  httpEquiv: "http-equiv"
};
var _Title = class _Title {
  constructor(_doc2) {
    this._doc = _doc2;
  }
  /**
   * Get the title of the current HTML document.
   */
  getTitle() {
    return this._doc.title;
  }
  /**
   * Set the title of the current HTML document.
   * @param newTitle
   */
  setTitle(newTitle) {
    this._doc.title = newTitle || "";
  }
};
_Title.\u0275fac = function Title_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _Title)(\u0275\u0275inject(DOCUMENT2));
};
_Title.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Title,
  factory: _Title.\u0275fac,
  providedIn: "root"
});
var Title = _Title;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Title, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var EVENT_NAMES = {
  // pan
  "pan": true,
  "panstart": true,
  "panmove": true,
  "panend": true,
  "pancancel": true,
  "panleft": true,
  "panright": true,
  "panup": true,
  "pandown": true,
  // pinch
  "pinch": true,
  "pinchstart": true,
  "pinchmove": true,
  "pinchend": true,
  "pinchcancel": true,
  "pinchin": true,
  "pinchout": true,
  // press
  "press": true,
  "pressup": true,
  // rotate
  "rotate": true,
  "rotatestart": true,
  "rotatemove": true,
  "rotateend": true,
  "rotatecancel": true,
  // swipe
  "swipe": true,
  "swipeleft": true,
  "swiperight": true,
  "swipeup": true,
  "swipedown": true,
  // tap
  "tap": true,
  "doubletap": true
};
var HAMMER_GESTURE_CONFIG = new InjectionToken("HammerGestureConfig");
var HAMMER_LOADER = new InjectionToken("HammerLoader");
var _HammerGestureConfig = class _HammerGestureConfig {
  constructor() {
    this.events = [];
    this.overrides = {};
  }
  /**
   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
   * and attaches it to a given HTML element.
   * @param element The element that will recognize gestures.
   * @returns A HammerJS event-manager object.
   */
  buildHammer(element) {
    const mc = new Hammer(element, this.options);
    mc.get("pinch").set({
      enable: true
    });
    mc.get("rotate").set({
      enable: true
    });
    for (const eventName in this.overrides) {
      mc.get(eventName).set(this.overrides[eventName]);
    }
    return mc;
  }
};
_HammerGestureConfig.\u0275fac = function HammerGestureConfig_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HammerGestureConfig)();
};
_HammerGestureConfig.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HammerGestureConfig,
  factory: _HammerGestureConfig.\u0275fac
});
var HammerGestureConfig = _HammerGestureConfig;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerGestureConfig, [{
    type: Injectable
  }], null, null);
})();
var _HammerGesturesPlugin = class _HammerGesturesPlugin extends EventManagerPlugin {
  constructor(doc, _config, console2, loader) {
    super(doc);
    this._config = _config;
    this.console = console2;
    this.loader = loader;
    this._loaderPromise = null;
  }
  supports(eventName) {
    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
      return false;
    }
    if (!window.Hammer && !this.loader) {
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        this.console.warn(`The "${eventName}" event cannot be bound because Hammer.JS is not loaded and no custom loader has been specified.`);
      }
      return false;
    }
    return true;
  }
  addEventListener(element, eventName, handler) {
    const zone = this.manager.getZone();
    eventName = eventName.toLowerCase();
    if (!window.Hammer && this.loader) {
      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader());
      let cancelRegistration = false;
      let deregister = () => {
        cancelRegistration = true;
      };
      zone.runOutsideAngular(() => this._loaderPromise.then(() => {
        if (!window.Hammer) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);
          }
          deregister = () => {
          };
          return;
        }
        if (!cancelRegistration) {
          deregister = this.addEventListener(element, eventName, handler);
        }
      }).catch(() => {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          this.console.warn(`The "${eventName}" event cannot be bound because the custom Hammer.JS loader failed.`);
        }
        deregister = () => {
        };
      }));
      return () => {
        deregister();
      };
    }
    return zone.runOutsideAngular(() => {
      const mc = this._config.buildHammer(element);
      const callback = function(eventObj) {
        zone.runGuarded(function() {
          handler(eventObj);
        });
      };
      mc.on(eventName, callback);
      return () => {
        mc.off(eventName, callback);
        if (typeof mc.destroy === "function") {
          mc.destroy();
        }
      };
    });
  }
  isCustomEvent(eventName) {
    return this._config.events.indexOf(eventName) > -1;
  }
};
_HammerGesturesPlugin.\u0275fac = function HammerGesturesPlugin_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HammerGesturesPlugin)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(HAMMER_GESTURE_CONFIG), \u0275\u0275inject(Console), \u0275\u0275inject(HAMMER_LOADER, 8));
};
_HammerGesturesPlugin.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HammerGesturesPlugin,
  factory: _HammerGesturesPlugin.\u0275fac
});
var HammerGesturesPlugin = _HammerGesturesPlugin;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerGesturesPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: HammerGestureConfig,
    decorators: [{
      type: Inject,
      args: [HAMMER_GESTURE_CONFIG]
    }]
  }, {
    type: Console
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [HAMMER_LOADER]
    }]
  }], null);
})();
var _HammerModule = class _HammerModule {
};
_HammerModule.\u0275fac = function HammerModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _HammerModule)();
};
_HammerModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _HammerModule
});
_HammerModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [{
    provide: EVENT_MANAGER_PLUGINS,
    useClass: HammerGesturesPlugin,
    multi: true,
    deps: [DOCUMENT2, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]
  }, {
    provide: HAMMER_GESTURE_CONFIG,
    useClass: HammerGestureConfig,
    deps: []
  }]
});
var HammerModule = _HammerModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerModule, [{
    type: NgModule,
    args: [{
      providers: [{
        provide: EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: true,
        deps: [DOCUMENT2, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]
      }, {
        provide: HAMMER_GESTURE_CONFIG,
        useClass: HammerGestureConfig,
        deps: []
      }]
    }]
  }], null, null);
})();
var _DomSanitizer = class _DomSanitizer {
};
_DomSanitizer.\u0275fac = function DomSanitizer_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DomSanitizer)();
};
_DomSanitizer.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DomSanitizer,
  factory: function DomSanitizer_Factory(__ngFactoryType__) {
    let __ngConditionalFactory__ = null;
    if (__ngFactoryType__) {
      __ngConditionalFactory__ = new (__ngFactoryType__ || _DomSanitizer)();
    } else {
      __ngConditionalFactory__ = \u0275\u0275inject(DomSanitizerImpl);
    }
    return __ngConditionalFactory__;
  },
  providedIn: "root"
});
var DomSanitizer = _DomSanitizer;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomSanitizer, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useExisting: forwardRef(() => DomSanitizerImpl)
    }]
  }], null, null);
})();
var _DomSanitizerImpl = class _DomSanitizerImpl extends DomSanitizer {
  constructor(_doc2) {
    super();
    this._doc = _doc2;
  }
  sanitize(ctx, value) {
    if (value == null) return null;
    switch (ctx) {
      case SecurityContext.NONE:
        return value;
      case SecurityContext.HTML:
        if (allowSanitizationBypassAndThrow(
          value,
          "HTML"
          /* BypassType.Html */
        )) {
          return unwrapSafeValue(value);
        }
        return _sanitizeHtml(this._doc, String(value)).toString();
      case SecurityContext.STYLE:
        if (allowSanitizationBypassAndThrow(
          value,
          "Style"
          /* BypassType.Style */
        )) {
          return unwrapSafeValue(value);
        }
        return value;
      case SecurityContext.SCRIPT:
        if (allowSanitizationBypassAndThrow(
          value,
          "Script"
          /* BypassType.Script */
        )) {
          return unwrapSafeValue(value);
        }
        throw new RuntimeError(5200, (typeof ngDevMode === "undefined" || ngDevMode) && "unsafe value used in a script context");
      case SecurityContext.URL:
        if (allowSanitizationBypassAndThrow(
          value,
          "URL"
          /* BypassType.Url */
        )) {
          return unwrapSafeValue(value);
        }
        return _sanitizeUrl(String(value));
      case SecurityContext.RESOURCE_URL:
        if (allowSanitizationBypassAndThrow(
          value,
          "ResourceURL"
          /* BypassType.ResourceUrl */
        )) {
          return unwrapSafeValue(value);
        }
        throw new RuntimeError(5201, (typeof ngDevMode === "undefined" || ngDevMode) && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);
      default:
        throw new RuntimeError(5202, (typeof ngDevMode === "undefined" || ngDevMode) && `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`);
    }
  }
  bypassSecurityTrustHtml(value) {
    return bypassSanitizationTrustHtml(value);
  }
  bypassSecurityTrustStyle(value) {
    return bypassSanitizationTrustStyle(value);
  }
  bypassSecurityTrustScript(value) {
    return bypassSanitizationTrustScript(value);
  }
  bypassSecurityTrustUrl(value) {
    return bypassSanitizationTrustUrl(value);
  }
  bypassSecurityTrustResourceUrl(value) {
    return bypassSanitizationTrustResourceUrl(value);
  }
};
_DomSanitizerImpl.\u0275fac = function DomSanitizerImpl_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DomSanitizerImpl)(\u0275\u0275inject(DOCUMENT2));
};
_DomSanitizerImpl.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DomSanitizerImpl,
  factory: _DomSanitizerImpl.\u0275fac,
  providedIn: "root"
});
var DomSanitizerImpl = _DomSanitizerImpl;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomSanitizerImpl, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var HydrationFeatureKind;
(function(HydrationFeatureKind2) {
  HydrationFeatureKind2[HydrationFeatureKind2["NoHttpTransferCache"] = 0] = "NoHttpTransferCache";
  HydrationFeatureKind2[HydrationFeatureKind2["HttpTransferCacheOptions"] = 1] = "HttpTransferCacheOptions";
  HydrationFeatureKind2[HydrationFeatureKind2["I18nSupport"] = 2] = "I18nSupport";
  HydrationFeatureKind2[HydrationFeatureKind2["EventReplay"] = 3] = "EventReplay";
})(HydrationFeatureKind || (HydrationFeatureKind = {}));
var VERSION3 = new Version("18.2.2");

// node_modules/@angular/router/fesm2022/router.mjs
var PRIMARY_OUTLET = "primary";
var RouteTitleKey = /* @__PURE__ */ Symbol("RouteTitle");
var ParamsAsMap = class {
  constructor(params) {
    this.params = params || {};
  }
  has(name) {
    return Object.prototype.hasOwnProperty.call(this.params, name);
  }
  get(name) {
    if (this.has(name)) {
      const v = this.params[name];
      return Array.isArray(v) ? v[0] : v;
    }
    return null;
  }
  getAll(name) {
    if (this.has(name)) {
      const v = this.params[name];
      return Array.isArray(v) ? v : [v];
    }
    return [];
  }
  get keys() {
    return Object.keys(this.params);
  }
};
function convertToParamMap(params) {
  return new ParamsAsMap(params);
}
function defaultUrlMatcher(segments, segmentGroup, route) {
  const parts = route.path.split("/");
  if (parts.length > segments.length) {
    return null;
  }
  if (route.pathMatch === "full" && (segmentGroup.hasChildren() || parts.length < segments.length)) {
    return null;
  }
  const posParams = {};
  for (let index = 0; index < parts.length; index++) {
    const part = parts[index];
    const segment = segments[index];
    const isParameter = part[0] === ":";
    if (isParameter) {
      posParams[part.substring(1)] = segment;
    } else if (part !== segment.path) {
      return null;
    }
  }
  return {
    consumed: segments.slice(0, parts.length),
    posParams
  };
}
function shallowEqualArrays(a, b) {
  if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; ++i) {
    if (!shallowEqual(a[i], b[i])) return false;
  }
  return true;
}
function shallowEqual(a, b) {
  const k1 = a ? getDataKeys(a) : void 0;
  const k2 = b ? getDataKeys(b) : void 0;
  if (!k1 || !k2 || k1.length != k2.length) {
    return false;
  }
  let key;
  for (let i = 0; i < k1.length; i++) {
    key = k1[i];
    if (!equalArraysOrString(a[key], b[key])) {
      return false;
    }
  }
  return true;
}
function getDataKeys(obj) {
  return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];
}
function equalArraysOrString(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) return false;
    const aSorted = [...a].sort();
    const bSorted = [...b].sort();
    return aSorted.every((val, index) => bSorted[index] === val);
  } else {
    return a === b;
  }
}
function last3(a) {
  return a.length > 0 ? a[a.length - 1] : null;
}
function wrapIntoObservable(value) {
  if (isObservable(value)) {
    return value;
  }
  if (isPromise2(value)) {
    return from(Promise.resolve(value));
  }
  return of(value);
}
var pathCompareMap = {
  "exact": equalSegmentGroups,
  "subset": containsSegmentGroup
};
var paramCompareMap = {
  "exact": equalParams,
  "subset": containsParams,
  "ignored": () => true
};
function containsTree(container, containee, options) {
  return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === "exact" && container.fragment !== containee.fragment);
}
function equalParams(container, containee) {
  return shallowEqual(container, containee);
}
function equalSegmentGroups(container, containee, matrixParams) {
  if (!equalPath(container.segments, containee.segments)) return false;
  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {
    return false;
  }
  if (container.numberOfChildren !== containee.numberOfChildren) return false;
  for (const c in containee.children) {
    if (!container.children[c]) return false;
    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams)) return false;
  }
  return true;
}
function containsParams(container, containee) {
  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every((key) => equalArraysOrString(container[key], containee[key]));
}
function containsSegmentGroup(container, containee, matrixParams) {
  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);
}
function containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {
  if (container.segments.length > containeePaths.length) {
    const current = container.segments.slice(0, containeePaths.length);
    if (!equalPath(current, containeePaths)) return false;
    if (containee.hasChildren()) return false;
    if (!matrixParamsMatch(current, containeePaths, matrixParams)) return false;
    return true;
  } else if (container.segments.length === containeePaths.length) {
    if (!equalPath(container.segments, containeePaths)) return false;
    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams)) return false;
    for (const c in containee.children) {
      if (!container.children[c]) return false;
      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {
        return false;
      }
    }
    return true;
  } else {
    const current = containeePaths.slice(0, container.segments.length);
    const next = containeePaths.slice(container.segments.length);
    if (!equalPath(container.segments, current)) return false;
    if (!matrixParamsMatch(container.segments, current, matrixParams)) return false;
    if (!container.children[PRIMARY_OUTLET]) return false;
    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);
  }
}
function matrixParamsMatch(containerPaths, containeePaths, options) {
  return containeePaths.every((containeeSegment, i) => {
    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);
  });
}
var UrlTree = class {
  constructor(root = new UrlSegmentGroup([], {}), queryParams = {}, fragment = null) {
    this.root = root;
    this.queryParams = queryParams;
    this.fragment = fragment;
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (root.segments.length > 0) {
        throw new RuntimeError(4015, "The root `UrlSegmentGroup` should not contain `segments`. Instead, these segments belong in the `children` so they can be associated with a named outlet.");
      }
    }
  }
  get queryParamMap() {
    this._queryParamMap ??= convertToParamMap(this.queryParams);
    return this._queryParamMap;
  }
  /** @docsNotRequired */
  toString() {
    return DEFAULT_SERIALIZER.serialize(this);
  }
};
var UrlSegmentGroup = class {
  constructor(segments, children) {
    this.segments = segments;
    this.children = children;
    this.parent = null;
    Object.values(children).forEach((v) => v.parent = this);
  }
  /** Whether the segment has child segments */
  hasChildren() {
    return this.numberOfChildren > 0;
  }
  /** Number of child segments */
  get numberOfChildren() {
    return Object.keys(this.children).length;
  }
  /** @docsNotRequired */
  toString() {
    return serializePaths(this);
  }
};
var UrlSegment = class {
  constructor(path, parameters) {
    this.path = path;
    this.parameters = parameters;
  }
  get parameterMap() {
    this._parameterMap ??= convertToParamMap(this.parameters);
    return this._parameterMap;
  }
  /** @docsNotRequired */
  toString() {
    return serializePath(this);
  }
};
function equalSegments(as, bs) {
  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));
}
function equalPath(as, bs) {
  if (as.length !== bs.length) return false;
  return as.every((a, i) => a.path === bs[i].path);
}
function mapChildrenIntoArray(segment, fn) {
  let res = [];
  Object.entries(segment.children).forEach(([childOutlet, child]) => {
    if (childOutlet === PRIMARY_OUTLET) {
      res = res.concat(fn(child, childOutlet));
    }
  });
  Object.entries(segment.children).forEach(([childOutlet, child]) => {
    if (childOutlet !== PRIMARY_OUTLET) {
      res = res.concat(fn(child, childOutlet));
    }
  });
  return res;
}
var _UrlSerializer = class _UrlSerializer {
};
_UrlSerializer.\u0275fac = function UrlSerializer_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _UrlSerializer)();
};
_UrlSerializer.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _UrlSerializer,
  factory: () => (() => new DefaultUrlSerializer())(),
  providedIn: "root"
});
var UrlSerializer = _UrlSerializer;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UrlSerializer, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => new DefaultUrlSerializer()
    }]
  }], null, null);
})();
var DefaultUrlSerializer = class {
  /** Parses a url into a `UrlTree` */
  parse(url) {
    const p = new UrlParser(url);
    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
  }
  /** Converts a `UrlTree` into a url */
  serialize(tree2) {
    const segment = `/${serializeSegment(tree2.root, true)}`;
    const query = serializeQueryParams(tree2.queryParams);
    const fragment = typeof tree2.fragment === `string` ? `#${encodeUriFragment(tree2.fragment)}` : "";
    return `${segment}${query}${fragment}`;
  }
};
var DEFAULT_SERIALIZER = new DefaultUrlSerializer();
function serializePaths(segment) {
  return segment.segments.map((p) => serializePath(p)).join("/");
}
function serializeSegment(segment, root) {
  if (!segment.hasChildren()) {
    return serializePaths(segment);
  }
  if (root) {
    const primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : "";
    const children = [];
    Object.entries(segment.children).forEach(([k, v]) => {
      if (k !== PRIMARY_OUTLET) {
        children.push(`${k}:${serializeSegment(v, false)}`);
      }
    });
    return children.length > 0 ? `${primary}(${children.join("//")})` : primary;
  } else {
    const children = mapChildrenIntoArray(segment, (v, k) => {
      if (k === PRIMARY_OUTLET) {
        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
      }
      return [`${k}:${serializeSegment(v, false)}`];
    });
    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {
      return `${serializePaths(segment)}/${children[0]}`;
    }
    return `${serializePaths(segment)}/(${children.join("//")})`;
  }
}
function encodeUriString(s) {
  return encodeURIComponent(s).replace(/%40/g, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",");
}
function encodeUriQuery(s) {
  return encodeUriString(s).replace(/%3B/gi, ";");
}
function encodeUriFragment(s) {
  return encodeURI(s);
}
function encodeUriSegment(s) {
  return encodeUriString(s).replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/%26/gi, "&");
}
function decode(s) {
  return decodeURIComponent(s);
}
function decodeQuery(s) {
  return decode(s.replace(/\+/g, "%20"));
}
function serializePath(path) {
  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;
}
function serializeMatrixParams(params) {
  return Object.entries(params).map(([key, value]) => `;${encodeUriSegment(key)}=${encodeUriSegment(value)}`).join("");
}
function serializeQueryParams(params) {
  const strParams = Object.entries(params).map(([name, value]) => {
    return Array.isArray(value) ? value.map((v) => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join("&") : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;
  }).filter((s) => s);
  return strParams.length ? `?${strParams.join("&")}` : "";
}
var SEGMENT_RE = /^[^\/()?;#]+/;
function matchSegments(str) {
  const match2 = str.match(SEGMENT_RE);
  return match2 ? match2[0] : "";
}
var MATRIX_PARAM_SEGMENT_RE = /^[^\/()?;=#]+/;
function matchMatrixKeySegments(str) {
  const match2 = str.match(MATRIX_PARAM_SEGMENT_RE);
  return match2 ? match2[0] : "";
}
var QUERY_PARAM_RE = /^[^=?&#]+/;
function matchQueryParams(str) {
  const match2 = str.match(QUERY_PARAM_RE);
  return match2 ? match2[0] : "";
}
var QUERY_PARAM_VALUE_RE = /^[^&#]+/;
function matchUrlQueryParamValue(str) {
  const match2 = str.match(QUERY_PARAM_VALUE_RE);
  return match2 ? match2[0] : "";
}
var UrlParser = class {
  constructor(url) {
    this.url = url;
    this.remaining = url;
  }
  parseRootSegment() {
    this.consumeOptional("/");
    if (this.remaining === "" || this.peekStartsWith("?") || this.peekStartsWith("#")) {
      return new UrlSegmentGroup([], {});
    }
    return new UrlSegmentGroup([], this.parseChildren());
  }
  parseQueryParams() {
    const params = {};
    if (this.consumeOptional("?")) {
      do {
        this.parseQueryParam(params);
      } while (this.consumeOptional("&"));
    }
    return params;
  }
  parseFragment() {
    return this.consumeOptional("#") ? decodeURIComponent(this.remaining) : null;
  }
  parseChildren() {
    if (this.remaining === "") {
      return {};
    }
    this.consumeOptional("/");
    const segments = [];
    if (!this.peekStartsWith("(")) {
      segments.push(this.parseSegment());
    }
    while (this.peekStartsWith("/") && !this.peekStartsWith("//") && !this.peekStartsWith("/(")) {
      this.capture("/");
      segments.push(this.parseSegment());
    }
    let children = {};
    if (this.peekStartsWith("/(")) {
      this.capture("/");
      children = this.parseParens(true);
    }
    let res = {};
    if (this.peekStartsWith("(")) {
      res = this.parseParens(false);
    }
    if (segments.length > 0 || Object.keys(children).length > 0) {
      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
    }
    return res;
  }
  // parse a segment with its matrix parameters
  // ie `name;k1=v1;k2`
  parseSegment() {
    const path = matchSegments(this.remaining);
    if (path === "" && this.peekStartsWith(";")) {
      throw new RuntimeError(4009, (typeof ngDevMode === "undefined" || ngDevMode) && `Empty path url segment cannot have parameters: '${this.remaining}'.`);
    }
    this.capture(path);
    return new UrlSegment(decode(path), this.parseMatrixParams());
  }
  parseMatrixParams() {
    const params = {};
    while (this.consumeOptional(";")) {
      this.parseParam(params);
    }
    return params;
  }
  parseParam(params) {
    const key = matchMatrixKeySegments(this.remaining);
    if (!key) {
      return;
    }
    this.capture(key);
    let value = "";
    if (this.consumeOptional("=")) {
      const valueMatch = matchSegments(this.remaining);
      if (valueMatch) {
        value = valueMatch;
        this.capture(value);
      }
    }
    params[decode(key)] = decode(value);
  }
  // Parse a single query parameter `name[=value]`
  parseQueryParam(params) {
    const key = matchQueryParams(this.remaining);
    if (!key) {
      return;
    }
    this.capture(key);
    let value = "";
    if (this.consumeOptional("=")) {
      const valueMatch = matchUrlQueryParamValue(this.remaining);
      if (valueMatch) {
        value = valueMatch;
        this.capture(value);
      }
    }
    const decodedKey = decodeQuery(key);
    const decodedVal = decodeQuery(value);
    if (params.hasOwnProperty(decodedKey)) {
      let currentVal = params[decodedKey];
      if (!Array.isArray(currentVal)) {
        currentVal = [currentVal];
        params[decodedKey] = currentVal;
      }
      currentVal.push(decodedVal);
    } else {
      params[decodedKey] = decodedVal;
    }
  }
  // parse `(a/b//outlet_name:c/d)`
  parseParens(allowPrimary) {
    const segments = {};
    this.capture("(");
    while (!this.consumeOptional(")") && this.remaining.length > 0) {
      const path = matchSegments(this.remaining);
      const next = this.remaining[path.length];
      if (next !== "/" && next !== ")" && next !== ";") {
        throw new RuntimeError(4010, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot parse url '${this.url}'`);
      }
      let outletName = void 0;
      if (path.indexOf(":") > -1) {
        outletName = path.slice(0, path.indexOf(":"));
        this.capture(outletName);
        this.capture(":");
      } else if (allowPrimary) {
        outletName = PRIMARY_OUTLET;
      }
      const children = this.parseChildren();
      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
      this.consumeOptional("//");
    }
    return segments;
  }
  peekStartsWith(str) {
    return this.remaining.startsWith(str);
  }
  // Consumes the prefix when it is present and returns whether it has been consumed
  consumeOptional(str) {
    if (this.peekStartsWith(str)) {
      this.remaining = this.remaining.substring(str.length);
      return true;
    }
    return false;
  }
  capture(str) {
    if (!this.consumeOptional(str)) {
      throw new RuntimeError(4011, (typeof ngDevMode === "undefined" || ngDevMode) && `Expected "${str}".`);
    }
  }
};
function createRoot(rootCandidate) {
  return rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], {
    [PRIMARY_OUTLET]: rootCandidate
  }) : rootCandidate;
}
function squashSegmentGroup(segmentGroup) {
  const newChildren = {};
  for (const [childOutlet, child] of Object.entries(segmentGroup.children)) {
    const childCandidate = squashSegmentGroup(child);
    if (childOutlet === PRIMARY_OUTLET && childCandidate.segments.length === 0 && childCandidate.hasChildren()) {
      for (const [grandChildOutlet, grandChild] of Object.entries(childCandidate.children)) {
        newChildren[grandChildOutlet] = grandChild;
      }
    } else if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {
      newChildren[childOutlet] = childCandidate;
    }
  }
  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);
  return mergeTrivialChildren(s);
}
function mergeTrivialChildren(s) {
  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
    const c = s.children[PRIMARY_OUTLET];
    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
  }
  return s;
}
function isUrlTree(v) {
  return v instanceof UrlTree;
}
function createUrlTreeFromSnapshot(relativeTo, commands, queryParams = null, fragment = null) {
  const relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeTo);
  return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, queryParams, fragment);
}
function createSegmentGroupFromRoute(route) {
  let targetGroup;
  function createSegmentGroupFromRouteRecursive(currentRoute) {
    const childOutlets = {};
    for (const childSnapshot of currentRoute.children) {
      const root = createSegmentGroupFromRouteRecursive(childSnapshot);
      childOutlets[childSnapshot.outlet] = root;
    }
    const segmentGroup = new UrlSegmentGroup(currentRoute.url, childOutlets);
    if (currentRoute === route) {
      targetGroup = segmentGroup;
    }
    return segmentGroup;
  }
  const rootCandidate = createSegmentGroupFromRouteRecursive(route.root);
  const rootSegmentGroup = createRoot(rootCandidate);
  return targetGroup ?? rootSegmentGroup;
}
function createUrlTreeFromSegmentGroup(relativeTo, commands, queryParams, fragment) {
  let root = relativeTo;
  while (root.parent) {
    root = root.parent;
  }
  if (commands.length === 0) {
    return tree(root, root, root, queryParams, fragment);
  }
  const nav = computeNavigation(commands);
  if (nav.toRoot()) {
    return tree(root, root, new UrlSegmentGroup([], {}), queryParams, fragment);
  }
  const position = findStartingPositionForTargetGroup(nav, root, relativeTo);
  const newSegmentGroup = position.processChildren ? updateSegmentGroupChildren(position.segmentGroup, position.index, nav.commands) : updateSegmentGroup(position.segmentGroup, position.index, nav.commands);
  return tree(root, position.segmentGroup, newSegmentGroup, queryParams, fragment);
}
function isMatrixParams(command) {
  return typeof command === "object" && command != null && !command.outlets && !command.segmentPath;
}
function isCommandWithOutlets(command) {
  return typeof command === "object" && command != null && command.outlets;
}
function tree(oldRoot, oldSegmentGroup, newSegmentGroup, queryParams, fragment) {
  let qp = {};
  if (queryParams) {
    Object.entries(queryParams).forEach(([name, value]) => {
      qp[name] = Array.isArray(value) ? value.map((v) => `${v}`) : `${value}`;
    });
  }
  let rootCandidate;
  if (oldRoot === oldSegmentGroup) {
    rootCandidate = newSegmentGroup;
  } else {
    rootCandidate = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);
  }
  const newRoot = createRoot(squashSegmentGroup(rootCandidate));
  return new UrlTree(newRoot, qp, fragment);
}
function replaceSegment(current, oldSegment, newSegment) {
  const children = {};
  Object.entries(current.children).forEach(([outletName, c]) => {
    if (c === oldSegment) {
      children[outletName] = newSegment;
    } else {
      children[outletName] = replaceSegment(c, oldSegment, newSegment);
    }
  });
  return new UrlSegmentGroup(current.segments, children);
}
var Navigation = class {
  constructor(isAbsolute, numberOfDoubleDots, commands) {
    this.isAbsolute = isAbsolute;
    this.numberOfDoubleDots = numberOfDoubleDots;
    this.commands = commands;
    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
      throw new RuntimeError(4003, (typeof ngDevMode === "undefined" || ngDevMode) && "Root segment cannot have matrix parameters");
    }
    const cmdWithOutlet = commands.find(isCommandWithOutlets);
    if (cmdWithOutlet && cmdWithOutlet !== last3(commands)) {
      throw new RuntimeError(4004, (typeof ngDevMode === "undefined" || ngDevMode) && "{outlets:{}} has to be the last command");
    }
  }
  toRoot() {
    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == "/";
  }
};
function computeNavigation(commands) {
  if (typeof commands[0] === "string" && commands.length === 1 && commands[0] === "/") {
    return new Navigation(true, 0, commands);
  }
  let numberOfDoubleDots = 0;
  let isAbsolute = false;
  const res = commands.reduce((res2, cmd, cmdIdx) => {
    if (typeof cmd === "object" && cmd != null) {
      if (cmd.outlets) {
        const outlets = {};
        Object.entries(cmd.outlets).forEach(([name, commands2]) => {
          outlets[name] = typeof commands2 === "string" ? commands2.split("/") : commands2;
        });
        return [...res2, {
          outlets
        }];
      }
      if (cmd.segmentPath) {
        return [...res2, cmd.segmentPath];
      }
    }
    if (!(typeof cmd === "string")) {
      return [...res2, cmd];
    }
    if (cmdIdx === 0) {
      cmd.split("/").forEach((urlPart, partIndex) => {
        if (partIndex == 0 && urlPart === ".") {
        } else if (partIndex == 0 && urlPart === "") {
          isAbsolute = true;
        } else if (urlPart === "..") {
          numberOfDoubleDots++;
        } else if (urlPart != "") {
          res2.push(urlPart);
        }
      });
      return res2;
    }
    return [...res2, cmd];
  }, []);
  return new Navigation(isAbsolute, numberOfDoubleDots, res);
}
var Position = class {
  constructor(segmentGroup, processChildren, index) {
    this.segmentGroup = segmentGroup;
    this.processChildren = processChildren;
    this.index = index;
  }
};
function findStartingPositionForTargetGroup(nav, root, target) {
  if (nav.isAbsolute) {
    return new Position(root, true, 0);
  }
  if (!target) {
    return new Position(root, false, NaN);
  }
  if (target.parent === null) {
    return new Position(target, true, 0);
  }
  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
  const index = target.segments.length - 1 + modifier;
  return createPositionApplyingDoubleDots(target, index, nav.numberOfDoubleDots);
}
function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
  let g = group;
  let ci = index;
  let dd = numberOfDoubleDots;
  while (dd > ci) {
    dd -= ci;
    g = g.parent;
    if (!g) {
      throw new RuntimeError(4005, (typeof ngDevMode === "undefined" || ngDevMode) && "Invalid number of '../'");
    }
    ci = g.segments.length;
  }
  return new Position(g, false, ci - dd);
}
function getOutlets(commands) {
  if (isCommandWithOutlets(commands[0])) {
    return commands[0].outlets;
  }
  return {
    [PRIMARY_OUTLET]: commands
  };
}
function updateSegmentGroup(segmentGroup, startIndex, commands) {
  segmentGroup ??= new UrlSegmentGroup([], {});
  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
  }
  const m = prefixedWith(segmentGroup, startIndex, commands);
  const slicedCommands = commands.slice(m.commandIndex);
  if (m.match && m.pathIndex < segmentGroup.segments.length) {
    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
    return updateSegmentGroupChildren(g, 0, slicedCommands);
  } else if (m.match && slicedCommands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else if (m.match && !segmentGroup.hasChildren()) {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  } else if (m.match) {
    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
  } else {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  }
}
function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
  if (commands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else {
    const outlets = getOutlets(commands);
    const children = {};
    if (Object.keys(outlets).some((o) => o !== PRIMARY_OUTLET) && segmentGroup.children[PRIMARY_OUTLET] && segmentGroup.numberOfChildren === 1 && segmentGroup.children[PRIMARY_OUTLET].segments.length === 0) {
      const childrenOfEmptyChild = updateSegmentGroupChildren(segmentGroup.children[PRIMARY_OUTLET], startIndex, commands);
      return new UrlSegmentGroup(segmentGroup.segments, childrenOfEmptyChild.children);
    }
    Object.entries(outlets).forEach(([outlet, commands2]) => {
      if (typeof commands2 === "string") {
        commands2 = [commands2];
      }
      if (commands2 !== null) {
        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands2);
      }
    });
    Object.entries(segmentGroup.children).forEach(([childOutlet, child]) => {
      if (outlets[childOutlet] === void 0) {
        children[childOutlet] = child;
      }
    });
    return new UrlSegmentGroup(segmentGroup.segments, children);
  }
}
function prefixedWith(segmentGroup, startIndex, commands) {
  let currentCommandIndex = 0;
  let currentPathIndex = startIndex;
  const noMatch2 = {
    match: false,
    pathIndex: 0,
    commandIndex: 0
  };
  while (currentPathIndex < segmentGroup.segments.length) {
    if (currentCommandIndex >= commands.length) return noMatch2;
    const path = segmentGroup.segments[currentPathIndex];
    const command = commands[currentCommandIndex];
    if (isCommandWithOutlets(command)) {
      break;
    }
    const curr = `${command}`;
    const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
    if (currentPathIndex > 0 && curr === void 0) break;
    if (curr && next && typeof next === "object" && next.outlets === void 0) {
      if (!compare(curr, next, path)) return noMatch2;
      currentCommandIndex += 2;
    } else {
      if (!compare(curr, {}, path)) return noMatch2;
      currentCommandIndex++;
    }
    currentPathIndex++;
  }
  return {
    match: true,
    pathIndex: currentPathIndex,
    commandIndex: currentCommandIndex
  };
}
function createNewSegmentGroup(segmentGroup, startIndex, commands) {
  const paths = segmentGroup.segments.slice(0, startIndex);
  let i = 0;
  while (i < commands.length) {
    const command = commands[i];
    if (isCommandWithOutlets(command)) {
      const children = createNewSegmentChildren(command.outlets);
      return new UrlSegmentGroup(paths, children);
    }
    if (i === 0 && isMatrixParams(commands[0])) {
      const p = segmentGroup.segments[startIndex];
      paths.push(new UrlSegment(p.path, stringify2(commands[0])));
      i++;
      continue;
    }
    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;
    const next = i < commands.length - 1 ? commands[i + 1] : null;
    if (curr && next && isMatrixParams(next)) {
      paths.push(new UrlSegment(curr, stringify2(next)));
      i += 2;
    } else {
      paths.push(new UrlSegment(curr, {}));
      i++;
    }
  }
  return new UrlSegmentGroup(paths, {});
}
function createNewSegmentChildren(outlets) {
  const children = {};
  Object.entries(outlets).forEach(([outlet, commands]) => {
    if (typeof commands === "string") {
      commands = [commands];
    }
    if (commands !== null) {
      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
    }
  });
  return children;
}
function stringify2(params) {
  const res = {};
  Object.entries(params).forEach(([k, v]) => res[k] = `${v}`);
  return res;
}
function compare(path, params, segment) {
  return path == segment.path && shallowEqual(params, segment.parameters);
}
var IMPERATIVE_NAVIGATION = "imperative";
var EventType2;
(function(EventType3) {
  EventType3[EventType3["NavigationStart"] = 0] = "NavigationStart";
  EventType3[EventType3["NavigationEnd"] = 1] = "NavigationEnd";
  EventType3[EventType3["NavigationCancel"] = 2] = "NavigationCancel";
  EventType3[EventType3["NavigationError"] = 3] = "NavigationError";
  EventType3[EventType3["RoutesRecognized"] = 4] = "RoutesRecognized";
  EventType3[EventType3["ResolveStart"] = 5] = "ResolveStart";
  EventType3[EventType3["ResolveEnd"] = 6] = "ResolveEnd";
  EventType3[EventType3["GuardsCheckStart"] = 7] = "GuardsCheckStart";
  EventType3[EventType3["GuardsCheckEnd"] = 8] = "GuardsCheckEnd";
  EventType3[EventType3["RouteConfigLoadStart"] = 9] = "RouteConfigLoadStart";
  EventType3[EventType3["RouteConfigLoadEnd"] = 10] = "RouteConfigLoadEnd";
  EventType3[EventType3["ChildActivationStart"] = 11] = "ChildActivationStart";
  EventType3[EventType3["ChildActivationEnd"] = 12] = "ChildActivationEnd";
  EventType3[EventType3["ActivationStart"] = 13] = "ActivationStart";
  EventType3[EventType3["ActivationEnd"] = 14] = "ActivationEnd";
  EventType3[EventType3["Scroll"] = 15] = "Scroll";
  EventType3[EventType3["NavigationSkipped"] = 16] = "NavigationSkipped";
})(EventType2 || (EventType2 = {}));
var RouterEvent = class {
  constructor(id, url) {
    this.id = id;
    this.url = url;
  }
};
var NavigationStart = class extends RouterEvent {
  constructor(id, url, navigationTrigger = "imperative", restoredState = null) {
    super(id, url);
    this.type = EventType2.NavigationStart;
    this.navigationTrigger = navigationTrigger;
    this.restoredState = restoredState;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;
  }
};
var NavigationEnd = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.type = EventType2.NavigationEnd;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;
  }
};
var NavigationCancellationCode;
(function(NavigationCancellationCode2) {
  NavigationCancellationCode2[NavigationCancellationCode2["Redirect"] = 0] = "Redirect";
  NavigationCancellationCode2[NavigationCancellationCode2["SupersededByNewNavigation"] = 1] = "SupersededByNewNavigation";
  NavigationCancellationCode2[NavigationCancellationCode2["NoDataFromResolver"] = 2] = "NoDataFromResolver";
  NavigationCancellationCode2[NavigationCancellationCode2["GuardRejected"] = 3] = "GuardRejected";
})(NavigationCancellationCode || (NavigationCancellationCode = {}));
var NavigationSkippedCode;
(function(NavigationSkippedCode2) {
  NavigationSkippedCode2[NavigationSkippedCode2["IgnoredSameUrlNavigation"] = 0] = "IgnoredSameUrlNavigation";
  NavigationSkippedCode2[NavigationSkippedCode2["IgnoredByUrlHandlingStrategy"] = 1] = "IgnoredByUrlHandlingStrategy";
})(NavigationSkippedCode || (NavigationSkippedCode = {}));
var NavigationCancel = class extends RouterEvent {
  constructor(id, url, reason, code) {
    super(id, url);
    this.reason = reason;
    this.code = code;
    this.type = EventType2.NavigationCancel;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;
  }
};
var NavigationSkipped = class extends RouterEvent {
  constructor(id, url, reason, code) {
    super(id, url);
    this.reason = reason;
    this.code = code;
    this.type = EventType2.NavigationSkipped;
  }
};
var NavigationError = class extends RouterEvent {
  constructor(id, url, error, target) {
    super(id, url);
    this.error = error;
    this.target = target;
    this.type = EventType2.NavigationError;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;
  }
};
var RoutesRecognized = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
    this.type = EventType2.RoutesRecognized;
  }
  /** @docsNotRequired */
  toString() {
    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var GuardsCheckStart = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
    this.type = EventType2.GuardsCheckStart;
  }
  toString() {
    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var GuardsCheckEnd = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects, state, shouldActivate) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
    this.shouldActivate = shouldActivate;
    this.type = EventType2.GuardsCheckEnd;
  }
  toString() {
    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;
  }
};
var ResolveStart = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
    this.type = EventType2.ResolveStart;
  }
  toString() {
    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var ResolveEnd = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects, state) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state;
    this.type = EventType2.ResolveEnd;
  }
  toString() {
    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var RouteConfigLoadStart = class {
  constructor(route) {
    this.route = route;
    this.type = EventType2.RouteConfigLoadStart;
  }
  toString() {
    return `RouteConfigLoadStart(path: ${this.route.path})`;
  }
};
var RouteConfigLoadEnd = class {
  constructor(route) {
    this.route = route;
    this.type = EventType2.RouteConfigLoadEnd;
  }
  toString() {
    return `RouteConfigLoadEnd(path: ${this.route.path})`;
  }
};
var ChildActivationStart = class {
  constructor(snapshot) {
    this.snapshot = snapshot;
    this.type = EventType2.ChildActivationStart;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ChildActivationStart(path: '${path}')`;
  }
};
var ChildActivationEnd = class {
  constructor(snapshot) {
    this.snapshot = snapshot;
    this.type = EventType2.ChildActivationEnd;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ChildActivationEnd(path: '${path}')`;
  }
};
var ActivationStart = class {
  constructor(snapshot) {
    this.snapshot = snapshot;
    this.type = EventType2.ActivationStart;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ActivationStart(path: '${path}')`;
  }
};
var ActivationEnd = class {
  constructor(snapshot) {
    this.snapshot = snapshot;
    this.type = EventType2.ActivationEnd;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ActivationEnd(path: '${path}')`;
  }
};
var Scroll = class {
  constructor(routerEvent, position, anchor) {
    this.routerEvent = routerEvent;
    this.position = position;
    this.anchor = anchor;
    this.type = EventType2.Scroll;
  }
  toString() {
    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;
    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;
  }
};
var BeforeActivateRoutes = class {
};
var RedirectRequest = class {
  constructor(url, navigationBehaviorOptions) {
    this.url = url;
    this.navigationBehaviorOptions = navigationBehaviorOptions;
  }
};
function stringifyEvent(routerEvent) {
  switch (routerEvent.type) {
    case EventType2.ActivationEnd:
      return `ActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType2.ActivationStart:
      return `ActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType2.ChildActivationEnd:
      return `ChildActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType2.ChildActivationStart:
      return `ChildActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case EventType2.GuardsCheckEnd:
      return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;
    case EventType2.GuardsCheckStart:
      return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType2.NavigationCancel:
      return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case EventType2.NavigationSkipped:
      return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case EventType2.NavigationEnd:
      return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;
    case EventType2.NavigationError:
      return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;
    case EventType2.NavigationStart:
      return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case EventType2.ResolveEnd:
      return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType2.ResolveStart:
      return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType2.RouteConfigLoadEnd:
      return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;
    case EventType2.RouteConfigLoadStart:
      return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;
    case EventType2.RoutesRecognized:
      return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case EventType2.Scroll:
      const pos = routerEvent.position ? `${routerEvent.position[0]}, ${routerEvent.position[1]}` : null;
      return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;
  }
}
function getOrCreateRouteInjectorIfNeeded(route, currentInjector) {
  if (route.providers && !route._injector) {
    route._injector = createEnvironmentInjector(route.providers, currentInjector, `Route: ${route.path}`);
  }
  return route._injector ?? currentInjector;
}
function validateConfig(config2, parentPath = "", requireStandaloneComponents = false) {
  for (let i = 0; i < config2.length; i++) {
    const route = config2[i];
    const fullPath = getFullPath(parentPath, route);
    validateNode(route, fullPath, requireStandaloneComponents);
  }
}
function assertStandalone(fullPath, component) {
  if (component && isNgModule(component)) {
    throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. You are using 'loadComponent' with a module, but it must be used with standalone components. Use 'loadChildren' instead.`);
  } else if (component && !isStandalone(component)) {
    throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. The component must be standalone.`);
  }
}
function validateNode(route, fullPath, requireStandaloneComponents) {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (!route) {
      throw new RuntimeError(4014, `
      Invalid configuration of route '${fullPath}': Encountered undefined route.
      The reason might be an extra comma.

      Example:
      const routes: Routes = [
        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
        { path: 'dashboard',  component: DashboardComponent },, << two commas
        { path: 'detail/:id', component: HeroDetailComponent }
      ];
    `);
    }
    if (Array.isArray(route)) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': Array cannot be specified`);
    }
    if (!route.redirectTo && !route.component && !route.loadComponent && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);
    }
    if (route.redirectTo && route.children) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);
    }
    if (route.redirectTo && route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);
    }
    if (route.children && route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);
    }
    if (route.redirectTo && (route.component || route.loadComponent)) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and component/loadComponent cannot be used together`);
    }
    if (route.component && route.loadComponent) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': component and loadComponent cannot be used together`);
    }
    if (route.redirectTo && route.canActivate) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation so canActivate will never be executed.`);
    }
    if (route.path && route.matcher) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);
    }
    if (route.redirectTo === void 0 && !route.component && !route.loadComponent && !route.children && !route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, loadComponent, redirectTo, children or loadChildren`);
    }
    if (route.path === void 0 && route.matcher === void 0) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);
    }
    if (typeof route.path === "string" && route.path.charAt(0) === "/") {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': path cannot start with a slash`);
    }
    if (route.path === "" && route.redirectTo !== void 0 && route.pathMatch === void 0) {
      const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;
      throw new RuntimeError(4014, `Invalid configuration of route '{path: "${fullPath}", redirectTo: "${route.redirectTo}"}': please provide 'pathMatch'. ${exp}`);
    }
    if (requireStandaloneComponents) {
      assertStandalone(fullPath, route.component);
    }
  }
  if (route.children) {
    validateConfig(route.children, fullPath, requireStandaloneComponents);
  }
}
function getFullPath(parentPath, currentRoute) {
  if (!currentRoute) {
    return parentPath;
  }
  if (!parentPath && !currentRoute.path) {
    return "";
  } else if (parentPath && !currentRoute.path) {
    return `${parentPath}/`;
  } else if (!parentPath && currentRoute.path) {
    return currentRoute.path;
  } else {
    return `${parentPath}/${currentRoute.path}`;
  }
}
function getOutlet(route) {
  return route.outlet || PRIMARY_OUTLET;
}
function sortByMatchingOutlets(routes, outletName) {
  const sortedConfig = routes.filter((r) => getOutlet(r) === outletName);
  sortedConfig.push(...routes.filter((r) => getOutlet(r) !== outletName));
  return sortedConfig;
}
function getClosestRouteInjector(snapshot) {
  if (!snapshot) return null;
  if (snapshot.routeConfig?._injector) {
    return snapshot.routeConfig._injector;
  }
  for (let s = snapshot.parent; s; s = s.parent) {
    const route = s.routeConfig;
    if (route?._loadedInjector) return route._loadedInjector;
    if (route?._injector) return route._injector;
  }
  return null;
}
var OutletContext = class {
  get injector() {
    return getClosestRouteInjector(this.route?.snapshot) ?? this.rootInjector;
  }
  // TODO(atscott): Only here to avoid a "breaking" change in a patch/minor. Remove in v19.
  set injector(_) {
  }
  constructor(rootInjector) {
    this.rootInjector = rootInjector;
    this.outlet = null;
    this.route = null;
    this.children = new ChildrenOutletContexts(this.rootInjector);
    this.attachRef = null;
  }
};
var _ChildrenOutletContexts = class _ChildrenOutletContexts {
  /** @nodoc */
  constructor(rootInjector) {
    this.rootInjector = rootInjector;
    this.contexts = /* @__PURE__ */ new Map();
  }
  /** Called when a `RouterOutlet` directive is instantiated */
  onChildOutletCreated(childName, outlet) {
    const context2 = this.getOrCreateContext(childName);
    context2.outlet = outlet;
    this.contexts.set(childName, context2);
  }
  /**
   * Called when a `RouterOutlet` directive is destroyed.
   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
   * re-created later.
   */
  onChildOutletDestroyed(childName) {
    const context2 = this.getContext(childName);
    if (context2) {
      context2.outlet = null;
      context2.attachRef = null;
    }
  }
  /**
   * Called when the corresponding route is deactivated during navigation.
   * Because the component get destroyed, all children outlet are destroyed.
   */
  onOutletDeactivated() {
    const contexts = this.contexts;
    this.contexts = /* @__PURE__ */ new Map();
    return contexts;
  }
  onOutletReAttached(contexts) {
    this.contexts = contexts;
  }
  getOrCreateContext(childName) {
    let context2 = this.getContext(childName);
    if (!context2) {
      context2 = new OutletContext(this.rootInjector);
      this.contexts.set(childName, context2);
    }
    return context2;
  }
  getContext(childName) {
    return this.contexts.get(childName) || null;
  }
};
_ChildrenOutletContexts.\u0275fac = function ChildrenOutletContexts_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ChildrenOutletContexts)(\u0275\u0275inject(EnvironmentInjector));
};
_ChildrenOutletContexts.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ChildrenOutletContexts,
  factory: _ChildrenOutletContexts.\u0275fac,
  providedIn: "root"
});
var ChildrenOutletContexts = _ChildrenOutletContexts;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChildrenOutletContexts, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: EnvironmentInjector
  }], null);
})();
var Tree = class {
  constructor(root) {
    this._root = root;
  }
  get root() {
    return this._root.value;
  }
  /**
   * @internal
   */
  parent(t) {
    const p = this.pathFromRoot(t);
    return p.length > 1 ? p[p.length - 2] : null;
  }
  /**
   * @internal
   */
  children(t) {
    const n = findNode(t, this._root);
    return n ? n.children.map((t2) => t2.value) : [];
  }
  /**
   * @internal
   */
  firstChild(t) {
    const n = findNode(t, this._root);
    return n && n.children.length > 0 ? n.children[0].value : null;
  }
  /**
   * @internal
   */
  siblings(t) {
    const p = findPath(t, this._root);
    if (p.length < 2) return [];
    const c = p[p.length - 2].children.map((c2) => c2.value);
    return c.filter((cc) => cc !== t);
  }
  /**
   * @internal
   */
  pathFromRoot(t) {
    return findPath(t, this._root).map((s) => s.value);
  }
};
function findNode(value, node) {
  if (value === node.value) return node;
  for (const child of node.children) {
    const node2 = findNode(value, child);
    if (node2) return node2;
  }
  return null;
}
function findPath(value, node) {
  if (value === node.value) return [node];
  for (const child of node.children) {
    const path = findPath(value, child);
    if (path.length) {
      path.unshift(node);
      return path;
    }
  }
  return [];
}
var TreeNode = class {
  constructor(value, children) {
    this.value = value;
    this.children = children;
  }
  toString() {
    return `TreeNode(${this.value})`;
  }
};
function nodeChildrenAsMap(node) {
  const map2 = {};
  if (node) {
    node.children.forEach((child) => map2[child.value.outlet] = child);
  }
  return map2;
}
var RouterState = class extends Tree {
  /** @internal */
  constructor(root, snapshot) {
    super(root);
    this.snapshot = snapshot;
    setRouterState(this, root);
  }
  toString() {
    return this.snapshot.toString();
  }
};
function createEmptyState(rootComponent) {
  const snapshot = createEmptyStateSnapshot(rootComponent);
  const emptyUrl = new BehaviorSubject([new UrlSegment("", {})]);
  const emptyParams = new BehaviorSubject({});
  const emptyData = new BehaviorSubject({});
  const emptyQueryParams = new BehaviorSubject({});
  const fragment = new BehaviorSubject("");
  const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
  activated.snapshot = snapshot.root;
  return new RouterState(new TreeNode(activated, []), snapshot);
}
function createEmptyStateSnapshot(rootComponent) {
  const emptyParams = {};
  const emptyData = {};
  const emptyQueryParams = {};
  const fragment = "";
  const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, {});
  return new RouterStateSnapshot("", new TreeNode(activated, []));
}
var ActivatedRoute = class {
  /** @internal */
  constructor(urlSubject, paramsSubject, queryParamsSubject, fragmentSubject, dataSubject, outlet, component, futureSnapshot) {
    this.urlSubject = urlSubject;
    this.paramsSubject = paramsSubject;
    this.queryParamsSubject = queryParamsSubject;
    this.fragmentSubject = fragmentSubject;
    this.dataSubject = dataSubject;
    this.outlet = outlet;
    this.component = component;
    this._futureSnapshot = futureSnapshot;
    this.title = this.dataSubject?.pipe(map((d) => d[RouteTitleKey])) ?? of(void 0);
    this.url = urlSubject;
    this.params = paramsSubject;
    this.queryParams = queryParamsSubject;
    this.fragment = fragmentSubject;
    this.data = dataSubject;
  }
  /** The configuration used to match this route. */
  get routeConfig() {
    return this._futureSnapshot.routeConfig;
  }
  /** The root of the router state. */
  get root() {
    return this._routerState.root;
  }
  /** The parent of this route in the router state tree. */
  get parent() {
    return this._routerState.parent(this);
  }
  /** The first child of this route in the router state tree. */
  get firstChild() {
    return this._routerState.firstChild(this);
  }
  /** The children of this route in the router state tree. */
  get children() {
    return this._routerState.children(this);
  }
  /** The path from the root of the router state tree to this route. */
  get pathFromRoot() {
    return this._routerState.pathFromRoot(this);
  }
  /**
   * An Observable that contains a map of the required and optional parameters
   * specific to the route.
   * The map supports retrieving single and multiple values from the same parameter.
   */
  get paramMap() {
    this._paramMap ??= this.params.pipe(map((p) => convertToParamMap(p)));
    return this._paramMap;
  }
  /**
   * An Observable that contains a map of the query parameters available to all routes.
   * The map supports retrieving single and multiple values from the query parameter.
   */
  get queryParamMap() {
    this._queryParamMap ??= this.queryParams.pipe(map((p) => convertToParamMap(p)));
    return this._queryParamMap;
  }
  toString() {
    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;
  }
};
function getInherited(route, parent, paramsInheritanceStrategy = "emptyOnly") {
  let inherited;
  const {
    routeConfig
  } = route;
  if (parent !== null && (paramsInheritanceStrategy === "always" || // inherit parent data if route is empty path
  routeConfig?.path === "" || // inherit parent data if parent was componentless
  !parent.component && !parent.routeConfig?.loadComponent)) {
    inherited = {
      params: __spreadValues(__spreadValues({}, parent.params), route.params),
      data: __spreadValues(__spreadValues({}, parent.data), route.data),
      resolve: __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, route.data), parent.data), routeConfig?.data), route._resolvedData)
    };
  } else {
    inherited = {
      params: __spreadValues({}, route.params),
      data: __spreadValues({}, route.data),
      resolve: __spreadValues(__spreadValues({}, route.data), route._resolvedData ?? {})
    };
  }
  if (routeConfig && hasStaticTitle(routeConfig)) {
    inherited.resolve[RouteTitleKey] = routeConfig.title;
  }
  return inherited;
}
var ActivatedRouteSnapshot = class {
  /** The resolved route title */
  get title() {
    return this.data?.[RouteTitleKey];
  }
  /** @internal */
  constructor(url, params, queryParams, fragment, data, outlet, component, routeConfig, resolve) {
    this.url = url;
    this.params = params;
    this.queryParams = queryParams;
    this.fragment = fragment;
    this.data = data;
    this.outlet = outlet;
    this.component = component;
    this.routeConfig = routeConfig;
    this._resolve = resolve;
  }
  /** The root of the router state */
  get root() {
    return this._routerState.root;
  }
  /** The parent of this route in the router state tree */
  get parent() {
    return this._routerState.parent(this);
  }
  /** The first child of this route in the router state tree */
  get firstChild() {
    return this._routerState.firstChild(this);
  }
  /** The children of this route in the router state tree */
  get children() {
    return this._routerState.children(this);
  }
  /** The path from the root of the router state tree to this route */
  get pathFromRoot() {
    return this._routerState.pathFromRoot(this);
  }
  get paramMap() {
    this._paramMap ??= convertToParamMap(this.params);
    return this._paramMap;
  }
  get queryParamMap() {
    this._queryParamMap ??= convertToParamMap(this.queryParams);
    return this._queryParamMap;
  }
  toString() {
    const url = this.url.map((segment) => segment.toString()).join("/");
    const matched = this.routeConfig ? this.routeConfig.path : "";
    return `Route(url:'${url}', path:'${matched}')`;
  }
};
var RouterStateSnapshot = class extends Tree {
  /** @internal */
  constructor(url, root) {
    super(root);
    this.url = url;
    setRouterState(this, root);
  }
  toString() {
    return serializeNode(this._root);
  }
};
function setRouterState(state, node) {
  node.value._routerState = state;
  node.children.forEach((c) => setRouterState(state, c));
}
function serializeNode(node) {
  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(", ")} } ` : "";
  return `${node.value}${c}`;
}
function advanceActivatedRoute(route) {
  if (route.snapshot) {
    const currentSnapshot = route.snapshot;
    const nextSnapshot = route._futureSnapshot;
    route.snapshot = nextSnapshot;
    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
      route.queryParamsSubject.next(nextSnapshot.queryParams);
    }
    if (currentSnapshot.fragment !== nextSnapshot.fragment) {
      route.fragmentSubject.next(nextSnapshot.fragment);
    }
    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
      route.paramsSubject.next(nextSnapshot.params);
    }
    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
      route.urlSubject.next(nextSnapshot.url);
    }
    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
      route.dataSubject.next(nextSnapshot.data);
    }
  } else {
    route.snapshot = route._futureSnapshot;
    route.dataSubject.next(route._futureSnapshot.data);
  }
}
function equalParamsAndUrlSegments(a, b) {
  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
  const parentsMismatch = !a.parent !== !b.parent;
  return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
}
function hasStaticTitle(config2) {
  return typeof config2.title === "string" || config2.title === null;
}
var _RouterOutlet = class _RouterOutlet {
  constructor() {
    this.activated = null;
    this._activatedRoute = null;
    this.name = PRIMARY_OUTLET;
    this.activateEvents = new EventEmitter();
    this.deactivateEvents = new EventEmitter();
    this.attachEvents = new EventEmitter();
    this.detachEvents = new EventEmitter();
    this.parentContexts = inject(ChildrenOutletContexts);
    this.location = inject(ViewContainerRef);
    this.changeDetector = inject(ChangeDetectorRef);
    this.inputBinder = inject(INPUT_BINDER, {
      optional: true
    });
    this.supportsBindingToComponentInputs = true;
  }
  /** @internal */
  get activatedComponentRef() {
    return this.activated;
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (changes["name"]) {
      const {
        firstChange,
        previousValue
      } = changes["name"];
      if (firstChange) {
        return;
      }
      if (this.isTrackedInParentContexts(previousValue)) {
        this.deactivate();
        this.parentContexts.onChildOutletDestroyed(previousValue);
      }
      this.initializeOutletWithName();
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.isTrackedInParentContexts(this.name)) {
      this.parentContexts.onChildOutletDestroyed(this.name);
    }
    this.inputBinder?.unsubscribeFromRouteData(this);
  }
  isTrackedInParentContexts(outletName) {
    return this.parentContexts.getContext(outletName)?.outlet === this;
  }
  /** @nodoc */
  ngOnInit() {
    this.initializeOutletWithName();
  }
  initializeOutletWithName() {
    this.parentContexts.onChildOutletCreated(this.name, this);
    if (this.activated) {
      return;
    }
    const context2 = this.parentContexts.getContext(this.name);
    if (context2?.route) {
      if (context2.attachRef) {
        this.attach(context2.attachRef, context2.route);
      } else {
        this.activateWith(context2.route, context2.injector);
      }
    }
  }
  get isActivated() {
    return !!this.activated;
  }
  /**
   * @returns The currently activated component instance.
   * @throws An error if the outlet is not activated.
   */
  get component() {
    if (!this.activated) throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    return this.activated.instance;
  }
  get activatedRoute() {
    if (!this.activated) throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    return this._activatedRoute;
  }
  get activatedRouteData() {
    if (this._activatedRoute) {
      return this._activatedRoute.snapshot.data;
    }
    return {};
  }
  /**
   * Called when the `RouteReuseStrategy` instructs to detach the subtree
   */
  detach() {
    if (!this.activated) throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    this.location.detach();
    const cmp = this.activated;
    this.activated = null;
    this._activatedRoute = null;
    this.detachEvents.emit(cmp.instance);
    return cmp;
  }
  /**
   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
   */
  attach(ref, activatedRoute) {
    this.activated = ref;
    this._activatedRoute = activatedRoute;
    this.location.insert(ref.hostView);
    this.inputBinder?.bindActivatedRouteToOutletComponent(this);
    this.attachEvents.emit(ref.instance);
  }
  deactivate() {
    if (this.activated) {
      const c = this.component;
      this.activated.destroy();
      this.activated = null;
      this._activatedRoute = null;
      this.deactivateEvents.emit(c);
    }
  }
  activateWith(activatedRoute, environmentInjector) {
    if (this.isActivated) {
      throw new RuntimeError(4013, (typeof ngDevMode === "undefined" || ngDevMode) && "Cannot activate an already activated outlet");
    }
    this._activatedRoute = activatedRoute;
    const location2 = this.location;
    const snapshot = activatedRoute.snapshot;
    const component = snapshot.component;
    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;
    const injector = new OutletInjector(activatedRoute, childContexts, location2.injector);
    this.activated = location2.createComponent(component, {
      index: location2.length,
      injector,
      environmentInjector
    });
    this.changeDetector.markForCheck();
    this.inputBinder?.bindActivatedRouteToOutletComponent(this);
    this.activateEvents.emit(this.activated.instance);
  }
};
_RouterOutlet.\u0275fac = function RouterOutlet_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _RouterOutlet)();
};
_RouterOutlet.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _RouterOutlet,
  selectors: [["router-outlet"]],
  inputs: {
    name: "name"
  },
  outputs: {
    activateEvents: "activate",
    deactivateEvents: "deactivate",
    attachEvents: "attach",
    detachEvents: "detach"
  },
  exportAs: ["outlet"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var RouterOutlet = _RouterOutlet;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterOutlet, [{
    type: Directive,
    args: [{
      selector: "router-outlet",
      exportAs: "outlet",
      standalone: true
    }]
  }], null, {
    name: [{
      type: Input
    }],
    activateEvents: [{
      type: Output,
      args: ["activate"]
    }],
    deactivateEvents: [{
      type: Output,
      args: ["deactivate"]
    }],
    attachEvents: [{
      type: Output,
      args: ["attach"]
    }],
    detachEvents: [{
      type: Output,
      args: ["detach"]
    }]
  });
})();
var OutletInjector = class _OutletInjector {
  /**
   * This injector has a special handing for the `ActivatedRoute` and
   * `ChildrenOutletContexts` tokens: it returns corresponding values for those
   * tokens dynamically. This behavior is different from the regular injector logic,
   * when we initialize and store a value, which is later returned for all inject
   * requests.
   *
   * In some cases (e.g. when using `@defer`), this dynamic behavior requires special
   * handling. This function allows to identify an instance of the `OutletInjector` and
   * create an instance of it without referring to the class itself (so this logic can
   * be invoked from the `core` package). This helps to retain dynamic behavior for the
   * mentioned tokens.
   *
   * Note: it's a temporary solution and we should explore how to support this case better.
   */
  __ngOutletInjector(parentInjector) {
    return new _OutletInjector(this.route, this.childContexts, parentInjector);
  }
  constructor(route, childContexts, parent) {
    this.route = route;
    this.childContexts = childContexts;
    this.parent = parent;
  }
  get(token, notFoundValue) {
    if (token === ActivatedRoute) {
      return this.route;
    }
    if (token === ChildrenOutletContexts) {
      return this.childContexts;
    }
    return this.parent.get(token, notFoundValue);
  }
};
var INPUT_BINDER = new InjectionToken("");
var _RoutedComponentInputBinder = class _RoutedComponentInputBinder {
  constructor() {
    this.outletDataSubscriptions = /* @__PURE__ */ new Map();
  }
  bindActivatedRouteToOutletComponent(outlet) {
    this.unsubscribeFromRouteData(outlet);
    this.subscribeToRouteData(outlet);
  }
  unsubscribeFromRouteData(outlet) {
    this.outletDataSubscriptions.get(outlet)?.unsubscribe();
    this.outletDataSubscriptions.delete(outlet);
  }
  subscribeToRouteData(outlet) {
    const {
      activatedRoute
    } = outlet;
    const dataSubscription = combineLatest([activatedRoute.queryParams, activatedRoute.params, activatedRoute.data]).pipe(switchMap(([queryParams, params, data], index) => {
      data = __spreadValues(__spreadValues(__spreadValues({}, queryParams), params), data);
      if (index === 0) {
        return of(data);
      }
      return Promise.resolve(data);
    })).subscribe((data) => {
      if (!outlet.isActivated || !outlet.activatedComponentRef || outlet.activatedRoute !== activatedRoute || activatedRoute.component === null) {
        this.unsubscribeFromRouteData(outlet);
        return;
      }
      const mirror = reflectComponentType(activatedRoute.component);
      if (!mirror) {
        this.unsubscribeFromRouteData(outlet);
        return;
      }
      for (const {
        templateName
      } of mirror.inputs) {
        outlet.activatedComponentRef.setInput(templateName, data[templateName]);
      }
    });
    this.outletDataSubscriptions.set(outlet, dataSubscription);
  }
};
_RoutedComponentInputBinder.\u0275fac = function RoutedComponentInputBinder_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _RoutedComponentInputBinder)();
};
_RoutedComponentInputBinder.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _RoutedComponentInputBinder,
  factory: _RoutedComponentInputBinder.\u0275fac
});
var RoutedComponentInputBinder = _RoutedComponentInputBinder;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RoutedComponentInputBinder, [{
    type: Injectable
  }], null, null);
})();
function createRouterState(routeReuseStrategy, curr, prevState) {
  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : void 0);
  return new RouterState(root, curr);
}
function createNode(routeReuseStrategy, curr, prevState) {
  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
    const value = prevState.value;
    value._futureSnapshot = curr.value;
    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
    return new TreeNode(value, children);
  } else {
    if (routeReuseStrategy.shouldAttach(curr.value)) {
      const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);
      if (detachedRouteHandle !== null) {
        const tree2 = detachedRouteHandle.route;
        tree2.value._futureSnapshot = curr.value;
        tree2.children = curr.children.map((c) => createNode(routeReuseStrategy, c));
        return tree2;
      }
    }
    const value = createActivatedRoute(curr.value);
    const children = curr.children.map((c) => createNode(routeReuseStrategy, c));
    return new TreeNode(value, children);
  }
}
function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
  return curr.children.map((child) => {
    for (const p of prevState.children) {
      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {
        return createNode(routeReuseStrategy, child, p);
      }
    }
    return createNode(routeReuseStrategy, child);
  });
}
function createActivatedRoute(c) {
  return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);
}
var RedirectCommand = class {
  constructor(redirectTo, navigationBehaviorOptions) {
    this.redirectTo = redirectTo;
    this.navigationBehaviorOptions = navigationBehaviorOptions;
  }
};
var NAVIGATION_CANCELING_ERROR = "ngNavigationCancelingError";
function redirectingNavigationError(urlSerializer, redirect) {
  const {
    redirectTo,
    navigationBehaviorOptions
  } = isUrlTree(redirect) ? {
    redirectTo: redirect,
    navigationBehaviorOptions: void 0
  } : redirect;
  const error = navigationCancelingError(ngDevMode && `Redirecting to "${urlSerializer.serialize(redirectTo)}"`, NavigationCancellationCode.Redirect);
  error.url = redirectTo;
  error.navigationBehaviorOptions = navigationBehaviorOptions;
  return error;
}
function navigationCancelingError(message, code) {
  const error = new Error(`NavigationCancelingError: ${message || ""}`);
  error[NAVIGATION_CANCELING_ERROR] = true;
  error.cancellationCode = code;
  return error;
}
function isRedirectingNavigationCancelingError(error) {
  return isNavigationCancelingError(error) && isUrlTree(error.url);
}
function isNavigationCancelingError(error) {
  return !!error && error[NAVIGATION_CANCELING_ERROR];
}
var warnedAboutUnsupportedInputBinding = false;
var activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent, inputBindingEnabled) => map((t) => {
  new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent, inputBindingEnabled).activate(rootContexts);
  return t;
});
var ActivateRoutes = class {
  constructor(routeReuseStrategy, futureState, currState, forwardEvent, inputBindingEnabled) {
    this.routeReuseStrategy = routeReuseStrategy;
    this.futureState = futureState;
    this.currState = currState;
    this.forwardEvent = forwardEvent;
    this.inputBindingEnabled = inputBindingEnabled;
  }
  activate(parentContexts) {
    const futureRoot = this.futureState._root;
    const currRoot = this.currState ? this.currState._root : null;
    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
    advanceActivatedRoute(this.futureState.root);
    this.activateChildRoutes(futureRoot, currRoot, parentContexts);
  }
  // De-activate the child route that are not re-used for the future state
  deactivateChildRoutes(futureNode, currNode, contexts) {
    const children = nodeChildrenAsMap(currNode);
    futureNode.children.forEach((futureChild) => {
      const childOutletName = futureChild.value.outlet;
      this.deactivateRoutes(futureChild, children[childOutletName], contexts);
      delete children[childOutletName];
    });
    Object.values(children).forEach((v) => {
      this.deactivateRouteAndItsChildren(v, contexts);
    });
  }
  deactivateRoutes(futureNode, currNode, parentContext) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;
    if (future === curr) {
      if (future.component) {
        const context2 = parentContext.getContext(future.outlet);
        if (context2) {
          this.deactivateChildRoutes(futureNode, currNode, context2.children);
        }
      } else {
        this.deactivateChildRoutes(futureNode, currNode, parentContext);
      }
    } else {
      if (curr) {
        this.deactivateRouteAndItsChildren(currNode, parentContext);
      }
    }
  }
  deactivateRouteAndItsChildren(route, parentContexts) {
    if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
      this.detachAndStoreRouteSubtree(route, parentContexts);
    } else {
      this.deactivateRouteAndOutlet(route, parentContexts);
    }
  }
  detachAndStoreRouteSubtree(route, parentContexts) {
    const context2 = parentContexts.getContext(route.value.outlet);
    const contexts = context2 && route.value.component ? context2.children : parentContexts;
    const children = nodeChildrenAsMap(route);
    for (const treeNode of Object.values(children)) {
      this.deactivateRouteAndItsChildren(treeNode, contexts);
    }
    if (context2 && context2.outlet) {
      const componentRef = context2.outlet.detach();
      const contexts2 = context2.children.onOutletDeactivated();
      this.routeReuseStrategy.store(route.value.snapshot, {
        componentRef,
        route,
        contexts: contexts2
      });
    }
  }
  deactivateRouteAndOutlet(route, parentContexts) {
    const context2 = parentContexts.getContext(route.value.outlet);
    const contexts = context2 && route.value.component ? context2.children : parentContexts;
    const children = nodeChildrenAsMap(route);
    for (const treeNode of Object.values(children)) {
      this.deactivateRouteAndItsChildren(treeNode, contexts);
    }
    if (context2) {
      if (context2.outlet) {
        context2.outlet.deactivate();
        context2.children.onOutletDeactivated();
      }
      context2.attachRef = null;
      context2.route = null;
    }
  }
  activateChildRoutes(futureNode, currNode, contexts) {
    const children = nodeChildrenAsMap(currNode);
    futureNode.children.forEach((c) => {
      this.activateRoutes(c, children[c.value.outlet], contexts);
      this.forwardEvent(new ActivationEnd(c.value.snapshot));
    });
    if (futureNode.children.length) {
      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));
    }
  }
  activateRoutes(futureNode, currNode, parentContexts) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;
    advanceActivatedRoute(future);
    if (future === curr) {
      if (future.component) {
        const context2 = parentContexts.getOrCreateContext(future.outlet);
        this.activateChildRoutes(futureNode, currNode, context2.children);
      } else {
        this.activateChildRoutes(futureNode, currNode, parentContexts);
      }
    } else {
      if (future.component) {
        const context2 = parentContexts.getOrCreateContext(future.outlet);
        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
          const stored = this.routeReuseStrategy.retrieve(future.snapshot);
          this.routeReuseStrategy.store(future.snapshot, null);
          context2.children.onOutletReAttached(stored.contexts);
          context2.attachRef = stored.componentRef;
          context2.route = stored.route.value;
          if (context2.outlet) {
            context2.outlet.attach(stored.componentRef, stored.route.value);
          }
          advanceActivatedRoute(stored.route.value);
          this.activateChildRoutes(futureNode, null, context2.children);
        } else {
          context2.attachRef = null;
          context2.route = future;
          if (context2.outlet) {
            context2.outlet.activateWith(future, context2.injector);
          }
          this.activateChildRoutes(futureNode, null, context2.children);
        }
      } else {
        this.activateChildRoutes(futureNode, null, parentContexts);
      }
    }
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const context2 = parentContexts.getOrCreateContext(future.outlet);
      const outlet = context2.outlet;
      if (outlet && this.inputBindingEnabled && !outlet.supportsBindingToComponentInputs && !warnedAboutUnsupportedInputBinding) {
        console.warn(`'withComponentInputBinding' feature is enabled but this application is using an outlet that may not support binding to component inputs.`);
        warnedAboutUnsupportedInputBinding = true;
      }
    }
  }
};
var CanActivate = class {
  constructor(path) {
    this.path = path;
    this.route = this.path[this.path.length - 1];
  }
};
var CanDeactivate = class {
  constructor(component, route) {
    this.component = component;
    this.route = route;
  }
};
function getAllRouteGuards(future, curr, parentContexts) {
  const futureRoot = future._root;
  const currRoot = curr ? curr._root : null;
  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);
}
function getCanActivateChild(p) {
  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;
  if (!canActivateChild || canActivateChild.length === 0) return null;
  return {
    node: p,
    guards: canActivateChild
  };
}
function getTokenOrFunctionIdentity(tokenOrFunction, injector) {
  const NOT_FOUND2 = Symbol();
  const result = injector.get(tokenOrFunction, NOT_FOUND2);
  if (result === NOT_FOUND2) {
    if (typeof tokenOrFunction === "function" && !isInjectable(tokenOrFunction)) {
      return tokenOrFunction;
    } else {
      return injector.get(tokenOrFunction);
    }
  }
  return result;
}
function getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {
  canDeactivateChecks: [],
  canActivateChecks: []
}) {
  const prevChildren = nodeChildrenAsMap(currNode);
  futureNode.children.forEach((c) => {
    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);
    delete prevChildren[c.value.outlet];
  });
  Object.entries(prevChildren).forEach(([k, v]) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));
  return checks;
}
function getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {
  canDeactivateChecks: [],
  canActivateChecks: []
}) {
  const future = futureNode.value;
  const curr = currNode ? currNode.value : null;
  const context2 = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;
  if (curr && future.routeConfig === curr.routeConfig) {
    const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);
    if (shouldRun) {
      checks.canActivateChecks.push(new CanActivate(futurePath));
    } else {
      future.data = curr.data;
      future._resolvedData = curr._resolvedData;
    }
    if (future.component) {
      getChildRouteGuards(futureNode, currNode, context2 ? context2.children : null, futurePath, checks);
    } else {
      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);
    }
    if (shouldRun && context2 && context2.outlet && context2.outlet.isActivated) {
      checks.canDeactivateChecks.push(new CanDeactivate(context2.outlet.component, curr));
    }
  } else {
    if (curr) {
      deactivateRouteAndItsChildren(currNode, context2, checks);
    }
    checks.canActivateChecks.push(new CanActivate(futurePath));
    if (future.component) {
      getChildRouteGuards(futureNode, null, context2 ? context2.children : null, futurePath, checks);
    } else {
      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);
    }
  }
  return checks;
}
function shouldRunGuardsAndResolvers(curr, future, mode) {
  if (typeof mode === "function") {
    return mode(curr, future);
  }
  switch (mode) {
    case "pathParamsChange":
      return !equalPath(curr.url, future.url);
    case "pathParamsOrQueryParamsChange":
      return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);
    case "always":
      return true;
    case "paramsOrQueryParamsChange":
      return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);
    case "paramsChange":
    default:
      return !equalParamsAndUrlSegments(curr, future);
  }
}
function deactivateRouteAndItsChildren(route, context2, checks) {
  const children = nodeChildrenAsMap(route);
  const r = route.value;
  Object.entries(children).forEach(([childName, node]) => {
    if (!r.component) {
      deactivateRouteAndItsChildren(node, context2, checks);
    } else if (context2) {
      deactivateRouteAndItsChildren(node, context2.children.getContext(childName), checks);
    } else {
      deactivateRouteAndItsChildren(node, null, checks);
    }
  });
  if (!r.component) {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  } else if (context2 && context2.outlet && context2.outlet.isActivated) {
    checks.canDeactivateChecks.push(new CanDeactivate(context2.outlet.component, r));
  } else {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  }
}
function isFunction2(v) {
  return typeof v === "function";
}
function isBoolean(v) {
  return typeof v === "boolean";
}
function isCanLoad(guard) {
  return guard && isFunction2(guard.canLoad);
}
function isCanActivate(guard) {
  return guard && isFunction2(guard.canActivate);
}
function isCanActivateChild(guard) {
  return guard && isFunction2(guard.canActivateChild);
}
function isCanDeactivate(guard) {
  return guard && isFunction2(guard.canDeactivate);
}
function isCanMatch(guard) {
  return guard && isFunction2(guard.canMatch);
}
function isEmptyError(e) {
  return e instanceof EmptyError || e?.name === "EmptyError";
}
var INITIAL_VALUE = /* @__PURE__ */ Symbol("INITIAL_VALUE");
function prioritizedGuardValue() {
  return switchMap((obs) => {
    return combineLatest(obs.map((o) => o.pipe(take(1), startWith(INITIAL_VALUE)))).pipe(map((results) => {
      for (const result of results) {
        if (result === true) {
          continue;
        } else if (result === INITIAL_VALUE) {
          return INITIAL_VALUE;
        } else if (result === false || isRedirect(result)) {
          return result;
        }
      }
      return true;
    }), filter((item) => item !== INITIAL_VALUE), take(1));
  });
}
function isRedirect(val) {
  return isUrlTree(val) || val instanceof RedirectCommand;
}
function checkGuards(injector, forwardEvent) {
  return mergeMap((t) => {
    const {
      targetSnapshot,
      currentSnapshot,
      guards: {
        canActivateChecks,
        canDeactivateChecks
      }
    } = t;
    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {
      return of(__spreadProps(__spreadValues({}, t), {
        guardsResult: true
      }));
    }
    return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, injector).pipe(mergeMap((canDeactivate) => {
      return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, injector, forwardEvent) : of(canDeactivate);
    }), map((guardsResult) => __spreadProps(__spreadValues({}, t), {
      guardsResult
    })));
  });
}
function runCanDeactivateChecks(checks, futureRSS, currRSS, injector) {
  return from(checks).pipe(mergeMap((check) => runCanDeactivate(check.component, check.route, currRSS, futureRSS, injector)), first((result) => {
    return result !== true;
  }, true));
}
function runCanActivateChecks(futureSnapshot, checks, injector, forwardEvent) {
  return from(checks).pipe(concatMap((check) => {
    return concat(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, injector), runCanActivate(futureSnapshot, check.route, injector));
  }), first((result) => {
    return result !== true;
  }, true));
}
function fireActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ActivationStart(snapshot));
  }
  return of(true);
}
function fireChildActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ChildActivationStart(snapshot));
  }
  return of(true);
}
function runCanActivate(futureRSS, futureARS, injector) {
  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;
  if (!canActivate || canActivate.length === 0) return of(true);
  const canActivateObservables = canActivate.map((canActivate2) => {
    return defer(() => {
      const closestInjector = getClosestRouteInjector(futureARS) ?? injector;
      const guard = getTokenOrFunctionIdentity(canActivate2, closestInjector);
      const guardVal = isCanActivate(guard) ? guard.canActivate(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));
      return wrapIntoObservable(guardVal).pipe(first());
    });
  });
  return of(canActivateObservables).pipe(prioritizedGuardValue());
}
function runCanActivateChild(futureRSS, path, injector) {
  const futureARS = path[path.length - 1];
  const canActivateChildGuards = path.slice(0, path.length - 1).reverse().map((p) => getCanActivateChild(p)).filter((_) => _ !== null);
  const canActivateChildGuardsMapped = canActivateChildGuards.map((d) => {
    return defer(() => {
      const guardsMapped = d.guards.map((canActivateChild) => {
        const closestInjector = getClosestRouteInjector(d.node) ?? injector;
        const guard = getTokenOrFunctionIdentity(canActivateChild, closestInjector);
        const guardVal = isCanActivateChild(guard) ? guard.canActivateChild(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));
        return wrapIntoObservable(guardVal).pipe(first());
      });
      return of(guardsMapped).pipe(prioritizedGuardValue());
    });
  });
  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());
}
function runCanDeactivate(component, currARS, currRSS, futureRSS, injector) {
  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;
  if (!canDeactivate || canDeactivate.length === 0) return of(true);
  const canDeactivateObservables = canDeactivate.map((c) => {
    const closestInjector = getClosestRouteInjector(currARS) ?? injector;
    const guard = getTokenOrFunctionIdentity(c, closestInjector);
    const guardVal = isCanDeactivate(guard) ? guard.canDeactivate(component, currARS, currRSS, futureRSS) : runInInjectionContext(closestInjector, () => guard(component, currARS, currRSS, futureRSS));
    return wrapIntoObservable(guardVal).pipe(first());
  });
  return of(canDeactivateObservables).pipe(prioritizedGuardValue());
}
function runCanLoadGuards(injector, route, segments, urlSerializer) {
  const canLoad = route.canLoad;
  if (canLoad === void 0 || canLoad.length === 0) {
    return of(true);
  }
  const canLoadObservables = canLoad.map((injectionToken) => {
    const guard = getTokenOrFunctionIdentity(injectionToken, injector);
    const guardVal = isCanLoad(guard) ? guard.canLoad(route, segments) : runInInjectionContext(injector, () => guard(route, segments));
    return wrapIntoObservable(guardVal);
  });
  return of(canLoadObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));
}
function redirectIfUrlTree(urlSerializer) {
  return pipe(tap((result) => {
    if (typeof result === "boolean") return;
    throw redirectingNavigationError(urlSerializer, result);
  }), map((result) => result === true));
}
function runCanMatchGuards(injector, route, segments, urlSerializer) {
  const canMatch = route.canMatch;
  if (!canMatch || canMatch.length === 0) return of(true);
  const canMatchObservables = canMatch.map((injectionToken) => {
    const guard = getTokenOrFunctionIdentity(injectionToken, injector);
    const guardVal = isCanMatch(guard) ? guard.canMatch(route, segments) : runInInjectionContext(injector, () => guard(route, segments));
    return wrapIntoObservable(guardVal);
  });
  return of(canMatchObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));
}
var NoMatch = class {
  constructor(segmentGroup) {
    this.segmentGroup = segmentGroup || null;
  }
};
var AbsoluteRedirect = class extends Error {
  constructor(urlTree) {
    super();
    this.urlTree = urlTree;
  }
};
function noMatch$1(segmentGroup) {
  return throwError(new NoMatch(segmentGroup));
}
function namedOutletsRedirect(redirectTo) {
  return throwError(new RuntimeError(4e3, (typeof ngDevMode === "undefined" || ngDevMode) && `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`));
}
function canLoadFails(route) {
  return throwError(navigationCancelingError((typeof ngDevMode === "undefined" || ngDevMode) && `Cannot load children because the guard of the route "path: '${route.path}'" returned false`, NavigationCancellationCode.GuardRejected));
}
var ApplyRedirects = class {
  constructor(urlSerializer, urlTree) {
    this.urlSerializer = urlSerializer;
    this.urlTree = urlTree;
  }
  lineralizeSegments(route, urlTree) {
    let res = [];
    let c = urlTree.root;
    while (true) {
      res = res.concat(c.segments);
      if (c.numberOfChildren === 0) {
        return of(res);
      }
      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
        return namedOutletsRedirect(`${route.redirectTo}`);
      }
      c = c.children[PRIMARY_OUTLET];
    }
  }
  applyRedirectCommands(segments, redirectTo, posParams, currentSnapshot, injector) {
    if (typeof redirectTo !== "string") {
      const redirectToFn = redirectTo;
      const {
        queryParams,
        fragment,
        routeConfig,
        url,
        outlet,
        params,
        data,
        title
      } = currentSnapshot;
      const newRedirect = runInInjectionContext(injector, () => redirectToFn({
        params,
        data,
        queryParams,
        fragment,
        routeConfig,
        url,
        outlet,
        title
      }));
      if (newRedirect instanceof UrlTree) {
        throw new AbsoluteRedirect(newRedirect);
      }
      redirectTo = newRedirect;
    }
    const newTree = this.applyRedirectCreateUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
    if (redirectTo[0] === "/") {
      throw new AbsoluteRedirect(newTree);
    }
    return newTree;
  }
  applyRedirectCreateUrlTree(redirectTo, urlTree, segments, posParams) {
    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
    return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
  }
  createQueryParams(redirectToParams, actualParams) {
    const res = {};
    Object.entries(redirectToParams).forEach(([k, v]) => {
      const copySourceValue = typeof v === "string" && v[0] === ":";
      if (copySourceValue) {
        const sourceName = v.substring(1);
        res[k] = actualParams[sourceName];
      } else {
        res[k] = v;
      }
    });
    return res;
  }
  createSegmentGroup(redirectTo, group, segments, posParams) {
    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
    let children = {};
    Object.entries(group.children).forEach(([name, child]) => {
      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);
    });
    return new UrlSegmentGroup(updatedSegments, children);
  }
  createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {
    return redirectToSegments.map((s) => s.path[0] === ":" ? this.findPosParam(redirectTo, s, posParams) : this.findOrReturn(s, actualSegments));
  }
  findPosParam(redirectTo, redirectToUrlSegment, posParams) {
    const pos = posParams[redirectToUrlSegment.path.substring(1)];
    if (!pos) throw new RuntimeError(4001, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);
    return pos;
  }
  findOrReturn(redirectToUrlSegment, actualSegments) {
    let idx = 0;
    for (const s of actualSegments) {
      if (s.path === redirectToUrlSegment.path) {
        actualSegments.splice(idx);
        return s;
      }
      idx++;
    }
    return redirectToUrlSegment;
  }
};
var noMatch = {
  matched: false,
  consumedSegments: [],
  remainingSegments: [],
  parameters: {},
  positionalParamSegments: {}
};
function matchWithChecks(segmentGroup, route, segments, injector, urlSerializer) {
  const result = match(segmentGroup, route, segments);
  if (!result.matched) {
    return of(result);
  }
  injector = getOrCreateRouteInjectorIfNeeded(route, injector);
  return runCanMatchGuards(injector, route, segments, urlSerializer).pipe(map((v) => v === true ? result : __spreadValues({}, noMatch)));
}
function match(segmentGroup, route, segments) {
  if (route.path === "**") {
    return createWildcardMatchResult(segments);
  }
  if (route.path === "") {
    if (route.pathMatch === "full" && (segmentGroup.hasChildren() || segments.length > 0)) {
      return __spreadValues({}, noMatch);
    }
    return {
      matched: true,
      consumedSegments: [],
      remainingSegments: segments,
      parameters: {},
      positionalParamSegments: {}
    };
  }
  const matcher = route.matcher || defaultUrlMatcher;
  const res = matcher(segments, segmentGroup, route);
  if (!res) return __spreadValues({}, noMatch);
  const posParams = {};
  Object.entries(res.posParams ?? {}).forEach(([k, v]) => {
    posParams[k] = v.path;
  });
  const parameters = res.consumed.length > 0 ? __spreadValues(__spreadValues({}, posParams), res.consumed[res.consumed.length - 1].parameters) : posParams;
  return {
    matched: true,
    consumedSegments: res.consumed,
    remainingSegments: segments.slice(res.consumed.length),
    // TODO(atscott): investigate combining parameters and positionalParamSegments
    parameters,
    positionalParamSegments: res.posParams ?? {}
  };
}
function createWildcardMatchResult(segments) {
  return {
    matched: true,
    parameters: segments.length > 0 ? last3(segments).parameters : {},
    consumedSegments: segments,
    remainingSegments: [],
    positionalParamSegments: {}
  };
}
function split(segmentGroup, consumedSegments, slicedSegments, config2) {
  if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config2)) {
    const s2 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(config2, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
    return {
      segmentGroup: s2,
      slicedSegments: []
    };
  }
  if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config2)) {
    const s2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config2, segmentGroup.children));
    return {
      segmentGroup: s2,
      slicedSegments
    };
  }
  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
  return {
    segmentGroup: s,
    slicedSegments
  };
}
function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
  const res = {};
  for (const r of routes) {
    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
      const s = new UrlSegmentGroup([], {});
      res[getOutlet(r)] = s;
    }
  }
  return __spreadValues(__spreadValues({}, children), res);
}
function createChildrenForEmptyPaths(routes, primarySegment) {
  const res = {};
  res[PRIMARY_OUTLET] = primarySegment;
  for (const r of routes) {
    if (r.path === "" && getOutlet(r) !== PRIMARY_OUTLET) {
      const s = new UrlSegmentGroup([], {});
      res[getOutlet(r)] = s;
    }
  }
  return res;
}
function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
  return routes.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);
}
function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
  return routes.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r));
}
function emptyPathMatch(segmentGroup, slicedSegments, r) {
  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === "full") {
    return false;
  }
  return r.path === "";
}
function noLeftoversInUrl(segmentGroup, segments, outlet) {
  return segments.length === 0 && !segmentGroup.children[outlet];
}
var NoLeftoversInUrl = class {
};
function recognize$1(injector, configLoader, rootComponentType, config2, urlTree, urlSerializer, paramsInheritanceStrategy = "emptyOnly") {
  return new Recognizer(injector, configLoader, rootComponentType, config2, urlTree, paramsInheritanceStrategy, urlSerializer).recognize();
}
var MAX_ALLOWED_REDIRECTS = 31;
var Recognizer = class {
  constructor(injector, configLoader, rootComponentType, config2, urlTree, paramsInheritanceStrategy, urlSerializer) {
    this.injector = injector;
    this.configLoader = configLoader;
    this.rootComponentType = rootComponentType;
    this.config = config2;
    this.urlTree = urlTree;
    this.paramsInheritanceStrategy = paramsInheritanceStrategy;
    this.urlSerializer = urlSerializer;
    this.applyRedirects = new ApplyRedirects(this.urlSerializer, this.urlTree);
    this.absoluteRedirectCount = 0;
    this.allowRedirects = true;
  }
  noMatchError(e) {
    return new RuntimeError(4002, typeof ngDevMode === "undefined" || ngDevMode ? `Cannot match any routes. URL Segment: '${e.segmentGroup}'` : `'${e.segmentGroup}'`);
  }
  recognize() {
    const rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;
    return this.match(rootSegmentGroup).pipe(map(({
      children,
      rootSnapshot
    }) => {
      const rootNode = new TreeNode(rootSnapshot, children);
      const routeState = new RouterStateSnapshot("", rootNode);
      const tree2 = createUrlTreeFromSnapshot(rootSnapshot, [], this.urlTree.queryParams, this.urlTree.fragment);
      tree2.queryParams = this.urlTree.queryParams;
      routeState.url = this.urlSerializer.serialize(tree2);
      return {
        state: routeState,
        tree: tree2
      };
    }));
  }
  match(rootSegmentGroup) {
    const rootSnapshot = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, Object.freeze({}), PRIMARY_OUTLET, this.rootComponentType, null, {});
    return this.processSegmentGroup(this.injector, this.config, rootSegmentGroup, PRIMARY_OUTLET, rootSnapshot).pipe(map((children) => {
      return {
        children,
        rootSnapshot
      };
    }), catchError((e) => {
      if (e instanceof AbsoluteRedirect) {
        this.urlTree = e.urlTree;
        return this.match(e.urlTree.root);
      }
      if (e instanceof NoMatch) {
        throw this.noMatchError(e);
      }
      throw e;
    }));
  }
  processSegmentGroup(injector, config2, segmentGroup, outlet, parentRoute) {
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
      return this.processChildren(injector, config2, segmentGroup, parentRoute);
    }
    return this.processSegment(injector, config2, segmentGroup, segmentGroup.segments, outlet, true, parentRoute).pipe(map((child) => child instanceof TreeNode ? [child] : []));
  }
  /**
   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if
   * we cannot find a match for _any_ of the children.
   *
   * @param config - The `Routes` to match against
   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the
   *     config.
   */
  processChildren(injector, config2, segmentGroup, parentRoute) {
    const childOutlets = [];
    for (const child of Object.keys(segmentGroup.children)) {
      if (child === "primary") {
        childOutlets.unshift(child);
      } else {
        childOutlets.push(child);
      }
    }
    return from(childOutlets).pipe(concatMap((childOutlet) => {
      const child = segmentGroup.children[childOutlet];
      const sortedConfig = sortByMatchingOutlets(config2, childOutlet);
      return this.processSegmentGroup(injector, sortedConfig, child, childOutlet, parentRoute);
    }), scan((children, outletChildren) => {
      children.push(...outletChildren);
      return children;
    }), defaultIfEmpty(null), last2(), mergeMap((children) => {
      if (children === null) return noMatch$1(segmentGroup);
      const mergedChildren = mergeEmptyPathMatches(children);
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        checkOutletNameUniqueness(mergedChildren);
      }
      sortActivatedRouteSnapshots(mergedChildren);
      return of(mergedChildren);
    }));
  }
  processSegment(injector, routes, segmentGroup, segments, outlet, allowRedirects, parentRoute) {
    return from(routes).pipe(concatMap((r) => {
      return this.processSegmentAgainstRoute(r._injector ?? injector, routes, r, segmentGroup, segments, outlet, allowRedirects, parentRoute).pipe(catchError((e) => {
        if (e instanceof NoMatch) {
          return of(null);
        }
        throw e;
      }));
    }), first((x) => !!x), catchError((e) => {
      if (isEmptyError(e)) {
        if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
          return of(new NoLeftoversInUrl());
        }
        return noMatch$1(segmentGroup);
      }
      throw e;
    }));
  }
  processSegmentAgainstRoute(injector, routes, route, rawSegment, segments, outlet, allowRedirects, parentRoute) {
    if (getOutlet(route) !== outlet && (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {
      return noMatch$1(rawSegment);
    }
    if (route.redirectTo === void 0) {
      return this.matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute);
    }
    if (this.allowRedirects && allowRedirects) {
      return this.expandSegmentAgainstRouteUsingRedirect(injector, rawSegment, routes, route, segments, outlet, parentRoute);
    }
    return noMatch$1(rawSegment);
  }
  expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet, parentRoute) {
    const {
      matched,
      parameters,
      consumedSegments,
      positionalParamSegments,
      remainingSegments
    } = match(segmentGroup, route, segments);
    if (!matched) return noMatch$1(segmentGroup);
    if (typeof route.redirectTo === "string" && route.redirectTo[0] === "/") {
      this.absoluteRedirectCount++;
      if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {
        if (ngDevMode) {
          throw new RuntimeError(4016, `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.
This is currently a dev mode only error but will become a call stack size exceeded error in production in a future major version.`);
        }
        this.allowRedirects = false;
      }
    }
    const currentSnapshot = new ActivatedRouteSnapshot(segments, parameters, Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));
    const inherited = getInherited(currentSnapshot, parentRoute, this.paramsInheritanceStrategy);
    currentSnapshot.params = Object.freeze(inherited.params);
    currentSnapshot.data = Object.freeze(inherited.data);
    const newTree = this.applyRedirects.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments, currentSnapshot, injector);
    return this.applyRedirects.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments) => {
      return this.processSegment(injector, routes, segmentGroup, newSegments.concat(remainingSegments), outlet, false, parentRoute);
    }));
  }
  matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet, parentRoute) {
    const matchResult = matchWithChecks(rawSegment, route, segments, injector, this.urlSerializer);
    if (route.path === "**") {
      rawSegment.children = {};
    }
    return matchResult.pipe(switchMap((result) => {
      if (!result.matched) {
        return noMatch$1(rawSegment);
      }
      injector = route._injector ?? injector;
      return this.getChildConfig(injector, route, segments).pipe(switchMap(({
        routes: childConfig
      }) => {
        const childInjector = route._loadedInjector ?? injector;
        const {
          parameters,
          consumedSegments,
          remainingSegments
        } = result;
        const snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));
        const inherited = getInherited(snapshot, parentRoute, this.paramsInheritanceStrategy);
        snapshot.params = Object.freeze(inherited.params);
        snapshot.data = Object.freeze(inherited.data);
        const {
          segmentGroup,
          slicedSegments
        } = split(rawSegment, consumedSegments, remainingSegments, childConfig);
        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
          return this.processChildren(childInjector, childConfig, segmentGroup, snapshot).pipe(map((children) => {
            return new TreeNode(snapshot, children);
          }));
        }
        if (childConfig.length === 0 && slicedSegments.length === 0) {
          return of(new TreeNode(snapshot, []));
        }
        const matchedOnOutlet = getOutlet(route) === outlet;
        return this.processSegment(childInjector, childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true, snapshot).pipe(map((child) => {
          return new TreeNode(snapshot, child instanceof TreeNode ? [child] : []);
        }));
      }));
    }));
  }
  getChildConfig(injector, route, segments) {
    if (route.children) {
      return of({
        routes: route.children,
        injector
      });
    }
    if (route.loadChildren) {
      if (route._loadedRoutes !== void 0) {
        return of({
          routes: route._loadedRoutes,
          injector: route._loadedInjector
        });
      }
      return runCanLoadGuards(injector, route, segments, this.urlSerializer).pipe(mergeMap((shouldLoadResult) => {
        if (shouldLoadResult) {
          return this.configLoader.loadChildren(injector, route).pipe(tap((cfg) => {
            route._loadedRoutes = cfg.routes;
            route._loadedInjector = cfg.injector;
          }));
        }
        return canLoadFails(route);
      }));
    }
    return of({
      routes: [],
      injector
    });
  }
};
function sortActivatedRouteSnapshots(nodes) {
  nodes.sort((a, b) => {
    if (a.value.outlet === PRIMARY_OUTLET) return -1;
    if (b.value.outlet === PRIMARY_OUTLET) return 1;
    return a.value.outlet.localeCompare(b.value.outlet);
  });
}
function hasEmptyPathConfig(node) {
  const config2 = node.value.routeConfig;
  return config2 && config2.path === "";
}
function mergeEmptyPathMatches(nodes) {
  const result = [];
  const mergedNodes = /* @__PURE__ */ new Set();
  for (const node of nodes) {
    if (!hasEmptyPathConfig(node)) {
      result.push(node);
      continue;
    }
    const duplicateEmptyPathNode = result.find((resultNode) => node.value.routeConfig === resultNode.value.routeConfig);
    if (duplicateEmptyPathNode !== void 0) {
      duplicateEmptyPathNode.children.push(...node.children);
      mergedNodes.add(duplicateEmptyPathNode);
    } else {
      result.push(node);
    }
  }
  for (const mergedNode of mergedNodes) {
    const mergedChildren = mergeEmptyPathMatches(mergedNode.children);
    result.push(new TreeNode(mergedNode.value, mergedChildren));
  }
  return result.filter((n) => !mergedNodes.has(n));
}
function checkOutletNameUniqueness(nodes) {
  const names = {};
  nodes.forEach((n) => {
    const routeWithSameOutletName = names[n.value.outlet];
    if (routeWithSameOutletName) {
      const p = routeWithSameOutletName.url.map((s) => s.toString()).join("/");
      const c = n.value.url.map((s) => s.toString()).join("/");
      throw new RuntimeError(4006, (typeof ngDevMode === "undefined" || ngDevMode) && `Two segments cannot have the same outlet name: '${p}' and '${c}'.`);
    }
    names[n.value.outlet] = n.value;
  });
}
function getData(route) {
  return route.data || {};
}
function getResolve(route) {
  return route.resolve || {};
}
function recognize(injector, configLoader, rootComponentType, config2, serializer, paramsInheritanceStrategy) {
  return mergeMap((t) => recognize$1(injector, configLoader, rootComponentType, config2, t.extractedUrl, serializer, paramsInheritanceStrategy).pipe(map(({
    state: targetSnapshot,
    tree: urlAfterRedirects
  }) => {
    return __spreadProps(__spreadValues({}, t), {
      targetSnapshot,
      urlAfterRedirects
    });
  })));
}
function resolveData(paramsInheritanceStrategy, injector) {
  return mergeMap((t) => {
    const {
      targetSnapshot,
      guards: {
        canActivateChecks
      }
    } = t;
    if (!canActivateChecks.length) {
      return of(t);
    }
    const routesWithResolversToRun = new Set(canActivateChecks.map((check) => check.route));
    const routesNeedingDataUpdates = /* @__PURE__ */ new Set();
    for (const route of routesWithResolversToRun) {
      if (routesNeedingDataUpdates.has(route)) {
        continue;
      }
      for (const newRoute of flattenRouteTree(route)) {
        routesNeedingDataUpdates.add(newRoute);
      }
    }
    let routesProcessed = 0;
    return from(routesNeedingDataUpdates).pipe(concatMap((route) => {
      if (routesWithResolversToRun.has(route)) {
        return runResolve(route, targetSnapshot, paramsInheritanceStrategy, injector);
      } else {
        route.data = getInherited(route, route.parent, paramsInheritanceStrategy).resolve;
        return of(void 0);
      }
    }), tap(() => routesProcessed++), takeLast(1), mergeMap((_) => routesProcessed === routesNeedingDataUpdates.size ? of(t) : EMPTY));
  });
}
function flattenRouteTree(route) {
  const descendants = route.children.map((child) => flattenRouteTree(child)).flat();
  return [route, ...descendants];
}
function runResolve(futureARS, futureRSS, paramsInheritanceStrategy, injector) {
  const config2 = futureARS.routeConfig;
  const resolve = futureARS._resolve;
  if (config2?.title !== void 0 && !hasStaticTitle(config2)) {
    resolve[RouteTitleKey] = config2.title;
  }
  return resolveNode(resolve, futureARS, futureRSS, injector).pipe(map((resolvedData) => {
    futureARS._resolvedData = resolvedData;
    futureARS.data = getInherited(futureARS, futureARS.parent, paramsInheritanceStrategy).resolve;
    return null;
  }));
}
function resolveNode(resolve, futureARS, futureRSS, injector) {
  const keys = getDataKeys(resolve);
  if (keys.length === 0) {
    return of({});
  }
  const data = {};
  return from(keys).pipe(mergeMap((key) => getResolver(resolve[key], futureARS, futureRSS, injector).pipe(first(), tap((value) => {
    if (value instanceof RedirectCommand) {
      throw redirectingNavigationError(new DefaultUrlSerializer(), value);
    }
    data[key] = value;
  }))), takeLast(1), mapTo(data), catchError((e) => isEmptyError(e) ? EMPTY : throwError(e)));
}
function getResolver(injectionToken, futureARS, futureRSS, injector) {
  const closestInjector = getClosestRouteInjector(futureARS) ?? injector;
  const resolver = getTokenOrFunctionIdentity(injectionToken, closestInjector);
  const resolverValue = resolver.resolve ? resolver.resolve(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => resolver(futureARS, futureRSS));
  return wrapIntoObservable(resolverValue);
}
function switchTap(next) {
  return switchMap((v) => {
    const nextResult = next(v);
    if (nextResult) {
      return from(nextResult).pipe(map(() => v));
    }
    return of(v);
  });
}
var _TitleStrategy = class _TitleStrategy {
  /**
   * @returns The `title` of the deepest primary route.
   */
  buildTitle(snapshot) {
    let pageTitle;
    let route = snapshot.root;
    while (route !== void 0) {
      pageTitle = this.getResolvedTitleForRoute(route) ?? pageTitle;
      route = route.children.find((child) => child.outlet === PRIMARY_OUTLET);
    }
    return pageTitle;
  }
  /**
   * Given an `ActivatedRouteSnapshot`, returns the final value of the
   * `Route.title` property, which can either be a static string or a resolved value.
   */
  getResolvedTitleForRoute(snapshot) {
    return snapshot.data[RouteTitleKey];
  }
};
_TitleStrategy.\u0275fac = function TitleStrategy_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _TitleStrategy)();
};
_TitleStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _TitleStrategy,
  factory: () => (() => inject(DefaultTitleStrategy))(),
  providedIn: "root"
});
var TitleStrategy = _TitleStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TitleStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultTitleStrategy)
    }]
  }], null, null);
})();
var _DefaultTitleStrategy = class _DefaultTitleStrategy extends TitleStrategy {
  constructor(title) {
    super();
    this.title = title;
  }
  /**
   * Sets the title of the browser to the given value.
   *
   * @param title The `pageTitle` from the deepest primary route.
   */
  updateTitle(snapshot) {
    const title = this.buildTitle(snapshot);
    if (title !== void 0) {
      this.title.setTitle(title);
    }
  }
};
_DefaultTitleStrategy.\u0275fac = function DefaultTitleStrategy_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DefaultTitleStrategy)(\u0275\u0275inject(Title));
};
_DefaultTitleStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DefaultTitleStrategy,
  factory: _DefaultTitleStrategy.\u0275fac,
  providedIn: "root"
});
var DefaultTitleStrategy = _DefaultTitleStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultTitleStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Title
  }], null);
})();
var ROUTER_CONFIGURATION = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router config" : "", {
  providedIn: "root",
  factory: () => ({})
});
var _\u0275EmptyOutletComponent = class _\u0275EmptyOutletComponent {
};
_\u0275EmptyOutletComponent.\u0275fac = function \u0275EmptyOutletComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _\u0275EmptyOutletComponent)();
};
_\u0275EmptyOutletComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _\u0275EmptyOutletComponent,
  selectors: [["ng-component"]],
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  decls: 1,
  vars: 0,
  template: function _EmptyOutletComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275element(0, "router-outlet");
    }
  },
  dependencies: [RouterOutlet],
  encapsulation: 2
});
var \u0275EmptyOutletComponent = _\u0275EmptyOutletComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(\u0275EmptyOutletComponent, [{
    type: Component,
    args: [{
      template: `<router-outlet></router-outlet>`,
      imports: [RouterOutlet],
      standalone: true
    }]
  }], null, null);
})();
function standardizeConfig(r) {
  const children = r.children && r.children.map(standardizeConfig);
  const c = children ? __spreadProps(__spreadValues({}, r), {
    children
  }) : __spreadValues({}, r);
  if (!c.component && !c.loadComponent && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {
    c.component = \u0275EmptyOutletComponent;
  }
  return c;
}
var ROUTES = new InjectionToken(ngDevMode ? "ROUTES" : "");
var _RouterConfigLoader = class _RouterConfigLoader {
  constructor() {
    this.componentLoaders = /* @__PURE__ */ new WeakMap();
    this.childrenLoaders = /* @__PURE__ */ new WeakMap();
    this.compiler = inject(Compiler);
  }
  loadComponent(route) {
    if (this.componentLoaders.get(route)) {
      return this.componentLoaders.get(route);
    } else if (route._loadedComponent) {
      return of(route._loadedComponent);
    }
    if (this.onLoadStartListener) {
      this.onLoadStartListener(route);
    }
    const loadRunner = wrapIntoObservable(route.loadComponent()).pipe(map(maybeUnwrapDefaultExport), tap((component) => {
      if (this.onLoadEndListener) {
        this.onLoadEndListener(route);
      }
      (typeof ngDevMode === "undefined" || ngDevMode) && assertStandalone(route.path ?? "", component);
      route._loadedComponent = component;
    }), finalize(() => {
      this.componentLoaders.delete(route);
    }));
    const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());
    this.componentLoaders.set(route, loader);
    return loader;
  }
  loadChildren(parentInjector, route) {
    if (this.childrenLoaders.get(route)) {
      return this.childrenLoaders.get(route);
    } else if (route._loadedRoutes) {
      return of({
        routes: route._loadedRoutes,
        injector: route._loadedInjector
      });
    }
    if (this.onLoadStartListener) {
      this.onLoadStartListener(route);
    }
    const moduleFactoryOrRoutes$ = loadChildren(route, this.compiler, parentInjector, this.onLoadEndListener);
    const loadRunner = moduleFactoryOrRoutes$.pipe(finalize(() => {
      this.childrenLoaders.delete(route);
    }));
    const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());
    this.childrenLoaders.set(route, loader);
    return loader;
  }
};
_RouterConfigLoader.\u0275fac = function RouterConfigLoader_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _RouterConfigLoader)();
};
_RouterConfigLoader.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _RouterConfigLoader,
  factory: _RouterConfigLoader.\u0275fac,
  providedIn: "root"
});
var RouterConfigLoader = _RouterConfigLoader;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterConfigLoader, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
function loadChildren(route, compiler, parentInjector, onLoadEndListener) {
  return wrapIntoObservable(route.loadChildren()).pipe(map(maybeUnwrapDefaultExport), mergeMap((t) => {
    if (t instanceof NgModuleFactory$1 || Array.isArray(t)) {
      return of(t);
    } else {
      return from(compiler.compileModuleAsync(t));
    }
  }), map((factoryOrRoutes) => {
    if (onLoadEndListener) {
      onLoadEndListener(route);
    }
    let injector;
    let rawRoutes;
    let requireStandaloneComponents = false;
    if (Array.isArray(factoryOrRoutes)) {
      rawRoutes = factoryOrRoutes;
      requireStandaloneComponents = true;
    } else {
      injector = factoryOrRoutes.create(parentInjector).injector;
      rawRoutes = injector.get(ROUTES, [], {
        optional: true,
        self: true
      }).flat();
    }
    const routes = rawRoutes.map(standardizeConfig);
    (typeof ngDevMode === "undefined" || ngDevMode) && validateConfig(routes, route.path, requireStandaloneComponents);
    return {
      routes,
      injector
    };
  }));
}
function isWrappedDefaultExport(value) {
  return value && typeof value === "object" && "default" in value;
}
function maybeUnwrapDefaultExport(input2) {
  return isWrappedDefaultExport(input2) ? input2["default"] : input2;
}
var _UrlHandlingStrategy = class _UrlHandlingStrategy {
};
_UrlHandlingStrategy.\u0275fac = function UrlHandlingStrategy_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _UrlHandlingStrategy)();
};
_UrlHandlingStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _UrlHandlingStrategy,
  factory: () => (() => inject(DefaultUrlHandlingStrategy))(),
  providedIn: "root"
});
var UrlHandlingStrategy = _UrlHandlingStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UrlHandlingStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultUrlHandlingStrategy)
    }]
  }], null, null);
})();
var _DefaultUrlHandlingStrategy = class _DefaultUrlHandlingStrategy {
  shouldProcessUrl(url) {
    return true;
  }
  extract(url) {
    return url;
  }
  merge(newUrlPart, wholeUrl) {
    return newUrlPart;
  }
};
_DefaultUrlHandlingStrategy.\u0275fac = function DefaultUrlHandlingStrategy_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _DefaultUrlHandlingStrategy)();
};
_DefaultUrlHandlingStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DefaultUrlHandlingStrategy,
  factory: _DefaultUrlHandlingStrategy.\u0275fac,
  providedIn: "root"
});
var DefaultUrlHandlingStrategy = _DefaultUrlHandlingStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultUrlHandlingStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var CREATE_VIEW_TRANSITION = new InjectionToken(ngDevMode ? "view transition helper" : "");
var VIEW_TRANSITION_OPTIONS = new InjectionToken(ngDevMode ? "view transition options" : "");
function createViewTransition(injector, from2, to) {
  const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);
  const document2 = injector.get(DOCUMENT2);
  return injector.get(NgZone).runOutsideAngular(() => {
    if (!document2.startViewTransition || transitionOptions.skipNextTransition) {
      transitionOptions.skipNextTransition = false;
      return new Promise((resolve) => setTimeout(resolve));
    }
    let resolveViewTransitionStarted;
    const viewTransitionStarted = new Promise((resolve) => {
      resolveViewTransitionStarted = resolve;
    });
    const transition = document2.startViewTransition(() => {
      resolveViewTransitionStarted();
      return createRenderPromise(injector);
    });
    const {
      onViewTransitionCreated
    } = transitionOptions;
    if (onViewTransitionCreated) {
      runInInjectionContext(injector, () => onViewTransitionCreated({
        transition,
        from: from2,
        to
      }));
    }
    return viewTransitionStarted;
  });
}
function createRenderPromise(injector) {
  return new Promise((resolve) => {
    afterNextRender({
      read: () => setTimeout(resolve)
    }, {
      injector
    });
  });
}
var NAVIGATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "navigation error handler" : "");
var _NavigationTransitions = class _NavigationTransitions {
  get hasRequestedNavigation() {
    return this.navigationId !== 0;
  }
  constructor() {
    this.currentNavigation = null;
    this.currentTransition = null;
    this.lastSuccessfulNavigation = null;
    this.events = new Subject();
    this.transitionAbortSubject = new Subject();
    this.configLoader = inject(RouterConfigLoader);
    this.environmentInjector = inject(EnvironmentInjector);
    this.urlSerializer = inject(UrlSerializer);
    this.rootContexts = inject(ChildrenOutletContexts);
    this.location = inject(Location);
    this.inputBindingEnabled = inject(INPUT_BINDER, {
      optional: true
    }) !== null;
    this.titleStrategy = inject(TitleStrategy);
    this.options = inject(ROUTER_CONFIGURATION, {
      optional: true
    }) || {};
    this.paramsInheritanceStrategy = this.options.paramsInheritanceStrategy || "emptyOnly";
    this.urlHandlingStrategy = inject(UrlHandlingStrategy);
    this.createViewTransition = inject(CREATE_VIEW_TRANSITION, {
      optional: true
    });
    this.navigationErrorHandler = inject(NAVIGATION_ERROR_HANDLER, {
      optional: true
    });
    this.navigationId = 0;
    this.afterPreactivation = () => of(void 0);
    this.rootComponentType = null;
    const onLoadStart = (r) => this.events.next(new RouteConfigLoadStart(r));
    const onLoadEnd = (r) => this.events.next(new RouteConfigLoadEnd(r));
    this.configLoader.onLoadEndListener = onLoadEnd;
    this.configLoader.onLoadStartListener = onLoadStart;
  }
  complete() {
    this.transitions?.complete();
  }
  handleNavigationRequest(request) {
    const id = ++this.navigationId;
    this.transitions?.next(__spreadProps(__spreadValues(__spreadValues({}, this.transitions.value), request), {
      id
    }));
  }
  setupNavigations(router, initialUrlTree, initialRouterState) {
    this.transitions = new BehaviorSubject({
      id: 0,
      currentUrlTree: initialUrlTree,
      currentRawUrl: initialUrlTree,
      extractedUrl: this.urlHandlingStrategy.extract(initialUrlTree),
      urlAfterRedirects: this.urlHandlingStrategy.extract(initialUrlTree),
      rawUrl: initialUrlTree,
      extras: {},
      resolve: () => {
      },
      reject: () => {
      },
      promise: Promise.resolve(true),
      source: IMPERATIVE_NAVIGATION,
      restoredState: null,
      currentSnapshot: initialRouterState.snapshot,
      targetSnapshot: null,
      currentRouterState: initialRouterState,
      targetRouterState: null,
      guards: {
        canActivateChecks: [],
        canDeactivateChecks: []
      },
      guardsResult: null
    });
    return this.transitions.pipe(
      filter((t) => t.id !== 0),
      // Extract URL
      map((t) => __spreadProps(__spreadValues({}, t), {
        extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl)
      })),
      // Using switchMap so we cancel executing navigations when a new one comes in
      switchMap((overallTransitionState) => {
        let completed = false;
        let errored = false;
        return of(overallTransitionState).pipe(
          switchMap((t) => {
            if (this.navigationId > overallTransitionState.id) {
              const cancellationReason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : "";
              this.cancelNavigationTransition(overallTransitionState, cancellationReason, NavigationCancellationCode.SupersededByNewNavigation);
              return EMPTY;
            }
            this.currentTransition = overallTransitionState;
            this.currentNavigation = {
              id: t.id,
              initialUrl: t.rawUrl,
              extractedUrl: t.extractedUrl,
              targetBrowserUrl: typeof t.extras.browserUrl === "string" ? this.urlSerializer.parse(t.extras.browserUrl) : t.extras.browserUrl,
              trigger: t.source,
              extras: t.extras,
              previousNavigation: !this.lastSuccessfulNavigation ? null : __spreadProps(__spreadValues({}, this.lastSuccessfulNavigation), {
                previousNavigation: null
              })
            };
            const urlTransition = !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();
            const onSameUrlNavigation = t.extras.onSameUrlNavigation ?? router.onSameUrlNavigation;
            if (!urlTransition && onSameUrlNavigation !== "reload") {
              const reason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.` : "";
              this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.rawUrl), reason, NavigationSkippedCode.IgnoredSameUrlNavigation));
              t.resolve(false);
              return EMPTY;
            }
            if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {
              return of(t).pipe(
                // Fire NavigationStart event
                switchMap((t2) => {
                  const transition = this.transitions?.getValue();
                  this.events.next(new NavigationStart(t2.id, this.urlSerializer.serialize(t2.extractedUrl), t2.source, t2.restoredState));
                  if (transition !== this.transitions?.getValue()) {
                    return EMPTY;
                  }
                  return Promise.resolve(t2);
                }),
                // Recognize
                recognize(this.environmentInjector, this.configLoader, this.rootComponentType, router.config, this.urlSerializer, this.paramsInheritanceStrategy),
                // Update URL if in `eager` update mode
                tap((t2) => {
                  overallTransitionState.targetSnapshot = t2.targetSnapshot;
                  overallTransitionState.urlAfterRedirects = t2.urlAfterRedirects;
                  this.currentNavigation = __spreadProps(__spreadValues({}, this.currentNavigation), {
                    finalUrl: t2.urlAfterRedirects
                  });
                  const routesRecognized = new RoutesRecognized(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                  this.events.next(routesRecognized);
                })
              );
            } else if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)) {
              const {
                id,
                extractedUrl,
                source,
                restoredState,
                extras
              } = t;
              const navStart = new NavigationStart(id, this.urlSerializer.serialize(extractedUrl), source, restoredState);
              this.events.next(navStart);
              const targetSnapshot = createEmptyState(this.rootComponentType).snapshot;
              this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
                targetSnapshot,
                urlAfterRedirects: extractedUrl,
                extras: __spreadProps(__spreadValues({}, extras), {
                  skipLocationChange: false,
                  replaceUrl: false
                })
              });
              this.currentNavigation.finalUrl = extractedUrl;
              return of(overallTransitionState);
            } else {
              const reason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation was ignored because the UrlHandlingStrategy indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.` : "";
              this.events.next(new NavigationSkipped(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, NavigationSkippedCode.IgnoredByUrlHandlingStrategy));
              t.resolve(false);
              return EMPTY;
            }
          }),
          // --- GUARDS ---
          tap((t) => {
            const guardsStart = new GuardsCheckStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);
            this.events.next(guardsStart);
          }),
          map((t) => {
            this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
              guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts)
            });
            return overallTransitionState;
          }),
          checkGuards(this.environmentInjector, (evt) => this.events.next(evt)),
          tap((t) => {
            overallTransitionState.guardsResult = t.guardsResult;
            if (t.guardsResult && typeof t.guardsResult !== "boolean") {
              throw redirectingNavigationError(this.urlSerializer, t.guardsResult);
            }
            const guardsEnd = new GuardsCheckEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);
            this.events.next(guardsEnd);
          }),
          filter((t) => {
            if (!t.guardsResult) {
              this.cancelNavigationTransition(t, "", NavigationCancellationCode.GuardRejected);
              return false;
            }
            return true;
          }),
          // --- RESOLVE ---
          switchTap((t) => {
            if (t.guards.canActivateChecks.length) {
              return of(t).pipe(tap((t2) => {
                const resolveStart = new ResolveStart(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                this.events.next(resolveStart);
              }), switchMap((t2) => {
                let dataResolved = false;
                return of(t2).pipe(resolveData(this.paramsInheritanceStrategy, this.environmentInjector), tap({
                  next: () => dataResolved = true,
                  complete: () => {
                    if (!dataResolved) {
                      this.cancelNavigationTransition(t2, typeof ngDevMode === "undefined" || ngDevMode ? `At least one route resolver didn't emit any value.` : "", NavigationCancellationCode.NoDataFromResolver);
                    }
                  }
                }));
              }), tap((t2) => {
                const resolveEnd = new ResolveEnd(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                this.events.next(resolveEnd);
              }));
            }
            return void 0;
          }),
          // --- LOAD COMPONENTS ---
          switchTap((t) => {
            const loadComponents = (route) => {
              const loaders = [];
              if (route.routeConfig?.loadComponent && !route.routeConfig._loadedComponent) {
                loaders.push(this.configLoader.loadComponent(route.routeConfig).pipe(tap((loadedComponent) => {
                  route.component = loadedComponent;
                }), map(() => void 0)));
              }
              for (const child of route.children) {
                loaders.push(...loadComponents(child));
              }
              return loaders;
            };
            return combineLatest(loadComponents(t.targetSnapshot.root)).pipe(defaultIfEmpty(null), take(1));
          }),
          switchTap(() => this.afterPreactivation()),
          switchMap(() => {
            const {
              currentSnapshot,
              targetSnapshot
            } = overallTransitionState;
            const viewTransitionStarted = this.createViewTransition?.(this.environmentInjector, currentSnapshot.root, targetSnapshot.root);
            return viewTransitionStarted ? from(viewTransitionStarted).pipe(map(() => overallTransitionState)) : of(overallTransitionState);
          }),
          map((t) => {
            const targetRouterState = createRouterState(router.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);
            this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
              targetRouterState
            });
            this.currentNavigation.targetRouterState = targetRouterState;
            return overallTransitionState;
          }),
          tap(() => {
            this.events.next(new BeforeActivateRoutes());
          }),
          activateRoutes(this.rootContexts, router.routeReuseStrategy, (evt) => this.events.next(evt), this.inputBindingEnabled),
          // Ensure that if some observable used to drive the transition doesn't
          // complete, the navigation still finalizes This should never happen, but
          // this is done as a safety measure to avoid surfacing this error (#49567).
          take(1),
          tap({
            next: (t) => {
              completed = true;
              this.lastSuccessfulNavigation = this.currentNavigation;
              this.events.next(new NavigationEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects)));
              this.titleStrategy?.updateTitle(t.targetRouterState.snapshot);
              t.resolve(true);
            },
            complete: () => {
              completed = true;
            }
          }),
          // There used to be a lot more logic happening directly within the
          // transition Observable. Some of this logic has been refactored out to
          // other places but there may still be errors that happen there. This gives
          // us a way to cancel the transition from the outside. This may also be
          // required in the future to support something like the abort signal of the
          // Navigation API where the navigation gets aborted from outside the
          // transition.
          takeUntil(this.transitionAbortSubject.pipe(tap((err) => {
            throw err;
          }))),
          finalize(() => {
            if (!completed && !errored) {
              const cancelationReason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : "";
              this.cancelNavigationTransition(overallTransitionState, cancelationReason, NavigationCancellationCode.SupersededByNewNavigation);
            }
            if (this.currentTransition?.id === overallTransitionState.id) {
              this.currentNavigation = null;
              this.currentTransition = null;
            }
          }),
          catchError((e) => {
            errored = true;
            if (isNavigationCancelingError(e)) {
              this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e.message, e.cancellationCode));
              if (!isRedirectingNavigationCancelingError(e)) {
                overallTransitionState.resolve(false);
              } else {
                this.events.next(new RedirectRequest(e.url, e.navigationBehaviorOptions));
              }
            } else {
              const navigationError = new NavigationError(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e, overallTransitionState.targetSnapshot ?? void 0);
              try {
                const navigationErrorHandlerResult = runInInjectionContext(this.environmentInjector, () => this.navigationErrorHandler?.(navigationError));
                if (navigationErrorHandlerResult instanceof RedirectCommand) {
                  const {
                    message,
                    cancellationCode
                  } = redirectingNavigationError(this.urlSerializer, navigationErrorHandlerResult);
                  this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), message, cancellationCode));
                  this.events.next(new RedirectRequest(navigationErrorHandlerResult.redirectTo, navigationErrorHandlerResult.navigationBehaviorOptions));
                } else {
                  this.events.next(navigationError);
                  const errorHandlerResult = router.errorHandler(e);
                  overallTransitionState.resolve(!!errorHandlerResult);
                }
              } catch (ee) {
                if (this.options.resolveNavigationPromiseOnError) {
                  overallTransitionState.resolve(false);
                } else {
                  overallTransitionState.reject(ee);
                }
              }
            }
            return EMPTY;
          })
        );
      })
    );
  }
  cancelNavigationTransition(t, reason, code) {
    const navCancel = new NavigationCancel(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, code);
    this.events.next(navCancel);
    t.resolve(false);
  }
  /**
   * @returns Whether we're navigating to somewhere that is not what the Router is
   * currently set to.
   */
  isUpdatingInternalState() {
    return this.currentTransition?.extractedUrl.toString() !== this.currentTransition?.currentUrlTree.toString();
  }
  /**
   * @returns Whether we're updating the browser URL to something new (navigation is going
   * to somewhere not displayed in the URL bar and we will update the URL
   * bar if navigation succeeds).
   */
  isUpdatedBrowserUrl() {
    const currentBrowserUrl = this.urlHandlingStrategy.extract(this.urlSerializer.parse(this.location.path(true)));
    const targetBrowserUrl = this.currentNavigation?.targetBrowserUrl ?? this.currentNavigation?.extractedUrl;
    return currentBrowserUrl.toString() !== targetBrowserUrl?.toString() && !this.currentNavigation?.extras.skipLocationChange;
  }
};
_NavigationTransitions.\u0275fac = function NavigationTransitions_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NavigationTransitions)();
};
_NavigationTransitions.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NavigationTransitions,
  factory: _NavigationTransitions.\u0275fac,
  providedIn: "root"
});
var NavigationTransitions = _NavigationTransitions;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NavigationTransitions, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function isBrowserTriggeredNavigation(source) {
  return source !== IMPERATIVE_NAVIGATION;
}
var _RouteReuseStrategy = class _RouteReuseStrategy {
};
_RouteReuseStrategy.\u0275fac = function RouteReuseStrategy_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _RouteReuseStrategy)();
};
_RouteReuseStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _RouteReuseStrategy,
  factory: () => (() => inject(DefaultRouteReuseStrategy))(),
  providedIn: "root"
});
var RouteReuseStrategy = _RouteReuseStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouteReuseStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultRouteReuseStrategy)
    }]
  }], null, null);
})();
var BaseRouteReuseStrategy = class {
  /**
   * Whether the given route should detach for later reuse.
   * Always returns false for `BaseRouteReuseStrategy`.
   * */
  shouldDetach(route) {
    return false;
  }
  /**
   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.
   */
  store(route, detachedTree) {
  }
  /** Returns `false`, meaning the route (and its subtree) is never reattached */
  shouldAttach(route) {
    return false;
  }
  /** Returns `null` because this strategy does not store routes for later re-use. */
  retrieve(route) {
    return null;
  }
  /**
   * Determines if a route should be reused.
   * This strategy returns `true` when the future route config and current route config are
   * identical.
   */
  shouldReuseRoute(future, curr) {
    return future.routeConfig === curr.routeConfig;
  }
};
var _DefaultRouteReuseStrategy = class _DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {
};
_DefaultRouteReuseStrategy.\u0275fac = /* @__PURE__ */ (() => {
  let \u0275DefaultRouteReuseStrategy_BaseFactory;
  return function DefaultRouteReuseStrategy_Factory(__ngFactoryType__) {
    return (\u0275DefaultRouteReuseStrategy_BaseFactory || (\u0275DefaultRouteReuseStrategy_BaseFactory = \u0275\u0275getInheritedFactory(_DefaultRouteReuseStrategy)))(__ngFactoryType__ || _DefaultRouteReuseStrategy);
  };
})();
_DefaultRouteReuseStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DefaultRouteReuseStrategy,
  factory: _DefaultRouteReuseStrategy.\u0275fac,
  providedIn: "root"
});
var DefaultRouteReuseStrategy = _DefaultRouteReuseStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultRouteReuseStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _StateManager = class _StateManager {
};
_StateManager.\u0275fac = function StateManager_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _StateManager)();
};
_StateManager.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _StateManager,
  factory: () => (() => inject(HistoryStateManager))(),
  providedIn: "root"
});
var StateManager = _StateManager;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StateManager, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(HistoryStateManager)
    }]
  }], null, null);
})();
var _HistoryStateManager = class _HistoryStateManager extends StateManager {
  constructor() {
    super(...arguments);
    this.location = inject(Location);
    this.urlSerializer = inject(UrlSerializer);
    this.options = inject(ROUTER_CONFIGURATION, {
      optional: true
    }) || {};
    this.canceledNavigationResolution = this.options.canceledNavigationResolution || "replace";
    this.urlHandlingStrategy = inject(UrlHandlingStrategy);
    this.urlUpdateStrategy = this.options.urlUpdateStrategy || "deferred";
    this.currentUrlTree = new UrlTree();
    this.rawUrlTree = this.currentUrlTree;
    this.currentPageId = 0;
    this.lastSuccessfulId = -1;
    this.routerState = createEmptyState(null);
    this.stateMemento = this.createStateMemento();
  }
  getCurrentUrlTree() {
    return this.currentUrlTree;
  }
  getRawUrlTree() {
    return this.rawUrlTree;
  }
  restoredState() {
    return this.location.getState();
  }
  /**
   * The ɵrouterPageId of whatever page is currently active in the browser history. This is
   * important for computing the target page id for new navigations because we need to ensure each
   * page id in the browser history is 1 more than the previous entry.
   */
  get browserPageId() {
    if (this.canceledNavigationResolution !== "computed") {
      return this.currentPageId;
    }
    return this.restoredState()?.\u0275routerPageId ?? this.currentPageId;
  }
  getRouterState() {
    return this.routerState;
  }
  createStateMemento() {
    return {
      rawUrlTree: this.rawUrlTree,
      currentUrlTree: this.currentUrlTree,
      routerState: this.routerState
    };
  }
  registerNonRouterCurrentEntryChangeListener(listener) {
    return this.location.subscribe((event) => {
      if (event["type"] === "popstate") {
        listener(event["url"], event.state);
      }
    });
  }
  handleRouterEvent(e, currentTransition) {
    if (e instanceof NavigationStart) {
      this.stateMemento = this.createStateMemento();
    } else if (e instanceof NavigationSkipped) {
      this.rawUrlTree = currentTransition.initialUrl;
    } else if (e instanceof RoutesRecognized) {
      if (this.urlUpdateStrategy === "eager") {
        if (!currentTransition.extras.skipLocationChange) {
          const rawUrl = this.urlHandlingStrategy.merge(currentTransition.finalUrl, currentTransition.initialUrl);
          this.setBrowserUrl(currentTransition.targetBrowserUrl ?? rawUrl, currentTransition);
        }
      }
    } else if (e instanceof BeforeActivateRoutes) {
      this.currentUrlTree = currentTransition.finalUrl;
      this.rawUrlTree = this.urlHandlingStrategy.merge(currentTransition.finalUrl, currentTransition.initialUrl);
      this.routerState = currentTransition.targetRouterState;
      if (this.urlUpdateStrategy === "deferred" && !currentTransition.extras.skipLocationChange) {
        this.setBrowserUrl(currentTransition.targetBrowserUrl ?? this.rawUrlTree, currentTransition);
      }
    } else if (e instanceof NavigationCancel && (e.code === NavigationCancellationCode.GuardRejected || e.code === NavigationCancellationCode.NoDataFromResolver)) {
      this.restoreHistory(currentTransition);
    } else if (e instanceof NavigationError) {
      this.restoreHistory(currentTransition, true);
    } else if (e instanceof NavigationEnd) {
      this.lastSuccessfulId = e.id;
      this.currentPageId = this.browserPageId;
    }
  }
  setBrowserUrl(url, transition) {
    const path = url instanceof UrlTree ? this.urlSerializer.serialize(url) : url;
    if (this.location.isCurrentPathEqualTo(path) || !!transition.extras.replaceUrl) {
      const currentBrowserPageId = this.browserPageId;
      const state = __spreadValues(__spreadValues({}, transition.extras.state), this.generateNgRouterState(transition.id, currentBrowserPageId));
      this.location.replaceState(path, "", state);
    } else {
      const state = __spreadValues(__spreadValues({}, transition.extras.state), this.generateNgRouterState(transition.id, this.browserPageId + 1));
      this.location.go(path, "", state);
    }
  }
  /**
   * Performs the necessary rollback action to restore the browser URL to the
   * state before the transition.
   */
  restoreHistory(navigation, restoringFromCaughtError = false) {
    if (this.canceledNavigationResolution === "computed") {
      const currentBrowserPageId = this.browserPageId;
      const targetPagePosition = this.currentPageId - currentBrowserPageId;
      if (targetPagePosition !== 0) {
        this.location.historyGo(targetPagePosition);
      } else if (this.currentUrlTree === navigation.finalUrl && targetPagePosition === 0) {
        this.resetState(navigation);
        this.resetUrlToCurrentUrlTree();
      } else {
      }
    } else if (this.canceledNavigationResolution === "replace") {
      if (restoringFromCaughtError) {
        this.resetState(navigation);
      }
      this.resetUrlToCurrentUrlTree();
    }
  }
  resetState(navigation) {
    this.routerState = this.stateMemento.routerState;
    this.currentUrlTree = this.stateMemento.currentUrlTree;
    this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, navigation.finalUrl ?? this.rawUrlTree);
  }
  resetUrlToCurrentUrlTree() {
    this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), "", this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));
  }
  generateNgRouterState(navigationId, routerPageId) {
    if (this.canceledNavigationResolution === "computed") {
      return {
        navigationId,
        \u0275routerPageId: routerPageId
      };
    }
    return {
      navigationId
    };
  }
};
_HistoryStateManager.\u0275fac = /* @__PURE__ */ (() => {
  let \u0275HistoryStateManager_BaseFactory;
  return function HistoryStateManager_Factory(__ngFactoryType__) {
    return (\u0275HistoryStateManager_BaseFactory || (\u0275HistoryStateManager_BaseFactory = \u0275\u0275getInheritedFactory(_HistoryStateManager)))(__ngFactoryType__ || _HistoryStateManager);
  };
})();
_HistoryStateManager.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HistoryStateManager,
  factory: _HistoryStateManager.\u0275fac,
  providedIn: "root"
});
var HistoryStateManager = _HistoryStateManager;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HistoryStateManager, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var NavigationResult;
(function(NavigationResult2) {
  NavigationResult2[NavigationResult2["COMPLETE"] = 0] = "COMPLETE";
  NavigationResult2[NavigationResult2["FAILED"] = 1] = "FAILED";
  NavigationResult2[NavigationResult2["REDIRECTING"] = 2] = "REDIRECTING";
})(NavigationResult || (NavigationResult = {}));
function afterNextNavigation(router, action) {
  router.events.pipe(filter((e) => e instanceof NavigationEnd || e instanceof NavigationCancel || e instanceof NavigationError || e instanceof NavigationSkipped), map((e) => {
    if (e instanceof NavigationEnd || e instanceof NavigationSkipped) {
      return NavigationResult.COMPLETE;
    }
    const redirecting = e instanceof NavigationCancel ? e.code === NavigationCancellationCode.Redirect || e.code === NavigationCancellationCode.SupersededByNewNavigation : false;
    return redirecting ? NavigationResult.REDIRECTING : NavigationResult.FAILED;
  }), filter((result) => result !== NavigationResult.REDIRECTING), take(1)).subscribe(() => {
    action();
  });
}
function defaultErrorHandler2(error) {
  throw error;
}
var exactMatchOptions = {
  paths: "exact",
  fragment: "ignored",
  matrixParams: "ignored",
  queryParams: "exact"
};
var subsetMatchOptions = {
  paths: "subset",
  fragment: "ignored",
  matrixParams: "ignored",
  queryParams: "subset"
};
var _Router = class _Router {
  get currentUrlTree() {
    return this.stateManager.getCurrentUrlTree();
  }
  get rawUrlTree() {
    return this.stateManager.getRawUrlTree();
  }
  /**
   * An event stream for routing events.
   */
  get events() {
    return this._events;
  }
  /**
   * The current state of routing in this NgModule.
   */
  get routerState() {
    return this.stateManager.getRouterState();
  }
  constructor() {
    this.disposed = false;
    this.console = inject(Console);
    this.stateManager = inject(StateManager);
    this.options = inject(ROUTER_CONFIGURATION, {
      optional: true
    }) || {};
    this.pendingTasks = inject(PendingTasks);
    this.urlUpdateStrategy = this.options.urlUpdateStrategy || "deferred";
    this.navigationTransitions = inject(NavigationTransitions);
    this.urlSerializer = inject(UrlSerializer);
    this.location = inject(Location);
    this.urlHandlingStrategy = inject(UrlHandlingStrategy);
    this._events = new Subject();
    this.errorHandler = this.options.errorHandler || defaultErrorHandler2;
    this.navigated = false;
    this.routeReuseStrategy = inject(RouteReuseStrategy);
    this.onSameUrlNavigation = this.options.onSameUrlNavigation || "ignore";
    this.config = inject(ROUTES, {
      optional: true
    })?.flat() ?? [];
    this.componentInputBindingEnabled = !!inject(INPUT_BINDER, {
      optional: true
    });
    this.eventsSubscription = new Subscription();
    this.resetConfig(this.config);
    this.navigationTransitions.setupNavigations(this, this.currentUrlTree, this.routerState).subscribe({
      error: (e) => {
        this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e}` : e);
      }
    });
    this.subscribeToNavigationEvents();
  }
  subscribeToNavigationEvents() {
    const subscription = this.navigationTransitions.events.subscribe((e) => {
      try {
        const currentTransition = this.navigationTransitions.currentTransition;
        const currentNavigation = this.navigationTransitions.currentNavigation;
        if (currentTransition !== null && currentNavigation !== null) {
          this.stateManager.handleRouterEvent(e, currentNavigation);
          if (e instanceof NavigationCancel && e.code !== NavigationCancellationCode.Redirect && e.code !== NavigationCancellationCode.SupersededByNewNavigation) {
            this.navigated = true;
          } else if (e instanceof NavigationEnd) {
            this.navigated = true;
          } else if (e instanceof RedirectRequest) {
            const opts = e.navigationBehaviorOptions;
            const mergedTree = this.urlHandlingStrategy.merge(e.url, currentTransition.currentRawUrl);
            const extras = __spreadValues({
              browserUrl: currentTransition.extras.browserUrl,
              info: currentTransition.extras.info,
              skipLocationChange: currentTransition.extras.skipLocationChange,
              // The URL is already updated at this point if we have 'eager' URL
              // updates or if the navigation was triggered by the browser (back
              // button, URL bar, etc). We want to replace that item in history
              // if the navigation is rejected.
              replaceUrl: currentTransition.extras.replaceUrl || this.urlUpdateStrategy === "eager" || isBrowserTriggeredNavigation(currentTransition.source)
            }, opts);
            this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras, {
              resolve: currentTransition.resolve,
              reject: currentTransition.reject,
              promise: currentTransition.promise
            });
          }
        }
        if (isPublicRouterEvent(e)) {
          this._events.next(e);
        }
      } catch (e2) {
        this.navigationTransitions.transitionAbortSubject.next(e2);
      }
    });
    this.eventsSubscription.add(subscription);
  }
  /** @internal */
  resetRootComponentType(rootComponentType) {
    this.routerState.root.component = rootComponentType;
    this.navigationTransitions.rootComponentType = rootComponentType;
  }
  /**
   * Sets up the location change listener and performs the initial navigation.
   */
  initialNavigation() {
    this.setUpLocationChangeListener();
    if (!this.navigationTransitions.hasRequestedNavigation) {
      this.navigateToSyncWithBrowser(this.location.path(true), IMPERATIVE_NAVIGATION, this.stateManager.restoredState());
    }
  }
  /**
   * Sets up the location change listener. This listener detects navigations triggered from outside
   * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router
   * navigation so that the correct events, guards, etc. are triggered.
   */
  setUpLocationChangeListener() {
    this.nonRouterCurrentEntryChangeSubscription ??= this.stateManager.registerNonRouterCurrentEntryChangeListener((url, state) => {
      setTimeout(() => {
        this.navigateToSyncWithBrowser(url, "popstate", state);
      }, 0);
    });
  }
  /**
   * Schedules a router navigation to synchronize Router state with the browser state.
   *
   * This is done as a response to a popstate event and the initial navigation. These
   * two scenarios represent times when the browser URL/state has been updated and
   * the Router needs to respond to ensure its internal state matches.
   */
  navigateToSyncWithBrowser(url, source, state) {
    const extras = {
      replaceUrl: true
    };
    const restoredState = state?.navigationId ? state : null;
    if (state) {
      const stateCopy = __spreadValues({}, state);
      delete stateCopy.navigationId;
      delete stateCopy.\u0275routerPageId;
      if (Object.keys(stateCopy).length !== 0) {
        extras.state = stateCopy;
      }
    }
    const urlTree = this.parseUrl(url);
    this.scheduleNavigation(urlTree, source, restoredState, extras);
  }
  /** The current URL. */
  get url() {
    return this.serializeUrl(this.currentUrlTree);
  }
  /**
   * Returns the current `Navigation` object when the router is navigating,
   * and `null` when idle.
   */
  getCurrentNavigation() {
    return this.navigationTransitions.currentNavigation;
  }
  /**
   * The `Navigation` object of the most recent navigation to succeed and `null` if there
   *     has not been a successful navigation yet.
   */
  get lastSuccessfulNavigation() {
    return this.navigationTransitions.lastSuccessfulNavigation;
  }
  /**
   * Resets the route configuration used for navigation and generating links.
   *
   * @param config The route array for the new configuration.
   *
   * @usageNotes
   *
   * ```
   * router.resetConfig([
   *  { path: 'team/:id', component: TeamCmp, children: [
   *    { path: 'simple', component: SimpleCmp },
   *    { path: 'user/:name', component: UserCmp }
   *  ]}
   * ]);
   * ```
   */
  resetConfig(config2) {
    (typeof ngDevMode === "undefined" || ngDevMode) && validateConfig(config2);
    this.config = config2.map(standardizeConfig);
    this.navigated = false;
  }
  /** @nodoc */
  ngOnDestroy() {
    this.dispose();
  }
  /** Disposes of the router. */
  dispose() {
    this.navigationTransitions.complete();
    if (this.nonRouterCurrentEntryChangeSubscription) {
      this.nonRouterCurrentEntryChangeSubscription.unsubscribe();
      this.nonRouterCurrentEntryChangeSubscription = void 0;
    }
    this.disposed = true;
    this.eventsSubscription.unsubscribe();
  }
  /**
   * Appends URL segments to the current URL tree to create a new URL tree.
   *
   * @param commands An array of URL fragments with which to construct the new URL tree.
   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
   * segments, followed by the parameters for each segment.
   * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`
   * property of the options object, if supplied.
   * @param navigationExtras Options that control the navigation strategy.
   * @returns The new URL tree.
   *
   * @usageNotes
   *
   * ```
   * // create /team/33/user/11
   * router.createUrlTree(['/team', 33, 'user', 11]);
   *
   * // create /team/33;expand=true/user/11
   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
   *
   * // you can collapse static segments like this (this works only with the first passed-in value):
   * router.createUrlTree(['/team/33/user', userId]);
   *
   * // If the first segment can contain slashes, and you do not want the router to split it,
   * // you can do the following:
   * router.createUrlTree([{segmentPath: '/one/two'}]);
   *
   * // create /team/33/(user/11//right:chat)
   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
   *
   * // remove the right secondary node
   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
   *
   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
   *
   * // navigate to /team/33/user/11/details
   * router.createUrlTree(['details'], {relativeTo: route});
   *
   * // navigate to /team/33/user/22
   * router.createUrlTree(['../22'], {relativeTo: route});
   *
   * // navigate to /team/44/user/22
   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
   *
   * Note that a value of `null` or `undefined` for `relativeTo` indicates that the
   * tree should be created relative to the root.
   * ```
   */
  createUrlTree(commands, navigationExtras = {}) {
    const {
      relativeTo,
      queryParams,
      fragment,
      queryParamsHandling,
      preserveFragment
    } = navigationExtras;
    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;
    let q = null;
    switch (queryParamsHandling ?? this.options.defaultQueryParamsHandling) {
      case "merge":
        q = __spreadValues(__spreadValues({}, this.currentUrlTree.queryParams), queryParams);
        break;
      case "preserve":
        q = this.currentUrlTree.queryParams;
        break;
      default:
        q = queryParams || null;
    }
    if (q !== null) {
      q = this.removeEmptyProps(q);
    }
    let relativeToUrlSegmentGroup;
    try {
      const relativeToSnapshot = relativeTo ? relativeTo.snapshot : this.routerState.snapshot.root;
      relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeToSnapshot);
    } catch (e) {
      if (typeof commands[0] !== "string" || commands[0][0] !== "/") {
        commands = [];
      }
      relativeToUrlSegmentGroup = this.currentUrlTree.root;
    }
    return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, q, f ?? null);
  }
  /**
   * Navigates to a view using an absolute route path.
   *
   * @param url An absolute path for a defined route. The function does not apply any delta to the
   *     current URL.
   * @param extras An object containing properties that modify the navigation strategy.
   *
   * @returns A Promise that resolves to 'true' when navigation succeeds,
   * to 'false' when navigation fails, or is rejected on error.
   *
   * @usageNotes
   *
   * The following calls request navigation to an absolute path.
   *
   * ```
   * router.navigateByUrl("/team/33/user/11");
   *
   * // Navigate without updating the URL
   * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
   * ```
   *
   * @see [Routing and Navigation guide](guide/routing/common-router-tasks)
   *
   */
  navigateByUrl(url, extras = {
    skipLocationChange: false
  }) {
    const urlTree = isUrlTree(url) ? url : this.parseUrl(url);
    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
    return this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras);
  }
  /**
   * Navigate based on the provided array of commands and a starting point.
   * If no starting route is provided, the navigation is absolute.
   *
   * @param commands An array of URL fragments with which to construct the target URL.
   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
   * segments, followed by the parameters for each segment.
   * The fragments are applied to the current URL or the one provided  in the `relativeTo` property
   * of the options object, if supplied.
   * @param extras An options object that determines how the URL should be constructed or
   *     interpreted.
   *
   * @returns A Promise that resolves to `true` when navigation succeeds, or `false` when navigation
   *     fails. The Promise is rejected when an error occurs if `resolveNavigationPromiseOnError` is
   * not `true`.
   *
   * @usageNotes
   *
   * The following calls request navigation to a dynamic route path relative to the current URL.
   *
   * ```
   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
   *
   * // Navigate without updating the URL, overriding the default behavior
   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
   * ```
   *
   * @see [Routing and Navigation guide](guide/routing/common-router-tasks)
   *
   */
  navigate(commands, extras = {
    skipLocationChange: false
  }) {
    validateCommands(commands);
    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
  }
  /** Serializes a `UrlTree` into a string */
  serializeUrl(url) {
    return this.urlSerializer.serialize(url);
  }
  /** Parses a string into a `UrlTree` */
  parseUrl(url) {
    try {
      return this.urlSerializer.parse(url);
    } catch {
      return this.urlSerializer.parse("/");
    }
  }
  isActive(url, matchOptions) {
    let options;
    if (matchOptions === true) {
      options = __spreadValues({}, exactMatchOptions);
    } else if (matchOptions === false) {
      options = __spreadValues({}, subsetMatchOptions);
    } else {
      options = matchOptions;
    }
    if (isUrlTree(url)) {
      return containsTree(this.currentUrlTree, url, options);
    }
    const urlTree = this.parseUrl(url);
    return containsTree(this.currentUrlTree, urlTree, options);
  }
  removeEmptyProps(params) {
    return Object.entries(params).reduce((result, [key, value]) => {
      if (value !== null && value !== void 0) {
        result[key] = value;
      }
      return result;
    }, {});
  }
  scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {
    if (this.disposed) {
      return Promise.resolve(false);
    }
    let resolve;
    let reject;
    let promise;
    if (priorPromise) {
      resolve = priorPromise.resolve;
      reject = priorPromise.reject;
      promise = priorPromise.promise;
    } else {
      promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
    }
    const taskId = this.pendingTasks.add();
    afterNextNavigation(this, () => {
      queueMicrotask(() => this.pendingTasks.remove(taskId));
    });
    this.navigationTransitions.handleNavigationRequest({
      source,
      restoredState,
      currentUrlTree: this.currentUrlTree,
      currentRawUrl: this.currentUrlTree,
      rawUrl,
      extras,
      resolve,
      reject,
      promise,
      currentSnapshot: this.routerState.snapshot,
      currentRouterState: this.routerState
    });
    return promise.catch((e) => {
      return Promise.reject(e);
    });
  }
};
_Router.\u0275fac = function Router_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _Router)();
};
_Router.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Router,
  factory: _Router.\u0275fac,
  providedIn: "root"
});
var Router = _Router;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Router, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function validateCommands(commands) {
  for (let i = 0; i < commands.length; i++) {
    const cmd = commands[i];
    if (cmd == null) {
      throw new RuntimeError(4008, (typeof ngDevMode === "undefined" || ngDevMode) && `The requested path contains ${cmd} segment at index ${i}`);
    }
  }
}
function isPublicRouterEvent(e) {
  return !(e instanceof BeforeActivateRoutes) && !(e instanceof RedirectRequest);
}
var _RouterLink = class _RouterLink {
  constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {
    this.router = router;
    this.route = route;
    this.tabIndexAttribute = tabIndexAttribute;
    this.renderer = renderer;
    this.el = el;
    this.locationStrategy = locationStrategy;
    this.href = null;
    this.onChanges = new Subject();
    this.preserveFragment = false;
    this.skipLocationChange = false;
    this.replaceUrl = false;
    this.routerLinkInput = null;
    const tagName = el.nativeElement.tagName?.toLowerCase();
    this.isAnchorElement = tagName === "a" || tagName === "area";
    if (this.isAnchorElement) {
      this.subscription = router.events.subscribe((s) => {
        if (s instanceof NavigationEnd) {
          this.updateHref();
        }
      });
    } else {
      this.setTabIndexIfNotOnNativeEl("0");
    }
  }
  /**
   * Modifies the tab index if there was not a tabindex attribute on the element during
   * instantiation.
   */
  setTabIndexIfNotOnNativeEl(newTabIndex) {
    if (this.tabIndexAttribute != null || this.isAnchorElement) {
      return;
    }
    this.applyAttributeValue("tabindex", newTabIndex);
  }
  /** @nodoc */
  // TODO(atscott): Remove changes parameter in major version as a breaking change.
  ngOnChanges(changes) {
    if (ngDevMode && isUrlTree(this.routerLinkInput) && (this.fragment !== void 0 || this.queryParams || this.queryParamsHandling || this.preserveFragment || this.relativeTo)) {
      throw new RuntimeError(4016, "Cannot configure queryParams or fragment when using a UrlTree as the routerLink input value.");
    }
    if (this.isAnchorElement) {
      this.updateHref();
    }
    this.onChanges.next(this);
  }
  /**
   * Commands to pass to {@link Router#createUrlTree} or a `UrlTree`.
   *   - **array**: commands to pass to {@link Router#createUrlTree}.
   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
   *   - **UrlTree**: a `UrlTree` for this link rather than creating one from the commands
   *     and other inputs that correspond to properties of `UrlCreationOptions`.
   *   - **null|undefined**: effectively disables the `routerLink`
   * @see {@link Router#createUrlTree}
   */
  set routerLink(commandsOrUrlTree) {
    if (commandsOrUrlTree == null) {
      this.routerLinkInput = null;
      this.setTabIndexIfNotOnNativeEl(null);
    } else {
      if (isUrlTree(commandsOrUrlTree)) {
        this.routerLinkInput = commandsOrUrlTree;
      } else {
        this.routerLinkInput = Array.isArray(commandsOrUrlTree) ? commandsOrUrlTree : [commandsOrUrlTree];
      }
      this.setTabIndexIfNotOnNativeEl("0");
    }
  }
  /** @nodoc */
  onClick(button, ctrlKey, shiftKey, altKey, metaKey) {
    const urlTree = this.urlTree;
    if (urlTree === null) {
      return true;
    }
    if (this.isAnchorElement) {
      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {
        return true;
      }
      if (typeof this.target === "string" && this.target != "_self") {
        return true;
      }
    }
    const extras = {
      skipLocationChange: this.skipLocationChange,
      replaceUrl: this.replaceUrl,
      state: this.state,
      info: this.info
    };
    this.router.navigateByUrl(urlTree, extras);
    return !this.isAnchorElement;
  }
  /** @nodoc */
  ngOnDestroy() {
    this.subscription?.unsubscribe();
  }
  updateHref() {
    const urlTree = this.urlTree;
    this.href = urlTree !== null && this.locationStrategy ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(urlTree)) : null;
    const sanitizedValue = this.href === null ? null : (
      // This class represents a directive that can be added to both `<a>` elements,
      // as well as other elements. As a result, we can't define security context at
      // compile time. So the security context is deferred to runtime.
      // The `ɵɵsanitizeUrlOrResourceUrl` selects the necessary sanitizer function
      // based on the tag and property names. The logic mimics the one from
      // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.
      //
      // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`
      // instead of applying a value via a renderer, after a final merge of the
      // `RouterLinkWithHref` directive.
      \u0275\u0275sanitizeUrlOrResourceUrl(this.href, this.el.nativeElement.tagName.toLowerCase(), "href")
    );
    this.applyAttributeValue("href", sanitizedValue);
  }
  applyAttributeValue(attrName, attrValue) {
    const renderer = this.renderer;
    const nativeElement = this.el.nativeElement;
    if (attrValue !== null) {
      renderer.setAttribute(nativeElement, attrName, attrValue);
    } else {
      renderer.removeAttribute(nativeElement, attrName);
    }
  }
  get urlTree() {
    if (this.routerLinkInput === null) {
      return null;
    } else if (isUrlTree(this.routerLinkInput)) {
      return this.routerLinkInput;
    }
    return this.router.createUrlTree(this.routerLinkInput, {
      // If the `relativeTo` input is not defined, we want to use `this.route` by default.
      // Otherwise, we should use the value provided by the user in the input.
      relativeTo: this.relativeTo !== void 0 ? this.relativeTo : this.route,
      queryParams: this.queryParams,
      fragment: this.fragment,
      queryParamsHandling: this.queryParamsHandling,
      preserveFragment: this.preserveFragment
    });
  }
};
_RouterLink.\u0275fac = function RouterLink_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _RouterLink)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275injectAttribute("tabindex"), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(LocationStrategy));
};
_RouterLink.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _RouterLink,
  selectors: [["", "routerLink", ""]],
  hostVars: 1,
  hostBindings: function RouterLink_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function RouterLink_click_HostBindingHandler($event) {
        return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);
      });
    }
    if (rf & 2) {
      \u0275\u0275attribute("target", ctx.target);
    }
  },
  inputs: {
    target: "target",
    queryParams: "queryParams",
    fragment: "fragment",
    queryParamsHandling: "queryParamsHandling",
    state: "state",
    info: "info",
    relativeTo: "relativeTo",
    preserveFragment: [2, "preserveFragment", "preserveFragment", booleanAttribute],
    skipLocationChange: [2, "skipLocationChange", "skipLocationChange", booleanAttribute],
    replaceUrl: [2, "replaceUrl", "replaceUrl", booleanAttribute],
    routerLink: "routerLink"
  },
  standalone: true,
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature]
});
var RouterLink = _RouterLink;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterLink, [{
    type: Directive,
    args: [{
      selector: "[routerLink]",
      standalone: true
    }]
  }], () => [{
    type: Router
  }, {
    type: ActivatedRoute
  }, {
    type: void 0,
    decorators: [{
      type: Attribute2,
      args: ["tabindex"]
    }]
  }, {
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: LocationStrategy
  }], {
    target: [{
      type: HostBinding,
      args: ["attr.target"]
    }, {
      type: Input
    }],
    queryParams: [{
      type: Input
    }],
    fragment: [{
      type: Input
    }],
    queryParamsHandling: [{
      type: Input
    }],
    state: [{
      type: Input
    }],
    info: [{
      type: Input
    }],
    relativeTo: [{
      type: Input
    }],
    preserveFragment: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    skipLocationChange: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    replaceUrl: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    routerLink: [{
      type: Input
    }],
    onClick: [{
      type: HostListener,
      args: ["click", ["$event.button", "$event.ctrlKey", "$event.shiftKey", "$event.altKey", "$event.metaKey"]]
    }]
  });
})();
var _RouterLinkActive = class _RouterLinkActive {
  get isActive() {
    return this._isActive;
  }
  constructor(router, element, renderer, cdr, link) {
    this.router = router;
    this.element = element;
    this.renderer = renderer;
    this.cdr = cdr;
    this.link = link;
    this.classes = [];
    this._isActive = false;
    this.routerLinkActiveOptions = {
      exact: false
    };
    this.isActiveChange = new EventEmitter();
    this.routerEventsSubscription = router.events.subscribe((s) => {
      if (s instanceof NavigationEnd) {
        this.update();
      }
    });
  }
  /** @nodoc */
  ngAfterContentInit() {
    of(this.links.changes, of(null)).pipe(mergeAll()).subscribe((_) => {
      this.update();
      this.subscribeToEachLinkOnChanges();
    });
  }
  subscribeToEachLinkOnChanges() {
    this.linkInputChangesSubscription?.unsubscribe();
    const allLinkChanges = [...this.links.toArray(), this.link].filter((link) => !!link).map((link) => link.onChanges);
    this.linkInputChangesSubscription = from(allLinkChanges).pipe(mergeAll()).subscribe((link) => {
      if (this._isActive !== this.isLinkActive(this.router)(link)) {
        this.update();
      }
    });
  }
  set routerLinkActive(data) {
    const classes = Array.isArray(data) ? data : data.split(" ");
    this.classes = classes.filter((c) => !!c);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    this.update();
  }
  /** @nodoc */
  ngOnDestroy() {
    this.routerEventsSubscription.unsubscribe();
    this.linkInputChangesSubscription?.unsubscribe();
  }
  update() {
    if (!this.links || !this.router.navigated) return;
    queueMicrotask(() => {
      const hasActiveLinks = this.hasActiveLinks();
      this.classes.forEach((c) => {
        if (hasActiveLinks) {
          this.renderer.addClass(this.element.nativeElement, c);
        } else {
          this.renderer.removeClass(this.element.nativeElement, c);
        }
      });
      if (hasActiveLinks && this.ariaCurrentWhenActive !== void 0) {
        this.renderer.setAttribute(this.element.nativeElement, "aria-current", this.ariaCurrentWhenActive.toString());
      } else {
        this.renderer.removeAttribute(this.element.nativeElement, "aria-current");
      }
      if (this._isActive !== hasActiveLinks) {
        this._isActive = hasActiveLinks;
        this.cdr.markForCheck();
        this.isActiveChange.emit(hasActiveLinks);
      }
    });
  }
  isLinkActive(router) {
    const options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions : (
      // While the types should disallow `undefined` here, it's possible without strict inputs
      this.routerLinkActiveOptions.exact || false
    );
    return (link) => {
      const urlTree = link.urlTree;
      return urlTree ? router.isActive(urlTree, options) : false;
    };
  }
  hasActiveLinks() {
    const isActiveCheckFn = this.isLinkActive(this.router);
    return this.link && isActiveCheckFn(this.link) || this.links.some(isActiveCheckFn);
  }
};
_RouterLinkActive.\u0275fac = function RouterLinkActive_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _RouterLinkActive)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(RouterLink, 8));
};
_RouterLinkActive.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _RouterLinkActive,
  selectors: [["", "routerLinkActive", ""]],
  contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      \u0275\u0275contentQuery(dirIndex, RouterLink, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.links = _t);
    }
  },
  inputs: {
    routerLinkActiveOptions: "routerLinkActiveOptions",
    ariaCurrentWhenActive: "ariaCurrentWhenActive",
    routerLinkActive: "routerLinkActive"
  },
  outputs: {
    isActiveChange: "isActiveChange"
  },
  exportAs: ["routerLinkActive"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var RouterLinkActive = _RouterLinkActive;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterLinkActive, [{
    type: Directive,
    args: [{
      selector: "[routerLinkActive]",
      exportAs: "routerLinkActive",
      standalone: true
    }]
  }], () => [{
    type: Router
  }, {
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: ChangeDetectorRef
  }, {
    type: RouterLink,
    decorators: [{
      type: Optional
    }]
  }], {
    links: [{
      type: ContentChildren,
      args: [RouterLink, {
        descendants: true
      }]
    }],
    routerLinkActiveOptions: [{
      type: Input
    }],
    ariaCurrentWhenActive: [{
      type: Input
    }],
    isActiveChange: [{
      type: Output
    }],
    routerLinkActive: [{
      type: Input
    }]
  });
})();
function isActiveMatchOptions(options) {
  return !!options.paths;
}
var PreloadingStrategy = class {
};
var _PreloadAllModules = class _PreloadAllModules {
  preload(route, fn) {
    return fn().pipe(catchError(() => of(null)));
  }
};
_PreloadAllModules.\u0275fac = function PreloadAllModules_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _PreloadAllModules)();
};
_PreloadAllModules.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PreloadAllModules,
  factory: _PreloadAllModules.\u0275fac,
  providedIn: "root"
});
var PreloadAllModules = _PreloadAllModules;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PreloadAllModules, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _NoPreloading = class _NoPreloading {
  preload(route, fn) {
    return of(null);
  }
};
_NoPreloading.\u0275fac = function NoPreloading_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _NoPreloading)();
};
_NoPreloading.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NoPreloading,
  factory: _NoPreloading.\u0275fac,
  providedIn: "root"
});
var NoPreloading = _NoPreloading;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NoPreloading, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _RouterPreloader = class _RouterPreloader {
  constructor(router, compiler, injector, preloadingStrategy, loader) {
    this.router = router;
    this.injector = injector;
    this.preloadingStrategy = preloadingStrategy;
    this.loader = loader;
  }
  setUpPreloading() {
    this.subscription = this.router.events.pipe(filter((e) => e instanceof NavigationEnd), concatMap(() => this.preload())).subscribe(() => {
    });
  }
  preload() {
    return this.processRoutes(this.injector, this.router.config);
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }
  processRoutes(injector, routes) {
    const res = [];
    for (const route of routes) {
      if (route.providers && !route._injector) {
        route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);
      }
      const injectorForCurrentRoute = route._injector ?? injector;
      const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;
      if (route.loadChildren && !route._loadedRoutes && route.canLoad === void 0 || route.loadComponent && !route._loadedComponent) {
        res.push(this.preloadConfig(injectorForCurrentRoute, route));
      }
      if (route.children || route._loadedRoutes) {
        res.push(this.processRoutes(injectorForChildren, route.children ?? route._loadedRoutes));
      }
    }
    return from(res).pipe(mergeAll());
  }
  preloadConfig(injector, route) {
    return this.preloadingStrategy.preload(route, () => {
      let loadedChildren$;
      if (route.loadChildren && route.canLoad === void 0) {
        loadedChildren$ = this.loader.loadChildren(injector, route);
      } else {
        loadedChildren$ = of(null);
      }
      const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap((config2) => {
        if (config2 === null) {
          return of(void 0);
        }
        route._loadedRoutes = config2.routes;
        route._loadedInjector = config2.injector;
        return this.processRoutes(config2.injector ?? injector, config2.routes);
      }));
      if (route.loadComponent && !route._loadedComponent) {
        const loadComponent$ = this.loader.loadComponent(route);
        return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());
      } else {
        return recursiveLoadChildren$;
      }
    });
  }
};
_RouterPreloader.\u0275fac = function RouterPreloader_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _RouterPreloader)(\u0275\u0275inject(Router), \u0275\u0275inject(Compiler), \u0275\u0275inject(EnvironmentInjector), \u0275\u0275inject(PreloadingStrategy), \u0275\u0275inject(RouterConfigLoader));
};
_RouterPreloader.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _RouterPreloader,
  factory: _RouterPreloader.\u0275fac,
  providedIn: "root"
});
var RouterPreloader = _RouterPreloader;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterPreloader, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Router
  }, {
    type: Compiler
  }, {
    type: EnvironmentInjector
  }, {
    type: PreloadingStrategy
  }, {
    type: RouterConfigLoader
  }], null);
})();
var ROUTER_SCROLLER = new InjectionToken("");
var _RouterScroller = class _RouterScroller {
  /** @nodoc */
  constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {
    this.urlSerializer = urlSerializer;
    this.transitions = transitions;
    this.viewportScroller = viewportScroller;
    this.zone = zone;
    this.options = options;
    this.lastId = 0;
    this.lastSource = "imperative";
    this.restoredId = 0;
    this.store = {};
    options.scrollPositionRestoration ||= "disabled";
    options.anchorScrolling ||= "disabled";
  }
  init() {
    if (this.options.scrollPositionRestoration !== "disabled") {
      this.viewportScroller.setHistoryScrollRestoration("manual");
    }
    this.routerEventsSubscription = this.createScrollEvents();
    this.scrollEventsSubscription = this.consumeScrollEvents();
  }
  createScrollEvents() {
    return this.transitions.events.subscribe((e) => {
      if (e instanceof NavigationStart) {
        this.store[this.lastId] = this.viewportScroller.getScrollPosition();
        this.lastSource = e.navigationTrigger;
        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;
      } else if (e instanceof NavigationEnd) {
        this.lastId = e.id;
        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);
      } else if (e instanceof NavigationSkipped && e.code === NavigationSkippedCode.IgnoredSameUrlNavigation) {
        this.lastSource = void 0;
        this.restoredId = 0;
        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);
      }
    });
  }
  consumeScrollEvents() {
    return this.transitions.events.subscribe((e) => {
      if (!(e instanceof Scroll)) return;
      if (e.position) {
        if (this.options.scrollPositionRestoration === "top") {
          this.viewportScroller.scrollToPosition([0, 0]);
        } else if (this.options.scrollPositionRestoration === "enabled") {
          this.viewportScroller.scrollToPosition(e.position);
        }
      } else {
        if (e.anchor && this.options.anchorScrolling === "enabled") {
          this.viewportScroller.scrollToAnchor(e.anchor);
        } else if (this.options.scrollPositionRestoration !== "disabled") {
          this.viewportScroller.scrollToPosition([0, 0]);
        }
      }
    });
  }
  scheduleScrollEvent(routerEvent, anchor) {
    this.zone.runOutsideAngular(() => {
      setTimeout(() => {
        this.zone.run(() => {
          this.transitions.events.next(new Scroll(routerEvent, this.lastSource === "popstate" ? this.store[this.restoredId] : null, anchor));
        });
      }, 0);
    });
  }
  /** @nodoc */
  ngOnDestroy() {
    this.routerEventsSubscription?.unsubscribe();
    this.scrollEventsSubscription?.unsubscribe();
  }
};
_RouterScroller.\u0275fac = function RouterScroller_Factory(__ngFactoryType__) {
  \u0275\u0275invalidFactory();
};
_RouterScroller.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _RouterScroller,
  factory: _RouterScroller.\u0275fac
});
var RouterScroller = _RouterScroller;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterScroller, [{
    type: Injectable
  }], () => [{
    type: UrlSerializer
  }, {
    type: NavigationTransitions
  }, {
    type: ViewportScroller
  }, {
    type: NgZone
  }, {
    type: void 0
  }], null);
})();
function rootRoute(router) {
  return router.routerState.root;
}
function routerFeature(kind, providers) {
  return {
    \u0275kind: kind,
    \u0275providers: providers
  };
}
var ROUTER_IS_PROVIDED = new InjectionToken("", {
  providedIn: "root",
  factory: () => false
});
function getBootstrapListener() {
  const injector = inject(Injector);
  return (bootstrappedComponentRef) => {
    const ref = injector.get(ApplicationRef);
    if (bootstrappedComponentRef !== ref.components[0]) {
      return;
    }
    const router = injector.get(Router);
    const bootstrapDone = injector.get(BOOTSTRAP_DONE);
    if (injector.get(INITIAL_NAVIGATION) === 1) {
      router.initialNavigation();
    }
    injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();
    injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();
    router.resetRootComponentType(ref.componentTypes[0]);
    if (!bootstrapDone.closed) {
      bootstrapDone.next();
      bootstrapDone.complete();
      bootstrapDone.unsubscribe();
    }
  };
}
var BOOTSTRAP_DONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "bootstrap done indicator" : "", {
  factory: () => {
    return new Subject();
  }
});
var INITIAL_NAVIGATION = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "initial navigation" : "", {
  providedIn: "root",
  factory: () => 1
  /* InitialNavigation.EnabledNonBlocking */
});
function withEnabledBlockingInitialNavigation() {
  const providers = [{
    provide: INITIAL_NAVIGATION,
    useValue: 0
    /* InitialNavigation.EnabledBlocking */
  }, {
    provide: APP_INITIALIZER,
    multi: true,
    deps: [Injector],
    useFactory: (injector) => {
      const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());
      return () => {
        return locationInitialized.then(() => {
          return new Promise((resolve) => {
            const router = injector.get(Router);
            const bootstrapDone = injector.get(BOOTSTRAP_DONE);
            afterNextNavigation(router, () => {
              resolve(true);
            });
            injector.get(NavigationTransitions).afterPreactivation = () => {
              resolve(true);
              return bootstrapDone.closed ? of(void 0) : bootstrapDone;
            };
            router.initialNavigation();
          });
        });
      };
    }
  }];
  return routerFeature(2, providers);
}
function withDisabledInitialNavigation() {
  const providers = [{
    provide: APP_INITIALIZER,
    multi: true,
    useFactory: () => {
      const router = inject(Router);
      return () => {
        router.setUpLocationChangeListener();
      };
    }
  }, {
    provide: INITIAL_NAVIGATION,
    useValue: 2
    /* InitialNavigation.Disabled */
  }];
  return routerFeature(3, providers);
}
function withDebugTracing() {
  let providers = [];
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    providers = [{
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const router = inject(Router);
        return () => router.events.subscribe((e) => {
          console.group?.(`Router Event: ${e.constructor.name}`);
          console.log(stringifyEvent(e));
          console.log(e);
          console.groupEnd?.();
        });
      }
    }];
  } else {
    providers = [];
  }
  return routerFeature(1, providers);
}
var ROUTER_PRELOADER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router preloader" : "");
function withPreloading(preloadingStrategy) {
  const providers = [{
    provide: ROUTER_PRELOADER,
    useExisting: RouterPreloader
  }, {
    provide: PreloadingStrategy,
    useExisting: preloadingStrategy
  }];
  return routerFeature(0, providers);
}
function withComponentInputBinding() {
  const providers = [RoutedComponentInputBinder, {
    provide: INPUT_BINDER,
    useExisting: RoutedComponentInputBinder
  }];
  return routerFeature(8, providers);
}
function withViewTransitions(options) {
  const providers = [{
    provide: CREATE_VIEW_TRANSITION,
    useValue: createViewTransition
  }, {
    provide: VIEW_TRANSITION_OPTIONS,
    useValue: __spreadValues({
      skipNextTransition: !!options?.skipInitialTransition
    }, options)
  }];
  return routerFeature(9, providers);
}
var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, \u0275EmptyOutletComponent];
var ROUTER_FORROOT_GUARD = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router duplicate forRoot guard" : "ROUTER_FORROOT_GUARD");
var ROUTER_PROVIDERS = [
  Location,
  {
    provide: UrlSerializer,
    useClass: DefaultUrlSerializer
  },
  Router,
  ChildrenOutletContexts,
  {
    provide: ActivatedRoute,
    useFactory: rootRoute,
    deps: [Router]
  },
  RouterConfigLoader,
  // Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can
  // be removed when `provideRoutes` is removed.
  typeof ngDevMode === "undefined" || ngDevMode ? {
    provide: ROUTER_IS_PROVIDED,
    useValue: true
  } : []
];
var _RouterModule = class _RouterModule {
  constructor(guard) {
  }
  /**
   * Creates and configures a module with all the router providers and directives.
   * Optionally sets up an application listener to perform an initial navigation.
   *
   * When registering the NgModule at the root, import as follows:
   *
   * ```
   * @NgModule({
   *   imports: [RouterModule.forRoot(ROUTES)]
   * })
   * class MyNgModule {}
   * ```
   *
   * @param routes An array of `Route` objects that define the navigation paths for the application.
   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.
   * @return The new `NgModule`.
   *
   */
  static forRoot(routes, config2) {
    return {
      ngModule: _RouterModule,
      providers: [ROUTER_PROVIDERS, typeof ngDevMode === "undefined" || ngDevMode ? config2?.enableTracing ? withDebugTracing().\u0275providers : [] : [], {
        provide: ROUTES,
        multi: true,
        useValue: routes
      }, {
        provide: ROUTER_FORROOT_GUARD,
        useFactory: provideForRootGuard,
        deps: [[Router, new Optional(), new SkipSelf()]]
      }, {
        provide: ROUTER_CONFIGURATION,
        useValue: config2 ? config2 : {}
      }, config2?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(), provideRouterScroller(), config2?.preloadingStrategy ? withPreloading(config2.preloadingStrategy).\u0275providers : [], config2?.initialNavigation ? provideInitialNavigation(config2) : [], config2?.bindToComponentInputs ? withComponentInputBinding().\u0275providers : [], config2?.enableViewTransitions ? withViewTransitions().\u0275providers : [], provideRouterInitializer()]
    };
  }
  /**
   * Creates a module with all the router directives and a provider registering routes,
   * without creating a new Router service.
   * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:
   *
   * ```
   * @NgModule({
   *   imports: [RouterModule.forChild(ROUTES)]
   * })
   * class MyNgModule {}
   * ```
   *
   * @param routes An array of `Route` objects that define the navigation paths for the submodule.
   * @return The new NgModule.
   *
   */
  static forChild(routes) {
    return {
      ngModule: _RouterModule,
      providers: [{
        provide: ROUTES,
        multi: true,
        useValue: routes
      }]
    };
  }
};
_RouterModule.\u0275fac = function RouterModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _RouterModule)(\u0275\u0275inject(ROUTER_FORROOT_GUARD, 8));
};
_RouterModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _RouterModule
});
_RouterModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var RouterModule = _RouterModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterModule, [{
    type: NgModule,
    args: [{
      imports: ROUTER_DIRECTIVES,
      exports: ROUTER_DIRECTIVES
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ROUTER_FORROOT_GUARD]
    }]
  }], null);
})();
function provideRouterScroller() {
  return {
    provide: ROUTER_SCROLLER,
    useFactory: () => {
      const viewportScroller = inject(ViewportScroller);
      const zone = inject(NgZone);
      const config2 = inject(ROUTER_CONFIGURATION);
      const transitions = inject(NavigationTransitions);
      const urlSerializer = inject(UrlSerializer);
      if (config2.scrollOffset) {
        viewportScroller.setOffset(config2.scrollOffset);
      }
      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config2);
    }
  };
}
function provideHashLocationStrategy() {
  return {
    provide: LocationStrategy,
    useClass: HashLocationStrategy
  };
}
function providePathLocationStrategy() {
  return {
    provide: LocationStrategy,
    useClass: PathLocationStrategy
  };
}
function provideForRootGuard(router) {
  if ((typeof ngDevMode === "undefined" || ngDevMode) && router) {
    throw new RuntimeError(4007, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector. Lazy loaded modules should use RouterModule.forChild() instead.`);
  }
  return "guarded";
}
function provideInitialNavigation(config2) {
  return [config2.initialNavigation === "disabled" ? withDisabledInitialNavigation().\u0275providers : [], config2.initialNavigation === "enabledBlocking" ? withEnabledBlockingInitialNavigation().\u0275providers : []];
}
var ROUTER_INITIALIZER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Router Initializer" : "");
function provideRouterInitializer() {
  return [
    // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just
    // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.
    {
      provide: ROUTER_INITIALIZER,
      useFactory: getBootstrapListener
    },
    {
      provide: APP_BOOTSTRAP_LISTENER,
      multi: true,
      useExisting: ROUTER_INITIALIZER
    }
  ];
}
var VERSION4 = new Version("18.2.2");

// src/app/app.component.ts
var _AppComponent = class _AppComponent {
  constructor(router) {
    this.router = router;
    this.allEvents = [
      "ect-started",
      "ect-completed",
      "ect-session-expired",
      "ect-component-loaded-initialized-event",
      "ect-mobile-redirect-initialized-event",
      "ect-landing-initialized-event",
      "ect-agreements-initialized-event",
      "ect-otp-send-initialized-event",
      "ect-otp-check-initialized-event",
      "ect-ci-front-initialized-event",
      "ect-ci-front-how-to-initialized-event",
      "ect-ci-front-capture-initialized-event",
      "ect-ci-back-initialized-event",
      "ect-ci-back-how-to-initialized-event",
      "ect-ci-back-capture-initialized-event",
      "ect-ci-tilt-initialized-event",
      "ect-ci-error-initialized-event",
      "ect-selfie-how-to-initialized-event",
      "ect-selfie-tilt-initialized-event",
      "ect-selfie-capture-initialized-event",
      "ect-selfie-initialized-event",
      "ect-selfie-error-initialized-event",
      "ect-end-initialized-event",
      "ect-camera-error-initialized-event",
      "ect-component-loaded-finalized-event",
      "ect-mobile-redirect-finalized-event",
      "ect-landing-finalized-event",
      "ect-agreements-finalized-event",
      "ect-otp-send-finalized-event",
      "ect-otp-check-finalized-event",
      "ect-ci-front-finalized-event",
      "ect-ci-front-how-to-finalized-event",
      "ect-ci-front-capture-finalized-event",
      "ect-ci-back-finalized-event",
      "ect-ci-back-how-to-finalized-event",
      "ect-ci-back-capture-finalized-event",
      "ect-ci-tilt-finalized-event",
      "ect-ci-error-finalized-event",
      "ect-selfie-how-to-finalized-event",
      "ect-selfie-tilt-finalized-event",
      "ect-selfie-capture-finalized-event",
      "ect-selfie-finalized-event",
      "ect-selfie-error-finalized-event",
      "ect-end-finalized-event",
      "ect-camera-error-finalized-event",
      "ect-component-loaded-none-event",
      "ect-mobile-redirect-none-event",
      "ect-landing-none-event",
      "ect-agreements-none-event",
      "ect-otp-send-none-event",
      "ect-otp-check-none-event",
      "ect-ci-front-none-event",
      "ect-ci-front-how-to-none-event",
      "ect-ci-front-capture-none-event",
      "ect-ci-back-none-event",
      "ect-ci-back-how-to-none-event",
      "ect-ci-back-capture-none-event",
      "ect-ci-tilt-none-event",
      "ect-ci-error-none-event",
      "ect-selfie-how-to-none-event",
      "ect-selfie-tilt-none-event",
      "ect-selfie-capture-none-event",
      "ect-selfie-none-event",
      "ect-selfie-error-none-event",
      "ect-end-none-event",
      "ect-camera-error-none-event"
    ];
    this.showClose = false;
  }
  ngOnInit() {
    window.addEventListener("ect-error", this.errorCaptured.bind(this));
    window.addEventListener("ect-aborted", this.navigateFinalAborted.bind(this));
    this.allEvents.forEach(function(e) {
      window.addEventListener(e, () => console.log(e));
    });
  }
  errorCaptured(error) {
    console.log("ect-error");
    console.log(error);
  }
  navigateFinalAborted() {
    console.log("ect-aborted");
    this.router.navigate(["./finalaborted"]);
  }
  started(event) {
    console.log("ect started");
  }
};
_AppComponent.\u0275fac = function AppComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _AppComponent)(\u0275\u0275directiveInject(Router));
};
_AppComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AppComponent, selectors: [["app-root"]], hostBindings: function AppComponent_HostBindings(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275listener("ect-started", function AppComponent_ect_started_HostBindingHandler($event) {
      return ctx.started($event);
    }, false, \u0275\u0275resolveWindow);
  }
}, decls: 4, vars: 0, consts: [["rel", "stylesheet", "href", \u0275\u0275trustConstantResourceUrl`https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&display=swap`], ["rel", "stylesheet", "href", \u0275\u0275trustConstantResourceUrl`https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css`], ["rel", "stylesheet", "href", \u0275\u0275trustConstantResourceUrl`https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css`]], template: function AppComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "link", 0)(1, "link", 1)(2, "link", 2)(3, "router-outlet");
  }
}, dependencies: [RouterOutlet], styles: ['\n\n@font-face {\n  font-family: "Nexa";\n  src: url("./media/Nexa-ExtraLight-74RXER37.ttf") format("truetype");\n}\n*[_ngcontent-%COMP%] {\n  font-family: Nexa;\n}\nh1[_ngcontent-%COMP%] {\n  font-weight: 900;\n}\n.btn[_ngcontent-%COMP%] {\n  font-weight: 600;\n  background: #40c1ac !important;\n  box-shadow: rgb(71 182 162 / 20%) 0px 6px 8px;\n  border: 0;\n  border-radius: 25px;\n  padding: 2vh;\n  font-size: 2vh;\n}\n.fa-spinner[_ngcontent-%COMP%] {\n  font-size: 2em;\n}\n@media only screen and (min-width: 767px) {\n  .container[_ngcontent-%COMP%] {\n    max-width: 530px;\n    border-radius: 20px;\n    margin: 40px auto;\n    box-shadow: rgb(0 0 0 / 10%) 1px 1px 10px;\n  }\n}'] });
var AppComponent = _AppComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AppComponent, { className: "AppComponent", filePath: "src\\app\\app.component.ts", lineNumber: 13 });
})();

// src/environments/environment.ts
var environment = {
  production: false,
  apiUrl: "https://apiro.id-kyc.com",
  region: "RO",
  mode: "DEMO",
  flow: ""
};

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/app/services/proxy.service.ts
var _ProxyService = class _ProxyService {
  constructor(http, route) {
    this.route = route;
    this.tokenUrl = "";
    this.debug = false;
    this.langIso = "";
    this.clientId = 3;
    this.httpHeaders = new HttpHeaders({
      "Content-Type": "application/json"
    });
    this.API = http;
    this.apiURL = environment.apiUrl;
    this.orderID = sessionStorage.getItem("orderID") ?? "";
    this.redirectID = sessionStorage.getItem("redirectID") ?? "";
    this.token = sessionStorage.getItem("token") ?? "";
    this.env = environment.mode;
    this.debug = this.env == "QA" || this.env == "DEMO";
    this.tokenUrl = this.apiURL + (this.env == "PROD" ? "/public/authorization/token" : "/dev_public/authorization/token");
    this.mobileRedirect = false;
    this.flow = sessionStorage.getItem("flow") ?? "";
    if (this.flow == "") {
      this.flow = environment.flow;
      sessionStorage.setItem("flow", this.flow);
    }
  }
  getValuesForLog() {
    return {
      apiURL: this.apiURL,
      orderID: this.orderID,
      redirectID: this.redirectID,
      env: this.env,
      tokenUrl: this.tokenUrl,
      token: this.token
    };
  }
  getToken() {
    return new Promise((resolve, reject) => {
      var tokenUrlFull = this.tokenUrl + "new?flow=" + this.flow;
      if (this.debug)
        console.log("GetToken called at" + tokenUrlFull);
      this.API.get(tokenUrlFull, {
        headers: this.httpHeaders
      }).subscribe({
        next: (resp) => {
          this.token = resp.token;
          sessionStorage.setItem("token", this.token);
          if (this.debug)
            console.log("GetToken responded: " + JSON.stringify(this.getValuesForLog()));
          resolve({ success: true, error: "" });
        },
        error: (error) => {
          console.log("GetToken responded: " + JSON.stringify(error));
          resolve({ success: false, error });
        },
        complete: () => {
          console.log("GetToken complete");
          resolve({ success: true, error: "" });
        }
      });
    });
  }
  getTokenRedirect() {
    return new Promise((resolve, reject) => {
      let tokenUrlRedirect = this.tokenUrl + "redirect?flow=" + this.flow + "&redirectId=" + this.redirectID;
      if (this.debug)
        console.log("GetTokenRedirect called at" + tokenUrlRedirect);
      this.API.get(tokenUrlRedirect, {
        headers: this.httpHeaders
      }).subscribe({
        next: (resp) => {
          this.token = resp.token;
          sessionStorage.setItem("token", this.token);
          if (this.debug)
            console.log("GetTokenRedirect responded: " + JSON.stringify(this.getValuesForLog()));
          resolve({ success: true, error: "" });
        },
        error: (error) => {
          console.log("GetTokenRedirect responded: " + JSON.stringify(error));
          resolve({ success: false, error });
        },
        complete: () => {
          console.log("GetTokenRedirect complete");
          resolve(true);
        }
      });
    });
  }
  getRequest() {
    return new Promise((resolve, reject) => {
      if (this.debug)
        console.log("GetRequest called.");
      this.route.queryParams.subscribe((params) => {
        if (this.debug)
          console.log("Route params:" + JSON.stringify(params));
        var pFlow = params["flow"];
        if (pFlow) {
          this.flow = pFlow;
          sessionStorage.setItem("flow", this.flow);
        }
        if (this.env == "QA" && environment.region == "MD") {
          this.flow = "MDFlow";
        }
        this.orderID = v4_default();
        sessionStorage.setItem("orderID", this.orderID);
        resolve(true);
      }).unsubscribe();
    });
  }
  getRequestRedirect() {
    return new Promise((resolve, reject) => {
      if (this.debug)
        console.log("GetRequest called.");
      this.mobileRedirect = true;
      this.route.queryParams.subscribe((params) => {
        if (this.debug)
          console.log("Route params:" + JSON.stringify(params));
        this.flow = "";
        sessionStorage.setItem("flow", this.flow);
        var pFlow = params["flow"];
        if (pFlow) {
          this.flow = pFlow;
          sessionStorage.setItem("flow", this.flow);
        }
        let redirectId = params["redirectId"];
        if (redirectId) {
          this.redirectID = redirectId;
          sessionStorage.setItem("redirectID", this.redirectID);
          this.orderID = "";
          sessionStorage.setItem("orderID", this.orderID);
        }
        resolve(this.getTokenRedirect());
      }).unsubscribe();
    });
  }
};
_ProxyService.\u0275fac = function ProxyService_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _ProxyService)(\u0275\u0275inject(HttpClient), \u0275\u0275inject(ActivatedRoute));
};
_ProxyService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ProxyService, factory: _ProxyService.\u0275fac, providedIn: "root" });
var ProxyService = _ProxyService;

// src/app/start/start.component.ts
var _c0 = (a0) => ({ disabled: a0 });
function StartComponent_div_5_div_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "h3");
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "p");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.errorMessage);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.error);
  }
}
function StartComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 6)(1, "div", 7)(2, "div", 8)(3, "a", 9);
    \u0275\u0275listener("click", function StartComponent_div_5_Template_a_click_3_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.start("ro"));
    });
    \u0275\u0275text(4, "Continu\u0103");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(5, "div", 7)(6, "div", 8)(7, "a", 9);
    \u0275\u0275listener("click", function StartComponent_div_5_Template_a_click_7_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.start("en"));
    });
    \u0275\u0275text(8, "Continue");
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(9, StartComponent_div_5_div_9_Template, 5, 2, "div", 10);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(3, _c0, !ctx_r1.isActive));
    \u0275\u0275advance(4);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(5, _c0, !ctx_r1.isActive));
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx_r1.errorMessage != "");
  }
}
var _StartComponent = class _StartComponent {
  constructor(proxy, router) {
    this.router = router;
    this.logo = "/img/logo-MAIB.svg";
    this.isActive = false;
    this.error = "";
    this.errorMessage = "";
    this.proxy = proxy;
    if (this.proxy.debug) {
      console.log("StartComponent controller");
      console.log(this.proxy);
    }
  }
  ngOnInit() {
    return __async(this, null, function* () {
      window.addEventListener("ect-completed", this.ectCompleted.bind(this));
      this.proxy.getRequest().then((resp) => {
        this.proxy.getToken().then((resp2) => {
          if (resp2.success) {
            var token = sessionStorage.getItem("token") ?? "";
            this.isActive = token.length > 0;
          } else {
            this.errorMessage = resp2.error.message;
            this.error = JSON.stringify(resp2.error);
          }
        }).catch((err) => {
          this.errorMessage = err.message;
          this.error = JSON.stringify(err);
        });
      }).catch((err) => {
        this.errorMessage = err.message;
        this.error = JSON.stringify(err);
      });
    });
  }
  start(langIso) {
    this.proxy.langIso = langIso;
    this.router.navigate(["/identification"]);
  }
  ectCompleted() {
    setTimeout(this.navigateFinal.bind(this), 3e3);
  }
  navigateFinal() {
    if (this.proxy.flow.toLowerCase().includes("mdflow")) {
      this.proxy.clientId = 3;
      this.router.navigate(["./finalmd"]);
    } else if (environment.region == "MD") {
      this.proxy.clientId = 4;
      this.router.navigate(["./finalmd"]);
    } else {
      this.router.navigate(["./final"]);
    }
  }
};
_StartComponent.\u0275fac = function StartComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _StartComponent)(\u0275\u0275directiveInject(ProxyService), \u0275\u0275directiveInject(Router));
};
_StartComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _StartComponent, selectors: [["app-start"]], decls: 6, vars: 2, consts: [[1, "container"], [1, "row", "px-5", "pt-5", "mt-5"], [1, "col", "p-4"], [1, "logo", "text-center", "mb-5"], [1, "w-100", 3, "src"], ["class", "px-5", 4, "ngIf"], [1, "px-5"], [1, "row"], [1, "col", "p-2"], [1, "btn", "btn-success", "w-100", 3, "click", "ngClass"], [4, "ngIf"]], template: function StartComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3);
    \u0275\u0275element(4, "img", 4);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(5, StartComponent_div_5_Template, 10, 7, "div", 5);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance(4);
    \u0275\u0275propertyInterpolate("src", ctx.logo, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx.errorMessage == "");
  }
}, dependencies: [NgClass, NgIf], styles: ['\n\n@font-face {\n  font-family: "Nexa";\n  src: url("./media/Nexa-ExtraLight-74RXER37.ttf") format("truetype");\n}\n*[_ngcontent-%COMP%] {\n  font-family: Nexa;\n}\nh1[_ngcontent-%COMP%] {\n  font-weight: 900;\n}\n.btn[_ngcontent-%COMP%] {\n  font-weight: 600;\n  background: #40c1ac !important;\n  box-shadow: rgb(71 182 162 / 20%) 0px 6px 8px;\n  border: 0;\n  border-radius: 25px;\n  padding: 2vh;\n  font-size: 2vh;\n}\n.fa-spinner[_ngcontent-%COMP%] {\n  font-size: 2em;\n}\n@media only screen and (min-width: 767px) {\n  .container[_ngcontent-%COMP%] {\n    max-width: 530px;\n    border-radius: 20px;\n    margin: 40px auto;\n    box-shadow: rgb(0 0 0 / 10%) 1px 1px 10px;\n  }\n}'] });
var StartComponent = _StartComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(StartComponent, { className: "StartComponent", filePath: "src\\app\\start\\start.component.ts", lineNumber: 11 });
})();

// src/app/identification/identification.component.ts
var _IdentificationComponent = class _IdentificationComponent {
  constructor(proxy) {
    this.proxy = proxy;
    this.phoneNumber = "";
    this.langIso = "";
    this.showCitizenship = false;
    this.scrollMode = false;
    this.analytics = true;
    if (this.proxy.debug)
      console.log("Identification Component - Constructor - RequestId:" + this.proxy.orderID + "Token:" + this.proxy.token);
    this.apiURL = proxy.apiURL;
    this.orderID = proxy.orderID;
    this.token = proxy.token;
    this.env = proxy.env;
    if (this.env == "QA" && environment.region == "MD") {
      this.showCitizenship = true;
      this.scrollMode = true;
    }
    this.redirectID = proxy.redirectID;
    this.langIso = proxy.langIso;
  }
  ngOnInit() {
  }
};
_IdentificationComponent.\u0275fac = function IdentificationComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _IdentificationComponent)(\u0275\u0275directiveInject(ProxyService));
};
_IdentificationComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _IdentificationComponent, selectors: [["app-identification"]], decls: 1, vars: 10, consts: [[3, "token", "api_url", "order_id", "env", "redirect_id", "phone_number", "lang_iso", "show_citizenship_selector", "scroll_mode", "analytics"]], template: function IdentificationComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "identification-component", 0);
  }
  if (rf & 2) {
    \u0275\u0275propertyInterpolate("token", ctx.token);
    \u0275\u0275propertyInterpolate("api_url", ctx.apiURL);
    \u0275\u0275propertyInterpolate("order_id", ctx.orderID);
    \u0275\u0275propertyInterpolate("env", ctx.env);
    \u0275\u0275propertyInterpolate("redirect_id", ctx.redirectID);
    \u0275\u0275propertyInterpolate("phone_number", ctx.phoneNumber);
    \u0275\u0275propertyInterpolate("lang_iso", ctx.langIso);
    \u0275\u0275propertyInterpolate("show_citizenship_selector", ctx.showCitizenship);
    \u0275\u0275propertyInterpolate("scroll_mode", ctx.scrollMode);
    \u0275\u0275propertyInterpolate("analytics", ctx.analytics);
  }
} });
var IdentificationComponent = _IdentificationComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(IdentificationComponent, { className: "IdentificationComponent", filePath: "src\\app\\identification\\identification.component.ts", lineNumber: 10 });
})();

// src/app/final/final.component.ts
function FinalComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "h3", 10);
    \u0275\u0275text(2, " Procesul a fost finalizat. Puteti inchide acest tab si reveni in pagina de desktop. ");
    \u0275\u0275elementEnd()();
  }
}
function FinalComponent_div_4_ng_container_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_8_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const passedBlock_r1 = \u0275\u0275reference(36);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", passedBlock_r1);
  }
}
function FinalComponent_div_4_ng_container_9_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_9_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const notPassedBlock_r2 = \u0275\u0275reference(38);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", notPassedBlock_r2);
  }
}
function FinalComponent_div_4_ng_container_10_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_10_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const emptyBlock_r3 = \u0275\u0275reference(40);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", emptyBlock_r3);
  }
}
function FinalComponent_div_4_ng_container_16_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_16_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const passedBlock_r1 = \u0275\u0275reference(36);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", passedBlock_r1);
  }
}
function FinalComponent_div_4_ng_container_17_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_17_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_17_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const notPassedBlock_r2 = \u0275\u0275reference(38);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", notPassedBlock_r2);
  }
}
function FinalComponent_div_4_ng_container_18_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_18_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const emptyBlock_r3 = \u0275\u0275reference(40);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", emptyBlock_r3);
  }
}
function FinalComponent_div_4_ng_container_24_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_24_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const passedBlock_r1 = \u0275\u0275reference(36);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", passedBlock_r1);
  }
}
function FinalComponent_div_4_ng_container_25_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_25_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const notPassedBlock_r2 = \u0275\u0275reference(38);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", notPassedBlock_r2);
  }
}
function FinalComponent_div_4_ng_container_26_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_26_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_26_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const emptyBlock_r3 = \u0275\u0275reference(40);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", emptyBlock_r3);
  }
}
function FinalComponent_div_4_ng_container_32_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_32_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const passedBlock_r1 = \u0275\u0275reference(36);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", passedBlock_r1);
  }
}
function FinalComponent_div_4_ng_container_33_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_33_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_33_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const notPassedBlock_r2 = \u0275\u0275reference(38);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", notPassedBlock_r2);
  }
}
function FinalComponent_div_4_ng_container_34_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalComponent_div_4_ng_container_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalComponent_div_4_ng_container_34_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const emptyBlock_r3 = \u0275\u0275reference(40);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", emptyBlock_r3);
  }
}
function FinalComponent_div_4_ng_template_35_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 20);
  }
}
function FinalComponent_div_4_ng_template_37_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 21);
  }
}
function FinalComponent_div_4_ng_template_39_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 22);
  }
}
function FinalComponent_div_4_div_41_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 23)(1, "h5", 24);
    \u0275\u0275text(2, "Date aplicant");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 13)(4, "span", 10);
    \u0275\u0275text(5, "CNP: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "b");
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "div", 13)(9, "span", 10);
    \u0275\u0275text(10, "Nume: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "b");
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "div", 13)(14, "span", 10);
    \u0275\u0275text(15, "Prenume: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "b");
    \u0275\u0275text(17);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(18, "div", 13)(19, "span", 10);
    \u0275\u0275text(20, "Serie act identitate: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(21, "b");
    \u0275\u0275text(22);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(23, "div", 13)(24, "span", 10);
    \u0275\u0275text(25, "Numar act identitate: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(26, "b");
    \u0275\u0275text(27);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(28, "div", 13)(29, "span", 10);
    \u0275\u0275text(30, "Nationalitate: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(31, "b");
    \u0275\u0275text(32);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(33, "div", 13)(34, "span", 10);
    \u0275\u0275text(35, "Data expirare act identitate: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(36, "b");
    \u0275\u0275text(37);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(38, "div", 13)(39, "span", 10);
    \u0275\u0275text(40, "Adresa: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(41, "b");
    \u0275\u0275text(42);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(43, "div", 13)(44, "span", 10);
    \u0275\u0275text(45, "Numar de telefon: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(46, "b");
    \u0275\u0275text(47);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(7);
    \u0275\u0275textInterpolate(ctx_r3.data.Person.CNP);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.Person.LastName);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.Person.FirstName);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.Person.IDSeries);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.Person.IDNumber);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.Person.Nationality);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.Person.IDExpirationDate);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.Person.Address);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.ClientPhoneNumber);
  }
}
function FinalComponent_div_4_ng_template_42_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 25)(1, "span", 10);
    \u0275\u0275text(2, "Act identitate fata");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(3, "img", 26);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate("src", ctx_r3.data.IdSnapshot, \u0275\u0275sanitizeUrl);
  }
}
function FinalComponent_div_4_ng_template_43_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 25)(1, "span", 10);
    \u0275\u0275text(2, "Act identitate spate");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(3, "img", 26);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate("src", ctx_r3.data.IdBackSnapshot, \u0275\u0275sanitizeUrl);
  }
}
function FinalComponent_div_4_ng_template_44_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 25)(1, "span", 10);
    \u0275\u0275text(2, "Aplicant");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(3, "img", 26);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate("src", ctx_r3.data.FaceSnapshot, \u0275\u0275sanitizeUrl);
  }
}
function FinalComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "div", 11);
    \u0275\u0275element(2, "img", 12);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 13)(4, "span", 10);
    \u0275\u0275text(5, "Identitate confirmata: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "b");
    \u0275\u0275elementContainerStart(7, 14);
    \u0275\u0275template(8, FinalComponent_div_4_ng_container_8_Template, 2, 1, "ng-container", 15)(9, FinalComponent_div_4_ng_container_9_Template, 2, 1, "ng-container", 15)(10, FinalComponent_div_4_ng_container_10_Template, 2, 1, "ng-container", 16);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(11, "div", 13)(12, "span", 10);
    \u0275\u0275text(13, "Act identitate valid: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(14, "b");
    \u0275\u0275elementContainerStart(15, 14);
    \u0275\u0275template(16, FinalComponent_div_4_ng_container_16_Template, 2, 1, "ng-container", 15)(17, FinalComponent_div_4_ng_container_17_Template, 2, 1, "ng-container", 15)(18, FinalComponent_div_4_ng_container_18_Template, 2, 1, "ng-container", 16);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(19, "div", 13)(20, "span", 10);
    \u0275\u0275text(21, "Liveness aplicant valid: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(22, "b");
    \u0275\u0275elementContainerStart(23, 14);
    \u0275\u0275template(24, FinalComponent_div_4_ng_container_24_Template, 2, 1, "ng-container", 15)(25, FinalComponent_div_4_ng_container_25_Template, 2, 1, "ng-container", 15)(26, FinalComponent_div_4_ng_container_26_Template, 2, 1, "ng-container", 16);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(27, "div", 13)(28, "span", 10);
    \u0275\u0275text(29, "Aceeasi persoana: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(30, "b");
    \u0275\u0275elementContainerStart(31, 14);
    \u0275\u0275template(32, FinalComponent_div_4_ng_container_32_Template, 2, 1, "ng-container", 15)(33, FinalComponent_div_4_ng_container_33_Template, 2, 1, "ng-container", 15)(34, FinalComponent_div_4_ng_container_34_Template, 2, 1, "ng-container", 16);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementEnd()();
    \u0275\u0275template(35, FinalComponent_div_4_ng_template_35_Template, 1, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(37, FinalComponent_div_4_ng_template_37_Template, 1, 0, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(39, FinalComponent_div_4_ng_template_39_Template, 1, 0, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(41, FinalComponent_div_4_div_41_Template, 48, 9, "div", 17)(42, FinalComponent_div_4_ng_template_42_Template, 4, 1, "ng-template", 18)(43, FinalComponent_div_4_ng_template_43_Template, 4, 1, "ng-template", 18)(44, FinalComponent_div_4_ng_template_44_Template, 4, 1, "ng-template", 18);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275propertyInterpolate("src", ctx_r3.logo, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance(5);
    \u0275\u0275property("ngSwitch", ctx_r3.data.IdentityValidationStatus);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "Passed");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "NotPassed");
    \u0275\u0275advance(6);
    \u0275\u0275property("ngSwitch", ctx_r3.data.IDCheckResult);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "Passed");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "NotPassed");
    \u0275\u0275advance(6);
    \u0275\u0275property("ngSwitch", ctx_r3.data.FaceLiveness);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "Passed");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "NotPassed");
    \u0275\u0275advance(6);
    \u0275\u0275property("ngSwitch", ctx_r3.data.FaceComparison);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "Passed");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "NotPassed");
    \u0275\u0275advance(8);
    \u0275\u0275property("ngIf", ctx_r3.data.IdentityValidationStatus == "Passed" && ctx_r3.data.Person != null);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.data.IdSnapshot != null);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.data.IdBackSnapshot != null);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.data.FaceSnapshot != null);
  }
}
function FinalComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 27);
    \u0275\u0275element(1, "i", 28);
    \u0275\u0275elementEnd();
  }
}
var _FinalComponent = class _FinalComponent {
  constructor(proxy) {
    this.proxy = proxy;
    this.logo = "/img/logo-MAIB.svg";
    this.demoResp = false;
    this.showClose = false;
    this.showLoading = true;
  }
  ngOnInit() {
    if (this.proxy.mobileRedirect && this.proxy.orderID == "") {
      this.showClose = true;
      this.showLoading = false;
    } else {
      this.getResults();
    }
  }
  getResults() {
    let url = this.proxy.env == "PROD" ? this.proxy.apiURL + "/validation/identity/resultinternal" : this.proxy.apiURL + "/dev_validation/identity/resultinternal";
    let options = {
      headers: new HttpHeaders({
        Authorization: "IDKYC-TOKEN " + this.proxy.token
      }),
      params: new HttpParams().set("requestid", this.proxy.orderID)
    };
    if (this.demoResp) {
      options = {
        headers: new HttpHeaders({
          Authorization: "IDKYC-TOKEN " + this.proxy.token
        }),
        params: new HttpParams().set("requestid", this.proxy.orderID).set("demoResponse", true)
      };
    }
    this.proxy.API.get(url, options).subscribe({
      next: this.handleSuccess.bind(this),
      error: this.handleError.bind(this)
    });
  }
  handleSuccess(data) {
    if (data?.ValidationData?.Status == "Processed") {
      if (environment.mode == "DEMO" && data?.ValidationData?.IdentityValidationStatus == "NotPassed") {
        this.demoResp = true;
        setTimeout(this.getResults.bind(this), 10);
      } else {
        this.showLoading = false;
        this.data = data.ValidationData;
      }
    } else {
      setTimeout(this.getResults.bind(this), 1e3);
    }
  }
  handleError(error) {
    if (error.status == 401) {
      this.proxy.getToken().then(() => {
        this.getResults.bind(this);
      });
    }
    setTimeout(this.getResults.bind(this), 1e3);
  }
};
_FinalComponent.\u0275fac = function FinalComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _FinalComponent)(\u0275\u0275directiveInject(ProxyService));
};
_FinalComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _FinalComponent, selectors: [["app-final"]], decls: 9, vars: 4, consts: [["passedBlock", ""], ["notPassedBlock", ""], ["emptyBlock", ""], [1, "container"], [1, "row"], [1, "col", "p-4"], [4, "ngIf"], ["class", "text-center py-5", 4, "ngIf"], [1, "mt-5", "text-center"], [1, "text-secondary", "small"], [1, "text-secondary"], [1, "mb-4"], [1, "w-50", 3, "src"], [1, "mb-1"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["class", "my-4", 4, "ngIf"], [3, "ngIf"], [4, "ngTemplateOutlet"], [1, "fa-regular", "fa-circle-check", "text-success"], [1, "fa-regular", "fa-circle-xmark", "text-danger"], [1, "fa-regular", "fa-circle-question", "text-warning"], [1, "my-4"], [2, "font-weight", "700"], [1, "mb-1", "mt-4", "text-center"], [1, "d-block", "rounded", "w-75", "mx-auto", 3, "src"], [1, "text-center", "py-5"], [1, "fa-solid", "fa-spinner", "fa-spin"]], template: function FinalComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 3)(1, "div", 4)(2, "div", 5);
    \u0275\u0275template(3, FinalComponent_div_3_Template, 3, 0, "div", 6)(4, FinalComponent_div_4_Template, 45, 17, "div", 6)(5, FinalComponent_div_5_Template, 2, 0, "div", 7);
    \u0275\u0275elementStart(6, "div", 8)(7, "span", 9);
    \u0275\u0275text(8);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", ctx.showClose);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx.data != null);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx.showLoading);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx.proxy.orderID);
  }
}, dependencies: [NgIf, NgTemplateOutlet, NgSwitch, NgSwitchCase, NgSwitchDefault], styles: ['\n\n@font-face {\n  font-family: "Nexa";\n  src: url("./media/Nexa-ExtraLight-74RXER37.ttf") format("truetype");\n}\n*[_ngcontent-%COMP%] {\n  font-family: Nexa;\n}\nh1[_ngcontent-%COMP%] {\n  font-weight: 900;\n}\n.btn[_ngcontent-%COMP%] {\n  font-weight: 600;\n  background: #40c1ac !important;\n  box-shadow: rgb(71 182 162 / 20%) 0px 6px 8px;\n  border: 0;\n  border-radius: 25px;\n  padding: 2vh;\n  font-size: 2vh;\n}\n.fa-spinner[_ngcontent-%COMP%] {\n  font-size: 2em;\n}\n@media only screen and (min-width: 767px) {\n  .container[_ngcontent-%COMP%] {\n    max-width: 530px;\n    border-radius: 20px;\n    margin: 40px auto;\n    box-shadow: rgb(0 0 0 / 10%) 1px 1px 10px;\n  }\n}'] });
var FinalComponent = _FinalComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(FinalComponent, { className: "FinalComponent", filePath: "src\\app\\final\\final.component.ts", lineNumber: 15 });
})();

// src/app/final-md/final-md.component.ts
function FinalMdComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "h3", 12);
    \u0275\u0275text(2, " Procesul a fost finalizat. Puteti inchide acest tab si reveni in pagina de desktop. ");
    \u0275\u0275elementEnd()();
  }
}
function FinalMdComponent_div_6_ng_container_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalMdComponent_div_6_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalMdComponent_div_6_ng_container_6_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const passedBlock_r1 = \u0275\u0275reference(26);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", passedBlock_r1);
  }
}
function FinalMdComponent_div_6_ng_container_7_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalMdComponent_div_6_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalMdComponent_div_6_ng_container_7_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const notPassedBlock_r2 = \u0275\u0275reference(28);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", notPassedBlock_r2);
  }
}
function FinalMdComponent_div_6_ng_container_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalMdComponent_div_6_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalMdComponent_div_6_ng_container_8_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const emptyBlock_r3 = \u0275\u0275reference(30);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", emptyBlock_r3);
  }
}
function FinalMdComponent_div_6_ng_container_14_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalMdComponent_div_6_ng_container_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalMdComponent_div_6_ng_container_14_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const passedBlock_r1 = \u0275\u0275reference(26);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", passedBlock_r1);
  }
}
function FinalMdComponent_div_6_ng_container_15_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalMdComponent_div_6_ng_container_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalMdComponent_div_6_ng_container_15_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const notPassedBlock_r2 = \u0275\u0275reference(28);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", notPassedBlock_r2);
  }
}
function FinalMdComponent_div_6_ng_container_16_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalMdComponent_div_6_ng_container_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalMdComponent_div_6_ng_container_16_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const emptyBlock_r3 = \u0275\u0275reference(30);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", emptyBlock_r3);
  }
}
function FinalMdComponent_div_6_ng_container_22_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalMdComponent_div_6_ng_container_22_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalMdComponent_div_6_ng_container_22_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const passedBlock_r1 = \u0275\u0275reference(26);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", passedBlock_r1);
  }
}
function FinalMdComponent_div_6_ng_container_23_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalMdComponent_div_6_ng_container_23_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalMdComponent_div_6_ng_container_23_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const notPassedBlock_r2 = \u0275\u0275reference(28);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", notPassedBlock_r2);
  }
}
function FinalMdComponent_div_6_ng_container_24_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function FinalMdComponent_div_6_ng_container_24_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, FinalMdComponent_div_6_ng_container_24_ng_container_1_Template, 1, 0, "ng-container", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const emptyBlock_r3 = \u0275\u0275reference(30);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", emptyBlock_r3);
  }
}
function FinalMdComponent_div_6_ng_template_25_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 20);
  }
}
function FinalMdComponent_div_6_ng_template_27_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 21);
  }
}
function FinalMdComponent_div_6_ng_template_29_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 22);
  }
}
function FinalMdComponent_div_6_div_31_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 23)(1, "h5", 24);
    \u0275\u0275text(2, "Date aplicant");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "div", 13)(4, "span", 12);
    \u0275\u0275text(5, "IDNP: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(6, "b");
    \u0275\u0275text(7);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "div", 13)(9, "span", 12);
    \u0275\u0275text(10, "Nume: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "b");
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "div", 13)(14, "span", 12);
    \u0275\u0275text(15, "Prenume: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "b");
    \u0275\u0275text(17);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(18, "div", 13)(19, "span", 12);
    \u0275\u0275text(20, "Numar de telefon: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(21, "b");
    \u0275\u0275text(22);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(7);
    \u0275\u0275textInterpolate(ctx_r3.data.PersonData.IDNP);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.PersonData.LastName);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.PersonData.FirstName);
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate(ctx_r3.data.ClientPhoneNumber);
  }
}
function FinalMdComponent_div_6_ng_template_32_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 25)(1, "span", 12);
    \u0275\u0275text(2, "Act identitate fata");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(3, "img", 26);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate("src", ctx_r3.data.IdCardFront, \u0275\u0275sanitizeUrl);
  }
}
function FinalMdComponent_div_6_ng_template_33_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 25)(1, "span", 12);
    \u0275\u0275text(2, "Act identitate spate");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(3, "img", 26);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate("src", ctx_r3.data.IdCardBack, \u0275\u0275sanitizeUrl);
  }
}
function FinalMdComponent_div_6_ng_template_34_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 25)(1, "span", 12);
    \u0275\u0275text(2, "Aplicant");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(3, "img", 26);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(3);
    \u0275\u0275propertyInterpolate("src", ctx_r3.data.ClientSnapshot, \u0275\u0275sanitizeUrl);
  }
}
function FinalMdComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "div", 13)(2, "span", 12);
    \u0275\u0275text(3, "Identitate confirmata: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "b");
    \u0275\u0275elementContainerStart(5, 14);
    \u0275\u0275template(6, FinalMdComponent_div_6_ng_container_6_Template, 2, 1, "ng-container", 15)(7, FinalMdComponent_div_6_ng_container_7_Template, 2, 1, "ng-container", 15)(8, FinalMdComponent_div_6_ng_container_8_Template, 2, 1, "ng-container", 16);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(9, "div", 13)(10, "span", 12);
    \u0275\u0275text(11, "Liveness aplicant valid: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "b");
    \u0275\u0275elementContainerStart(13, 14);
    \u0275\u0275template(14, FinalMdComponent_div_6_ng_container_14_Template, 2, 1, "ng-container", 15)(15, FinalMdComponent_div_6_ng_container_15_Template, 2, 1, "ng-container", 15)(16, FinalMdComponent_div_6_ng_container_16_Template, 2, 1, "ng-container", 16);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(17, "div", 13)(18, "span", 12);
    \u0275\u0275text(19, "Aceeasi persoana: ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(20, "b");
    \u0275\u0275elementContainerStart(21, 14);
    \u0275\u0275template(22, FinalMdComponent_div_6_ng_container_22_Template, 2, 1, "ng-container", 15)(23, FinalMdComponent_div_6_ng_container_23_Template, 2, 1, "ng-container", 15)(24, FinalMdComponent_div_6_ng_container_24_Template, 2, 1, "ng-container", 16);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275elementEnd()();
    \u0275\u0275template(25, FinalMdComponent_div_6_ng_template_25_Template, 1, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(27, FinalMdComponent_div_6_ng_template_27_Template, 1, 0, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(29, FinalMdComponent_div_6_ng_template_29_Template, 1, 0, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(31, FinalMdComponent_div_6_div_31_Template, 23, 4, "div", 17)(32, FinalMdComponent_div_6_ng_template_32_Template, 4, 1, "ng-template", 18)(33, FinalMdComponent_div_6_ng_template_33_Template, 4, 1, "ng-template", 18)(34, FinalMdComponent_div_6_ng_template_34_Template, 4, 1, "ng-template", 18);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275property("ngSwitch", ctx_r3.data.ConfirmedIdentity);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", true);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", false);
    \u0275\u0275advance(6);
    \u0275\u0275property("ngSwitch", ctx_r3.data.IsValidSnapshot);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", true);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", false);
    \u0275\u0275advance(6);
    \u0275\u0275property("ngSwitch", ctx_r3.data.IsSamePersonIDandSnapshot);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", true);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", false);
    \u0275\u0275advance(8);
    \u0275\u0275property("ngIf", ctx_r3.data.ConfirmedIdentity == true && ctx_r3.data.PersonData != null);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.data.IdCardFront != null);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.data.IdCardBack != null);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.data.ClientSnapshot != null);
  }
}
function FinalMdComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 27);
    \u0275\u0275element(1, "i", 28);
    \u0275\u0275elementEnd();
  }
}
var _FinalMdComponent = class _FinalMdComponent {
  constructor(proxy) {
    this.proxy = proxy;
    this.logo = "/img/banca-2.svg";
    this.showClose = false;
    this.showLoading = true;
  }
  ngOnInit() {
    if (this.proxy.mobileRedirect && this.proxy.orderID == "") {
      this.showClose = true;
      this.showLoading = false;
    } else {
      this.getResults();
    }
  }
  getResults() {
    let url = this.proxy.env == "PROD" ? this.proxy.apiURL + "/validation/identity/resultinternal" : this.proxy.apiURL + "/dev_validation/identity/resultinternal";
    let options = {
      headers: new HttpHeaders({
        Authorization: "IDKYC-TOKEN " + this.proxy.token
      }),
      params: new HttpParams().set("requestid", this.proxy.orderID).set("clientid", this.proxy.clientId)
    };
    this.proxy.API.get(url, options).subscribe({
      next: this.handleSuccess.bind(this),
      error: this.handleError.bind(this)
    });
  }
  handleSuccess(data) {
    if (data?.ValidationData?.Status == "Processed") {
      this.showLoading = false;
      this.data = data.ValidationData;
    } else {
      setTimeout(this.getResults.bind(this), 1e3);
    }
  }
  handleError(error) {
    if (error.status == 401) {
      this.proxy.getToken().then(() => {
        this.getResults.bind(this);
      });
    }
    setTimeout(this.getResults.bind(this), 1e3);
  }
};
_FinalMdComponent.\u0275fac = function FinalMdComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _FinalMdComponent)(\u0275\u0275directiveInject(ProxyService));
};
_FinalMdComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _FinalMdComponent, selectors: [["app-final-md"]], decls: 11, vars: 5, consts: [["passedBlock", ""], ["notPassedBlock", ""], ["emptyBlock", ""], [1, "container"], [1, "row"], [1, "col", "p-4"], [1, "mb-4"], [1, "w-50", 3, "src"], [4, "ngIf"], ["class", "text-center py-5", 4, "ngIf"], [1, "mt-5", "text-center"], [1, "text-secondary", "small"], [1, "text-secondary"], [1, "mb-1"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["class", "my-4", 4, "ngIf"], [3, "ngIf"], [4, "ngTemplateOutlet"], [1, "fa-regular", "fa-circle-check", "text-success"], [1, "fa-regular", "fa-circle-xmark", "text-danger"], [1, "fa-regular", "fa-circle-question", "text-warning"], [1, "my-4"], [2, "font-weight", "700"], [1, "mb-1", "mt-4", "text-center"], [1, "d-block", "rounded", "w-75", "mx-auto", 3, "src"], [1, "text-center", "py-5"], [1, "fa-solid", "fa-spinner", "fa-spin"]], template: function FinalMdComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 3)(1, "div", 4)(2, "div", 5)(3, "div", 6);
    \u0275\u0275element(4, "img", 7);
    \u0275\u0275elementEnd();
    \u0275\u0275template(5, FinalMdComponent_div_5_Template, 3, 0, "div", 8)(6, FinalMdComponent_div_6_Template, 35, 13, "div", 8)(7, FinalMdComponent_div_7_Template, 2, 0, "div", 9);
    \u0275\u0275elementStart(8, "div", 10)(9, "span", 11);
    \u0275\u0275text(10);
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    \u0275\u0275advance(4);
    \u0275\u0275propertyInterpolate("src", ctx.logo, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx.showClose);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx.data != null);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx.showLoading);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx.proxy.orderID);
  }
}, dependencies: [NgIf, NgTemplateOutlet, NgSwitch, NgSwitchCase, NgSwitchDefault] });
var FinalMdComponent = _FinalMdComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(FinalMdComponent, { className: "FinalMdComponent", filePath: "src\\app\\final-md\\final-md.component.ts", lineNumber: 14 });
})();

// src/app/final-aborted/final-aborted.component.ts
var _FinalAbortedComponent = class _FinalAbortedComponent {
  constructor(proxy) {
    this.proxy = proxy;
  }
  ngOnInit() {
  }
};
_FinalAbortedComponent.\u0275fac = function FinalAbortedComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _FinalAbortedComponent)(\u0275\u0275directiveInject(ProxyService));
};
_FinalAbortedComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _FinalAbortedComponent, selectors: [["app-final-aborted"]], decls: 5, vars: 0, consts: [[1, "container"], [1, "row"], [1, "col", "p-4"], [1, "text-secondary"]], template: function FinalAbortedComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h3", 3);
    \u0275\u0275text(4, "Procesul a fost amanat.");
    \u0275\u0275elementEnd()()()();
  }
}, styles: ['\n\n@font-face {\n  font-family: "Nexa";\n  src: url("./media/Nexa-ExtraLight-74RXER37.ttf") format("truetype");\n}\n*[_ngcontent-%COMP%] {\n  font-family: Nexa;\n}\nh1[_ngcontent-%COMP%] {\n  font-weight: 900;\n}\n.btn[_ngcontent-%COMP%] {\n  font-weight: 600;\n  background: #40c1ac !important;\n  box-shadow: rgb(71 182 162 / 20%) 0px 6px 8px;\n  border: 0;\n  border-radius: 25px;\n  padding: 2vh;\n  font-size: 2vh;\n}\n.fa-spinner[_ngcontent-%COMP%] {\n  font-size: 2em;\n}\n@media only screen and (min-width: 767px) {\n  .container[_ngcontent-%COMP%] {\n    max-width: 530px;\n    border-radius: 20px;\n    margin: 40px auto;\n    box-shadow: rgb(0 0 0 / 10%) 1px 1px 10px;\n  }\n}'] });
var FinalAbortedComponent = _FinalAbortedComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(FinalAbortedComponent, { className: "FinalAbortedComponent", filePath: "src\\app\\final-aborted\\final-aborted.component.ts", lineNumber: 9 });
})();

// src/app/mobile-redirect/mobile-redirect.component.ts
var _MobileRedirectComponent = class _MobileRedirectComponent {
  constructor(proxy, router) {
    this.proxy = proxy;
    this.router = router;
    this.phoneNumber = "";
    if (this.proxy.debug)
      console.log("Identification Component - Constructor - RequestId:" + this.proxy.orderID + "Token:" + this.proxy.token);
    this.apiURL = proxy.apiURL;
    this.orderID = proxy.orderID;
    this.token = proxy.token;
    this.env = proxy.env;
    this.redirectID = proxy.redirectID;
  }
  ngOnInit() {
    if (this.proxy.debug)
      console.log("Identification Component - Inital - proxy value: " + JSON.stringify(this.proxy.getValuesForLog()));
    this.proxy.getRequestRedirect().then((resp) => {
      if (this.proxy.debug)
        console.log("Identification Component - After getRequest - proxy value: " + JSON.stringify(this.proxy.getValuesForLog()));
      this.apiURL = this.proxy.apiURL;
      this.orderID = this.proxy.orderID;
      this.token = this.proxy.token;
      this.env = this.proxy.env;
      this.redirectID = this.proxy.redirectID;
      this.router.navigate(["./identification"]);
    });
  }
};
_MobileRedirectComponent.\u0275fac = function MobileRedirectComponent_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _MobileRedirectComponent)(\u0275\u0275directiveInject(ProxyService), \u0275\u0275directiveInject(Router));
};
_MobileRedirectComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _MobileRedirectComponent, selectors: [["mobile-redirect"]], decls: 5, vars: 0, consts: [[1, "container"], [1, "row"], [1, "col"]], template: function MobileRedirectComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "h3");
    \u0275\u0275text(4, "Loading");
    \u0275\u0275elementEnd()()()();
  }
} });
var MobileRedirectComponent = _MobileRedirectComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(MobileRedirectComponent, { className: "MobileRedirectComponent", filePath: "src\\app\\mobile-redirect\\mobile-redirect.component.ts", lineNumber: 10 });
})();

// node_modules/@nevware21/ts-utils/dist/es5/mod/ts-utils.js
// @__NO_SIDE_EFFECTS__
function _pureAssign(func1, func2) {
  return func1 || func2;
}
// @__NO_SIDE_EFFECTS__
function _pureRef(value, name) {
  return value[name];
}
var UNDEF_VALUE = void 0;
var NULL_VALUE = null;
var EMPTY2 = "";
var FUNCTION = "function";
var OBJECT = "object";
var PROTOTYPE = "prototype";
var __PROTO__ = "__proto__";
var UNDEFINED = "undefined";
var CONSTRUCTOR = "constructor";
var SYMBOL = "Symbol";
var POLYFILL_TAG = "_polyfill";
var LENGTH = "length";
var NAME = "name";
var CALL = "call";
var TO_STRING = "toString";
var ObjClass = /* @__PURE__ */ _pureAssign(Object);
var ObjProto = /* @__PURE__ */ _pureRef(ObjClass, PROTOTYPE);
var StrCls = /* @__PURE__ */ _pureAssign(String);
var StrProto = /* @__PURE__ */ _pureRef(StrCls, PROTOTYPE);
var MathCls = /* @__PURE__ */ _pureAssign(Math);
var ArrCls = /* @__PURE__ */ _pureAssign(Array);
var ArrProto = /* @__PURE__ */ _pureRef(ArrCls, PROTOTYPE);
var ArrSlice = /* @__PURE__ */ _pureRef(ArrProto, "slice");
function safe(func, argArray) {
  try {
    return {
      v: func.apply(this, argArray)
    };
  } catch (e) {
    return {
      e
    };
  }
}
// @__NO_SIDE_EFFECTS__
function safeGet(cb, defValue) {
  var result = safe(cb);
  return result.e ? defValue : result.v;
}
var _primitiveTypes;
// @__NO_SIDE_EFFECTS__
function _createIs(theType) {
  return function(value) {
    return typeof value === theType;
  };
}
// @__NO_SIDE_EFFECTS__
function _createObjIs(theName) {
  var theType = "[object " + theName + "]";
  return function(value) {
    return !!(value && /* @__PURE__ */ objToString(value) === theType);
  };
}
// @__NO_SIDE_EFFECTS__
function objToString(value) {
  return ObjProto[TO_STRING].call(value);
}
// @__NO_SIDE_EFFECTS__
function isUndefined(value) {
  return typeof value === UNDEFINED || value === UNDEFINED;
}
// @__NO_SIDE_EFFECTS__
function isStrictUndefined(arg) {
  return !/* @__PURE__ */ isDefined(arg);
}
// @__NO_SIDE_EFFECTS__
function isNullOrUndefined(value) {
  return value === NULL_VALUE || /* @__PURE__ */ isUndefined(value);
}
// @__NO_SIDE_EFFECTS__
function isStrictNullOrUndefined(value) {
  return value === NULL_VALUE || !/* @__PURE__ */ isDefined(value);
}
// @__NO_SIDE_EFFECTS__
function isDefined(arg) {
  return !!arg || arg !== UNDEF_VALUE;
}
// @__NO_SIDE_EFFECTS__
function isPrimitiveType(theType) {
  !_primitiveTypes && (_primitiveTypes = ["string", "number", "boolean", UNDEFINED, "symbol", "bigint"]);
  return !!(theType !== OBJECT && _primitiveTypes.indexOf(theType) !== -1);
}
var isString = /* @__PURE__ */ _createIs("string");
var isFunction3 = /* @__PURE__ */ _createIs(FUNCTION);
// @__NO_SIDE_EFFECTS__
function isObject(value) {
  if (!value && /* @__PURE__ */ isNullOrUndefined(value)) {
    return false;
  }
  return !!value && typeof value === OBJECT;
}
var isArray3 = /* @__PURE__ */ _pureRef(ArrCls, "isArray");
var isDate2 = /* @__PURE__ */ _createObjIs("Date");
var isNumber = /* @__PURE__ */ _createIs("number");
var isBoolean2 = /* @__PURE__ */ _createIs("boolean");
var isError = /* @__PURE__ */ _createObjIs("Error");
// @__NO_SIDE_EFFECTS__
function isPromiseLike(value) {
  return !!(value && value.then && isFunction3(value.then));
}
// @__NO_SIDE_EFFECTS__
function isTruthy(value) {
  return !(!value || /* @__PURE__ */ safeGet(function() {
    return !(value && 0 + value);
  }, !value));
}
var objGetOwnPropertyDescriptor = /* @__PURE__ */ _pureRef(ObjClass, "getOwnPropertyDescriptor");
// @__NO_SIDE_EFFECTS__
function objHasOwnProperty(obj, prop) {
  return !!obj && ObjProto.hasOwnProperty[CALL](obj, prop);
}
var objHasOwn = /* @__PURE__ */ _pureAssign(/* @__PURE__ */ _pureRef(ObjClass, "hasOwn"), polyObjHasOwn);
// @__NO_SIDE_EFFECTS__
function polyObjHasOwn(obj, prop) {
  return /* @__PURE__ */ objHasOwnProperty(obj, prop) || !!objGetOwnPropertyDescriptor(obj, prop);
}
function objForEachKey(theObject, callbackfn, thisArg) {
  if (theObject && /* @__PURE__ */ isObject(theObject)) {
    for (var prop in theObject) {
      if (objHasOwn(theObject, prop)) {
        if (callbackfn[CALL](thisArg || theObject, prop, theObject[prop]) === -1) {
          break;
        }
      }
    }
  }
}
var propMap = {
  e: "enumerable",
  c: "configurable",
  v: "value",
  w: "writable",
  g: "get",
  s: "set"
};
// @__NO_SIDE_EFFECTS__
function _createProp(value) {
  var prop = {};
  prop[propMap["c"]] = true;
  prop[propMap["e"]] = true;
  if (value.l) {
    prop.get = function() {
      return value.l.v;
    };
    var desc = objGetOwnPropertyDescriptor(value.l, "v");
    if (desc && desc.set) {
      prop.set = function(newValue) {
        value.l.v = newValue;
      };
    }
  }
  objForEachKey(value, function(key, value2) {
    prop[propMap[key]] = /* @__PURE__ */ isStrictUndefined(value2) ? prop[propMap[key]] : value2;
  });
  return prop;
}
var objDefineProp = /* @__PURE__ */ _pureRef(ObjClass, "defineProperty");
var objDefineProperties = /* @__PURE__ */ _pureRef(ObjClass, "defineProperties");
function objDefine(target, key, propDesc) {
  return objDefineProp(target, key, /* @__PURE__ */ _createProp(propDesc));
}
// @__NO_SIDE_EFFECTS__
function _createKeyValueMap(values, keyType, valueType, completeFn, writable) {
  var theMap = {};
  objForEachKey(values, function(key, value) {
    _assignMapValue(theMap, key, keyType ? value : key);
    _assignMapValue(theMap, value, valueType ? value : key);
  });
  return completeFn ? completeFn(theMap) : theMap;
}
function _assignMapValue(theMap, key, value, writable) {
  objDefineProp(theMap, key, {
    value,
    enumerable: true,
    writable: false
  });
}
var asString = /* @__PURE__ */ _pureAssign(StrCls);
var ERROR_TYPE = "[object Error]";
// @__NO_SIDE_EFFECTS__
function dumpObj(object, format) {
  var propertyValueDump = EMPTY2;
  var objType = ObjProto[TO_STRING][CALL](object);
  if (objType === ERROR_TYPE) {
    object = {
      stack: asString(object.stack),
      message: asString(object.message),
      name: asString(object.name)
    };
  }
  try {
    propertyValueDump = JSON.stringify(object, NULL_VALUE, format ? typeof format === "number" ? format : 4 : UNDEF_VALUE);
    propertyValueDump = (propertyValueDump ? propertyValueDump.replace(/"(\w+)"\s*:\s{0,1}/g, "$1: ") : NULL_VALUE) || asString(object);
  } catch (e) {
    propertyValueDump = " - " + /* @__PURE__ */ dumpObj(e, format);
  }
  return objType + ": " + propertyValueDump;
}
function throwError3(message) {
  throw new Error(message);
}
function throwTypeError(message) {
  throw new TypeError(message);
}
var _objFreeze = /* @__PURE__ */ _pureRef(ObjClass, "freeze");
function _doNothing(value) {
  return value;
}
// @__NO_SIDE_EFFECTS__
function _getProto(value) {
  return value[__PROTO__] || NULL_VALUE;
}
var objAssign = /* @__PURE__ */ _pureRef(ObjClass, "assign");
var objKeys = /* @__PURE__ */ _pureRef(ObjClass, "keys");
function objDeepFreeze(value) {
  if (_objFreeze) {
    objForEachKey(value, function(key, value2) {
      if (isArray3(value2) || /* @__PURE__ */ isObject(value2)) {
        objDeepFreeze(value2);
      }
    });
  }
  return objFreeze(value);
}
var objFreeze = /* @__PURE__ */ _pureAssign(_objFreeze, _doNothing);
var objGetPrototypeOf = /* @__PURE__ */ _pureAssign(/* @__PURE__ */ _pureRef(ObjClass, "getPrototypeOf"), _getProto);
// @__NO_SIDE_EFFECTS__
function createEnum(values) {
  return /* @__PURE__ */ _createKeyValueMap(values, 1, 0, objFreeze);
}
// @__NO_SIDE_EFFECTS__
function createEnumKeyMap(values) {
  return /* @__PURE__ */ _createKeyValueMap(values, 0, 0, objFreeze);
}
// @__NO_SIDE_EFFECTS__
function createSimpleMap(values) {
  var mapClass = {};
  objForEachKey(values, function(key, value) {
    _assignMapValue(mapClass, key, value[1]);
    _assignMapValue(mapClass, value[0], value[1]);
  });
  return objFreeze(mapClass);
}
// @__NO_SIDE_EFFECTS__
function createTypeMap(values) {
  return /* @__PURE__ */ createSimpleMap(values);
}
var _wellKnownSymbolMap = /* @__PURE__ */ createEnumKeyMap({
  asyncIterator: 0,
  hasInstance: 1,
  isConcatSpreadable: 2,
  iterator: 3,
  match: 4,
  matchAll: 5,
  replace: 6,
  search: 7,
  species: 8,
  split: 9,
  toPrimitive: 10,
  toStringTag: 11,
  unscopables: 12
});
var GLOBAL_CONFIG_KEY = "__tsUtils$gblCfg";
var _globalCfg;
// @__NO_SIDE_EFFECTS__
function _getGlobalValue() {
  var result;
  if (typeof globalThis !== UNDEFINED) {
    result = globalThis;
  }
  if (!result && typeof self !== UNDEFINED) {
    result = self;
  }
  if (!result && typeof window !== UNDEFINED) {
    result = window;
  }
  if (!result && typeof global !== UNDEFINED) {
    result = global;
  }
  return result;
}
// @__NO_SIDE_EFFECTS__
function _getGlobalConfig() {
  if (!_globalCfg) {
    var gbl = safe(_getGlobalValue).v || {};
    _globalCfg = gbl[GLOBAL_CONFIG_KEY] = gbl[GLOBAL_CONFIG_KEY] || {};
  }
  return _globalCfg;
}
var _unwrapFunction = _unwrapFunctionWithPoly;
// @__NO_SIDE_EFFECTS__
function _unwrapFunctionWithPoly(funcName, clsProto, polyFunc) {
  var clsFn = clsProto ? clsProto[funcName] : NULL_VALUE;
  return function(thisArg) {
    var theFunc = (thisArg ? thisArg[funcName] : NULL_VALUE) || clsFn;
    if (theFunc || polyFunc) {
      var theArgs = arguments;
      return (theFunc || polyFunc).apply(thisArg, theFunc ? ArrSlice[CALL](theArgs, 1) : theArgs);
    }
    throwTypeError('"' + asString(funcName) + '" not defined for ' + /* @__PURE__ */ dumpObj(thisArg));
  };
}
// @__NO_SIDE_EFFECTS__
function _unwrapProp(propName) {
  return function(thisArg) {
    return thisArg[propName];
  };
}
var mathMin = /* @__PURE__ */ _pureRef(MathCls, "min");
var mathMax = /* @__PURE__ */ _pureRef(MathCls, "max");
var strSlice = /* @__PURE__ */ _unwrapFunction("slice", StrProto);
var strSubstring = /* @__PURE__ */ _unwrapFunction("substring", StrProto);
var strSubstr = /* @__PURE__ */ _unwrapFunctionWithPoly("substr", StrProto, polyStrSubstr);
// @__NO_SIDE_EFFECTS__
function polyStrSubstr(value, start, length) {
  if (/* @__PURE__ */ isNullOrUndefined(value)) {
    throwTypeError("Invalid " + /* @__PURE__ */ dumpObj(value));
  }
  if (length < 0) {
    return EMPTY2;
  }
  start = start || 0;
  if (start < 0) {
    start = mathMax(start + value[LENGTH], 0);
  }
  if (/* @__PURE__ */ isUndefined(length)) {
    return strSlice(value, start);
  }
  return strSlice(value, start, start + length);
}
// @__NO_SIDE_EFFECTS__
function strLeft(value, count) {
  return strSubstring(value, 0, count);
}
var UNIQUE_REGISTRY_ID = "_urid";
var _polySymbols;
// @__NO_SIDE_EFFECTS__
function _globalSymbolRegistry() {
  if (!_polySymbols) {
    var gblCfg = /* @__PURE__ */ _getGlobalConfig();
    _polySymbols = gblCfg.gblSym = gblCfg.gblSym || {
      k: {},
      s: {}
    };
  }
  return _polySymbols;
}
var _wellKnownSymbolCache;
// @__NO_SIDE_EFFECTS__
function polyNewSymbol(description) {
  var theSymbol = {
    description: asString(description),
    toString: function() {
      return SYMBOL + "(" + description + ")";
    }
  };
  theSymbol[POLYFILL_TAG] = true;
  return theSymbol;
}
// @__NO_SIDE_EFFECTS__
function polySymbolFor(key) {
  var registry = /* @__PURE__ */ _globalSymbolRegistry();
  if (!objHasOwn(registry.k, key)) {
    var newSymbol_1 = /* @__PURE__ */ polyNewSymbol(key);
    var regId_1 = objKeys(registry.s).length;
    newSymbol_1[UNIQUE_REGISTRY_ID] = function() {
      return regId_1 + "_" + newSymbol_1[TO_STRING]();
    };
    registry.k[key] = newSymbol_1;
    registry.s[newSymbol_1[UNIQUE_REGISTRY_ID]()] = asString(key);
  }
  return registry.k[key];
}
// @__NO_SIDE_EFFECTS__
function polyGetKnownSymbol(name) {
  !_wellKnownSymbolCache && (_wellKnownSymbolCache = {});
  var result;
  var knownName = _wellKnownSymbolMap[name];
  if (knownName) {
    result = _wellKnownSymbolCache[knownName] = _wellKnownSymbolCache[knownName] || /* @__PURE__ */ polyNewSymbol(SYMBOL + "." + knownName);
  }
  return result;
}
var _globalLazyTestHooks;
function _initTestHooks() {
  _globalLazyTestHooks = /* @__PURE__ */ _getGlobalConfig();
}
// @__NO_SIDE_EFFECTS__
function getLazy(cb) {
  var lazyValue = {};
  !_globalLazyTestHooks && _initTestHooks();
  lazyValue.b = _globalLazyTestHooks.lzy;
  objDefineProp(lazyValue, "v", {
    configurable: true,
    get: function() {
      var result = cb();
      if (!_globalLazyTestHooks.lzy) {
        objDefineProp(lazyValue, "v", {
          value: result
        });
      }
      lazyValue.b = _globalLazyTestHooks.lzy;
      return result;
    }
  });
  return lazyValue;
}
// @__NO_SIDE_EFFECTS__
function createCachedValue(value) {
  return objDefineProp({
    toJSON: function() {
      return value;
    }
  }, "v", {
    value
  });
}
var WINDOW = "window";
var _cachedGlobal;
function _getGlobalInstFn(getFn, theArgs) {
  var cachedValue;
  return function() {
    !_globalLazyTestHooks && _initTestHooks();
    if (!cachedValue || _globalLazyTestHooks.lzy) {
      cachedValue = /* @__PURE__ */ createCachedValue(safe(getFn, theArgs).v);
    }
    return cachedValue.v;
  };
}
function getGlobal(useCached) {
  !_globalLazyTestHooks && _initTestHooks();
  if (!_cachedGlobal || useCached === false || _globalLazyTestHooks.lzy) {
    _cachedGlobal = /* @__PURE__ */ createCachedValue(safe(_getGlobalValue).v || NULL_VALUE);
  }
  return _cachedGlobal.v;
}
// @__NO_SIDE_EFFECTS__
function getInst(name, useCached) {
  var gbl;
  if (!_cachedGlobal || useCached === false) {
    gbl = getGlobal(useCached);
  } else {
    gbl = _cachedGlobal.v;
  }
  if (gbl && gbl[name]) {
    return gbl[name];
  }
  if (name === WINDOW) {
    try {
      return window;
    } catch (e) {
    }
  }
  return NULL_VALUE;
}
// @__NO_SIDE_EFFECTS__
function hasDocument() {
  return !!/* @__PURE__ */ getDocument2();
}
var getDocument2 = /* @__PURE__ */ _getGlobalInstFn(getInst, ["document"]);
// @__NO_SIDE_EFFECTS__
function hasWindow() {
  return !!/* @__PURE__ */ getWindow();
}
var getWindow = /* @__PURE__ */ _getGlobalInstFn(getInst, [WINDOW]);
// @__NO_SIDE_EFFECTS__
function hasNavigator() {
  return !!/* @__PURE__ */ getNavigator();
}
var getNavigator = /* @__PURE__ */ _getGlobalInstFn(getInst, ["navigator"]);
// @__NO_SIDE_EFFECTS__
function hasHistory() {
  return !!/* @__PURE__ */ getHistory();
}
var getHistory = /* @__PURE__ */ _getGlobalInstFn(getInst, ["history"]);
var isNode = /* @__PURE__ */ _getGlobalInstFn(function() {
  return !!safe(function() {
    return process && (process.versions || {}).node;
  }).v;
});
var isWebWorker = /* @__PURE__ */ _getGlobalInstFn(function() {
  return !!safe(function() {
    return self && self instanceof WorkerGlobalScope;
  }).v;
});
var _symbol;
var _symbolFor;
// @__NO_SIDE_EFFECTS__
function _initSymbol() {
  _symbol = /* @__PURE__ */ createCachedValue(safe(getInst, [SYMBOL]).v);
  return _symbol;
}
function _getSymbolKey(key) {
  var gblSym = (!_globalLazyTestHooks.lzy ? _symbol : 0) || /* @__PURE__ */ _initSymbol();
  return gblSym.v ? gblSym.v[key] : UNDEF_VALUE;
}
// @__NO_SIDE_EFFECTS__
function hasSymbol() {
  return !!/* @__PURE__ */ getSymbol();
}
// @__NO_SIDE_EFFECTS__
function getSymbol() {
  !_globalLazyTestHooks && _initTestHooks();
  return ((!_globalLazyTestHooks.lzy ? _symbol : 0) || /* @__PURE__ */ _initSymbol()).v;
}
// @__NO_SIDE_EFFECTS__
function getKnownSymbol(name, noPoly) {
  var knownName = _wellKnownSymbolMap[name];
  !_globalLazyTestHooks && _initTestHooks();
  var sym = (!_globalLazyTestHooks.lzy ? _symbol : 0) || /* @__PURE__ */ _initSymbol();
  return sym.v ? sym.v[knownName || name] : !noPoly ? /* @__PURE__ */ polyGetKnownSymbol(name) : UNDEF_VALUE;
}
// @__NO_SIDE_EFFECTS__
function newSymbol(description, noPoly) {
  !_globalLazyTestHooks && _initTestHooks();
  var sym = (!_globalLazyTestHooks.lzy ? _symbol : 0) || /* @__PURE__ */ _initSymbol();
  return sym.v ? sym.v(description) : !noPoly ? /* @__PURE__ */ polyNewSymbol(description) : NULL_VALUE;
}
// @__NO_SIDE_EFFECTS__
function symbolFor(key) {
  !_globalLazyTestHooks && _initTestHooks();
  _symbolFor = (!_globalLazyTestHooks.lzy ? _symbolFor : 0) || /* @__PURE__ */ createCachedValue(safe(_getSymbolKey, ["for"]).v);
  return (_symbolFor.v || polySymbolFor)(key);
}
// @__NO_SIDE_EFFECTS__
function isIterator(value) {
  return !!value && isFunction3(value.next);
}
// @__NO_SIDE_EFFECTS__
function isIterable2(value) {
  return !/* @__PURE__ */ isStrictNullOrUndefined(value) && isFunction3(value[/* @__PURE__ */ getKnownSymbol(3)]);
}
var _iterSymbol$1;
function iterForOf(iter, callbackfn, thisArg) {
  if (iter) {
    if (!/* @__PURE__ */ isIterator(iter)) {
      !_iterSymbol$1 && (_iterSymbol$1 = /* @__PURE__ */ createCachedValue(/* @__PURE__ */ getKnownSymbol(3)));
      iter = iter[_iterSymbol$1.v] ? iter[_iterSymbol$1.v]() : NULL_VALUE;
    }
    if (/* @__PURE__ */ isIterator(iter)) {
      var err = UNDEF_VALUE;
      var iterResult = UNDEF_VALUE;
      try {
        var count = 0;
        while (!(iterResult = iter.next()).done) {
          if (callbackfn[CALL](thisArg || iter, iterResult.value, count, iter) === -1) {
            break;
          }
          count++;
        }
      } catch (failed) {
        err = {
          e: failed
        };
        if (iter.throw) {
          iterResult = NULL_VALUE;
          iter.throw(err);
        }
      } finally {
        try {
          if (iterResult && !iterResult.done) {
            iter.return && iter.return(iterResult);
          }
        } finally {
          if (err) {
            throw err.e;
          }
        }
      }
    }
  }
}
function fnApply(fn, thisArg, argArray) {
  return fn.apply(thisArg, argArray);
}
function arrAppend(target, elms) {
  if (!/* @__PURE__ */ isUndefined(elms) && target) {
    if (isArray3(elms)) {
      fnApply(target.push, target, elms);
    } else if (/* @__PURE__ */ isIterator(elms) || /* @__PURE__ */ isIterable2(elms)) {
      iterForOf(elms, function(elm) {
        target.push(elm);
      });
    } else {
      target.push(elms);
    }
  }
  return target;
}
function arrForEach(theArray, callbackfn, thisArg) {
  if (theArray) {
    var len = theArray[LENGTH] >>> 0;
    for (var idx = 0; idx < len; idx++) {
      if (idx in theArray) {
        if (callbackfn[CALL](thisArg || theArray, theArray[idx], idx, theArray) === -1) {
          break;
        }
      }
    }
  }
}
var arrIndexOf = /* @__PURE__ */ _unwrapFunction("indexOf", ArrProto);
var arrMap = /* @__PURE__ */ _unwrapFunction("map", ArrProto);
function arrSlice(theArray, start, end) {
  return ((theArray ? theArray["slice"] : NULL_VALUE) || ArrSlice).apply(theArray, ArrSlice[CALL](arguments, 1));
}
var arrReduce = /* @__PURE__ */ _unwrapFunction("reduce", ArrProto);
var objCreate = /* @__PURE__ */ _pureAssign(/* @__PURE__ */ _pureRef(ObjClass, "create"), polyObjCreate);
// @__NO_SIDE_EFFECTS__
function polyObjCreate(obj) {
  if (!obj) {
    return {};
  }
  var type = typeof obj;
  if (type !== OBJECT && type !== FUNCTION) {
    throwTypeError("Prototype must be an Object or function: " + /* @__PURE__ */ dumpObj(obj));
  }
  function tempFunc() {
  }
  tempFunc[PROTOTYPE] = obj;
  return new tempFunc();
}
var _isProtoArray;
function objSetPrototypeOf(obj, proto) {
  var fn = ObjClass["setPrototypeOf"] || function(d, b) {
    var _a12;
    !_isProtoArray && (_isProtoArray = /* @__PURE__ */ createCachedValue((_a12 = {}, _a12[__PROTO__] = [], _a12) instanceof Array));
    _isProtoArray.v ? d[__PROTO__] = b : objForEachKey(b, function(key, value) {
      return d[key] = value;
    });
  };
  return fn(obj, proto);
}
// @__NO_SIDE_EFFECTS__
function _createCustomError(name, d, b) {
  safe(objDefine, [d, NAME, {
    v: name,
    c: true,
    e: false
  }]);
  d = objSetPrototypeOf(d, b);
  function __() {
    this[CONSTRUCTOR] = d;
    safe(objDefine, [this, NAME, {
      v: name,
      c: true,
      e: false
    }]);
  }
  d[PROTOTYPE] = b === NULL_VALUE ? objCreate(b) : (__[PROTOTYPE] = b[PROTOTYPE], new __());
  return d;
}
function _setName(baseClass, name) {
  name && (baseClass[NAME] = name);
}
// @__NO_SIDE_EFFECTS__
function createCustomError(name, constructCb, errorBase) {
  var theBaseClass = errorBase || Error;
  var orgName = theBaseClass[PROTOTYPE][NAME];
  var captureFn = Error.captureStackTrace;
  return /* @__PURE__ */ _createCustomError(name, function() {
    var _this = this;
    var theArgs = arguments;
    try {
      safe(_setName, [theBaseClass, name]);
      var _self = fnApply(theBaseClass, _this, ArrSlice[CALL](theArgs)) || _this;
      if (_self !== _this) {
        var orgProto = objGetPrototypeOf(_this);
        if (orgProto !== objGetPrototypeOf(_self)) {
          objSetPrototypeOf(_self, orgProto);
        }
      }
      captureFn && captureFn(_self, _this[CONSTRUCTOR]);
      constructCb && constructCb(_self, theArgs);
      return _self;
    } finally {
      safe(_setName, [theBaseClass, orgName]);
    }
  }, theBaseClass);
}
var _unsupportedError;
function throwUnsupported(message) {
  if (!_unsupportedError) {
    _unsupportedError = /* @__PURE__ */ createCustomError("UnsupportedError");
  }
  throw new _unsupportedError(message);
}
// @__NO_SIDE_EFFECTS__
function utcNow() {
  return (Date.now || polyUtcNow)();
}
// @__NO_SIDE_EFFECTS__
function polyUtcNow() {
  return (/* @__PURE__ */ new Date()).getTime();
}
// @__NO_SIDE_EFFECTS__
function _createTrimFn(exp) {
  return function _doTrim(value) {
    if (/* @__PURE__ */ isNullOrUndefined(value)) {
      throwTypeError("strTrim called [" + /* @__PURE__ */ dumpObj(value) + "]");
    }
    if (value && value.replace) {
      value = value.replace(exp, EMPTY2);
    }
    return value;
  };
}
var polyStrTrim = /* @__PURE__ */ _createTrimFn(/^\s+|(?=\s)\s+$/g);
var strTrim = /* @__PURE__ */ _unwrapFunctionWithPoly("trim", StrProto, polyStrTrim);
var mathFloor = /* @__PURE__ */ _pureRef(MathCls, "floor");
var _fnToString;
var _objCtrFnString;
var _gblWindow;
// @__NO_SIDE_EFFECTS__
function isPlainObject(value) {
  if (!value || typeof value !== OBJECT) {
    return false;
  }
  if (!_gblWindow) {
    _gblWindow = /* @__PURE__ */ hasWindow() ? getWindow() : true;
  }
  var result = false;
  if (value !== _gblWindow) {
    if (!_objCtrFnString) {
      _fnToString = Function[PROTOTYPE][TO_STRING];
      _objCtrFnString = _fnToString[CALL](ObjClass);
    }
    try {
      var proto = objGetPrototypeOf(value);
      result = !proto;
      if (!result) {
        if (/* @__PURE__ */ objHasOwnProperty(proto, CONSTRUCTOR)) {
          proto = proto[CONSTRUCTOR];
        }
        result = !!(proto && typeof proto === FUNCTION && _fnToString[CALL](proto) === _objCtrFnString);
      }
    } catch (ex) {
    }
  }
  return result;
}
// @__NO_SIDE_EFFECTS__
function _defaultDeepCopyHandler(details) {
  details.value && plainObjDeepCopyHandler(details);
  return true;
}
var defaultDeepCopyHandlers = [arrayDeepCopyHandler, plainObjDeepCopyHandler, functionDeepCopyHandler, dateDeepCopyHandler];
// @__NO_SIDE_EFFECTS__
function _getSetVisited(visitMap, source, newPath, cb) {
  var theEntry;
  arrForEach(visitMap, function(entry) {
    if (entry.k === source) {
      theEntry = entry;
      return -1;
    }
  });
  if (!theEntry) {
    theEntry = {
      k: source,
      v: source
    };
    visitMap.push(theEntry);
    cb(theEntry);
  }
  return theEntry.v;
}
function _deepCopy(visitMap, value, ctx, key) {
  var userHandler = ctx.handler;
  var newPath = ctx.path ? key ? ctx.path.concat(key) : ctx.path : [];
  var newCtx = {
    handler: ctx.handler,
    src: ctx.src,
    path: newPath
  };
  var theType = typeof value;
  var isPlain = false;
  var isPrim = value === NULL_VALUE;
  if (!isPrim) {
    if (value && theType === OBJECT) {
      isPlain = /* @__PURE__ */ isPlainObject(value);
    } else {
      isPrim = /* @__PURE__ */ isPrimitiveType(theType);
    }
  }
  var details = {
    type: theType,
    isPrim,
    isPlain,
    value,
    result: value,
    path: newPath,
    origin: ctx.src,
    copy: function(source, newKey) {
      return _deepCopy(visitMap, source, newKey ? newCtx : ctx, newKey);
    },
    copyTo: function(target, source) {
      return _copyProps(visitMap, target, source, newCtx);
    }
  };
  if (!details.isPrim) {
    return /* @__PURE__ */ _getSetVisited(visitMap, value, newPath, function(newEntry) {
      objDefine(details, "result", {
        g: function() {
          return newEntry.v;
        },
        s: function(newValue) {
          newEntry.v = newValue;
        }
      });
      var idx = 0;
      var handler = userHandler;
      while (!(handler || (idx < defaultDeepCopyHandlers.length ? defaultDeepCopyHandlers[idx++] : _defaultDeepCopyHandler))[CALL](ctx, details)) {
        handler = NULL_VALUE;
      }
    });
  }
  if (userHandler && userHandler[CALL](ctx, details)) {
    return details.result;
  }
  return value;
}
function _copyProps(visitMap, target, source, ctx) {
  if (!/* @__PURE__ */ isNullOrUndefined(source)) {
    for (var key in source) {
      target[key] = _deepCopy(visitMap, source[key], ctx, key);
    }
  }
  return target;
}
function objCopyProps(target, source, handler) {
  var ctx = {
    handler,
    src: source,
    path: []
  };
  return _copyProps([], target, source, ctx);
}
// @__NO_SIDE_EFFECTS__
function objDeepCopy(source, handler) {
  var ctx = {
    handler,
    src: source
  };
  return _deepCopy([], source, ctx);
}
function arrayDeepCopyHandler(details) {
  var value = details.value;
  if (isArray3(value)) {
    var target = details.result = [];
    target.length = value.length;
    details.copyTo(target, value);
    return true;
  }
  return false;
}
function dateDeepCopyHandler(details) {
  var value = details.value;
  if (isDate2(value)) {
    details.result = new Date(value.getTime());
    return true;
  }
  return false;
}
function functionDeepCopyHandler(details) {
  if (details.type === FUNCTION) {
    return true;
  }
  return false;
}
function plainObjDeepCopyHandler(details) {
  var value = details.value;
  if (value && details.isPlain) {
    var target = details.result = {};
    details.copyTo(target, value);
    return true;
  }
  return false;
}
function _doExtend(target, theArgs) {
  arrForEach(theArgs, function(theArg) {
    objCopyProps(target, theArg);
  });
  return target;
}
function deepExtend(target, obj1, obj2, obj3, obj4, obj5, obj6) {
  return _doExtend(/* @__PURE__ */ objDeepCopy(target) || {}, ArrSlice[CALL](arguments));
}
function objExtend(target, obj1, obj2, obj3, obj4, obj5, obj6) {
  return _doExtend(target || {}, ArrSlice[CALL](arguments));
}
var getLength = /* @__PURE__ */ _unwrapProp(LENGTH);
var _perf;
// @__NO_SIDE_EFFECTS__
function getPerformance() {
  !_globalLazyTestHooks && _initTestHooks();
  if (!_perf || _globalLazyTestHooks.lzy) {
    _perf = /* @__PURE__ */ createCachedValue(safe(getInst, ["performance"]).v);
  }
  return _perf.v;
}
var mathRound = /* @__PURE__ */ _pureRef(MathCls, "round");
var strSplit = /* @__PURE__ */ _unwrapFunction("split", StrProto);
function setValueByKey(target, path, value) {
  if (target && path) {
    var parts = strSplit(path, ".");
    var lastKey = parts.pop();
    arrForEach(parts, function(key) {
      if (/* @__PURE__ */ isNullOrUndefined(target[key])) {
        target[key] = {};
      }
      target = target[key];
    });
    target[lastKey] = value;
  }
}
var strEndsWith = /* @__PURE__ */ _unwrapFunctionWithPoly("endsWith", StrProto, polyStrEndsWith);
// @__NO_SIDE_EFFECTS__
function polyStrEndsWith(value, searchString, length) {
  if (!isString(value)) {
    throwTypeError("'" + /* @__PURE__ */ dumpObj(value) + "' is not a string");
  }
  var searchValue = isString(searchString) ? searchString : asString(searchString);
  var end = !/* @__PURE__ */ isUndefined(length) && length < value[LENGTH] ? length : value[LENGTH];
  return strSubstring(value, end - searchValue[LENGTH], end) === searchValue;
}
var strIndexOf = /* @__PURE__ */ _unwrapFunction("indexOf", StrProto);
var REF = "ref";
var UNREF = "unref";
var HAS_REF = "hasRef";
var ENABLED = "enabled";
// @__NO_SIDE_EFFECTS__
function _createTimerHandler(startTimer, refreshFn, cancelFn) {
  var ref = true;
  var timerId = startTimer ? refreshFn(NULL_VALUE) : NULL_VALUE;
  var theTimerHandler;
  function _unref() {
    ref = false;
    timerId && timerId[UNREF] && timerId[UNREF]();
    return theTimerHandler;
  }
  function _cancel() {
    timerId && cancelFn(timerId);
    timerId = NULL_VALUE;
  }
  function _refresh() {
    timerId = refreshFn(timerId);
    if (!ref) {
      _unref();
    }
    return theTimerHandler;
  }
  function _setEnabled(value) {
    !value && timerId && _cancel();
    value && !timerId && _refresh();
  }
  theTimerHandler = {
    cancel: _cancel,
    refresh: _refresh
  };
  theTimerHandler[HAS_REF] = function() {
    if (timerId && timerId[HAS_REF]) {
      return timerId[HAS_REF]();
    }
    return ref;
  };
  theTimerHandler[REF] = function() {
    ref = true;
    timerId && timerId[REF] && timerId[REF]();
    return theTimerHandler;
  };
  theTimerHandler[UNREF] = _unref;
  theTimerHandler = objDefineProp(theTimerHandler, ENABLED, {
    get: function() {
      return !!timerId;
    },
    set: _setEnabled
  });
  return {
    h: theTimerHandler,
    dn: function() {
      timerId = NULL_VALUE;
    }
  };
}
function _createTimeoutWith(startTimer, overrideFn, theArgs) {
  var isArr = isArray3(overrideFn);
  var len = isArr ? overrideFn.length : 0;
  var setFn = (len > 0 ? overrideFn[0] : !isArr ? overrideFn : UNDEF_VALUE) || setTimeout;
  var clearFn = (len > 1 ? overrideFn[1] : UNDEF_VALUE) || clearTimeout;
  var timerFn = theArgs[0];
  theArgs[0] = function() {
    handler.dn();
    fnApply(timerFn, UNDEF_VALUE, ArrSlice[CALL](arguments));
  };
  var handler = /* @__PURE__ */ _createTimerHandler(startTimer, function(timerId) {
    if (timerId) {
      if (timerId.refresh) {
        timerId.refresh();
        return timerId;
      }
      fnApply(clearFn, UNDEF_VALUE, [timerId]);
    }
    return fnApply(setFn, UNDEF_VALUE, theArgs);
  }, function(timerId) {
    fnApply(clearFn, UNDEF_VALUE, [timerId]);
  });
  return handler.h;
}
function scheduleTimeout(callback, timeout) {
  return _createTimeoutWith(true, UNDEF_VALUE, ArrSlice[CALL](arguments));
}
function createTimeout(callback, timeout) {
  return _createTimeoutWith(false, UNDEF_VALUE, ArrSlice[CALL](arguments));
}

// node_modules/@microsoft/dynamicproto-js/dist-es5/DynamicProto.js
var _a;
var Constructor = "constructor";
var Prototype = "prototype";
var strFunction = "function";
var DynInstFuncTable = "_dynInstFuncs";
var DynProxyTag = "_isDynProxy";
var DynClassName = "_dynClass";
var DynClassNamePrefix = "_dynCls$";
var DynInstChkTag = "_dynInstChk";
var DynAllowInstChkTag = DynInstChkTag;
var DynProtoDefaultOptions = "_dfOpts";
var UnknownValue = "_unknown_";
var str__Proto = "__proto__";
var DynProtoBaseProto = "_dyn" + str__Proto;
var DynProtoGlobalSettings = "__dynProto$Gbl";
var DynProtoCurrent = "_dynInstProto";
var strUseBaseInst = "useBaseInst";
var strSetInstFuncs = "setInstFuncs";
var Obj = Object;
var _objGetPrototypeOf = Obj["getPrototypeOf"];
var _objGetOwnProps = Obj["getOwnPropertyNames"];
var _gbl = getGlobal();
var _gblInst = _gbl[DynProtoGlobalSettings] || (_gbl[DynProtoGlobalSettings] = {
  o: (_a = {}, _a[strSetInstFuncs] = true, _a[strUseBaseInst] = true, _a),
  n: 1e3
  // Start new global index @ 1000 so we "fix" some cases when mixed with 1.1.6 or earlier
});
function _isObjectOrArrayPrototype(target) {
  return target && (target === Obj[Prototype] || target === Array[Prototype]);
}
function _isObjectArrayOrFunctionPrototype(target) {
  return _isObjectOrArrayPrototype(target) || target === Function[Prototype];
}
function _getObjProto(target) {
  var newProto;
  if (target) {
    if (_objGetPrototypeOf) {
      return _objGetPrototypeOf(target);
    }
    var curProto = target[str__Proto] || target[Prototype] || (target[Constructor] ? target[Constructor][Prototype] : null);
    newProto = target[DynProtoBaseProto] || curProto;
    if (!objHasOwnProperty(target, DynProtoBaseProto)) {
      delete target[DynProtoCurrent];
      newProto = target[DynProtoBaseProto] = target[DynProtoCurrent] || target[DynProtoBaseProto];
      target[DynProtoCurrent] = curProto;
    }
  }
  return newProto;
}
function _forEachProp(target, func) {
  var props = [];
  if (_objGetOwnProps) {
    props = _objGetOwnProps(target);
  } else {
    for (var name_1 in target) {
      if (typeof name_1 === "string" && objHasOwnProperty(target, name_1)) {
        props.push(name_1);
      }
    }
  }
  if (props && props.length > 0) {
    for (var lp = 0; lp < props.length; lp++) {
      func(props[lp]);
    }
  }
}
function _isDynamicCandidate(target, funcName, skipOwn) {
  return funcName !== Constructor && typeof target[funcName] === strFunction && (skipOwn || objHasOwnProperty(target, funcName)) && funcName !== str__Proto && funcName !== Prototype;
}
function _throwTypeError(message) {
  throwTypeError("DynamicProto: " + message);
}
function _getInstanceFuncs(thisTarget) {
  var instFuncs = objCreate(null);
  _forEachProp(thisTarget, function(name) {
    if (!instFuncs[name] && _isDynamicCandidate(thisTarget, name, false)) {
      instFuncs[name] = thisTarget[name];
    }
  });
  return instFuncs;
}
function _hasVisited(values, value) {
  for (var lp = values.length - 1; lp >= 0; lp--) {
    if (values[lp] === value) {
      return true;
    }
  }
  return false;
}
function _getBaseFuncs(classProto, thisTarget, instFuncs, useBaseInst) {
  function _instFuncProxy(target, funcHost, funcName) {
    var theFunc = funcHost[funcName];
    if (theFunc[DynProxyTag] && useBaseInst) {
      var instFuncTable = target[DynInstFuncTable] || {};
      if (instFuncTable[DynAllowInstChkTag] !== false) {
        theFunc = (instFuncTable[funcHost[DynClassName]] || {})[funcName] || theFunc;
      }
    }
    return function() {
      return theFunc.apply(target, arguments);
    };
  }
  var baseFuncs = objCreate(null);
  _forEachProp(instFuncs, function(name) {
    baseFuncs[name] = _instFuncProxy(thisTarget, instFuncs, name);
  });
  var baseProto = _getObjProto(classProto);
  var visited = [];
  while (baseProto && !_isObjectArrayOrFunctionPrototype(baseProto) && !_hasVisited(visited, baseProto)) {
    _forEachProp(baseProto, function(name) {
      if (!baseFuncs[name] && _isDynamicCandidate(baseProto, name, !_objGetPrototypeOf)) {
        baseFuncs[name] = _instFuncProxy(thisTarget, baseProto, name);
      }
    });
    visited.push(baseProto);
    baseProto = _getObjProto(baseProto);
  }
  return baseFuncs;
}
function _getInstFunc(target, funcName, proto, currentDynProtoProxy) {
  var instFunc = null;
  if (target && objHasOwnProperty(proto, DynClassName)) {
    var instFuncTable = target[DynInstFuncTable] || objCreate(null);
    instFunc = (instFuncTable[proto[DynClassName]] || objCreate(null))[funcName];
    if (!instFunc) {
      _throwTypeError("Missing [" + funcName + "] " + strFunction);
    }
    if (!instFunc[DynInstChkTag] && instFuncTable[DynAllowInstChkTag] !== false) {
      var canAddInst = !objHasOwnProperty(target, funcName);
      var objProto = _getObjProto(target);
      var visited = [];
      while (canAddInst && objProto && !_isObjectArrayOrFunctionPrototype(objProto) && !_hasVisited(visited, objProto)) {
        var protoFunc = objProto[funcName];
        if (protoFunc) {
          canAddInst = protoFunc === currentDynProtoProxy;
          break;
        }
        visited.push(objProto);
        objProto = _getObjProto(objProto);
      }
      try {
        if (canAddInst) {
          target[funcName] = instFunc;
        }
        instFunc[DynInstChkTag] = 1;
      } catch (e) {
        instFuncTable[DynAllowInstChkTag] = false;
      }
    }
  }
  return instFunc;
}
function _getProtoFunc(funcName, proto, currentDynProtoProxy) {
  var protoFunc = proto[funcName];
  if (protoFunc === currentDynProtoProxy) {
    protoFunc = _getObjProto(proto)[funcName];
  }
  if (typeof protoFunc !== strFunction) {
    _throwTypeError("[" + funcName + "] is not a " + strFunction);
  }
  return protoFunc;
}
function _populatePrototype(proto, className, target, baseInstFuncs, setInstanceFunc) {
  function _createDynamicPrototype(proto2, funcName) {
    var dynProtoProxy = function() {
      var instFunc = _getInstFunc(this, funcName, proto2, dynProtoProxy) || _getProtoFunc(funcName, proto2, dynProtoProxy);
      return instFunc.apply(this, arguments);
    };
    dynProtoProxy[DynProxyTag] = 1;
    return dynProtoProxy;
  }
  if (!_isObjectOrArrayPrototype(proto)) {
    var instFuncTable = target[DynInstFuncTable] = target[DynInstFuncTable] || objCreate(null);
    if (!_isObjectOrArrayPrototype(instFuncTable)) {
      var instFuncs_1 = instFuncTable[className] = instFuncTable[className] || objCreate(null);
      if (instFuncTable[DynAllowInstChkTag] !== false) {
        instFuncTable[DynAllowInstChkTag] = !!setInstanceFunc;
      }
      if (!_isObjectOrArrayPrototype(instFuncs_1)) {
        _forEachProp(target, function(name) {
          if (_isDynamicCandidate(target, name, false) && target[name] !== baseInstFuncs[name]) {
            instFuncs_1[name] = target[name];
            delete target[name];
            if (!objHasOwnProperty(proto, name) || proto[name] && !proto[name][DynProxyTag]) {
              proto[name] = _createDynamicPrototype(proto, name);
            }
          }
        });
      }
    }
  }
}
function _checkPrototype(classProto, thisTarget) {
  if (_objGetPrototypeOf) {
    var visited = [];
    var thisProto = _getObjProto(thisTarget);
    while (thisProto && !_isObjectArrayOrFunctionPrototype(thisProto) && !_hasVisited(visited, thisProto)) {
      if (thisProto === classProto) {
        return true;
      }
      visited.push(thisProto);
      thisProto = _getObjProto(thisProto);
    }
    return false;
  }
  return true;
}
function _getObjName(target, unknownValue) {
  if (objHasOwnProperty(target, Prototype)) {
    return target.name || unknownValue || UnknownValue;
  }
  return ((target || {})[Constructor] || {}).name || unknownValue || UnknownValue;
}
function dynamicProto(theClass, target, delegateFunc, options) {
  if (!objHasOwnProperty(theClass, Prototype)) {
    _throwTypeError("theClass is an invalid class definition.");
  }
  var classProto = theClass[Prototype];
  if (!_checkPrototype(classProto, target)) {
    _throwTypeError("[" + _getObjName(theClass) + "] not in hierarchy of [" + _getObjName(target) + "]");
  }
  var className = null;
  if (objHasOwnProperty(classProto, DynClassName)) {
    className = classProto[DynClassName];
  } else {
    className = DynClassNamePrefix + _getObjName(theClass, "_") + "$" + _gblInst.n;
    _gblInst.n++;
    classProto[DynClassName] = className;
  }
  var perfOptions = dynamicProto[DynProtoDefaultOptions];
  var useBaseInst = !!perfOptions[strUseBaseInst];
  if (useBaseInst && options && options[strUseBaseInst] !== void 0) {
    useBaseInst = !!options[strUseBaseInst];
  }
  var instFuncs = _getInstanceFuncs(target);
  var baseFuncs = _getBaseFuncs(classProto, target, instFuncs, useBaseInst);
  delegateFunc(target, baseFuncs);
  var setInstanceFunc = !!_objGetPrototypeOf && !!perfOptions[strSetInstFuncs];
  if (setInstanceFunc && options) {
    setInstanceFunc = !!options[strSetInstFuncs];
  }
  _populatePrototype(classProto, className, target, instFuncs, setInstanceFunc !== false);
}
dynamicProto[DynProtoDefaultOptions] = _gblInst.o;

// node_modules/@microsoft/applicationinsights-shims/dist-es5/Constants.js
var strShimFunction = "function";
var strShimObject = "object";
var strShimUndefined = "undefined";
var strShimPrototype = "prototype";
var ObjClass2 = Object;
var ObjProto2 = ObjClass2[strShimPrototype];

// node_modules/@microsoft/applicationinsights-shims/dist-es5/TsLibShims.js
var SymbolObj = (getGlobal() || {})["Symbol"];
var ReflectObj = (getGlobal() || {})["Reflect"];
var strHasOwnProperty = "hasOwnProperty";
var __objAssignFnImpl = function(t) {
  for (var s, i = 1, n = arguments.length; i < n; i++) {
    s = arguments[i];
    for (var p in s) {
      if (ObjProto2[strHasOwnProperty].call(s, p)) {
        t[p] = s[p];
      }
    }
  }
  return t;
};
var __assignFn = objAssign || __objAssignFnImpl;
var extendStaticsFn = function(d, b) {
  extendStaticsFn = ObjClass2["setPrototypeOf"] || // tslint:disable-next-line: only-arrow-functions
  {
    __proto__: []
  } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || // tslint:disable-next-line: only-arrow-functions
  function(d2, b2) {
    for (var p in b2) {
      if (b2[strHasOwnProperty](p)) {
        d2[p] = b2[p];
      }
    }
  };
  return extendStaticsFn(d, b);
};
function __extendsFn(d, b) {
  if (typeof b !== strShimFunction && b !== null) {
    throwTypeError("Class extends value " + String(b) + " is not a constructor or null");
  }
  extendStaticsFn(d, b);
  function __() {
    this.constructor = d;
  }
  d[strShimPrototype] = b === null ? objCreate(b) : (__[strShimPrototype] = b[strShimPrototype], new __());
}
function __spreadArrayFn(to, from2) {
  for (var i = 0, il = from2.length, j = to.length; i < il; i++, j++) {
    to[j] = from2[i];
  }
  return to;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK.Enums/EnumHelperFuncs.js
var createEnumStyle = createEnum;
var createValueMap = createTypeMap;

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK.Enums/InitActiveStatusEnum.js
var ActiveStatus = createEnumStyle({
  NONE: 0,
  PENDING: 3,
  INACTIVE: 1,
  ACTIVE: 2
  /* eActiveStatus.ACTIVE */
});

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/__DynamicConstants.js
var _DYN_TO_LOWER_CASE = "toLowerCase";
var _DYN_LENGTH = "length";
var _DYN_WARN_TO_CONSOLE = "warnToConsole";
var _DYN_THROW_INTERNAL = "throwInternal";
var _DYN_WATCH = "watch";
var _DYN_APPLY = "apply";
var _DYN_PUSH = "push";
var _DYN_SPLICE = "splice";
var _DYN_LOGGER = "logger";
var _DYN_CANCEL = "cancel";
var _DYN_INITIALIZE = "initialize";
var _DYN_IDENTIFIER = "identifier";
var _DYN_REMOVE_NOTIFICATION_0 = "removeNotificationListener";
var _DYN_ADD_NOTIFICATION_LIS1 = "addNotificationListener";
var _DYN_IS_INITIALIZED = "isInitialized";
var _DYN_VALUE = "value";
var _DYN_GET_NOTIFY_MGR = "getNotifyMgr";
var _DYN_GET_PLUGIN = "getPlugin";
var _DYN_NAME = "name";
var _DYN_PROCESS_NEXT = "processNext";
var _DYN_GET_PROCESS_TEL_CONT2 = "getProcessTelContext";
var _DYN_ENABLED = "enabled";
var _DYN_STOP_POLLING_INTERNA3 = "stopPollingInternalLogs";
var _DYN_UNLOAD = "unload";
var _DYN_ON_COMPLETE = "onComplete";
var _DYN_VERSION = "version";
var _DYN_LOGGING_LEVEL_CONSOL4 = "loggingLevelConsole";
var _DYN_CREATE_NEW = "createNew";
var _DYN_TEARDOWN = "teardown";
var _DYN_MESSAGE_ID = "messageId";
var _DYN_MESSAGE = "message";
var _DYN_DIAG_LOG = "diagLog";
var _DYN__DO_TEARDOWN = "_doTeardown";
var _DYN_UPDATE = "update";
var _DYN_GET_NEXT = "getNext";
var _DYN_SET_NEXT_PLUGIN = "setNextPlugin";
var _DYN_USER_AGENT = "userAgent";
var _DYN_SPLIT = "split";
var _DYN_REPLACE = "replace";
var _DYN_TYPE = "type";
var _DYN_EVT_NAME = "evtName";
var _DYN_STATUS = "status";
var _DYN_GET_ALL_RESPONSE_HEA5 = "getAllResponseHeaders";
var _DYN_IS_CHILD_EVT = "isChildEvt";
var _DYN_DATA = "data";
var _DYN_GET_CTX = "getCtx";
var _DYN_SET_CTX = "setCtx";
var _DYN_ITEMS_RECEIVED = "itemsReceived";
var _DYN_URL_STRING = "urlString";
var _DYN_HEADERS = "headers";
var _DYN_TIMEOUT = "timeout";
var _DYN_TRACE_FLAGS = "traceFlags";
var _DYN_GET_ATTRIBUTE = "getAttribute";

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/AggregationError.js
var aggregationErrorType;
function throwAggregationError(message, sourceErrors) {
  if (!aggregationErrorType) {
    aggregationErrorType = createCustomError("AggregationError", function(self2, args) {
      if (args[
        _DYN_LENGTH
        /* @min:%2elength */
      ] > 1) {
        self2.errors = args[1];
      }
    });
  }
  var theMessage = message || "One or more errors occurred.";
  arrForEach(sourceErrors, function(srcError, idx) {
    theMessage += "\n".concat(idx, " > ").concat(dumpObj(srcError));
  });
  throw new aggregationErrorType(theMessage, sourceErrors || []);
}

// node_modules/@nevware21/ts-async/dist/es5/mod/ts-async.js
var STR_PROMISE = "Promise";
var REJECTED = "rejected";
function doAwaitResponse(value, cb) {
  return doAwait(value, function(value2) {
    return cb ? cb({
      status: "fulfilled",
      rejected: false,
      value: value2
    }) : value2;
  }, function(reason) {
    return cb ? cb({
      status: REJECTED,
      rejected: true,
      reason
    }) : reason;
  });
}
function doAwait(value, resolveFn, rejectFn, finallyFn) {
  var result = value;
  try {
    if (isPromiseLike(value)) {
      if (resolveFn || rejectFn) {
        result = value.then(resolveFn, rejectFn);
      }
    } else {
      try {
        if (resolveFn) {
          result = resolveFn(value);
        }
      } catch (err) {
        if (rejectFn) {
          result = rejectFn(err);
        } else {
          throw err;
        }
      }
    }
  } finally {
    if (finallyFn) {
      doFinally(result, finallyFn);
    }
  }
  return result;
}
function doFinally(value, finallyFn) {
  var result = value;
  if (finallyFn) {
    if (isPromiseLike(value)) {
      if (value.finally) {
        result = value.finally(finallyFn);
      } else {
        result = value.then(function(value2) {
          finallyFn();
          return value2;
        }, function(reason) {
          finallyFn();
          throw reason;
        });
      }
    } else {
      finallyFn();
    }
  }
  return result;
}
var _debugState;
var _debugResult;
var _debugHandled;
var _promiseDebugEnabled = false;
function _addDebugState$1(thePromise, stateFn, resultFn, handledFn) {
  _debugState = _debugState || {
    toString: function() {
      return "[[PromiseState]]";
    }
  };
  _debugResult = _debugResult || {
    toString: function() {
      return "[[PromiseResult]]";
    }
  };
  _debugHandled = _debugHandled || {
    toString: function() {
      return "[[PromiseIsHandled]]";
    }
  };
  var props = {};
  props[_debugState] = {
    get: stateFn
  };
  props[_debugResult] = {
    get: resultFn
  };
  props[_debugHandled] = {
    get: handledFn
  };
  objDefineProperties(thePromise, props);
}
var STRING_STATES = ["pending", "resolving", "resolved", REJECTED];
var DISPATCH_EVENT = "dispatchEvent";
var _hasInitEvent;
function _hasInitEventFn(doc) {
  var evt;
  if (doc && doc.createEvent) {
    evt = doc.createEvent("Event");
  }
  return !!evt && evt.initEvent;
}
function emitEvent(target, evtName, populateEvent, useNewEvent) {
  var doc = getDocument2();
  !_hasInitEvent && (_hasInitEvent = createCachedValue(!!safe(_hasInitEventFn, [doc]).v));
  var theEvt = _hasInitEvent.v ? doc.createEvent("Event") : useNewEvent ? new Event(evtName) : {};
  populateEvent && populateEvent(theEvt);
  if (_hasInitEvent.v) {
    theEvt.initEvent(evtName, false, true);
  }
  if (theEvt && target[DISPATCH_EVENT]) {
    target[DISPATCH_EVENT](theEvt);
  } else {
    var handler = target["on" + evtName];
    if (handler) {
      handler(theEvt);
    } else {
      var theConsole = getInst("console");
      theConsole && (theConsole["error"] || theConsole["log"])(evtName, dumpObj(theEvt));
    }
  }
}
var NODE_UNHANDLED_REJECTION = "unhandledRejection";
var UNHANDLED_REJECTION = NODE_UNHANDLED_REJECTION.toLowerCase();
var _currentPromiseId = [];
var _uniquePromiseId = 0;
var _unhandledRejectionTimeout = 10;
var _hasPromiseRejectionEvent;
function dumpFnObj(value) {
  if (isFunction3(value)) {
    return value.toString();
  }
  return dumpObj(value);
}
function _createPromise(newPromise, processor, executor) {
  var additionalArgs = arrSlice(arguments, 3);
  var _state = 0;
  var _hasResolved = false;
  var _settledValue;
  var _queue = [];
  var _id = _uniquePromiseId++;
  var _parentId = _currentPromiseId.length > 0 ? _currentPromiseId[_currentPromiseId.length - 1] : void 0;
  var _handled = false;
  var _unHandledRejectionHandler = null;
  var _thePromise;
  function _then(onResolved, onRejected) {
    try {
      _currentPromiseId.push(_id);
      _handled = true;
      _unHandledRejectionHandler && _unHandledRejectionHandler.cancel();
      _unHandledRejectionHandler = null;
      var thenPromise = newPromise(function(resolve, reject) {
        _queue.push(function() {
          try {
            var handler = _state === 2 ? onResolved : onRejected;
            var value = isUndefined(handler) ? _settledValue : isFunction3(handler) ? handler(_settledValue) : handler;
            if (isPromiseLike(value)) {
              value.then(resolve, reject);
            } else if (handler) {
              resolve(value);
            } else if (_state === 3) {
              reject(value);
            } else {
              resolve(value);
            }
          } catch (e) {
            reject(e);
          }
        });
        if (_hasResolved) {
          _processQueue();
        }
      }, additionalArgs);
      return thenPromise;
    } finally {
      _currentPromiseId.pop();
    }
  }
  function _catch(onRejected) {
    return _then(void 0, onRejected);
  }
  function _finally(onFinally) {
    var thenFinally = onFinally;
    var catchFinally = onFinally;
    if (isFunction3(onFinally)) {
      thenFinally = function(value) {
        onFinally && onFinally();
        return value;
      };
      catchFinally = function(reason) {
        onFinally && onFinally();
        throw reason;
      };
    }
    return _then(thenFinally, catchFinally);
  }
  function _strState() {
    return STRING_STATES[_state];
  }
  function _processQueue() {
    if (_queue.length > 0) {
      var pending = _queue.slice();
      _queue = [];
      _handled = true;
      _unHandledRejectionHandler && _unHandledRejectionHandler.cancel();
      _unHandledRejectionHandler = null;
      processor(pending);
    }
  }
  function _createSettleIfFn(newState, allowState) {
    return function(theValue) {
      if (_state === allowState) {
        if (newState === 2 && isPromiseLike(theValue)) {
          _state = 1;
          theValue.then(_createSettleIfFn(2, 1), _createSettleIfFn(3, 1));
          return;
        }
        _state = newState;
        _hasResolved = true;
        _settledValue = theValue;
        _processQueue();
        if (!_handled && newState === 3 && !_unHandledRejectionHandler) {
          _unHandledRejectionHandler = scheduleTimeout(_notifyUnhandledRejection, _unhandledRejectionTimeout);
        }
      }
    };
  }
  function _notifyUnhandledRejection() {
    if (!_handled) {
      _handled = true;
      if (isNode()) {
        process.emit(NODE_UNHANDLED_REJECTION, _settledValue, _thePromise);
      } else {
        var gbl = getWindow() || getGlobal();
        !_hasPromiseRejectionEvent && (_hasPromiseRejectionEvent = createCachedValue(safe(getInst, [STR_PROMISE + "RejectionEvent"]).v));
        emitEvent(gbl, UNHANDLED_REJECTION, function(theEvt) {
          objDefine(theEvt, "promise", {
            g: function() {
              return _thePromise;
            }
          });
          theEvt.reason = _settledValue;
          return theEvt;
        }, !!_hasPromiseRejectionEvent.v);
      }
    }
  }
  _thePromise = {
    then: _then,
    "catch": _catch,
    finally: _finally
  };
  objDefineProp(_thePromise, "state", {
    get: _strState
  });
  if (_promiseDebugEnabled) {
    _addDebugState$1(_thePromise, _strState, function() {
      return objToString(_settledValue);
    }, function() {
      return _handled;
    });
  }
  if (hasSymbol()) {
    _thePromise[getKnownSymbol(11)] = "IPromise";
  }
  function _toString() {
    return "IPromise" + (_promiseDebugEnabled ? "[" + _id + (!isUndefined(_parentId) ? ":" + _parentId : "") + "]" : "") + " " + _strState() + (_hasResolved ? " - " + dumpFnObj(_settledValue) : "");
  }
  _thePromise.toString = _toString;
  (function _initialize() {
    if (!isFunction3(executor)) {
      throwTypeError(STR_PROMISE + ": executor is not a function - " + dumpFnObj(executor));
    }
    var _rejectFn = _createSettleIfFn(3, 0);
    try {
      executor.call(_thePromise, _createSettleIfFn(2, 0), _rejectFn);
    } catch (e) {
      _rejectFn(e);
    }
  })();
  return _thePromise;
}
// @__NO_SIDE_EFFECTS__
function _createAllPromise(newPromise) {
  return function(input2) {
    var additionalArgs = arrSlice(arguments, 1);
    return newPromise(function(resolve, reject) {
      try {
        var values_1 = [];
        var pending_1 = 1;
        iterForOf(input2, function(item, idx) {
          if (item) {
            pending_1++;
            doAwait(item, function(value) {
              values_1[idx] = value;
              if (--pending_1 === 0) {
                resolve(values_1);
              }
            }, reject);
          }
        });
        pending_1--;
        if (pending_1 === 0) {
          resolve(values_1);
        }
      } catch (e) {
        reject(e);
      }
    }, additionalArgs);
  };
}
// @__NO_SIDE_EFFECTS__
function _createAllSettledPromise(newPromise) {
  return createCachedValue(function(input2) {
    var additionalArgs = arrSlice(arguments, 1);
    return newPromise(function(resolve, reject) {
      var values = [];
      var pending = 1;
      function processItem(item, idx) {
        pending++;
        doAwaitResponse(item, function(value) {
          if (value.rejected) {
            values[idx] = {
              status: REJECTED,
              reason: value.reason
            };
          } else {
            values[idx] = {
              status: "fulfilled",
              value: value.value
            };
          }
          if (--pending === 0) {
            resolve(values);
          }
        });
      }
      try {
        if (isArray3(input2)) {
          arrForEach(input2, processItem);
        } else if (isIterable2(input2)) {
          iterForOf(input2, processItem);
        } else {
          throwTypeError("Input is not an iterable");
        }
        pending--;
        if (pending === 0) {
          resolve(values);
        }
      } catch (e) {
        reject(e);
      }
    }, additionalArgs);
  });
}
function syncItemProcessor(pending) {
  arrForEach(pending, function(fn) {
    try {
      fn();
    } catch (e) {
    }
  });
}
function timeoutItemProcessor(timeout) {
  var callbackTimeout = isNumber(timeout) ? timeout : 0;
  return function(pending) {
    scheduleTimeout(function() {
      syncItemProcessor(pending);
    }, callbackTimeout);
  };
}
function createAsyncPromise(executor, timeout) {
  return _createPromise(createAsyncPromise, timeoutItemProcessor(timeout), executor, timeout);
}
var _promiseCls;
function createNativePromise(executor, timeout) {
  !_promiseCls && (_promiseCls = createCachedValue(safe(getInst, [STR_PROMISE]).v || null));
  var PrmCls = _promiseCls.v;
  if (!PrmCls) {
    return createAsyncPromise(executor);
  }
  if (!isFunction3(executor)) {
    throwTypeError(STR_PROMISE + ": executor is not a function - " + dumpObj(executor));
  }
  var _state = 0;
  function _strState() {
    return STRING_STATES[_state];
  }
  var thePromise = new PrmCls(function(resolve, reject) {
    function _resolve(value) {
      _state = 2;
      resolve(value);
    }
    function _reject(reason) {
      _state = 3;
      reject(reason);
    }
    executor(_resolve, _reject);
  });
  objDefineProp(thePromise, "state", {
    get: _strState
  });
  return thePromise;
}
var _allSyncSettledCreator;
function createSyncPromise(executor) {
  return _createPromise(createSyncPromise, syncItemProcessor, executor);
}
function createSyncAllSettledPromise(input2, timeout) {
  !_allSyncSettledCreator && (_allSyncSettledCreator = /* @__PURE__ */ _createAllSettledPromise(createSyncPromise));
  return _allSyncSettledCreator.v(input2, timeout);
}
var _promiseCreator;
function createPromise(executor, timeout) {
  !_promiseCreator && (_promiseCreator = createCachedValue(createNativePromise));
  return _promiseCreator.v.call(this, executor, timeout);
}
var createAllPromise = /* @__PURE__ */ _createAllPromise(createPromise);
var toStringTagSymbol = getKnownSymbol(11);

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/InternalConstants.js
var UNDEFINED_VALUE = void 0;
var STR_EMPTY = "";
var STR_CHANNELS = "channels";
var STR_CORE = "core";
var STR_CREATE_PERF_MGR = "createPerfMgr";
var STR_DISABLED = "disabled";
var STR_EXTENSION_CONFIG = "extensionConfig";
var STR_EXTENSIONS = "extensions";
var STR_PROCESS_TELEMETRY = "processTelemetry";
var STR_PRIORITY = "priority";
var STR_EVENTS_SENT = "eventsSent";
var STR_EVENTS_DISCARDED = "eventsDiscarded";
var STR_EVENTS_SEND_REQUEST = "eventsSendRequest";
var STR_PERF_EVENT = "perfEvent";
var STR_OFFLINE_STORE = "offlineEventsStored";
var STR_OFFLINE_SENT = "offlineBatchSent";
var STR_OFFLINE_DROP = "offlineBatchDrop";
var STR_GET_PERF_MGR = "getPerfMgr";
var STR_DOMAIN = "domain";
var STR_PATH = "path";
var STR_NOT_DYNAMIC_ERROR = "Not dynamic - ";

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/HelperFuncs.js
var strGetPrototypeOf = "getPrototypeOf";
var rCamelCase = /-([a-z])/g;
var rNormalizeInvalid = /([^\w\d_$])/g;
var rLeadingNumeric = /^(\d+[\w\d_$])/;
var _getObjProto2 = Object[strGetPrototypeOf];
function isNotNullOrUndefined(value) {
  return !isNullOrUndefined(value);
}
function normalizeJsName(name) {
  var value = name;
  if (value && isString(value)) {
    value = value[
      _DYN_REPLACE
      /* @min:%2ereplace */
    ](rCamelCase, function(_all, letter) {
      return letter.toUpperCase();
    });
    value = value[
      _DYN_REPLACE
      /* @min:%2ereplace */
    ](rNormalizeInvalid, "_");
    value = value[
      _DYN_REPLACE
      /* @min:%2ereplace */
    ](rLeadingNumeric, function(_all, match2) {
      return "_" + match2;
    });
  }
  return value;
}
function strContains(value, search) {
  if (value && search) {
    return strIndexOf(value, search) !== -1;
  }
  return false;
}
function toISOString(date) {
  return date && date.toISOString() || "";
}
function getExceptionName(object) {
  if (isError(object)) {
    return object[
      _DYN_NAME
      /* @min:%2ename */
    ];
  }
  return STR_EMPTY;
}
function setValue(target, field, value, valChk, srcChk) {
  var theValue = value;
  if (target) {
    theValue = target[field];
    if (theValue !== value && (!srcChk || srcChk(theValue)) && (!valChk || valChk(value))) {
      theValue = value;
      target[field] = theValue;
    }
  }
  return theValue;
}
function getSetValue(target, field, defValue) {
  var theValue;
  if (target) {
    theValue = target[field];
    if (!theValue && isNullOrUndefined(theValue)) {
      theValue = !isUndefined(defValue) ? defValue : {};
      target[field] = theValue;
    }
  } else {
    theValue = !isUndefined(defValue) ? defValue : {};
  }
  return theValue;
}
function _createProxyFunction(source, funcName) {
  var srcFunc = null;
  var src = null;
  if (isFunction3(source)) {
    srcFunc = source;
  } else {
    src = source;
  }
  return function() {
    var originalArguments = arguments;
    if (srcFunc) {
      src = srcFunc();
    }
    if (src) {
      return src[funcName][
        _DYN_APPLY
        /* @min:%2eapply */
      ](src, originalArguments);
    }
  };
}
function proxyAssign(target, source, chkSet) {
  if (target && source && isObject(target) && isObject(source)) {
    var _loop_1 = function(field2) {
      if (isString(field2)) {
        var value = source[field2];
        if (isFunction3(value)) {
          if (!chkSet || chkSet(field2, true, source, target)) {
            target[field2] = _createProxyFunction(source, field2);
          }
        } else if (!chkSet || chkSet(field2, false, source, target)) {
          if (objHasOwn(target, field2)) {
            delete target[field2];
          }
          objDefine(target, field2, {
            g: function() {
              return source[field2];
            },
            s: function(theValue) {
              source[field2] = theValue;
            }
          });
        }
      }
    };
    for (var field in source) {
      _loop_1(field);
    }
  }
  return target;
}
function proxyFunctionAs(target, name, source, theFunc, overwriteTarget) {
  if (target && name && source) {
    if (overwriteTarget !== false || isUndefined(target[name])) {
      target[name] = _createProxyFunction(source, theFunc);
    }
  }
}
function proxyFunctions(target, source, functionsToProxy, overwriteTarget) {
  if (target && source && isObject(target) && isArray3(functionsToProxy)) {
    arrForEach(functionsToProxy, function(theFuncName) {
      if (isString(theFuncName)) {
        proxyFunctionAs(target, theFuncName, source, theFuncName, overwriteTarget);
      }
    });
  }
  return target;
}
function createClassFromInterface(defaults) {
  return (
    /** @class */
    /* @__PURE__ */ function() {
      function class_1() {
        var _this = this;
        if (defaults) {
          objForEachKey(defaults, function(field, value) {
            _this[field] = value;
          });
        }
      }
      return class_1;
    }()
  );
}
function optimizeObject(theObject) {
  if (theObject && objAssign) {
    theObject = ObjClass2(objAssign({}, theObject));
  }
  return theObject;
}
function objExtend2(obj1, obj2, obj3, obj4, obj5, obj6) {
  var theArgs = arguments;
  var extended = theArgs[0] || {};
  var argLen = theArgs[
    _DYN_LENGTH
    /* @min:%2elength */
  ];
  var deep = false;
  var idx = 1;
  if (argLen > 0 && isBoolean2(extended)) {
    deep = extended;
    extended = theArgs[idx] || {};
    idx++;
  }
  if (!isObject(extended)) {
    extended = {};
  }
  for (; idx < argLen; idx++) {
    var arg = theArgs[idx];
    var isArgArray = isArray3(arg);
    var isArgObj = isObject(arg);
    for (var prop in arg) {
      var propOk = isArgArray && prop in arg || isArgObj && objHasOwn(arg, prop);
      if (!propOk) {
        continue;
      }
      var newValue = arg[prop];
      var isNewArray = void 0;
      if (deep && newValue && ((isNewArray = isArray3(newValue)) || isPlainObject(newValue))) {
        var clone = extended[prop];
        if (isNewArray) {
          if (!isArray3(clone)) {
            clone = [];
          }
        } else if (!isPlainObject(clone)) {
          clone = {};
        }
        newValue = objExtend2(deep, clone, newValue);
      }
      if (newValue !== void 0) {
        extended[prop] = newValue;
      }
    }
  }
  return extended;
}
function isFeatureEnabled(feature, cfg) {
  var rlt = false;
  var ft = cfg && cfg.featureOptIn && cfg.featureOptIn[feature];
  if (feature && ft) {
    var mode = ft.mode;
    rlt = mode == 3 || mode == 1;
  }
  return rlt;
}
function getResponseText(xhr) {
  try {
    return xhr.responseText;
  } catch (e) {
  }
  return null;
}
function formatErrorMessageXdr(xdr, message) {
  if (xdr) {
    return "XDomainRequest,Response:" + getResponseText(xdr) || "";
  }
  return message;
}
function formatErrorMessageXhr(xhr, message) {
  if (xhr) {
    return "XMLHttpRequest,Status:" + xhr[
      _DYN_STATUS
      /* @min:%2estatus */
    ] + ",Response:" + getResponseText(xhr) || xhr.response || "";
  }
  return message;
}
function prependTransports(theTransports, newTransports) {
  if (newTransports) {
    if (isNumber(newTransports)) {
      theTransports = [newTransports].concat(theTransports);
    } else if (isArray3(newTransports)) {
      theTransports = newTransports.concat(theTransports);
    }
  }
  return theTransports;
}
var strDisabledPropertyName = "Microsoft_ApplicationInsights_BypassAjaxInstrumentation";
var strWithCredentials = "withCredentials";
var strTimeout = "timeout";
function openXhr(method, urlString, withCredentials, disabled, isSync, timeout) {
  if (disabled === void 0) {
    disabled = false;
  }
  if (isSync === void 0) {
    isSync = false;
  }
  function _wrapSetXhrProp(xhr2, prop, value) {
    try {
      xhr2[prop] = value;
    } catch (e) {
    }
  }
  var xhr = new XMLHttpRequest();
  if (disabled) {
    _wrapSetXhrProp(xhr, strDisabledPropertyName, disabled);
  }
  if (withCredentials) {
    _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);
  }
  xhr.open(method, urlString, !isSync);
  if (withCredentials) {
    _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);
  }
  if (!isSync && timeout) {
    _wrapSetXhrProp(xhr, strTimeout, timeout);
  }
  return xhr;
}
function convertAllHeadersToMap(headersString) {
  var headers = {};
  if (isString(headersString)) {
    var headersArray = strTrim(headersString)[
      _DYN_SPLIT
      /* @min:%2esplit */
    ](/[\r\n]+/);
    arrForEach(headersArray, function(headerEntry) {
      if (headerEntry) {
        var idx = headerEntry.indexOf(": ");
        if (idx !== -1) {
          var header = strTrim(headerEntry.substring(0, idx))[
            _DYN_TO_LOWER_CASE
            /* @min:%2etoLowerCase */
          ]();
          var value = strTrim(headerEntry.substring(idx + 1));
          headers[header] = value;
        } else {
          headers[strTrim(headerEntry)] = 1;
        }
      }
    });
  }
  return headers;
}
function _appendHeader(theHeaders, xhr, name) {
  if (!theHeaders[name] && xhr && xhr.getResponseHeader) {
    var value = xhr.getResponseHeader(name);
    if (value) {
      theHeaders[name] = strTrim(value);
    }
  }
  return theHeaders;
}
var STR_KILL_DURATION_HEADER = "kill-duration";
var STR_KILL_DURATION_SECONDS_HEADER = "kill-duration-seconds";
var STR_TIME_DELTA_HEADER = "time-delta-millis";
function _getAllResponseHeaders(xhr, isOneDs) {
  var theHeaders = {};
  if (!xhr[
    _DYN_GET_ALL_RESPONSE_HEA5
    /* @min:%2egetAllResponseHeaders */
  ]) {
    if (!!isOneDs) {
      theHeaders = _appendHeader(theHeaders, xhr, STR_TIME_DELTA_HEADER);
      theHeaders = _appendHeader(theHeaders, xhr, STR_KILL_DURATION_HEADER);
      theHeaders = _appendHeader(theHeaders, xhr, STR_KILL_DURATION_SECONDS_HEADER);
    }
  } else {
    theHeaders = convertAllHeadersToMap(xhr[
      _DYN_GET_ALL_RESPONSE_HEA5
      /* @min:%2egetAllResponseHeaders */
    ]());
  }
  return theHeaders;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/EnvUtils.js
var strDocumentMode = "documentMode";
var strLocation = "location";
var strConsole = "console";
var strJSON = "JSON";
var strCrypto = "crypto";
var strMsCrypto = "msCrypto";
var strReactNative = "ReactNative";
var strMsie = "msie";
var strTrident = "trident/";
var strXMLHttpRequest = "XMLHttpRequest";
var _isTrident = null;
var _navUserAgentCheck = null;
var _enableMocks = false;
var _useXDomainRequest = null;
var _beaconsSupported = null;
function _hasProperty(theClass, property) {
  var supported = false;
  if (theClass) {
    try {
      supported = property in theClass;
      if (!supported) {
        var proto = theClass[strShimPrototype];
        if (proto) {
          supported = property in proto;
        }
      }
    } catch (e) {
    }
    if (!supported) {
      try {
        var tmp = new theClass();
        supported = !isUndefined(tmp[property]);
      } catch (e) {
      }
    }
  }
  return supported;
}
function getLocation(checkForMock) {
  if (checkForMock && _enableMocks) {
    var mockLocation = getInst("__mockLocation");
    if (mockLocation) {
      return mockLocation;
    }
  }
  if (typeof location === strShimObject && location) {
    return location;
  }
  return getInst(strLocation);
}
function getConsole() {
  if (typeof console !== strShimUndefined) {
    return console;
  }
  return getInst(strConsole);
}
function hasJSON() {
  return Boolean(typeof JSON === strShimObject && JSON || getInst(strJSON) !== null);
}
function getJSON() {
  if (hasJSON()) {
    return JSON || getInst(strJSON);
  }
  return null;
}
function getCrypto() {
  return getInst(strCrypto);
}
function getMsCrypto() {
  return getInst(strMsCrypto);
}
function isReactNative() {
  var nav = getNavigator();
  if (nav && nav.product) {
    return nav.product === strReactNative;
  }
  return false;
}
function isIE() {
  var nav = getNavigator();
  if (nav && (nav[
    _DYN_USER_AGENT
    /* @min:%2euserAgent */
  ] !== _navUserAgentCheck || _isTrident === null)) {
    _navUserAgentCheck = nav[
      _DYN_USER_AGENT
      /* @min:%2euserAgent */
    ];
    var userAgent = (_navUserAgentCheck || STR_EMPTY)[
      _DYN_TO_LOWER_CASE
      /* @min:%2etoLowerCase */
    ]();
    _isTrident = strContains(userAgent, strMsie) || strContains(userAgent, strTrident);
  }
  return _isTrident;
}
function getIEVersion(userAgentStr) {
  if (userAgentStr === void 0) {
    userAgentStr = null;
  }
  if (!userAgentStr) {
    var navigator_1 = getNavigator() || {};
    userAgentStr = navigator_1 ? (navigator_1.userAgent || STR_EMPTY)[
      _DYN_TO_LOWER_CASE
      /* @min:%2etoLowerCase */
    ]() : STR_EMPTY;
  }
  var ua = (userAgentStr || STR_EMPTY)[
    _DYN_TO_LOWER_CASE
    /* @min:%2etoLowerCase */
  ]();
  if (strContains(ua, strMsie)) {
    var doc = getDocument2() || {};
    return mathMax(parseInt(ua[
      _DYN_SPLIT
      /* @min:%2esplit */
    ](strMsie)[1]), doc[strDocumentMode] || 0);
  } else if (strContains(ua, strTrident)) {
    var tridentVer = parseInt(ua[
      _DYN_SPLIT
      /* @min:%2esplit */
    ](strTrident)[1]);
    if (tridentVer) {
      return tridentVer + 4;
    }
  }
  return null;
}
function isBeaconsSupported(useCached) {
  if (_beaconsSupported === null || useCached === false) {
    _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);
  }
  return _beaconsSupported;
}
function isFetchSupported(withKeepAlive) {
  var isSupported = false;
  try {
    isSupported = !!getInst("fetch");
    var request = getInst("Request");
    if (isSupported && withKeepAlive && request) {
      isSupported = _hasProperty(request, "keepalive");
    }
  } catch (e) {
  }
  return isSupported;
}
function useXDomainRequest() {
  if (_useXDomainRequest === null) {
    _useXDomainRequest = typeof XDomainRequest !== strShimUndefined;
    if (_useXDomainRequest && isXhrSupported()) {
      _useXDomainRequest = _useXDomainRequest && !_hasProperty(getInst(strXMLHttpRequest), "withCredentials");
    }
  }
  return _useXDomainRequest;
}
function isXhrSupported() {
  var isSupported = false;
  try {
    var xmlHttpRequest = getInst(strXMLHttpRequest);
    isSupported = !!xmlHttpRequest;
  } catch (e) {
  }
  return isSupported;
}
function dispatchEvent(target, evnt) {
  if (target && target.dispatchEvent && evnt) {
    target.dispatchEvent(evnt);
    return true;
  }
  return false;
}
function createCustomDomEvent(eventName, details) {
  var event = null;
  var detail = {
    detail: details || null
  };
  if (isFunction3(CustomEvent)) {
    event = new CustomEvent(eventName, detail);
  } else {
    var doc = getDocument2();
    if (doc && doc.createEvent) {
      event = doc.createEvent("CustomEvent");
      event.initCustomEvent(eventName, true, true, detail);
    }
  }
  return event;
}
function sendCustomEvent(evtName, cfg, customDetails) {
  var global2 = getGlobal();
  if (global2 && global2.CustomEvent) {
    try {
      var details = {
        cfg: cfg || null,
        customDetails: customDetails || null
      };
      return dispatchEvent(global2, createCustomDomEvent(evtName, details));
    } catch (e) {
    }
  }
  return false;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/RandomHelper.js
var UInt32Mask = 4294967296;
var MaxUInt32 = 4294967295;
var SEED1 = 123456789;
var SEED2 = 987654321;
var _mwcSeeded = false;
var _mwcW = SEED1;
var _mwcZ = SEED2;
function _mwcSeed(seedValue) {
  if (seedValue < 0) {
    seedValue >>>= 0;
  }
  _mwcW = SEED1 + seedValue & MaxUInt32;
  _mwcZ = SEED2 - seedValue & MaxUInt32;
  _mwcSeeded = true;
}
function _autoSeedMwc() {
  try {
    var now = utcNow() & 2147483647;
    _mwcSeed((Math.random() * UInt32Mask ^ now) + now);
  } catch (e) {
  }
}
function randomValue(maxValue) {
  if (maxValue > 0) {
    return mathFloor(random32() / MaxUInt32 * (maxValue + 1)) >>> 0;
  }
  return 0;
}
function random32(signed) {
  var value = 0;
  var c = getCrypto() || getMsCrypto();
  if (c && c.getRandomValues) {
    value = c.getRandomValues(new Uint32Array(1))[0] & MaxUInt32;
  }
  if (value === 0 && isIE()) {
    if (!_mwcSeeded) {
      _autoSeedMwc();
    }
    value = mwcRandom32() & MaxUInt32;
  }
  if (value === 0) {
    value = mathFloor(UInt32Mask * Math.random() | 0);
  }
  if (!signed) {
    value >>>= 0;
  }
  return value;
}
function mwcRandom32(signed) {
  _mwcZ = 36969 * (_mwcZ & 65535) + (_mwcZ >> 16) & MaxUInt32;
  _mwcW = 18e3 * (_mwcW & 65535) + (_mwcW >> 16) & MaxUInt32;
  var value = (_mwcZ << 16) + (_mwcW & 65535) >>> 0 & MaxUInt32 | 0;
  if (!signed) {
    value >>>= 0;
  }
  return value;
}
function newId(maxLength) {
  if (maxLength === void 0) {
    maxLength = 22;
  }
  var base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var number = random32() >>> 0;
  var chars = 0;
  var result = STR_EMPTY;
  while (result[
    _DYN_LENGTH
    /* @min:%2elength */
  ] < maxLength) {
    chars++;
    result += base64chars.charAt(number & 63);
    number >>>= 6;
    if (chars === 5) {
      number = (random32() << 2 & 4294967295 | number & 3) >>> 0;
      chars = 0;
    }
  }
  return result;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/DataCacheHelper.js
var version = "3.3.6";
var instanceName = "." + newId(6);
var _dataUid = 0;
function _canAcceptData(target) {
  return target.nodeType === 1 || target.nodeType === 9 || !+target.nodeType;
}
function _getCache(data, target) {
  var theCache = target[data.id];
  if (!theCache) {
    theCache = {};
    try {
      if (_canAcceptData(target)) {
        objDefine(target, data.id, {
          e: false,
          v: theCache
        });
      }
    } catch (e) {
    }
  }
  return theCache;
}
function createUniqueNamespace(name, includeVersion) {
  if (includeVersion === void 0) {
    includeVersion = false;
  }
  return normalizeJsName(name + _dataUid++ + (includeVersion ? "." + version : STR_EMPTY) + instanceName);
}
function createElmNodeData(name) {
  var data = {
    id: createUniqueNamespace("_aiData-" + (name || STR_EMPTY) + "." + version),
    accept: function(target) {
      return _canAcceptData(target);
    },
    get: function(target, name2, defValue, addDefault) {
      var theCache = target[data.id];
      if (!theCache) {
        if (addDefault) {
          theCache = _getCache(data, target);
          theCache[normalizeJsName(name2)] = defValue;
        }
        return defValue;
      }
      return theCache[normalizeJsName(name2)];
    },
    kill: function(target, name2) {
      if (target && target[name2]) {
        try {
          delete target[name2];
        } catch (e) {
        }
      }
    }
  };
  return data;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/Config/ConfigDefaults.js
function _isConfigDefaults(value) {
  return value && isObject(value) && (value.isVal || value.fb || objHasOwn(value, "v") || objHasOwn(value, "mrg") || objHasOwn(value, "ref") || value.set);
}
function _getDefault(dynamicHandler, theConfig, cfgDefaults) {
  var defValue;
  var isDefaultValid = cfgDefaults.dfVal || isDefined;
  if (theConfig && cfgDefaults.fb) {
    var fallbacks = cfgDefaults.fb;
    if (!isArray3(fallbacks)) {
      fallbacks = [fallbacks];
    }
    for (var lp = 0; lp < fallbacks[
      _DYN_LENGTH
      /* @min:%2elength */
    ]; lp++) {
      var fallback = fallbacks[lp];
      var fbValue = theConfig[fallback];
      if (isDefaultValid(fbValue)) {
        defValue = fbValue;
      } else if (dynamicHandler) {
        fbValue = dynamicHandler.cfg[fallback];
        if (isDefaultValid(fbValue)) {
          defValue = fbValue;
        }
        dynamicHandler.set(dynamicHandler.cfg, asString(fallback), fbValue);
      }
      if (isDefaultValid(defValue)) {
        break;
      }
    }
  }
  if (!isDefaultValid(defValue) && isDefaultValid(cfgDefaults.v)) {
    defValue = cfgDefaults.v;
  }
  return defValue;
}
function _resolveDefaultValue(dynamicHandler, theConfig, cfgDefaults) {
  var theValue = cfgDefaults;
  if (cfgDefaults && _isConfigDefaults(cfgDefaults)) {
    theValue = _getDefault(dynamicHandler, theConfig, cfgDefaults);
  }
  if (theValue) {
    if (_isConfigDefaults(theValue)) {
      theValue = _resolveDefaultValue(dynamicHandler, theConfig, theValue);
    }
    var newValue_1;
    if (isArray3(theValue)) {
      newValue_1 = [];
      newValue_1[
        _DYN_LENGTH
        /* @min:%2elength */
      ] = theValue[
        _DYN_LENGTH
        /* @min:%2elength */
      ];
    } else if (isPlainObject(theValue)) {
      newValue_1 = {};
    }
    if (newValue_1) {
      objForEachKey(theValue, function(key, value) {
        if (value && _isConfigDefaults(value)) {
          value = _resolveDefaultValue(dynamicHandler, theConfig, value);
        }
        newValue_1[key] = value;
      });
      theValue = newValue_1;
    }
  }
  return theValue;
}
function _applyDefaultValue(dynamicHandler, theConfig, name, defaultValue) {
  var isValid;
  var setFn;
  var defValue;
  var cfgDefaults = defaultValue;
  var mergeDf;
  var reference;
  var readOnly;
  var blkDynamicValue;
  if (_isConfigDefaults(cfgDefaults)) {
    isValid = cfgDefaults.isVal;
    setFn = cfgDefaults.set;
    readOnly = cfgDefaults.rdOnly;
    blkDynamicValue = cfgDefaults.blkVal;
    mergeDf = cfgDefaults.mrg;
    reference = cfgDefaults.ref;
    if (!reference && isUndefined(reference)) {
      reference = !!mergeDf;
    }
    defValue = _getDefault(dynamicHandler, theConfig, cfgDefaults);
  } else {
    defValue = defaultValue;
  }
  if (blkDynamicValue) {
    dynamicHandler.blkVal(theConfig, name);
  }
  var theValue;
  var usingDefault = true;
  var cfgValue = theConfig[name];
  if (cfgValue || !isNullOrUndefined(cfgValue)) {
    theValue = cfgValue;
    usingDefault = false;
    if (isValid && theValue !== defValue && !isValid(theValue)) {
      theValue = defValue;
      usingDefault = true;
    }
    if (setFn) {
      theValue = setFn(theValue, defValue, theConfig);
      usingDefault = theValue === defValue;
    }
  }
  if (!usingDefault) {
    if (isPlainObject(theValue) || isArray3(defValue)) {
      if (mergeDf && defValue && (isPlainObject(defValue) || isArray3(defValue))) {
        objForEachKey(defValue, function(dfName, dfValue) {
          _applyDefaultValue(dynamicHandler, theValue, dfName, dfValue);
        });
      }
    }
  } else if (defValue) {
    theValue = _resolveDefaultValue(dynamicHandler, theConfig, defValue);
  } else {
    theValue = defValue;
  }
  dynamicHandler.set(theConfig, name, theValue);
  if (reference) {
    dynamicHandler.ref(theConfig, name);
  }
  if (readOnly) {
    dynamicHandler.rdOnly(theConfig, name);
  }
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/Config/DynamicSupport.js
var CFG_HANDLER_LINK = symbolFor("[[ai_dynCfg_1]]");
var BLOCK_DYNAMIC = symbolFor("[[ai_blkDynCfg_1]]");
var FORCE_DYNAMIC = symbolFor("[[ai_frcDynCfg_1]]");
function _cfgDeepCopy(source) {
  if (source) {
    var target_1;
    if (isArray3(source)) {
      target_1 = [];
      target_1[
        _DYN_LENGTH
        /* @min:%2elength */
      ] = source[
        _DYN_LENGTH
        /* @min:%2elength */
      ];
    } else if (isPlainObject(source)) {
      target_1 = {};
    }
    if (target_1) {
      objForEachKey(source, function(key, value) {
        target_1[key] = _cfgDeepCopy(value);
      });
      return target_1;
    }
  }
  return source;
}
function getDynamicConfigHandler(value) {
  if (value) {
    var handler = value[CFG_HANDLER_LINK] || value;
    if (handler.cfg && (handler.cfg === value || handler.cfg[CFG_HANDLER_LINK] === handler)) {
      return handler;
    }
  }
  return null;
}
function blockDynamicConversion(value) {
  if (value && (isPlainObject(value) || isArray3(value))) {
    try {
      value[BLOCK_DYNAMIC] = true;
    } catch (e) {
    }
  }
  return value;
}
function _canMakeDynamic(getFunc, state, value) {
  var result = false;
  if (value && !getFunc[state.blkVal]) {
    result = value[FORCE_DYNAMIC];
    if (!result && !value[BLOCK_DYNAMIC]) {
      result = isPlainObject(value) || isArray3(value);
    }
  }
  return result;
}
function throwInvalidAccess(message) {
  throwTypeError("InvalidAccess:" + message);
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/Config/DynamicProperty.js
var arrayMethodsToPatch = ["push", "pop", "shift", "unshift", "splice"];
var _throwDynamicError = function(logger, name, desc, e) {
  logger && logger[
    _DYN_THROW_INTERNAL
    /* @min:%2ethrowInternal */
  ](3, 108, "".concat(desc, " [").concat(name, "] failed - ") + dumpObj(e));
};
function _patchArray(state, target, name) {
  if (isArray3(target)) {
    arrForEach(arrayMethodsToPatch, function(method) {
      var orgMethod = target[method];
      target[method] = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var result = orgMethod[
          _DYN_APPLY
          /* @min:%2eapply */
        ](this, args);
        _makeDynamicObject(state, target, name, "Patching");
        return result;
      };
    });
  }
}
function _getOwnPropGetter(target, name) {
  var propDesc = objGetOwnPropertyDescriptor(target, name);
  return propDesc && propDesc.get;
}
function _createDynamicProperty(state, theConfig, name, value) {
  var detail = {
    n: name,
    h: [],
    trk: function(handler) {
      if (handler && handler.fn) {
        if (arrIndexOf(detail.h, handler) === -1) {
          detail.h[
            _DYN_PUSH
            /* @min:%2epush */
          ](handler);
        }
        state.trk(handler, detail);
      }
    },
    clr: function(handler) {
      var idx = arrIndexOf(detail.h, handler);
      if (idx !== -1) {
        detail.h[
          _DYN_SPLICE
          /* @min:%2esplice */
        ](idx, 1);
      }
    }
  };
  var checkDynamic = true;
  var isObjectOrArray = false;
  function _getProperty() {
    if (checkDynamic) {
      isObjectOrArray = isObjectOrArray || _canMakeDynamic(_getProperty, state, value);
      if (value && !value[CFG_HANDLER_LINK] && isObjectOrArray) {
        value = _makeDynamicObject(state, value, name, "Converting");
      }
      checkDynamic = false;
    }
    var activeHandler = state.act;
    if (activeHandler) {
      detail.trk(activeHandler);
    }
    return value;
  }
  _getProperty[state.prop] = {
    chng: function() {
      state.add(detail);
    }
  };
  function _setProperty(newValue) {
    if (value !== newValue) {
      if (!!_getProperty[state.ro] && !state.upd) {
        throwInvalidAccess("[" + name + "] is read-only:" + dumpObj(theConfig));
      }
      if (checkDynamic) {
        isObjectOrArray = isObjectOrArray || _canMakeDynamic(_getProperty, state, value);
        checkDynamic = false;
      }
      var isReferenced = isObjectOrArray && _getProperty[state.rf];
      if (isObjectOrArray) {
        if (isReferenced) {
          objForEachKey(value, function(key) {
            value[key] = newValue ? newValue[key] : UNDEFINED_VALUE;
          });
          try {
            objForEachKey(newValue, function(key, theValue) {
              _setDynamicProperty(state, value, key, theValue);
            });
            newValue = value;
          } catch (e) {
            _throwDynamicError((state.hdlr || {})[
              _DYN_LOGGER
              /* @min:%2elogger */
            ], name, "Assigning", e);
            isObjectOrArray = false;
          }
        } else if (value && value[CFG_HANDLER_LINK]) {
          objForEachKey(value, function(key) {
            var getter = _getOwnPropGetter(value, key);
            if (getter) {
              var valueState = getter[state.prop];
              valueState && valueState.chng();
            }
          });
        }
      }
      if (newValue !== value) {
        var newIsObjectOrArray = newValue && _canMakeDynamic(_getProperty, state, newValue);
        if (!isReferenced && newIsObjectOrArray) {
          newValue = _makeDynamicObject(state, newValue, name, "Converting");
        }
        value = newValue;
        isObjectOrArray = newIsObjectOrArray;
      }
      state.add(detail);
    }
  }
  objDefine(theConfig, detail.n, {
    g: _getProperty,
    s: _setProperty
  });
}
function _setDynamicProperty(state, target, name, value) {
  if (target) {
    var getter = _getOwnPropGetter(target, name);
    var isDynamic = getter && !!getter[state.prop];
    if (!isDynamic) {
      _createDynamicProperty(state, target, name, value);
    } else {
      target[name] = value;
    }
  }
  return target;
}
function _setDynamicPropertyState(state, target, name, flags) {
  if (target) {
    var getter = _getOwnPropGetter(target, name);
    var isDynamic = getter && !!getter[state.prop];
    var inPlace = flags && flags[
      0
      /* _eSetDynamicPropertyFlags.inPlace */
    ];
    var rdOnly = flags && flags[
      1
      /* _eSetDynamicPropertyFlags.readOnly */
    ];
    var blkProp = flags && flags[
      2
      /* _eSetDynamicPropertyFlags.blockDynamicProperty */
    ];
    if (!isDynamic) {
      if (blkProp) {
        try {
          blockDynamicConversion(target);
        } catch (e) {
          _throwDynamicError((state.hdlr || {})[
            _DYN_LOGGER
            /* @min:%2elogger */
          ], name, "Blocking", e);
        }
      }
      try {
        _setDynamicProperty(state, target, name, target[name]);
        getter = _getOwnPropGetter(target, name);
      } catch (e) {
        _throwDynamicError((state.hdlr || {})[
          _DYN_LOGGER
          /* @min:%2elogger */
        ], name, "State", e);
      }
    }
    if (inPlace) {
      getter[state.rf] = inPlace;
    }
    if (rdOnly) {
      getter[state.ro] = rdOnly;
    }
    if (blkProp) {
      getter[state.blkVal] = true;
    }
  }
  return target;
}
function _makeDynamicObject(state, target, name, desc) {
  try {
    objForEachKey(target, function(key, value) {
      _setDynamicProperty(state, target, key, value);
    });
    if (!target[CFG_HANDLER_LINK]) {
      objDefineProp(target, CFG_HANDLER_LINK, {
        get: function() {
          return state.hdlr;
        }
      });
      _patchArray(state, target, name);
    }
  } catch (e) {
    _throwDynamicError((state.hdlr || {})[
      _DYN_LOGGER
      /* @min:%2elogger */
    ], name, desc, e);
  }
  return target;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/Config/DynamicState.js
var symPrefix = "[[ai_";
var symPostfix = "]]";
function _createState(cfgHandler) {
  var dynamicPropertySymbol = newSymbol(symPrefix + "get" + cfgHandler.uid + symPostfix);
  var dynamicPropertyReadOnly = newSymbol(symPrefix + "ro" + cfgHandler.uid + symPostfix);
  var dynamicPropertyReferenced = newSymbol(symPrefix + "rf" + cfgHandler.uid + symPostfix);
  var dynamicPropertyBlockValue = newSymbol(symPrefix + "blkVal" + cfgHandler.uid + symPostfix);
  var dynamicPropertyDetail = newSymbol(symPrefix + "dtl" + cfgHandler.uid + symPostfix);
  var _waitingHandlers = null;
  var _watcherTimer = null;
  var theState;
  function _useHandler(activeHandler, callback) {
    var prevWatcher = theState.act;
    try {
      theState.act = activeHandler;
      if (activeHandler && activeHandler[dynamicPropertyDetail]) {
        arrForEach(activeHandler[dynamicPropertyDetail], function(detail) {
          detail.clr(activeHandler);
        });
        activeHandler[dynamicPropertyDetail] = [];
      }
      callback({
        cfg: cfgHandler.cfg,
        set: cfgHandler.set.bind(cfgHandler),
        setDf: cfgHandler.setDf.bind(cfgHandler),
        ref: cfgHandler.ref.bind(cfgHandler),
        rdOnly: cfgHandler.rdOnly.bind(cfgHandler)
      });
    } catch (e) {
      var logger = cfgHandler[
        _DYN_LOGGER
        /* @min:%2elogger */
      ];
      if (logger) {
        logger[
          _DYN_THROW_INTERNAL
          /* @min:%2ethrowInternal */
        ](1, 107, dumpObj(e));
      }
      throw e;
    } finally {
      theState.act = prevWatcher || null;
    }
  }
  function _notifyWatchers() {
    if (_waitingHandlers) {
      var notifyHandlers = _waitingHandlers;
      _waitingHandlers = null;
      _watcherTimer && _watcherTimer[
        _DYN_CANCEL
        /* @min:%2ecancel */
      ]();
      _watcherTimer = null;
      var watcherFailures_1 = [];
      arrForEach(notifyHandlers, function(handler) {
        if (handler) {
          if (handler[dynamicPropertyDetail]) {
            arrForEach(handler[dynamicPropertyDetail], function(detail) {
              detail.clr(handler);
            });
            handler[dynamicPropertyDetail] = null;
          }
          if (handler.fn) {
            try {
              _useHandler(handler, handler.fn);
            } catch (e) {
              watcherFailures_1[
                _DYN_PUSH
                /* @min:%2epush */
              ](e);
            }
          }
        }
      });
      if (_waitingHandlers) {
        try {
          _notifyWatchers();
        } catch (e) {
          watcherFailures_1[
            _DYN_PUSH
            /* @min:%2epush */
          ](e);
        }
      }
      if (watcherFailures_1[
        _DYN_LENGTH
        /* @min:%2elength */
      ] > 0) {
        throwAggregationError("Watcher error(s): ", watcherFailures_1);
      }
    }
  }
  function _addWatcher(detail) {
    if (detail && detail.h[
      _DYN_LENGTH
      /* @min:%2elength */
    ] > 0) {
      if (!_waitingHandlers) {
        _waitingHandlers = [];
      }
      if (!_watcherTimer) {
        _watcherTimer = scheduleTimeout(function() {
          _watcherTimer = null;
          _notifyWatchers();
        }, 0);
      }
      for (var idx = 0; idx < detail.h[
        _DYN_LENGTH
        /* @min:%2elength */
      ]; idx++) {
        var handler = detail.h[idx];
        if (handler && arrIndexOf(_waitingHandlers, handler) === -1) {
          _waitingHandlers[
            _DYN_PUSH
            /* @min:%2epush */
          ](handler);
        }
      }
    }
  }
  function _trackHandler(handler, detail) {
    if (handler) {
      var details = handler[dynamicPropertyDetail] = handler[dynamicPropertyDetail] || [];
      if (arrIndexOf(details, detail) === -1) {
        details[
          _DYN_PUSH
          /* @min:%2epush */
        ](detail);
      }
    }
  }
  theState = {
    prop: dynamicPropertySymbol,
    ro: dynamicPropertyReadOnly,
    rf: dynamicPropertyReferenced,
    blkVal: dynamicPropertyBlockValue,
    hdlr: cfgHandler,
    add: _addWatcher,
    notify: _notifyWatchers,
    use: _useHandler,
    trk: _trackHandler
  };
  return theState;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/Config/DynamicConfig.js
function _createAndUseHandler(state, configHandler) {
  var handler = {
    fn: configHandler,
    rm: function() {
      handler.fn = null;
      state = null;
      configHandler = null;
    }
  };
  objDefine(handler, "toJSON", {
    v: function() {
      return "WatcherHandler" + (handler.fn ? "" : "[X]");
    }
  });
  state.use(handler, configHandler);
  return handler;
}
function _createDynamicHandler(logger, target, inPlace) {
  var dynamicHandler = getDynamicConfigHandler(target);
  if (dynamicHandler) {
    return dynamicHandler;
  }
  var uid = createUniqueNamespace("dyncfg", true);
  var newTarget = target && inPlace !== false ? target : _cfgDeepCopy(target);
  var theState;
  function _notifyWatchers() {
    theState.notify();
  }
  function _setValue(target2, name, value) {
    try {
      target2 = _setDynamicProperty(theState, target2, name, value);
    } catch (e) {
      _throwDynamicError(logger, name, "Setting value", e);
    }
    return target2[name];
  }
  function _watch(configHandler) {
    return _createAndUseHandler(theState, configHandler);
  }
  function _block(configHandler, allowUpdate) {
    theState.use(null, function(details) {
      var prevUpd = theState.upd;
      try {
        if (!isUndefined(allowUpdate)) {
          theState.upd = allowUpdate;
        }
        configHandler(details);
      } finally {
        theState.upd = prevUpd;
      }
    });
  }
  function _ref(target2, name) {
    var _a12;
    return _setDynamicPropertyState(theState, target2, name, (_a12 = {}, _a12[
      0
      /* _eSetDynamicPropertyFlags.inPlace */
    ] = true, _a12))[name];
  }
  function _rdOnly(target2, name) {
    var _a12;
    return _setDynamicPropertyState(theState, target2, name, (_a12 = {}, _a12[
      1
      /* _eSetDynamicPropertyFlags.readOnly */
    ] = true, _a12))[name];
  }
  function _blkPropValue(target2, name) {
    var _a12;
    return _setDynamicPropertyState(theState, target2, name, (_a12 = {}, _a12[
      2
      /* _eSetDynamicPropertyFlags.blockDynamicProperty */
    ] = true, _a12))[name];
  }
  function _applyDefaults(theConfig, defaultValues5) {
    if (defaultValues5) {
      objForEachKey(defaultValues5, function(name, value) {
        _applyDefaultValue(cfgHandler, theConfig, name, value);
      });
    }
    return theConfig;
  }
  var cfgHandler = {
    uid: null,
    cfg: newTarget,
    logger,
    notify: _notifyWatchers,
    set: _setValue,
    setDf: _applyDefaults,
    watch: _watch,
    ref: _ref,
    rdOnly: _rdOnly,
    blkVal: _blkPropValue,
    _block
  };
  objDefine(cfgHandler, "uid", {
    c: false,
    e: false,
    w: false,
    v: uid
  });
  theState = _createState(cfgHandler);
  _makeDynamicObject(theState, newTarget, "config", "Creating");
  return cfgHandler;
}
function _logInvalidAccess(logger, message) {
  if (logger) {
    logger[
      _DYN_WARN_TO_CONSOLE
      /* @min:%2ewarnToConsole */
    ](message);
    logger[
      _DYN_THROW_INTERNAL
      /* @min:%2ethrowInternal */
    ](2, 108, message);
  } else {
    throwInvalidAccess(message);
  }
}
function createDynamicConfig(config2, defaultConfig2, logger, inPlace) {
  var dynamicHandler = _createDynamicHandler(logger, config2 || {}, inPlace);
  if (defaultConfig2) {
    dynamicHandler.setDf(dynamicHandler.cfg, defaultConfig2);
  }
  return dynamicHandler;
}
function onConfigChange(config2, configHandler, logger) {
  var handler = config2[CFG_HANDLER_LINK] || config2;
  if (handler.cfg && (handler.cfg === config2 || handler.cfg[CFG_HANDLER_LINK] === handler)) {
    return handler[
      _DYN_WATCH
      /* @min:%2ewatch */
    ](configHandler);
  }
  _logInvalidAccess(logger, STR_NOT_DYNAMIC_ERROR + dumpObj(config2));
  return createDynamicConfig(config2, null, logger)[
    _DYN_WATCH
    /* @min:%2ewatch */
  ](configHandler);
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/AsyncUtils.js
function runTargetUnload(target, isAsync) {
  if (target && target[
    _DYN_UNLOAD
    /* @min:%2eunload */
  ]) {
    return target[
      _DYN_UNLOAD
      /* @min:%2eunload */
    ](isAsync);
  }
}
function doUnloadAll(targets, isAsync, done) {
  var result;
  if (!done) {
    result = createPromise(function(resolved) {
      done = resolved;
    });
  }
  if (targets && getLength(targets) > 0) {
    doAwaitResponse(runTargetUnload(targets[0], isAsync), function() {
      doUnloadAll(arrSlice(targets, 1), isAsync, done);
    });
  } else {
    done();
  }
  return result;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/Constants.js
var ChannelControllerPriority = 500;
var DisabledPropertyName = "Microsoft_ApplicationInsights_BypassAjaxInstrumentation";

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/Config/ConfigDefaultHelpers.js
function _stringToBoolOrDefault(theValue, defaultValue, theConfig) {
  if (!theValue && isNullOrUndefined(theValue)) {
    return defaultValue;
  }
  if (isBoolean2(theValue)) {
    return theValue;
  }
  return asString(theValue)[
    _DYN_TO_LOWER_CASE
    /* @min:%2etoLowerCase */
  ]() === "true";
}
function cfgDfMerge(defaultValue) {
  return {
    mrg: true,
    v: defaultValue
  };
}
function cfgDfSet(setter, defaultValue) {
  return {
    set: setter,
    v: defaultValue
  };
}
function cfgDfValidate(validator, defaultValue, fallBackName) {
  return {
    fb: fallBackName,
    isVal: validator,
    v: defaultValue
  };
}
function cfgDfBoolean(defaultValue, fallBackName) {
  return {
    fb: fallBackName,
    set: _stringToBoolOrDefault,
    v: !!defaultValue
  };
}
function cfgDfString(defaultValue) {
  return {
    isVal: isString,
    v: asString(defaultValue || STR_EMPTY)
  };
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/DbgExtensionUtils.js
var listenerFuncs = [STR_EVENTS_SENT, STR_EVENTS_DISCARDED, STR_EVENTS_SEND_REQUEST, STR_PERF_EVENT];
var _aiNamespace = null;
var _debugListener;
function _listenerProxyFunc(name, config2) {
  return function() {
    var args = arguments;
    var dbgExt = getDebugExt(config2);
    if (dbgExt) {
      var listener = dbgExt.listener;
      if (listener && listener[name]) {
        listener[name][
          _DYN_APPLY
          /* @min:%2eapply */
        ](listener, args);
      }
    }
  };
}
function _getExtensionNamespace() {
  var target = getInst("Microsoft");
  if (target) {
    _aiNamespace = target["ApplicationInsights"];
  }
  return _aiNamespace;
}
function getDebugExt(config2) {
  var ns = _aiNamespace;
  if (!ns && config2.disableDbgExt !== true) {
    ns = _aiNamespace || _getExtensionNamespace();
  }
  return ns ? ns["ChromeDbgExt"] : null;
}
function getDebugListener(config2) {
  if (!_debugListener) {
    _debugListener = {};
    for (var lp = 0; lp < listenerFuncs[
      _DYN_LENGTH
      /* @min:%2elength */
    ]; lp++) {
      _debugListener[listenerFuncs[lp]] = _listenerProxyFunc(listenerFuncs[lp], config2);
    }
  }
  return _debugListener;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/DiagnosticLogger.js
var _a2;
var STR_WARN_TO_CONSOLE = "warnToConsole";
var AiNonUserActionablePrefix = "AI (Internal): ";
var AiUserActionablePrefix = "AI: ";
var AIInternalMessagePrefix = "AITR_";
var defaultValues = {
  loggingLevelConsole: 0,
  loggingLevelTelemetry: 1,
  maxMessageLimit: 25,
  enableDebug: false
};
var _logFuncs = (_a2 = {}, _a2[
  0
  /* eLoggingSeverity.DISABLED */
] = null, _a2[
  1
  /* eLoggingSeverity.CRITICAL */
] = "errorToConsole", _a2[
  2
  /* eLoggingSeverity.WARNING */
] = STR_WARN_TO_CONSOLE, _a2[
  3
  /* eLoggingSeverity.DEBUG */
] = "debugToConsole", _a2);
function _sanitizeDiagnosticText(text) {
  if (text) {
    return '"' + text[
      _DYN_REPLACE
      /* @min:%2ereplace */
    ](/\"/g, STR_EMPTY) + '"';
  }
  return STR_EMPTY;
}
function _logToConsole(func, message) {
  var theConsole = getConsole();
  if (!!theConsole) {
    var logFunc = "log";
    if (theConsole[func]) {
      logFunc = func;
    }
    if (isFunction3(theConsole[logFunc])) {
      theConsole[logFunc](message);
    }
  }
}
var _InternalLogMessage = (
  /** @class */
  function() {
    function _InternalLogMessage2(msgId, msg, isUserAct, properties) {
      if (isUserAct === void 0) {
        isUserAct = false;
      }
      var _self = this;
      _self[
        _DYN_MESSAGE_ID
        /* @min:%2emessageId */
      ] = msgId;
      _self[
        _DYN_MESSAGE
        /* @min:%2emessage */
      ] = (isUserAct ? AiUserActionablePrefix : AiNonUserActionablePrefix) + msgId;
      var strProps = STR_EMPTY;
      if (hasJSON()) {
        strProps = getJSON().stringify(properties);
      }
      var diagnosticText = (msg ? " message:" + _sanitizeDiagnosticText(msg) : STR_EMPTY) + (properties ? " props:" + _sanitizeDiagnosticText(strProps) : STR_EMPTY);
      _self[
        _DYN_MESSAGE
        /* @min:%2emessage */
      ] += diagnosticText;
    }
    _InternalLogMessage2.dataType = "MessageData";
    return _InternalLogMessage2;
  }()
);
function safeGetLogger(core, config2) {
  return (core || {})[
    _DYN_LOGGER
    /* @min:%2elogger */
  ] || new DiagnosticLogger(config2);
}
var DiagnosticLogger = (
  /** @class */
  function() {
    function DiagnosticLogger2(config2) {
      this.identifier = "DiagnosticLogger";
      this.queue = [];
      var _messageCount = 0;
      var _messageLogged = {};
      var _loggingLevelConsole;
      var _loggingLevelTelemetry;
      var _maxInternalMessageLimit;
      var _enableDebug;
      var _unloadHandler;
      dynamicProto(DiagnosticLogger2, this, function(_self) {
        _unloadHandler = _setDefaultsFromConfig(config2 || {});
        _self.consoleLoggingLevel = function() {
          return _loggingLevelConsole;
        };
        _self[
          _DYN_THROW_INTERNAL
          /* @min:%2ethrowInternal */
        ] = function(severity, msgId, msg, properties, isUserAct) {
          if (isUserAct === void 0) {
            isUserAct = false;
          }
          var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);
          if (_enableDebug) {
            throw dumpObj(message);
          } else {
            var logFunc = _logFuncs[severity] || STR_WARN_TO_CONSOLE;
            if (!isUndefined(message[
              _DYN_MESSAGE
              /* @min:%2emessage */
            ])) {
              if (isUserAct) {
                var messageKey = +message[
                  _DYN_MESSAGE_ID
                  /* @min:%2emessageId */
                ];
                if (!_messageLogged[messageKey] && _loggingLevelConsole >= severity) {
                  _self[logFunc](message[
                    _DYN_MESSAGE
                    /* @min:%2emessage */
                  ]);
                  _messageLogged[messageKey] = true;
                }
              } else {
                if (_loggingLevelConsole >= severity) {
                  _self[logFunc](message[
                    _DYN_MESSAGE
                    /* @min:%2emessage */
                  ]);
                }
              }
              _logInternalMessage2(severity, message);
            } else {
              _debugExtMsg("throw" + (severity === 1 ? "Critical" : "Warning"), message);
            }
          }
        };
        _self.debugToConsole = function(message) {
          _logToConsole("debug", message);
          _debugExtMsg("warning", message);
        };
        _self[
          _DYN_WARN_TO_CONSOLE
          /* @min:%2ewarnToConsole */
        ] = function(message) {
          _logToConsole("warn", message);
          _debugExtMsg("warning", message);
        };
        _self.errorToConsole = function(message) {
          _logToConsole("error", message);
          _debugExtMsg("error", message);
        };
        _self.resetInternalMessageCount = function() {
          _messageCount = 0;
          _messageLogged = {};
        };
        _self.logInternalMessage = _logInternalMessage2;
        _self[
          _DYN_UNLOAD
          /* @min:%2eunload */
        ] = function(isAsync) {
          _unloadHandler && _unloadHandler.rm();
          _unloadHandler = null;
        };
        function _logInternalMessage2(severity, message) {
          if (_areInternalMessagesThrottled()) {
            return;
          }
          var logMessage = true;
          var messageKey = AIInternalMessagePrefix + message[
            _DYN_MESSAGE_ID
            /* @min:%2emessageId */
          ];
          if (_messageLogged[messageKey]) {
            logMessage = false;
          } else {
            _messageLogged[messageKey] = true;
          }
          if (logMessage) {
            if (severity <= _loggingLevelTelemetry) {
              _self.queue[
                _DYN_PUSH
                /* @min:%2epush */
              ](message);
              _messageCount++;
              _debugExtMsg(severity === 1 ? "error" : "warn", message);
            }
            if (_messageCount === _maxInternalMessageLimit) {
              var throttleLimitMessage = "Internal events throttle limit per PageView reached for this app.";
              var throttleMessage = new _InternalLogMessage(23, throttleLimitMessage, false);
              _self.queue[
                _DYN_PUSH
                /* @min:%2epush */
              ](throttleMessage);
              if (severity === 1) {
                _self.errorToConsole(throttleLimitMessage);
              } else {
                _self[
                  _DYN_WARN_TO_CONSOLE
                  /* @min:%2ewarnToConsole */
                ](throttleLimitMessage);
              }
            }
          }
        }
        function _setDefaultsFromConfig(config3) {
          return onConfigChange(createDynamicConfig(config3, defaultValues, _self).cfg, function(details) {
            var config4 = details.cfg;
            _loggingLevelConsole = config4[
              _DYN_LOGGING_LEVEL_CONSOL4
              /* @min:%2eloggingLevelConsole */
            ];
            _loggingLevelTelemetry = config4.loggingLevelTelemetry;
            _maxInternalMessageLimit = config4.maxMessageLimit;
            _enableDebug = config4.enableDebug;
          });
        }
        function _areInternalMessagesThrottled() {
          return _messageCount >= _maxInternalMessageLimit;
        }
        function _debugExtMsg(name, data) {
          var dbgExt = getDebugExt(config2 || {});
          if (dbgExt && dbgExt[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ]) {
            dbgExt[
              _DYN_DIAG_LOG
              /* @min:%2ediagLog */
            ](name, data);
          }
        }
      });
    }
    DiagnosticLogger2.__ieDyn = 1;
    return DiagnosticLogger2;
  }()
);
function _getLogger(logger) {
  return logger || new DiagnosticLogger();
}
function _throwInternal(logger, severity, msgId, msg, properties, isUserAct) {
  if (isUserAct === void 0) {
    isUserAct = false;
  }
  _getLogger(logger)[
    _DYN_THROW_INTERNAL
    /* @min:%2ethrowInternal */
  ](severity, msgId, msg, properties, isUserAct);
}
function _warnToConsole(logger, message) {
  _getLogger(logger)[
    _DYN_WARN_TO_CONSOLE
    /* @min:%2ewarnToConsole */
  ](message);
}
function _logInternalMessage(logger, severity, message) {
  _getLogger(logger).logInternalMessage(severity, message);
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/CookieMgr.js
var _a3;
var _b;
var strToGMTString = "toGMTString";
var strToUTCString = "toUTCString";
var strCookie = "cookie";
var strExpires = "expires";
var strIsCookieUseDisabled = "isCookieUseDisabled";
var strDisableCookiesUsage = "disableCookiesUsage";
var strConfigCookieMgr = "_ckMgr";
var _supportsCookies = null;
var _allowUaSameSite = null;
var _parsedCookieValue = null;
var _doc;
var _cookieCache = {};
var _globalCookieConfig = {};
var rootDefaultConfig = (_a3 = {
  cookieCfg: cfgDfMerge((_b = {}, _b[STR_DOMAIN] = {
    fb: "cookieDomain",
    dfVal: isNotNullOrUndefined
  }, _b.path = {
    fb: "cookiePath",
    dfVal: isNotNullOrUndefined
  }, _b.enabled = UNDEFINED_VALUE, _b.ignoreCookies = UNDEFINED_VALUE, _b.blockedCookies = UNDEFINED_VALUE, _b)),
  cookieDomain: UNDEFINED_VALUE,
  cookiePath: UNDEFINED_VALUE
}, _a3[strDisableCookiesUsage] = UNDEFINED_VALUE, _a3);
function _getDoc() {
  !_doc && (_doc = getLazy(function() {
    return getDocument2();
  }));
}
function _gblCookieMgr(config2, logger) {
  var inst = createCookieMgr[strConfigCookieMgr] || _globalCookieConfig[strConfigCookieMgr];
  if (!inst) {
    inst = createCookieMgr[strConfigCookieMgr] = createCookieMgr(config2, logger);
    _globalCookieConfig[strConfigCookieMgr] = inst;
  }
  return inst;
}
function _isMgrEnabled(cookieMgr) {
  if (cookieMgr) {
    return cookieMgr.isEnabled();
  }
  return true;
}
function _isIgnoredCookie(cookieMgrCfg, name) {
  if (name && cookieMgrCfg && isArray3(cookieMgrCfg.ignoreCookies)) {
    return arrIndexOf(cookieMgrCfg.ignoreCookies, name) !== -1;
  }
  return false;
}
function _isBlockedCookie(cookieMgrCfg, name) {
  if (name && cookieMgrCfg && isArray3(cookieMgrCfg.blockedCookies)) {
    if (arrIndexOf(cookieMgrCfg.blockedCookies, name) !== -1) {
      return true;
    }
  }
  return _isIgnoredCookie(cookieMgrCfg, name);
}
function _isCfgEnabled(rootConfig, cookieMgrConfig) {
  var isCfgEnabled = cookieMgrConfig[
    _DYN_ENABLED
    /* @min:%2eenabled */
  ];
  if (isNullOrUndefined(isCfgEnabled)) {
    var cookieEnabled = void 0;
    if (!isUndefined(rootConfig[strIsCookieUseDisabled])) {
      cookieEnabled = !rootConfig[strIsCookieUseDisabled];
    }
    if (!isUndefined(rootConfig[strDisableCookiesUsage])) {
      cookieEnabled = !rootConfig[strDisableCookiesUsage];
    }
    isCfgEnabled = cookieEnabled;
  }
  return isCfgEnabled;
}
function safeGetCookieMgr(core, config2) {
  var cookieMgr;
  if (core) {
    cookieMgr = core.getCookieMgr();
  } else if (config2) {
    var cookieCfg = config2.cookieCfg;
    if (cookieCfg && cookieCfg[strConfigCookieMgr]) {
      cookieMgr = cookieCfg[strConfigCookieMgr];
    } else {
      cookieMgr = createCookieMgr(config2);
    }
  }
  if (!cookieMgr) {
    cookieMgr = _gblCookieMgr(config2, (core || {})[
      _DYN_LOGGER
      /* @min:%2elogger */
    ]);
  }
  return cookieMgr;
}
function createCookieMgr(rootConfig, logger) {
  var cookieMgrConfig;
  var _path;
  var _domain;
  var unloadHandler;
  var _enabled;
  var _getCookieFn;
  var _setCookieFn;
  var _delCookieFn;
  rootConfig = createDynamicConfig(rootConfig || _globalCookieConfig, null, logger).cfg;
  unloadHandler = onConfigChange(rootConfig, function(details) {
    details.setDf(details.cfg, rootDefaultConfig);
    cookieMgrConfig = details.ref(details.cfg, "cookieCfg");
    _path = cookieMgrConfig[
      STR_PATH
      /* @min:%2epath */
    ] || "/";
    _domain = cookieMgrConfig[
      STR_DOMAIN
      /* @min:%2edomain */
    ];
    _enabled = _isCfgEnabled(rootConfig, cookieMgrConfig) !== false;
    _getCookieFn = cookieMgrConfig.getCookie || _getCookieValue;
    _setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;
    _delCookieFn = cookieMgrConfig.delCookie || _setCookieValue;
  }, logger);
  var cookieMgr = {
    isEnabled: function() {
      var enabled = _isCfgEnabled(rootConfig, cookieMgrConfig) !== false && _enabled && areCookiesSupported(logger);
      var gblManager = _globalCookieConfig[strConfigCookieMgr];
      if (enabled && gblManager && cookieMgr !== gblManager) {
        enabled = _isMgrEnabled(gblManager);
      }
      return enabled;
    },
    setEnabled: function(value) {
      _enabled = value !== false;
      cookieMgrConfig[
        _DYN_ENABLED
        /* @min:%2eenabled */
      ] = value;
    },
    set: function(name, value, maxAgeSec, domain, path) {
      var result = false;
      if (_isMgrEnabled(cookieMgr) && !_isBlockedCookie(cookieMgrConfig, name)) {
        var values = {};
        var theValue = strTrim(value || STR_EMPTY);
        var idx = strIndexOf(theValue, ";");
        if (idx !== -1) {
          theValue = strTrim(strLeft(value, idx));
          values = _extractParts(strSubstring(value, idx + 1));
        }
        setValue(values, STR_DOMAIN, domain || _domain, isTruthy, isUndefined);
        if (!isNullOrUndefined(maxAgeSec)) {
          var _isIE = isIE();
          if (isUndefined(values[strExpires])) {
            var nowMs = utcNow();
            var expireMs = nowMs + maxAgeSec * 1e3;
            if (expireMs > 0) {
              var expiry = /* @__PURE__ */ new Date();
              expiry.setTime(expireMs);
              setValue(values, strExpires, _formatDate(expiry, !_isIE ? strToUTCString : strToGMTString) || _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || STR_EMPTY, isTruthy);
            }
          }
          if (!_isIE) {
            setValue(values, "max-age", STR_EMPTY + maxAgeSec, null, isUndefined);
          }
        }
        var location_1 = getLocation();
        if (location_1 && location_1.protocol === "https:") {
          setValue(values, "secure", null, null, isUndefined);
          if (_allowUaSameSite === null) {
            _allowUaSameSite = !uaDisallowsSameSiteNone((getNavigator() || {})[
              _DYN_USER_AGENT
              /* @min:%2euserAgent */
            ]);
          }
          if (_allowUaSameSite) {
            setValue(values, "SameSite", "None", null, isUndefined);
          }
        }
        setValue(values, STR_PATH, path || _path, null, isUndefined);
        _setCookieFn(name, _formatCookieValue(theValue, values));
        result = true;
      }
      return result;
    },
    get: function(name) {
      var value = STR_EMPTY;
      if (_isMgrEnabled(cookieMgr) && !_isIgnoredCookie(cookieMgrConfig, name)) {
        value = _getCookieFn(name);
      }
      return value;
    },
    del: function(name, path) {
      var result = false;
      if (_isMgrEnabled(cookieMgr)) {
        result = cookieMgr.purge(name, path);
      }
      return result;
    },
    purge: function(name, path) {
      var _a12;
      var result = false;
      if (areCookiesSupported(logger)) {
        var values = (_a12 = {}, _a12[STR_PATH] = path ? path : "/", _a12[strExpires] = "Thu, 01 Jan 1970 00:00:01 GMT", _a12);
        if (!isIE()) {
          values["max-age"] = "0";
        }
        _delCookieFn(name, _formatCookieValue(STR_EMPTY, values));
        result = true;
      }
      return result;
    },
    unload: function(isAsync) {
      unloadHandler && unloadHandler.rm();
      unloadHandler = null;
    }
  };
  cookieMgr[strConfigCookieMgr] = cookieMgr;
  return cookieMgr;
}
function areCookiesSupported(logger) {
  if (_supportsCookies === null) {
    _supportsCookies = false;
    !_doc && _getDoc();
    try {
      var doc = _doc.v || {};
      _supportsCookies = doc[strCookie] !== void 0;
    } catch (e) {
      _throwInternal(logger, 2, 68, "Cannot access document.cookie - " + getExceptionName(e), {
        exception: dumpObj(e)
      });
    }
  }
  return _supportsCookies;
}
function _extractParts(theValue) {
  var values = {};
  if (theValue && theValue[
    _DYN_LENGTH
    /* @min:%2elength */
  ]) {
    var parts = strTrim(theValue)[
      _DYN_SPLIT
      /* @min:%2esplit */
    ](";");
    arrForEach(parts, function(thePart) {
      thePart = strTrim(thePart || STR_EMPTY);
      if (thePart) {
        var idx = strIndexOf(thePart, "=");
        if (idx === -1) {
          values[thePart] = null;
        } else {
          values[strTrim(strLeft(thePart, idx))] = strTrim(strSubstring(thePart, idx + 1));
        }
      }
    });
  }
  return values;
}
function _formatDate(theDate, func) {
  if (isFunction3(theDate[func])) {
    return theDate[func]();
  }
  return null;
}
function _formatCookieValue(value, values) {
  var cookieValue = value || STR_EMPTY;
  objForEachKey(values, function(name, theValue) {
    cookieValue += "; " + name + (!isNullOrUndefined(theValue) ? "=" + theValue : STR_EMPTY);
  });
  return cookieValue;
}
function _getCookieValue(name) {
  var cookieValue = STR_EMPTY;
  !_doc && _getDoc();
  if (_doc.v) {
    var theCookie = _doc.v[strCookie] || STR_EMPTY;
    if (_parsedCookieValue !== theCookie) {
      _cookieCache = _extractParts(theCookie);
      _parsedCookieValue = theCookie;
    }
    cookieValue = strTrim(_cookieCache[name] || STR_EMPTY);
  }
  return cookieValue;
}
function _setCookieValue(name, cookieValue) {
  !_doc && _getDoc();
  if (_doc.v) {
    _doc.v[strCookie] = name + "=" + cookieValue;
  }
}
function uaDisallowsSameSiteNone(userAgent) {
  if (!isString(userAgent)) {
    return false;
  }
  if (strContains(userAgent, "CPU iPhone OS 12") || strContains(userAgent, "iPad; CPU OS 12")) {
    return true;
  }
  if (strContains(userAgent, "Macintosh; Intel Mac OS X 10_14") && strContains(userAgent, "Version/") && strContains(userAgent, "Safari")) {
    return true;
  }
  if (strContains(userAgent, "Macintosh; Intel Mac OS X 10_14") && strEndsWith(userAgent, "AppleWebKit/605.1.15 (KHTML, like Gecko)")) {
    return true;
  }
  if (strContains(userAgent, "Chrome/5") || strContains(userAgent, "Chrome/6")) {
    return true;
  }
  if (strContains(userAgent, "UnrealEngine") && !strContains(userAgent, "Chrome")) {
    return true;
  }
  if (strContains(userAgent, "UCBrowser/12") || strContains(userAgent, "UCBrowser/11")) {
    return true;
  }
  return false;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/NotificationManager.js
var defaultValues2 = {
  perfEvtsSendAll: false
};
function _runScheduledListeners(asyncNotifications) {
  asyncNotifications.h = null;
  var callbacks = asyncNotifications.cb;
  asyncNotifications.cb = [];
  arrForEach(callbacks, function(cb) {
    safe(cb.fn, [cb.arg]);
  });
}
function _runListeners(listeners, name, asyncNotifications, callback) {
  arrForEach(listeners, function(listener) {
    if (listener && listener[name]) {
      if (asyncNotifications) {
        asyncNotifications.cb[
          _DYN_PUSH
          /* @min:%2epush */
        ]({
          fn: callback,
          arg: listener
        });
        asyncNotifications.h = asyncNotifications.h || scheduleTimeout(_runScheduledListeners, 0, asyncNotifications);
      } else {
        safe(callback, [listener]);
      }
    }
  });
}
var NotificationManager = (
  /** @class */
  function() {
    function NotificationManager2(config2) {
      this.listeners = [];
      var perfEvtsSendAll;
      var unloadHandler;
      var _listeners = [];
      var _asyncNotifications = {
        h: null,
        cb: []
      };
      var cfgHandler = createDynamicConfig(config2, defaultValues2);
      unloadHandler = cfgHandler[
        _DYN_WATCH
        /* @min:%2ewatch */
      ](function(details) {
        perfEvtsSendAll = !!details.cfg.perfEvtsSendAll;
      });
      dynamicProto(NotificationManager2, this, function(_self) {
        objDefine(_self, "listeners", {
          g: function() {
            return _listeners;
          }
        });
        _self[
          _DYN_ADD_NOTIFICATION_LIS1
          /* @min:%2eaddNotificationListener */
        ] = function(listener) {
          _listeners[
            _DYN_PUSH
            /* @min:%2epush */
          ](listener);
        };
        _self[
          _DYN_REMOVE_NOTIFICATION_0
          /* @min:%2eremoveNotificationListener */
        ] = function(listener) {
          var index = arrIndexOf(_listeners, listener);
          while (index > -1) {
            _listeners[
              _DYN_SPLICE
              /* @min:%2esplice */
            ](index, 1);
            index = arrIndexOf(_listeners, listener);
          }
        };
        _self[
          STR_EVENTS_SENT
          /* @min:%2eeventsSent */
        ] = function(events) {
          _runListeners(_listeners, STR_EVENTS_SENT, _asyncNotifications, function(listener) {
            listener[
              STR_EVENTS_SENT
              /* @min:%2eeventsSent */
            ](events);
          });
        };
        _self[
          STR_EVENTS_DISCARDED
          /* @min:%2eeventsDiscarded */
        ] = function(events, reason) {
          _runListeners(_listeners, STR_EVENTS_DISCARDED, _asyncNotifications, function(listener) {
            listener[
              STR_EVENTS_DISCARDED
              /* @min:%2eeventsDiscarded */
            ](events, reason);
          });
        };
        _self[
          STR_EVENTS_SEND_REQUEST
          /* @min:%2eeventsSendRequest */
        ] = function(sendReason, isAsync) {
          _runListeners(_listeners, STR_EVENTS_SEND_REQUEST, isAsync ? _asyncNotifications : null, function(listener) {
            listener[
              STR_EVENTS_SEND_REQUEST
              /* @min:%2eeventsSendRequest */
            ](sendReason, isAsync);
          });
        };
        _self[
          STR_PERF_EVENT
          /* @min:%2eperfEvent */
        ] = function(perfEvent) {
          if (perfEvent) {
            if (perfEvtsSendAll || !perfEvent[
              _DYN_IS_CHILD_EVT
              /* @min:%2eisChildEvt */
            ]()) {
              _runListeners(_listeners, STR_PERF_EVENT, null, function(listener) {
                if (perfEvent.isAsync) {
                  scheduleTimeout(function() {
                    return listener[
                      STR_PERF_EVENT
                      /* @min:%2eperfEvent */
                    ](perfEvent);
                  }, 0);
                } else {
                  listener[
                    STR_PERF_EVENT
                    /* @min:%2eperfEvent */
                  ](perfEvent);
                }
              });
            }
          }
        };
        _self[
          STR_OFFLINE_STORE
          /* @min:%2eofflineEventsStored */
        ] = function(events) {
          if (events && events[
            _DYN_LENGTH
            /* @min:%2elength */
          ]) {
            _runListeners(_listeners, STR_OFFLINE_STORE, _asyncNotifications, function(listener) {
              listener[
                STR_OFFLINE_STORE
                /* @min:%2eofflineEventsStored */
              ](events);
            });
          }
        };
        _self[
          STR_OFFLINE_SENT
          /* @min:%2eofflineBatchSent */
        ] = function(batch) {
          if (batch && batch[
            _DYN_DATA
            /* @min:%2edata */
          ]) {
            _runListeners(_listeners, STR_OFFLINE_SENT, _asyncNotifications, function(listener) {
              listener[
                STR_OFFLINE_SENT
                /* @min:%2eofflineBatchSent */
              ](batch);
            });
          }
        };
        _self[
          STR_OFFLINE_DROP
          /* @min:%2eofflineBatchDrop */
        ] = function(cnt, reason) {
          if (cnt > 0) {
            var rn_1 = reason || 0;
            _runListeners(_listeners, STR_OFFLINE_DROP, _asyncNotifications, function(listener) {
              listener[
                STR_OFFLINE_DROP
                /* @min:%2eofflineBatchDrop */
              ](cnt, rn_1);
            });
          }
        };
        _self[
          _DYN_UNLOAD
          /* @min:%2eunload */
        ] = function(isAsync) {
          var _finishUnload = function() {
            unloadHandler && unloadHandler.rm();
            unloadHandler = null;
            _listeners = [];
            _asyncNotifications.h && _asyncNotifications.h[
              _DYN_CANCEL
              /* @min:%2ecancel */
            ]();
            _asyncNotifications.h = null;
            _asyncNotifications.cb = [];
          };
          var waiting;
          _runListeners(_listeners, "unload", null, function(listener) {
            var asyncUnload = listener[
              _DYN_UNLOAD
              /* @min:%2eunload */
            ](isAsync);
            if (asyncUnload) {
              if (!waiting) {
                waiting = [];
              }
              waiting[
                _DYN_PUSH
                /* @min:%2epush */
              ](asyncUnload);
            }
          });
          if (waiting) {
            return createPromise(function(resolve) {
              return doAwaitResponse(createAllPromise(waiting), function() {
                _finishUnload();
                resolve();
              });
            });
          } else {
            _finishUnload();
          }
        };
      });
    }
    NotificationManager2.__ieDyn = 1;
    return NotificationManager2;
  }()
);

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/PerfManager.js
var strExecutionContextKey = "ctx";
var strParentContextKey = "ParentContextKey";
var strChildrenContextKey = "ChildrenContextKey";
var _defaultPerfManager = null;
var PerfEvent = (
  /** @class */
  function() {
    function PerfEvent2(name, payloadDetails, isAsync) {
      var _self = this;
      _self.start = utcNow();
      _self[
        _DYN_NAME
        /* @min:%2ename */
      ] = name;
      _self.isAsync = isAsync;
      _self[
        _DYN_IS_CHILD_EVT
        /* @min:%2eisChildEvt */
      ] = function() {
        return false;
      };
      if (isFunction3(payloadDetails)) {
        var theDetails_1;
        objDefine(_self, "payload", {
          g: function() {
            if (!theDetails_1 && isFunction3(payloadDetails)) {
              theDetails_1 = payloadDetails();
              payloadDetails = null;
            }
            return theDetails_1;
          }
        });
      }
      _self[
        _DYN_GET_CTX
        /* @min:%2egetCtx */
      ] = function(key) {
        if (key) {
          if (key === PerfEvent2[strParentContextKey] || key === PerfEvent2[strChildrenContextKey]) {
            return _self[key];
          }
          return (_self[strExecutionContextKey] || {})[key];
        }
        return null;
      };
      _self[
        _DYN_SET_CTX
        /* @min:%2esetCtx */
      ] = function(key, value) {
        if (key) {
          if (key === PerfEvent2[strParentContextKey]) {
            if (!_self[key]) {
              _self[
                _DYN_IS_CHILD_EVT
                /* @min:%2eisChildEvt */
              ] = function() {
                return true;
              };
            }
            _self[key] = value;
          } else if (key === PerfEvent2[strChildrenContextKey]) {
            _self[key] = value;
          } else {
            var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};
            ctx[key] = value;
          }
        }
      };
      _self.complete = function() {
        var childTime = 0;
        var childEvts = _self[
          _DYN_GET_CTX
          /* @min:%2egetCtx */
        ](PerfEvent2[strChildrenContextKey]);
        if (isArray3(childEvts)) {
          for (var lp = 0; lp < childEvts[
            _DYN_LENGTH
            /* @min:%2elength */
          ]; lp++) {
            var childEvt = childEvts[lp];
            if (childEvt) {
              childTime += childEvt.time;
            }
          }
        }
        _self.time = utcNow() - _self.start;
        _self.exTime = _self.time - childTime;
        _self.complete = function() {
        };
      };
    }
    PerfEvent2.ParentContextKey = "parent";
    PerfEvent2.ChildrenContextKey = "childEvts";
    return PerfEvent2;
  }()
);
var PerfManager = (
  /** @class */
  function() {
    function PerfManager2(manager) {
      this.ctx = {};
      dynamicProto(PerfManager2, this, function(_self) {
        _self.create = function(src, payloadDetails, isAsync) {
          return new PerfEvent(src, payloadDetails, isAsync);
        };
        _self.fire = function(perfEvent) {
          if (perfEvent) {
            perfEvent.complete();
            if (manager && isFunction3(manager[
              STR_PERF_EVENT
              /* @min:%2eperfEvent */
            ])) {
              manager[
                STR_PERF_EVENT
                /* @min:%2eperfEvent */
              ](perfEvent);
            }
          }
        };
        _self[
          _DYN_SET_CTX
          /* @min:%2esetCtx */
        ] = function(key, value) {
          if (key) {
            var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};
            ctx[key] = value;
          }
        };
        _self[
          _DYN_GET_CTX
          /* @min:%2egetCtx */
        ] = function(key) {
          return (_self[strExecutionContextKey] || {})[key];
        };
      });
    }
    PerfManager2.__ieDyn = 1;
    return PerfManager2;
  }()
);
var doPerfActiveKey = "CoreUtils.doPerf";
function doPerf(mgrSource, getSource, func, details, isAsync) {
  if (mgrSource) {
    var perfMgr = mgrSource;
    if (perfMgr[STR_GET_PERF_MGR]) {
      perfMgr = perfMgr[STR_GET_PERF_MGR]();
    }
    if (perfMgr) {
      var perfEvt = void 0;
      var currentActive = perfMgr[
        _DYN_GET_CTX
        /* @min:%2egetCtx */
      ](doPerfActiveKey);
      try {
        perfEvt = perfMgr.create(getSource(), details, isAsync);
        if (perfEvt) {
          if (currentActive && perfEvt[
            _DYN_SET_CTX
            /* @min:%2esetCtx */
          ]) {
            perfEvt[
              _DYN_SET_CTX
              /* @min:%2esetCtx */
            ](PerfEvent[strParentContextKey], currentActive);
            if (currentActive[
              _DYN_GET_CTX
              /* @min:%2egetCtx */
            ] && currentActive[
              _DYN_SET_CTX
              /* @min:%2esetCtx */
            ]) {
              var children = currentActive[
                _DYN_GET_CTX
                /* @min:%2egetCtx */
              ](PerfEvent[strChildrenContextKey]);
              if (!children) {
                children = [];
                currentActive[
                  _DYN_SET_CTX
                  /* @min:%2esetCtx */
                ](PerfEvent[strChildrenContextKey], children);
              }
              children[
                _DYN_PUSH
                /* @min:%2epush */
              ](perfEvt);
            }
          }
          perfMgr[
            _DYN_SET_CTX
            /* @min:%2esetCtx */
          ](doPerfActiveKey, perfEvt);
          return func(perfEvt);
        }
      } catch (ex) {
        if (perfEvt && perfEvt[
          _DYN_SET_CTX
          /* @min:%2esetCtx */
        ]) {
          perfEvt[
            _DYN_SET_CTX
            /* @min:%2esetCtx */
          ]("exception", ex);
        }
      } finally {
        if (perfEvt) {
          perfMgr.fire(perfEvt);
        }
        perfMgr[
          _DYN_SET_CTX
          /* @min:%2esetCtx */
        ](doPerfActiveKey, currentActive);
      }
    }
  }
  return func();
}
function getGblPerfMgr() {
  return _defaultPerfManager;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/CoreUtils.js
function generateW3CId() {
  var hexValues = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
  var oct = STR_EMPTY, tmp;
  for (var a = 0; a < 4; a++) {
    tmp = random32();
    oct += hexValues[tmp & 15] + hexValues[tmp >> 4 & 15] + hexValues[tmp >> 8 & 15] + hexValues[tmp >> 12 & 15] + hexValues[tmp >> 16 & 15] + hexValues[tmp >> 20 & 15] + hexValues[tmp >> 24 & 15] + hexValues[tmp >> 28 & 15];
  }
  var clockSequenceHi = hexValues[8 + (random32() & 3) | 0];
  return strSubstr(oct, 0, 8) + strSubstr(oct, 9, 4) + "4" + strSubstr(oct, 13, 3) + clockSequenceHi + strSubstr(oct, 16, 3) + strSubstr(oct, 19, 12);
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/W3cTraceParent.js
var DEFAULT_VERSION = "00";
var INVALID_VERSION = "ff";
var INVALID_TRACE_ID = "00000000000000000000000000000000";
var INVALID_SPAN_ID = "0000000000000000";
function _isValid(value, len, invalidValue) {
  if (value && value[
    _DYN_LENGTH
    /* @min:%2elength */
  ] === len && value !== invalidValue) {
    return !!value.match(/^[\da-f]*$/i);
  }
  return false;
}
function _formatValue(value, len, defValue) {
  if (_isValid(value, len)) {
    return value;
  }
  return defValue;
}
function _formatFlags(value) {
  if (isNaN(value) || value < 0 || value > 255) {
    value = 1;
  }
  var result = value.toString(16);
  while (result[
    _DYN_LENGTH
    /* @min:%2elength */
  ] < 2) {
    result = "0" + result;
  }
  return result;
}
function createTraceParent(traceId, spanId, flags, version2) {
  return {
    version: _isValid(version2, 2, INVALID_VERSION) ? version2 : DEFAULT_VERSION,
    traceId: isValidTraceId(traceId) ? traceId : generateW3CId(),
    spanId: isValidSpanId(spanId) ? spanId : strLeft(generateW3CId(), 16),
    traceFlags: flags >= 0 && flags <= 255 ? flags : 1
  };
}
function isValidTraceId(value) {
  return _isValid(value, 32, INVALID_TRACE_ID);
}
function isValidSpanId(value) {
  return _isValid(value, 16, INVALID_SPAN_ID);
}
function formatTraceParent(value) {
  if (value) {
    var flags = _formatFlags(value[
      _DYN_TRACE_FLAGS
      /* @min:%2etraceFlags */
    ]);
    if (!_isValid(flags, 2)) {
      flags = "01";
    }
    var version2 = value[
      _DYN_VERSION
      /* @min:%2eversion */
    ] || DEFAULT_VERSION;
    if (version2 !== "00" && version2 !== "ff") {
      version2 = DEFAULT_VERSION;
    }
    return "".concat(version2.toLowerCase(), "-").concat(_formatValue(value.traceId, 32, INVALID_TRACE_ID).toLowerCase(), "-").concat(_formatValue(value.spanId, 16, INVALID_SPAN_ID).toLowerCase(), "-").concat(flags.toLowerCase());
  }
  return "";
}
function findAllScripts(doc) {
  var scripts = doc.getElementsByTagName("script");
  var result = [];
  arrForEach(scripts, function(script) {
    var src = script[
      _DYN_GET_ATTRIBUTE
      /* @min:%2egetAttribute */
    ]("src");
    if (src) {
      var crossOrigin = script[
        _DYN_GET_ATTRIBUTE
        /* @min:%2egetAttribute */
      ]("crossorigin");
      var async = script.hasAttribute("async") === true;
      var defer2 = script.hasAttribute("defer") === true;
      var referrerPolicy = script[
        _DYN_GET_ATTRIBUTE
        /* @min:%2egetAttribute */
      ]("referrerpolicy");
      var info = {
        url: src
      };
      if (crossOrigin) {
        info.crossOrigin = crossOrigin;
      }
      if (async) {
        info.async = async;
      }
      if (defer2) {
        info.defer = defer2;
      }
      if (referrerPolicy) {
        info.referrerPolicy = referrerPolicy;
      }
      result[
        _DYN_PUSH
        /* @min:%2epush */
      ](info);
    }
  });
  return result;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/TelemetryHelpers.js
var pluginStateData = createElmNodeData("plugin");
function _getPluginState(plugin) {
  return pluginStateData.get(plugin, "state", {}, true);
}
function initializePlugins(processContext, extensions) {
  var initPlugins = [];
  var lastPlugin = null;
  var proxy = processContext[
    _DYN_GET_NEXT
    /* @min:%2egetNext */
  ]();
  var pluginState;
  while (proxy) {
    var thePlugin = proxy[
      _DYN_GET_PLUGIN
      /* @min:%2egetPlugin */
    ]();
    if (thePlugin) {
      if (lastPlugin && lastPlugin[
        _DYN_SET_NEXT_PLUGIN
        /* @min:%2esetNextPlugin */
      ] && thePlugin[
        STR_PROCESS_TELEMETRY
        /* @min:%2eprocessTelemetry */
      ]) {
        lastPlugin[
          _DYN_SET_NEXT_PLUGIN
          /* @min:%2esetNextPlugin */
        ](thePlugin);
      }
      pluginState = _getPluginState(thePlugin);
      var isInitialized = !!pluginState[
        _DYN_IS_INITIALIZED
        /* @min:%2eisInitialized */
      ];
      if (thePlugin[
        _DYN_IS_INITIALIZED
        /* @min:%2eisInitialized */
      ]) {
        isInitialized = thePlugin[
          _DYN_IS_INITIALIZED
          /* @min:%2eisInitialized */
        ]();
      }
      if (!isInitialized) {
        initPlugins[
          _DYN_PUSH
          /* @min:%2epush */
        ](thePlugin);
      }
      lastPlugin = thePlugin;
      proxy = proxy[
        _DYN_GET_NEXT
        /* @min:%2egetNext */
      ]();
    }
  }
  arrForEach(initPlugins, function(thePlugin2) {
    var core = processContext[
      STR_CORE
      /* @min:%2ecore */
    ]();
    thePlugin2[
      _DYN_INITIALIZE
      /* @min:%2einitialize */
    ](processContext.getCfg(), core, extensions, processContext[
      _DYN_GET_NEXT
      /* @min:%2egetNext */
    ]());
    pluginState = _getPluginState(thePlugin2);
    if (!thePlugin2[STR_CORE] && !pluginState[STR_CORE]) {
      pluginState[STR_CORE] = core;
    }
    pluginState[
      _DYN_IS_INITIALIZED
      /* @min:%2eisInitialized */
    ] = true;
    delete pluginState[
      _DYN_TEARDOWN
      /* @min:%2eteardown */
    ];
  });
}
function sortPlugins(plugins) {
  return plugins.sort(function(extA, extB) {
    var result = 0;
    if (extB) {
      var bHasProcess = extB[STR_PROCESS_TELEMETRY];
      if (extA[STR_PROCESS_TELEMETRY]) {
        result = bHasProcess ? extA[STR_PRIORITY] - extB[STR_PRIORITY] : 1;
      } else if (bHasProcess) {
        result = -1;
      }
    } else {
      result = extA ? 1 : -1;
    }
    return result;
  });
}
function createDistributedTraceContext(parentCtx) {
  var trace = {};
  return {
    getName: function() {
      return trace[
        _DYN_NAME
        /* @min:%2ename */
      ];
    },
    setName: function(newValue) {
      parentCtx && parentCtx.setName(newValue);
      trace[
        _DYN_NAME
        /* @min:%2ename */
      ] = newValue;
    },
    getTraceId: function() {
      return trace.traceId;
    },
    setTraceId: function(newValue) {
      parentCtx && parentCtx.setTraceId(newValue);
      if (isValidTraceId(newValue)) {
        trace.traceId = newValue;
      }
    },
    getSpanId: function() {
      return trace.spanId;
    },
    setSpanId: function(newValue) {
      parentCtx && parentCtx.setSpanId(newValue);
      if (isValidSpanId(newValue)) {
        trace.spanId = newValue;
      }
    },
    getTraceFlags: function() {
      return trace[
        _DYN_TRACE_FLAGS
        /* @min:%2etraceFlags */
      ];
    },
    setTraceFlags: function(newTraceFlags) {
      parentCtx && parentCtx.setTraceFlags(newTraceFlags);
      trace[
        _DYN_TRACE_FLAGS
        /* @min:%2etraceFlags */
      ] = newTraceFlags;
    }
  };
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/ProcessTelemetryContext.js
var strTelemetryPluginChain = "TelemetryPluginChain";
var strHasRunFlags = "_hasRun";
var strGetTelCtx = "_getTelCtx";
var _chainId = 0;
function _getNextProxyStart(proxy, core, startAt) {
  while (proxy) {
    if (proxy[
      _DYN_GET_PLUGIN
      /* @min:%2egetPlugin */
    ]() === startAt) {
      return proxy;
    }
    proxy = proxy[
      _DYN_GET_NEXT
      /* @min:%2egetNext */
    ]();
  }
  return createTelemetryProxyChain([startAt], core.config || {}, core);
}
function _createInternalContext(telemetryChain, dynamicHandler, core, startAt) {
  var _nextProxy = null;
  var _onComplete = [];
  if (!dynamicHandler) {
    dynamicHandler = createDynamicConfig({}, null, core[
      _DYN_LOGGER
      /* @min:%2elogger */
    ]);
  }
  if (startAt !== null) {
    _nextProxy = startAt ? _getNextProxyStart(telemetryChain, core, startAt) : telemetryChain;
  }
  var context2 = {
    _next: _moveNext,
    ctx: {
      core: function() {
        return core;
      },
      diagLog: function() {
        return safeGetLogger(core, dynamicHandler.cfg);
      },
      getCfg: function() {
        return dynamicHandler.cfg;
      },
      getExtCfg: _resolveExtCfg,
      getConfig: _getConfig,
      hasNext: function() {
        return !!_nextProxy;
      },
      getNext: function() {
        return _nextProxy;
      },
      setNext: function(nextPlugin) {
        _nextProxy = nextPlugin;
      },
      iterate: _iterateChain,
      onComplete: _addOnComplete
    }
  };
  function _addOnComplete(onComplete, that) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    if (onComplete) {
      _onComplete[
        _DYN_PUSH
        /* @min:%2epush */
      ]({
        func: onComplete,
        self: !isUndefined(that) ? that : context2.ctx,
        args
      });
    }
  }
  function _moveNext() {
    var nextProxy = _nextProxy;
    _nextProxy = nextProxy ? nextProxy[
      _DYN_GET_NEXT
      /* @min:%2egetNext */
    ]() : null;
    if (!nextProxy) {
      var onComplete = _onComplete;
      if (onComplete && onComplete[
        _DYN_LENGTH
        /* @min:%2elength */
      ] > 0) {
        arrForEach(onComplete, function(completeDetails) {
          try {
            completeDetails.func.call(completeDetails.self, completeDetails.args);
          } catch (e) {
            _throwInternal(core[
              _DYN_LOGGER
              /* @min:%2elogger */
            ], 2, 73, "Unexpected Exception during onComplete - " + dumpObj(e));
          }
        });
        _onComplete = [];
      }
    }
    return nextProxy;
  }
  function _getExtCfg(identifier, createIfMissing) {
    var idCfg = null;
    var cfg = dynamicHandler.cfg;
    if (cfg && identifier) {
      var extCfg = cfg[
        STR_EXTENSION_CONFIG
        /* @min:%2eextensionConfig */
      ];
      if (!extCfg && createIfMissing) {
        extCfg = {};
      }
      cfg[STR_EXTENSION_CONFIG] = extCfg;
      extCfg = dynamicHandler.ref(cfg, STR_EXTENSION_CONFIG);
      if (extCfg) {
        idCfg = extCfg[identifier];
        if (!idCfg && createIfMissing) {
          idCfg = {};
        }
        extCfg[identifier] = idCfg;
        idCfg = dynamicHandler.ref(extCfg, identifier);
      }
    }
    return idCfg;
  }
  function _resolveExtCfg(identifier, defaultValues5) {
    var newConfig = _getExtCfg(identifier, true);
    if (defaultValues5) {
      objForEachKey(defaultValues5, function(field, defaultValue) {
        if (isNullOrUndefined(newConfig[field])) {
          var cfgValue = dynamicHandler.cfg[field];
          if (cfgValue || !isNullOrUndefined(cfgValue)) {
            newConfig[field] = cfgValue;
          }
        }
        _applyDefaultValue(dynamicHandler, newConfig, field, defaultValue);
      });
    }
    return dynamicHandler.setDf(newConfig, defaultValues5);
  }
  function _getConfig(identifier, field, defaultValue) {
    if (defaultValue === void 0) {
      defaultValue = false;
    }
    var theValue;
    var extConfig = _getExtCfg(identifier, false);
    var rootConfig = dynamicHandler.cfg;
    if (extConfig && (extConfig[field] || !isNullOrUndefined(extConfig[field]))) {
      theValue = extConfig[field];
    } else if (rootConfig[field] || !isNullOrUndefined(rootConfig[field])) {
      theValue = rootConfig[field];
    }
    return theValue || !isNullOrUndefined(theValue) ? theValue : defaultValue;
  }
  function _iterateChain(cb) {
    var nextPlugin;
    while (!!(nextPlugin = context2._next())) {
      var plugin = nextPlugin[
        _DYN_GET_PLUGIN
        /* @min:%2egetPlugin */
      ]();
      if (plugin) {
        cb(plugin);
      }
    }
  }
  return context2;
}
function createProcessTelemetryContext(telemetryChain, cfg, core, startAt) {
  var config2 = createDynamicConfig(cfg);
  var internalContext = _createInternalContext(telemetryChain, config2, core, startAt);
  var context2 = internalContext.ctx;
  function _processNext(env) {
    var nextPlugin = internalContext._next();
    if (nextPlugin) {
      nextPlugin[
        STR_PROCESS_TELEMETRY
        /* @min:%2eprocessTelemetry */
      ](env, context2);
    }
    return !nextPlugin;
  }
  function _createNew(plugins, startAt2) {
    if (plugins === void 0) {
      plugins = null;
    }
    if (isArray3(plugins)) {
      plugins = createTelemetryProxyChain(plugins, config2.cfg, core, startAt2);
    }
    return createProcessTelemetryContext(plugins || context2[
      _DYN_GET_NEXT
      /* @min:%2egetNext */
    ](), config2.cfg, core, startAt2);
  }
  context2[
    _DYN_PROCESS_NEXT
    /* @min:%2eprocessNext */
  ] = _processNext;
  context2[
    _DYN_CREATE_NEW
    /* @min:%2ecreateNew */
  ] = _createNew;
  return context2;
}
function createProcessTelemetryUnloadContext(telemetryChain, core, startAt) {
  var config2 = createDynamicConfig(core.config);
  var internalContext = _createInternalContext(telemetryChain, config2, core, startAt);
  var context2 = internalContext.ctx;
  function _processNext(unloadState) {
    var nextPlugin = internalContext._next();
    nextPlugin && nextPlugin[
      _DYN_UNLOAD
      /* @min:%2eunload */
    ](context2, unloadState);
    return !nextPlugin;
  }
  function _createNew(plugins, startAt2) {
    if (plugins === void 0) {
      plugins = null;
    }
    if (isArray3(plugins)) {
      plugins = createTelemetryProxyChain(plugins, config2.cfg, core, startAt2);
    }
    return createProcessTelemetryUnloadContext(plugins || context2[
      _DYN_GET_NEXT
      /* @min:%2egetNext */
    ](), core, startAt2);
  }
  context2[
    _DYN_PROCESS_NEXT
    /* @min:%2eprocessNext */
  ] = _processNext;
  context2[
    _DYN_CREATE_NEW
    /* @min:%2ecreateNew */
  ] = _createNew;
  return context2;
}
function createProcessTelemetryUpdateContext(telemetryChain, core, startAt) {
  var config2 = createDynamicConfig(core.config);
  var internalContext = _createInternalContext(telemetryChain, config2, core, startAt);
  var context2 = internalContext.ctx;
  function _processNext(updateState) {
    return context2.iterate(function(plugin) {
      if (isFunction3(plugin[
        _DYN_UPDATE
        /* @min:%2eupdate */
      ])) {
        plugin[
          _DYN_UPDATE
          /* @min:%2eupdate */
        ](context2, updateState);
      }
    });
  }
  function _createNew(plugins, startAt2) {
    if (plugins === void 0) {
      plugins = null;
    }
    if (isArray3(plugins)) {
      plugins = createTelemetryProxyChain(plugins, config2.cfg, core, startAt2);
    }
    return createProcessTelemetryUpdateContext(plugins || context2[
      _DYN_GET_NEXT
      /* @min:%2egetNext */
    ](), core, startAt2);
  }
  context2[
    _DYN_PROCESS_NEXT
    /* @min:%2eprocessNext */
  ] = _processNext;
  context2[
    _DYN_CREATE_NEW
    /* @min:%2ecreateNew */
  ] = _createNew;
  return context2;
}
function createTelemetryProxyChain(plugins, config2, core, startAt) {
  var firstProxy = null;
  var add = startAt ? false : true;
  if (isArray3(plugins) && plugins[
    _DYN_LENGTH
    /* @min:%2elength */
  ] > 0) {
    var lastProxy_1 = null;
    arrForEach(plugins, function(thePlugin) {
      if (!add && startAt === thePlugin) {
        add = true;
      }
      if (add && thePlugin && isFunction3(thePlugin[
        STR_PROCESS_TELEMETRY
        /* @min:%2eprocessTelemetry */
      ])) {
        var newProxy = createTelemetryPluginProxy(thePlugin, config2, core);
        if (!firstProxy) {
          firstProxy = newProxy;
        }
        if (lastProxy_1) {
          lastProxy_1._setNext(newProxy);
        }
        lastProxy_1 = newProxy;
      }
    });
  }
  if (startAt && !firstProxy) {
    return createTelemetryProxyChain([startAt], config2, core);
  }
  return firstProxy;
}
function createTelemetryPluginProxy(plugin, config2, core) {
  var nextProxy = null;
  var hasProcessTelemetry = isFunction3(plugin[
    STR_PROCESS_TELEMETRY
    /* @min:%2eprocessTelemetry */
  ]);
  var hasSetNext = isFunction3(plugin[
    _DYN_SET_NEXT_PLUGIN
    /* @min:%2esetNextPlugin */
  ]);
  var chainId;
  if (plugin) {
    chainId = plugin[
      _DYN_IDENTIFIER
      /* @min:%2eidentifier */
    ] + "-" + plugin[
      STR_PRIORITY
      /* @min:%2epriority */
    ] + "-" + _chainId++;
  } else {
    chainId = "Unknown-0-" + _chainId++;
  }
  var proxyChain = {
    getPlugin: function() {
      return plugin;
    },
    getNext: function() {
      return nextProxy;
    },
    processTelemetry: _processTelemetry,
    unload: _unloadPlugin,
    update: _updatePlugin,
    _id: chainId,
    _setNext: function(nextPlugin) {
      nextProxy = nextPlugin;
    }
  };
  function _getTelCtx() {
    var itemCtx;
    if (plugin && isFunction3(plugin[strGetTelCtx])) {
      itemCtx = plugin[strGetTelCtx]();
    }
    if (!itemCtx) {
      itemCtx = createProcessTelemetryContext(proxyChain, config2, core);
    }
    return itemCtx;
  }
  function _processChain(itemCtx, processPluginFn, name, details, isAsync) {
    var hasRun = false;
    var identifier = plugin ? plugin[
      _DYN_IDENTIFIER
      /* @min:%2eidentifier */
    ] : strTelemetryPluginChain;
    var hasRunContext = itemCtx[strHasRunFlags];
    if (!hasRunContext) {
      hasRunContext = itemCtx[strHasRunFlags] = {};
    }
    itemCtx.setNext(nextProxy);
    if (plugin) {
      doPerf(itemCtx[
        STR_CORE
        /* @min:%2ecore */
      ](), function() {
        return identifier + ":" + name;
      }, function() {
        hasRunContext[chainId] = true;
        try {
          var nextId = nextProxy ? nextProxy._id : STR_EMPTY;
          if (nextId) {
            hasRunContext[nextId] = false;
          }
          hasRun = processPluginFn(itemCtx);
        } catch (error) {
          var hasNextRun = nextProxy ? hasRunContext[nextProxy._id] : true;
          if (hasNextRun) {
            hasRun = true;
          }
          if (!nextProxy || !hasNextRun) {
            _throwInternal(itemCtx[
              _DYN_DIAG_LOG
              /* @min:%2ediagLog */
            ](), 1, 73, "Plugin [" + identifier + "] failed during " + name + " - " + dumpObj(error) + ", run flags: " + dumpObj(hasRunContext));
          }
        }
      }, details, isAsync);
    }
    return hasRun;
  }
  function _processTelemetry(env, itemCtx) {
    itemCtx = itemCtx || _getTelCtx();
    function _callProcessTelemetry(itemCtx2) {
      if (!plugin || !hasProcessTelemetry) {
        return false;
      }
      var pluginState = _getPluginState(plugin);
      if (pluginState[
        _DYN_TEARDOWN
        /* @min:%2eteardown */
      ] || pluginState[STR_DISABLED]) {
        return false;
      }
      if (hasSetNext) {
        plugin[
          _DYN_SET_NEXT_PLUGIN
          /* @min:%2esetNextPlugin */
        ](nextProxy);
      }
      plugin[
        STR_PROCESS_TELEMETRY
        /* @min:%2eprocessTelemetry */
      ](env, itemCtx2);
      return true;
    }
    if (!_processChain(itemCtx, _callProcessTelemetry, "processTelemetry", function() {
      return {
        item: env
      };
    }, !env.sync)) {
      itemCtx[
        _DYN_PROCESS_NEXT
        /* @min:%2eprocessNext */
      ](env);
    }
  }
  function _unloadPlugin(unloadCtx, unloadState) {
    function _callTeardown() {
      var hasRun = false;
      if (plugin) {
        var pluginState = _getPluginState(plugin);
        var pluginCore = plugin[STR_CORE] || pluginState[
          STR_CORE
          /* @min:%2ecore */
        ];
        if (plugin && (!pluginCore || pluginCore === unloadCtx.core()) && !pluginState[
          _DYN_TEARDOWN
          /* @min:%2eteardown */
        ]) {
          pluginState[
            STR_CORE
            /* @min:%2ecore */
          ] = null;
          pluginState[
            _DYN_TEARDOWN
            /* @min:%2eteardown */
          ] = true;
          pluginState[
            _DYN_IS_INITIALIZED
            /* @min:%2eisInitialized */
          ] = false;
          if (plugin[
            _DYN_TEARDOWN
            /* @min:%2eteardown */
          ] && plugin[
            _DYN_TEARDOWN
            /* @min:%2eteardown */
          ](unloadCtx, unloadState) === true) {
            hasRun = true;
          }
        }
      }
      return hasRun;
    }
    if (!_processChain(unloadCtx, _callTeardown, "unload", function() {
    }, unloadState.isAsync)) {
      unloadCtx[
        _DYN_PROCESS_NEXT
        /* @min:%2eprocessNext */
      ](unloadState);
    }
  }
  function _updatePlugin(updateCtx, updateState) {
    function _callUpdate() {
      var hasRun = false;
      if (plugin) {
        var pluginState = _getPluginState(plugin);
        var pluginCore = plugin[STR_CORE] || pluginState[
          STR_CORE
          /* @min:%2ecore */
        ];
        if (plugin && (!pluginCore || pluginCore === updateCtx.core()) && !pluginState[
          _DYN_TEARDOWN
          /* @min:%2eteardown */
        ]) {
          if (plugin[
            _DYN_UPDATE
            /* @min:%2eupdate */
          ] && plugin[
            _DYN_UPDATE
            /* @min:%2eupdate */
          ](updateCtx, updateState) === true) {
            hasRun = true;
          }
        }
      }
      return hasRun;
    }
    if (!_processChain(updateCtx, _callUpdate, "update", function() {
    }, false)) {
      updateCtx[
        _DYN_PROCESS_NEXT
        /* @min:%2eprocessNext */
      ](updateState);
    }
  }
  return objFreeze(proxyChain);
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/UnloadHandlerContainer.js
function createUnloadHandlerContainer() {
  var handlers = [];
  function _addHandler2(handler) {
    if (handler) {
      handlers[
        _DYN_PUSH
        /* @min:%2epush */
      ](handler);
    }
  }
  function _runHandlers(unloadCtx, unloadState) {
    arrForEach(handlers, function(handler) {
      try {
        handler(unloadCtx, unloadState);
      } catch (e) {
        _throwInternal(unloadCtx[
          _DYN_DIAG_LOG
          /* @min:%2ediagLog */
        ](), 2, 73, "Unexpected error calling unload handler - " + dumpObj(e));
      }
    });
    handlers = [];
  }
  return {
    add: _addHandler2,
    run: _runHandlers
  };
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/UnloadHookContainer.js
var _maxHooks;
var _hookAddMonitor;
function createUnloadHookContainer() {
  var _hooks = [];
  function _doUnload(logger) {
    var oldHooks = _hooks;
    _hooks = [];
    arrForEach(oldHooks, function(fn) {
      try {
        (fn.rm || fn.remove).call(fn);
      } catch (e) {
        _throwInternal(logger, 2, 73, "Unloading:" + dumpObj(e));
      }
    });
    if (_maxHooks && oldHooks[
      _DYN_LENGTH
      /* @min:%2elength */
    ] > _maxHooks) {
      _hookAddMonitor ? _hookAddMonitor("doUnload", oldHooks) : _throwInternal(null, 1, 48, "Max unload hooks exceeded. An excessive number of unload hooks has been detected.");
    }
  }
  function _addHook(hooks) {
    if (hooks) {
      arrAppend(_hooks, hooks);
      if (_maxHooks && _hooks[
        _DYN_LENGTH
        /* @min:%2elength */
      ] > _maxHooks) {
        _hookAddMonitor ? _hookAddMonitor("Add", _hooks) : _throwInternal(null, 1, 48, "Max unload hooks exceeded. An excessive number of unload hooks has been detected.");
      }
    }
  }
  return {
    run: _doUnload,
    add: _addHook
  };
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/BaseTelemetryPlugin.js
var _a4;
var strGetPlugin = "getPlugin";
var defaultValues3 = (_a4 = {}, _a4[STR_EXTENSION_CONFIG] = {
  isVal: isNotNullOrUndefined,
  v: {}
}, _a4);
var BaseTelemetryPlugin = (
  /** @class */
  function() {
    function BaseTelemetryPlugin2() {
      var _self = this;
      var _isinitialized;
      var _rootCtx;
      var _nextPlugin;
      var _unloadHandlerContainer;
      var _hookContainer;
      _initDefaults();
      dynamicProto(BaseTelemetryPlugin2, _self, function(_self2) {
        _self2[
          _DYN_INITIALIZE
          /* @min:%2einitialize */
        ] = function(config2, core, extensions, pluginChain) {
          _setDefaults(config2, core, pluginChain);
          _isinitialized = true;
        };
        _self2[
          _DYN_TEARDOWN
          /* @min:%2eteardown */
        ] = function(unloadCtx, unloadState) {
          var core = _self2[
            STR_CORE
            /* @min:%2ecore */
          ];
          if (!core || unloadCtx && core !== unloadCtx[
            STR_CORE
            /* @min:%2ecore */
          ]()) {
            return;
          }
          var result;
          var unloadDone = false;
          var theUnloadCtx = unloadCtx || createProcessTelemetryUnloadContext(null, core, _nextPlugin && _nextPlugin[strGetPlugin] ? _nextPlugin[strGetPlugin]() : _nextPlugin);
          var theUnloadState = unloadState || {
            reason: 0,
            isAsync: false
          };
          function _unloadCallback() {
            if (!unloadDone) {
              unloadDone = true;
              _unloadHandlerContainer.run(theUnloadCtx, unloadState);
              _hookContainer.run(theUnloadCtx[
                _DYN_DIAG_LOG
                /* @min:%2ediagLog */
              ]());
              if (result === true) {
                theUnloadCtx[
                  _DYN_PROCESS_NEXT
                  /* @min:%2eprocessNext */
                ](theUnloadState);
              }
              _initDefaults();
            }
          }
          if (!_self2[
            _DYN__DO_TEARDOWN
            /* @min:%2e_doTeardown */
          ] || _self2[
            _DYN__DO_TEARDOWN
            /* @min:%2e_doTeardown */
          ](theUnloadCtx, theUnloadState, _unloadCallback) !== true) {
            _unloadCallback();
          } else {
            result = true;
          }
          return result;
        };
        _self2[
          _DYN_UPDATE
          /* @min:%2eupdate */
        ] = function(updateCtx, updateState) {
          var core = _self2[
            STR_CORE
            /* @min:%2ecore */
          ];
          if (!core || updateCtx && core !== updateCtx[
            STR_CORE
            /* @min:%2ecore */
          ]()) {
            return;
          }
          var result;
          var updateDone = false;
          var theUpdateCtx = updateCtx || createProcessTelemetryUpdateContext(null, core, _nextPlugin && _nextPlugin[strGetPlugin] ? _nextPlugin[strGetPlugin]() : _nextPlugin);
          var theUpdateState = updateState || {
            reason: 0
            /* TelemetryUpdateReason.Unknown */
          };
          function _updateCallback() {
            if (!updateDone) {
              updateDone = true;
              _setDefaults(theUpdateCtx.getCfg(), theUpdateCtx.core(), theUpdateCtx[
                _DYN_GET_NEXT
                /* @min:%2egetNext */
              ]());
            }
          }
          if (!_self2._doUpdate || _self2._doUpdate(theUpdateCtx, theUpdateState, _updateCallback) !== true) {
            _updateCallback();
          } else {
            result = true;
          }
          return result;
        };
        proxyFunctionAs(_self2, "_addUnloadCb", function() {
          return _unloadHandlerContainer;
        }, "add");
        proxyFunctionAs(_self2, "_addHook", function() {
          return _hookContainer;
        }, "add");
        objDefine(_self2, "_unloadHooks", {
          g: function() {
            return _hookContainer;
          }
        });
      });
      _self[
        _DYN_DIAG_LOG
        /* @min:%2ediagLog */
      ] = function(itemCtx) {
        return _getTelCtx(itemCtx)[
          _DYN_DIAG_LOG
          /* @min:%2ediagLog */
        ]();
      };
      _self[
        _DYN_IS_INITIALIZED
        /* @min:%2eisInitialized */
      ] = function() {
        return _isinitialized;
      };
      _self.setInitialized = function(isInitialized) {
        _isinitialized = isInitialized;
      };
      _self[
        _DYN_SET_NEXT_PLUGIN
        /* @min:%2esetNextPlugin */
      ] = function(next) {
        _nextPlugin = next;
      };
      _self[
        _DYN_PROCESS_NEXT
        /* @min:%2eprocessNext */
      ] = function(env, itemCtx) {
        if (itemCtx) {
          itemCtx[
            _DYN_PROCESS_NEXT
            /* @min:%2eprocessNext */
          ](env);
        } else if (_nextPlugin && isFunction3(_nextPlugin[
          STR_PROCESS_TELEMETRY
          /* @min:%2eprocessTelemetry */
        ])) {
          _nextPlugin[
            STR_PROCESS_TELEMETRY
            /* @min:%2eprocessTelemetry */
          ](env, null);
        }
      };
      _self._getTelCtx = _getTelCtx;
      function _getTelCtx(currentCtx) {
        if (currentCtx === void 0) {
          currentCtx = null;
        }
        var itemCtx = currentCtx;
        if (!itemCtx) {
          var rootCtx = _rootCtx || createProcessTelemetryContext(null, {}, _self[
            STR_CORE
            /* @min:%2ecore */
          ]);
          if (_nextPlugin && _nextPlugin[strGetPlugin]) {
            itemCtx = rootCtx[
              _DYN_CREATE_NEW
              /* @min:%2ecreateNew */
            ](null, _nextPlugin[strGetPlugin]);
          } else {
            itemCtx = rootCtx[
              _DYN_CREATE_NEW
              /* @min:%2ecreateNew */
            ](null, _nextPlugin);
          }
        }
        return itemCtx;
      }
      function _setDefaults(config2, core, pluginChain) {
        createDynamicConfig(config2, defaultValues3, safeGetLogger(core));
        if (!pluginChain && core) {
          pluginChain = core[
            _DYN_GET_PROCESS_TEL_CONT2
            /* @min:%2egetProcessTelContext */
          ]()[
            _DYN_GET_NEXT
            /* @min:%2egetNext */
          ]();
        }
        var nextPlugin = _nextPlugin;
        if (_nextPlugin && _nextPlugin[strGetPlugin]) {
          nextPlugin = _nextPlugin[strGetPlugin]();
        }
        _self[
          STR_CORE
          /* @min:%2ecore */
        ] = core;
        _rootCtx = createProcessTelemetryContext(pluginChain, config2, core, nextPlugin);
      }
      function _initDefaults() {
        _isinitialized = false;
        _self[
          STR_CORE
          /* @min:%2ecore */
        ] = null;
        _rootCtx = null;
        _nextPlugin = null;
        _hookContainer = createUnloadHookContainer();
        _unloadHandlerContainer = createUnloadHandlerContainer();
      }
    }
    BaseTelemetryPlugin2.__ieDyn = 1;
    return BaseTelemetryPlugin2;
  }()
);

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/TelemetryInitializerPlugin.js
function _addInitializer(_initializers, id, telemetryInitializer) {
  var theInitializer = {
    id,
    fn: telemetryInitializer
  };
  arrAppend(_initializers, theInitializer);
  var handler = {
    remove: function() {
      arrForEach(_initializers, function(initializer, idx) {
        if (initializer.id === theInitializer.id) {
          _initializers[
            _DYN_SPLICE
            /* @min:%2esplice */
          ](idx, 1);
          return -1;
        }
      });
    }
  };
  return handler;
}
function _runInitializers(_initializers, item, logger) {
  var doNotSendItem = false;
  var telemetryInitializersCount = _initializers[
    _DYN_LENGTH
    /* @min:%2elength */
  ];
  for (var i = 0; i < telemetryInitializersCount; ++i) {
    var telemetryInitializer = _initializers[i];
    if (telemetryInitializer) {
      try {
        if (telemetryInitializer.fn[
          _DYN_APPLY
          /* @min:%2eapply */
        ](null, [item]) === false) {
          doNotSendItem = true;
          break;
        }
      } catch (e) {
        _throwInternal(logger, 2, 64, "Telemetry initializer failed: " + getExceptionName(e), {
          exception: dumpObj(e)
        }, true);
      }
    }
  }
  return !doNotSendItem;
}
var TelemetryInitializerPlugin = (
  /** @class */
  function(_super) {
    __extendsFn(TelemetryInitializerPlugin2, _super);
    function TelemetryInitializerPlugin2() {
      var _this = _super.call(this) || this;
      _this.identifier = "TelemetryInitializerPlugin";
      _this.priority = 199;
      var _id;
      var _initializers;
      _initDefaults();
      dynamicProto(TelemetryInitializerPlugin2, _this, function(_self, _base) {
        _self.addTelemetryInitializer = function(telemetryInitializer) {
          return _addInitializer(_initializers, _id++, telemetryInitializer);
        };
        _self[
          STR_PROCESS_TELEMETRY
          /* @min:%2eprocessTelemetry */
        ] = function(item, itemCtx) {
          if (_runInitializers(_initializers, item, itemCtx ? itemCtx[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ]() : _self[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ]())) {
            _self[
              _DYN_PROCESS_NEXT
              /* @min:%2eprocessNext */
            ](item, itemCtx);
          }
        };
        _self[
          _DYN__DO_TEARDOWN
          /* @min:%2e_doTeardown */
        ] = function() {
          _initDefaults();
        };
      });
      function _initDefaults() {
        _id = 0;
        _initializers = [];
      }
      return _this;
    }
    TelemetryInitializerPlugin2.__ieDyn = 1;
    return TelemetryInitializerPlugin2;
  }(BaseTelemetryPlugin)
);

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/AppInsightsCore.js
var _a5;
var strValidationError = "Plugins must provide initialize method";
var strNotificationManager = "_notificationManager";
var strSdkUnloadingError = "SDK is still unloading...";
var strSdkNotInitialized = "SDK is not initialized";
var maxInitQueueSize = 100;
var maxInitTimeout = 5e4;
var defaultConfig = objDeepFreeze((_a5 = {
  cookieCfg: {}
}, _a5[STR_EXTENSIONS] = {
  rdOnly: true,
  ref: true,
  v: []
}, _a5[STR_CHANNELS] = {
  rdOnly: true,
  ref: true,
  v: []
}, _a5[STR_EXTENSION_CONFIG] = {
  ref: true,
  v: {}
}, _a5[STR_CREATE_PERF_MGR] = UNDEFINED_VALUE, _a5.loggingLevelConsole = 0, _a5.diagnosticLogInterval = UNDEFINED_VALUE, _a5));
function _createPerfManager(core, notificationMgr) {
  return new PerfManager(notificationMgr);
}
function _validateExtensions(logger, channelPriority, allExtensions) {
  var coreExtensions = [];
  var channels = [];
  var extPriorities = {};
  arrForEach(allExtensions, function(ext) {
    if (isNullOrUndefined(ext) || isNullOrUndefined(ext[
      _DYN_INITIALIZE
      /* @min:%2einitialize */
    ])) {
      throwError3(strValidationError);
    }
    var extPriority = ext[
      STR_PRIORITY
      /* @min:%2epriority */
    ];
    var identifier = ext[
      _DYN_IDENTIFIER
      /* @min:%2eidentifier */
    ];
    if (ext && extPriority) {
      if (!isNullOrUndefined(extPriorities[extPriority])) {
        _warnToConsole(logger, "Two extensions have same priority #" + extPriority + " - " + extPriorities[extPriority] + ", " + identifier);
      } else {
        extPriorities[extPriority] = identifier;
      }
    }
    if (!extPriority || extPriority < channelPriority) {
      coreExtensions[
        _DYN_PUSH
        /* @min:%2epush */
      ](ext);
    } else {
      channels[
        _DYN_PUSH
        /* @min:%2epush */
      ](ext);
    }
  });
  return {
    core: coreExtensions,
    channels
  };
}
function _isPluginPresent(thePlugin, plugins) {
  var exists = false;
  arrForEach(plugins, function(plugin) {
    if (plugin === thePlugin) {
      exists = true;
      return -1;
    }
  });
  return exists;
}
function _deepMergeConfig(details, target, newValues, merge2) {
  if (newValues) {
    objForEachKey(newValues, function(key, value) {
      if (merge2) {
        if (isPlainObject(value) && isPlainObject(target[key])) {
          _deepMergeConfig(details, target[key], value, merge2);
        }
      }
      if (merge2 && isPlainObject(value) && isPlainObject(target[key])) {
        _deepMergeConfig(details, target[key], value, merge2);
      } else {
        details.set(target, key, value);
      }
    });
  }
}
function _findWatcher(listeners, newWatcher) {
  var theListener = null;
  var idx = -1;
  arrForEach(listeners, function(listener, lp) {
    if (listener.w === newWatcher) {
      theListener = listener;
      idx = lp;
      return -1;
    }
  });
  return {
    i: idx,
    l: theListener
  };
}
function _addDelayedCfgListener(listeners, newWatcher) {
  var theListener = _findWatcher(listeners, newWatcher).l;
  if (!theListener) {
    theListener = {
      w: newWatcher,
      rm: function() {
        var fnd = _findWatcher(listeners, newWatcher);
        if (fnd.i !== -1) {
          listeners[
            _DYN_SPLICE
            /* @min:%2esplice */
          ](fnd.i, 1);
        }
      }
    };
    listeners[
      _DYN_PUSH
      /* @min:%2epush */
    ](theListener);
  }
  return theListener;
}
function _registerDelayedCfgListener(config2, listeners, logger) {
  arrForEach(listeners, function(listener) {
    var unloadHdl = onConfigChange(config2, listener.w, logger);
    delete listener.w;
    listener.rm = function() {
      unloadHdl.rm();
    };
  });
}
function _initDebugListener(configHandler, unloadContainer, notificationManager, debugListener) {
  unloadContainer.add(configHandler[
    _DYN_WATCH
    /* @min:%2ewatch */
  ](function(details) {
    var disableDbgExt = details.cfg.disableDbgExt;
    if (disableDbgExt === true && debugListener) {
      notificationManager[
        _DYN_REMOVE_NOTIFICATION_0
        /* @min:%2eremoveNotificationListener */
      ](debugListener);
      debugListener = null;
    }
    if (notificationManager && !debugListener && disableDbgExt !== true) {
      debugListener = getDebugListener(details.cfg);
      notificationManager[
        _DYN_ADD_NOTIFICATION_LIS1
        /* @min:%2eaddNotificationListener */
      ](debugListener);
    }
  }));
  return debugListener;
}
function _createUnloadHook(unloadHook) {
  return objDefine({
    rm: function() {
      unloadHook.rm();
    }
  }, "toJSON", {
    v: function() {
      return "aicore::onCfgChange<" + JSON.stringify(unloadHook) + ">";
    }
  });
}
var AppInsightsCore = (
  /** @class */
  function() {
    function AppInsightsCore2() {
      var _configHandler;
      var _isInitialized;
      var _logger;
      var _eventQueue;
      var _notificationManager;
      var _perfManager;
      var _cfgPerfManager;
      var _cookieManager;
      var _pluginChain;
      var _configExtensions;
      var _channelConfig;
      var _channels;
      var _isUnloading;
      var _telemetryInitializerPlugin;
      var _internalLogsEventName;
      var _evtNamespace;
      var _unloadHandlers;
      var _hookContainer;
      var _debugListener2;
      var _traceCtx;
      var _instrumentationKey;
      var _cfgListeners;
      var _extensions;
      var _pluginVersionStringArr;
      var _pluginVersionString;
      var _activeStatus;
      var _endpoint;
      var _initInMemoMaxSize;
      var _isStatusSet;
      var _initTimer;
      var _internalLogPoller;
      var _internalLogPollerListening;
      var _forceStopInternalLogPoller;
      dynamicProto(AppInsightsCore2, this, function(_self) {
        _initDefaults();
        _self["_getDbgPlgTargets"] = function() {
          return [_extensions, _eventQueue];
        };
        _self[
          _DYN_IS_INITIALIZED
          /* @min:%2eisInitialized */
        ] = function() {
          return _isInitialized;
        };
        _self.activeStatus = function() {
          return _activeStatus;
        };
        _self._setPendingStatus = function() {
          _activeStatus = 3;
        };
        _self[
          _DYN_INITIALIZE
          /* @min:%2einitialize */
        ] = function(config2, extensions, logger, notificationManager) {
          if (_isUnloading) {
            throwError3(strSdkUnloadingError);
          }
          if (_self[
            _DYN_IS_INITIALIZED
            /* @min:%2eisInitialized */
          ]()) {
            throwError3("Core cannot be initialized more than once");
          }
          _configHandler = createDynamicConfig(config2, defaultConfig, logger || _self[
            _DYN_LOGGER
            /* @min:%2elogger */
          ], false);
          config2 = _configHandler.cfg;
          _addUnloadHook(_configHandler[
            _DYN_WATCH
            /* @min:%2ewatch */
          ](function(details) {
            var rootCfg = details.cfg;
            var isPending = _activeStatus === 3;
            if (isPending) {
              return;
            }
            _initInMemoMaxSize = rootCfg.initInMemoMaxSize || maxInitQueueSize;
            var ikey = rootCfg.instrumentationKey;
            var endpointUrl = rootCfg.endpointUrl;
            if (isNullOrUndefined(ikey)) {
              _instrumentationKey = null;
              _activeStatus = ActiveStatus.INACTIVE;
              var msg = "Please provide instrumentation key";
              if (!_isInitialized) {
                throwError3(msg);
              } else {
                _throwInternal(_logger, 1, 100, msg);
                _releaseQueues();
              }
              return;
            }
            var promises = [];
            if (isPromiseLike(ikey)) {
              promises[
                _DYN_PUSH
                /* @min:%2epush */
              ](ikey);
              _instrumentationKey = null;
            } else {
              _instrumentationKey = ikey;
            }
            if (isPromiseLike(endpointUrl)) {
              promises[
                _DYN_PUSH
                /* @min:%2epush */
              ](endpointUrl);
              _endpoint = null;
            } else {
              _endpoint = endpointUrl;
            }
            if (promises[
              _DYN_LENGTH
              /* @min:%2elength */
            ]) {
              _isStatusSet = false;
              _activeStatus = 3;
              var initTimeout = isNotNullOrUndefined(rootCfg.initTimeOut) ? rootCfg.initTimeOut : maxInitTimeout;
              var allPromises = createSyncAllSettledPromise(promises);
              _initTimer = scheduleTimeout(function() {
                _initTimer = null;
                if (!_isStatusSet) {
                  _setStatus();
                }
              }, initTimeout);
              doAwaitResponse(allPromises, function(response) {
                try {
                  if (_isStatusSet) {
                    return;
                  }
                  if (!response.rejected) {
                    var values = response[
                      _DYN_VALUE
                      /* @min:%2evalue */
                    ];
                    if (values && values[
                      _DYN_LENGTH
                      /* @min:%2elength */
                    ]) {
                      var ikeyRes = values[0];
                      _instrumentationKey = ikeyRes && ikeyRes[
                        _DYN_VALUE
                        /* @min:%2evalue */
                      ];
                      if (values[
                        _DYN_LENGTH
                        /* @min:%2elength */
                      ] > 1) {
                        var endpointRes = values[1];
                        _endpoint = endpointRes && endpointRes[
                          _DYN_VALUE
                          /* @min:%2evalue */
                        ];
                      }
                    }
                    if (_instrumentationKey) {
                      config2.instrumentationKey = _instrumentationKey;
                      config2.endpointUrl = _endpoint;
                    }
                  }
                  _setStatus();
                } catch (e) {
                  if (!_isStatusSet) {
                    _setStatus();
                  }
                }
              });
            } else {
              _setStatus();
            }
            var extCfg = details.ref(details.cfg, STR_EXTENSION_CONFIG);
            objForEachKey(extCfg, function(key) {
              details.ref(extCfg, key);
            });
          }));
          _notificationManager = notificationManager;
          _debugListener2 = _initDebugListener(_configHandler, _hookContainer, _notificationManager && _self[
            _DYN_GET_NOTIFY_MGR
            /* @min:%2egetNotifyMgr */
          ](), _debugListener2);
          _initPerfManager();
          _self[
            _DYN_LOGGER
            /* @min:%2elogger */
          ] = logger;
          var cfgExtensions = config2[
            STR_EXTENSIONS
            /* @min:%2eextensions */
          ];
          _configExtensions = [];
          _configExtensions[
            _DYN_PUSH
            /* @min:%2epush */
          ].apply(_configExtensions, __spreadArrayFn(__spreadArrayFn([], extensions, false), cfgExtensions, false));
          _channelConfig = config2[
            STR_CHANNELS
            /* @min:%2echannels */
          ];
          _initPluginChain(null);
          if (!_channels || _channels[
            _DYN_LENGTH
            /* @min:%2elength */
          ] === 0) {
            throwError3("No " + STR_CHANNELS + " available");
          }
          if (_channelConfig && _channelConfig[
            _DYN_LENGTH
            /* @min:%2elength */
          ] > 1) {
            var teeController = _self[
              _DYN_GET_PLUGIN
              /* @min:%2egetPlugin */
            ]("TeeChannelController");
            if (!teeController || !teeController.plugin) {
              _throwInternal(_logger, 1, 28, "TeeChannel required");
            }
          }
          _registerDelayedCfgListener(config2, _cfgListeners, _logger);
          _cfgListeners = null;
          _isInitialized = true;
          if (_activeStatus === ActiveStatus.ACTIVE) {
            _releaseQueues();
          }
        };
        _self.getChannels = function() {
          var controls = [];
          if (_channels) {
            arrForEach(_channels, function(channel) {
              controls[
                _DYN_PUSH
                /* @min:%2epush */
              ](channel);
            });
          }
          return objFreeze(controls);
        };
        _self.track = function(telemetryItem) {
          doPerf(_self[
            STR_GET_PERF_MGR
            /* @min:%2egetPerfMgr */
          ](), function() {
            return "AppInsightsCore:track";
          }, function() {
            if (telemetryItem === null) {
              _notifyInvalidEvent(telemetryItem);
              throwError3("Invalid telemetry item");
            }
            if (!telemetryItem[
              _DYN_NAME
              /* @min:%2ename */
            ] && isNullOrUndefined(telemetryItem[
              _DYN_NAME
              /* @min:%2ename */
            ])) {
              _notifyInvalidEvent(telemetryItem);
              throwError3("telemetry name required");
            }
            telemetryItem.iKey = telemetryItem.iKey || _instrumentationKey;
            telemetryItem.time = telemetryItem.time || toISOString(/* @__PURE__ */ new Date());
            telemetryItem.ver = telemetryItem.ver || "4.0";
            if (!_isUnloading && _self[
              _DYN_IS_INITIALIZED
              /* @min:%2eisInitialized */
            ]() && _activeStatus === ActiveStatus.ACTIVE) {
              _createTelCtx()[
                _DYN_PROCESS_NEXT
                /* @min:%2eprocessNext */
              ](telemetryItem);
            } else if (_activeStatus !== ActiveStatus.INACTIVE) {
              if (_eventQueue[
                _DYN_LENGTH
                /* @min:%2elength */
              ] <= _initInMemoMaxSize) {
                _eventQueue[
                  _DYN_PUSH
                  /* @min:%2epush */
                ](telemetryItem);
              }
            }
          }, function() {
            return {
              item: telemetryItem
            };
          }, !telemetryItem.sync);
        };
        _self[
          _DYN_GET_PROCESS_TEL_CONT2
          /* @min:%2egetProcessTelContext */
        ] = _createTelCtx;
        _self[
          _DYN_GET_NOTIFY_MGR
          /* @min:%2egetNotifyMgr */
        ] = function() {
          if (!_notificationManager) {
            _notificationManager = new NotificationManager(_configHandler.cfg);
            _self[strNotificationManager] = _notificationManager;
          }
          return _notificationManager;
        };
        _self[
          _DYN_ADD_NOTIFICATION_LIS1
          /* @min:%2eaddNotificationListener */
        ] = function(listener) {
          _self.getNotifyMgr()[
            _DYN_ADD_NOTIFICATION_LIS1
            /* @min:%2eaddNotificationListener */
          ](listener);
        };
        _self[
          _DYN_REMOVE_NOTIFICATION_0
          /* @min:%2eremoveNotificationListener */
        ] = function(listener) {
          if (_notificationManager) {
            _notificationManager[
              _DYN_REMOVE_NOTIFICATION_0
              /* @min:%2eremoveNotificationListener */
            ](listener);
          }
        };
        _self.getCookieMgr = function() {
          if (!_cookieManager) {
            _cookieManager = createCookieMgr(_configHandler.cfg, _self[
              _DYN_LOGGER
              /* @min:%2elogger */
            ]);
          }
          return _cookieManager;
        };
        _self.setCookieMgr = function(cookieMgr) {
          if (_cookieManager !== cookieMgr) {
            runTargetUnload(_cookieManager, false);
            _cookieManager = cookieMgr;
          }
        };
        _self[
          STR_GET_PERF_MGR
          /* @min:%2egetPerfMgr */
        ] = function() {
          return _perfManager || _cfgPerfManager || getGblPerfMgr();
        };
        _self.setPerfMgr = function(perfMgr) {
          _perfManager = perfMgr;
        };
        _self.eventCnt = function() {
          return _eventQueue[
            _DYN_LENGTH
            /* @min:%2elength */
          ];
        };
        _self.releaseQueue = function() {
          if (_isInitialized && _eventQueue[
            _DYN_LENGTH
            /* @min:%2elength */
          ] > 0) {
            var eventQueue = _eventQueue;
            _eventQueue = [];
            if (_activeStatus === 2) {
              arrForEach(eventQueue, function(event) {
                event.iKey = event.iKey || _instrumentationKey;
                _createTelCtx()[
                  _DYN_PROCESS_NEXT
                  /* @min:%2eprocessNext */
                ](event);
              });
            } else {
              _throwInternal(_logger, 2, 20, "core init status is not active");
            }
          }
        };
        _self.pollInternalLogs = function(eventName) {
          _internalLogsEventName = eventName || null;
          _forceStopInternalLogPoller = false;
          _internalLogPoller && _internalLogPoller[
            _DYN_CANCEL
            /* @min:%2ecancel */
          ]();
          return _startLogPoller(true);
        };
        function _setStatus() {
          _isStatusSet = true;
          if (isNullOrUndefined(_instrumentationKey)) {
            _activeStatus = ActiveStatus.INACTIVE;
            _throwInternal(_logger, 1, 112, "ikey can't be resolved from promises");
          } else {
            _activeStatus = ActiveStatus.ACTIVE;
          }
          _releaseQueues();
        }
        function _releaseQueues() {
          if (_isInitialized) {
            _self.releaseQueue();
            _self.pollInternalLogs();
          }
        }
        function _startLogPoller(alwaysStart) {
          if ((!_internalLogPoller || !_internalLogPoller[
            _DYN_ENABLED
            /* @min:%2eenabled */
          ]) && !_forceStopInternalLogPoller) {
            var shouldStart = alwaysStart || _logger && _logger.queue[
              _DYN_LENGTH
              /* @min:%2elength */
            ] > 0;
            if (shouldStart) {
              if (!_internalLogPollerListening) {
                _internalLogPollerListening = true;
                _addUnloadHook(_configHandler[
                  _DYN_WATCH
                  /* @min:%2ewatch */
                ](function(details) {
                  var interval = details.cfg.diagnosticLogInterval;
                  if (!interval || !(interval > 0)) {
                    interval = 1e4;
                  }
                  var isRunning = false;
                  if (_internalLogPoller) {
                    isRunning = _internalLogPoller[
                      _DYN_ENABLED
                      /* @min:%2eenabled */
                    ];
                    _internalLogPoller[
                      _DYN_CANCEL
                      /* @min:%2ecancel */
                    ]();
                  }
                  _internalLogPoller = createTimeout(_flushInternalLogs, interval);
                  _internalLogPoller.unref();
                  _internalLogPoller[
                    _DYN_ENABLED
                    /* @min:%2eenabled */
                  ] = isRunning;
                }));
              }
              _internalLogPoller[
                _DYN_ENABLED
                /* @min:%2eenabled */
              ] = true;
            }
          }
          return _internalLogPoller;
        }
        _self[
          _DYN_STOP_POLLING_INTERNA3
          /* @min:%2estopPollingInternalLogs */
        ] = function() {
          _forceStopInternalLogPoller = true;
          _internalLogPoller && _internalLogPoller[
            _DYN_CANCEL
            /* @min:%2ecancel */
          ]();
          _flushInternalLogs();
        };
        proxyFunctions(_self, function() {
          return _telemetryInitializerPlugin;
        }, ["addTelemetryInitializer"]);
        _self[
          _DYN_UNLOAD
          /* @min:%2eunload */
        ] = function(isAsync, unloadComplete, cbTimeout) {
          if (isAsync === void 0) {
            isAsync = true;
          }
          if (!_isInitialized) {
            throwError3(strSdkNotInitialized);
          }
          if (_isUnloading) {
            throwError3(strSdkUnloadingError);
          }
          var unloadState = {
            reason: 50,
            isAsync,
            flushComplete: false
          };
          var result;
          if (isAsync && !unloadComplete) {
            result = createPromise(function(resolve) {
              unloadComplete = resolve;
            });
          }
          var processUnloadCtx = createProcessTelemetryUnloadContext(_getPluginChain(), _self);
          processUnloadCtx[
            _DYN_ON_COMPLETE
            /* @min:%2eonComplete */
          ](function() {
            _hookContainer.run(_self[
              _DYN_LOGGER
              /* @min:%2elogger */
            ]);
            doUnloadAll([_cookieManager, _notificationManager, _logger], isAsync, function() {
              _initDefaults();
              unloadComplete && unloadComplete(unloadState);
            });
          }, _self);
          function _doUnload(flushComplete) {
            unloadState.flushComplete = flushComplete;
            _isUnloading = true;
            _unloadHandlers.run(processUnloadCtx, unloadState);
            _self[
              _DYN_STOP_POLLING_INTERNA3
              /* @min:%2estopPollingInternalLogs */
            ]();
            processUnloadCtx[
              _DYN_PROCESS_NEXT
              /* @min:%2eprocessNext */
            ](unloadState);
          }
          _flushInternalLogs();
          if (!_flushChannels(isAsync, _doUnload, 6, cbTimeout)) {
            _doUnload(false);
          }
          return result;
        };
        _self[
          _DYN_GET_PLUGIN
          /* @min:%2egetPlugin */
        ] = _getPlugin;
        _self.addPlugin = function(plugin, replaceExisting, isAsync, addCb) {
          if (!plugin) {
            addCb && addCb(false);
            _logOrThrowError(strValidationError);
            return;
          }
          var existingPlugin = _getPlugin(plugin[
            _DYN_IDENTIFIER
            /* @min:%2eidentifier */
          ]);
          if (existingPlugin && !replaceExisting) {
            addCb && addCb(false);
            _logOrThrowError("Plugin [" + plugin[
              _DYN_IDENTIFIER
              /* @min:%2eidentifier */
            ] + "] is already loaded!");
            return;
          }
          var updateState = {
            reason: 16
            /* TelemetryUpdateReason.PluginAdded */
          };
          function _addPlugin(removed) {
            _configExtensions[
              _DYN_PUSH
              /* @min:%2epush */
            ](plugin);
            updateState.added = [plugin];
            _initPluginChain(updateState);
            addCb && addCb(true);
          }
          if (existingPlugin) {
            var removedPlugins_1 = [existingPlugin.plugin];
            var unloadState = {
              reason: 2,
              isAsync: !!isAsync
            };
            _removePlugins(removedPlugins_1, unloadState, function(removed) {
              if (!removed) {
                addCb && addCb(false);
              } else {
                updateState.removed = removedPlugins_1;
                updateState.reason |= 32;
                _addPlugin(true);
              }
            });
          } else {
            _addPlugin(false);
          }
        };
        _self.updateCfg = function(newConfig, mergeExisting) {
          if (mergeExisting === void 0) {
            mergeExisting = true;
          }
          var updateState;
          if (_self[
            _DYN_IS_INITIALIZED
            /* @min:%2eisInitialized */
          ]()) {
            updateState = {
              reason: 1,
              cfg: _configHandler.cfg,
              oldCfg: deepExtend({}, _configHandler.cfg),
              newConfig: deepExtend({}, newConfig),
              merge: mergeExisting
            };
            newConfig = updateState.newConfig;
            var cfg = _configHandler.cfg;
            newConfig[
              STR_EXTENSIONS
              /* @min:%2eextensions */
            ] = cfg[
              STR_EXTENSIONS
              /* @min:%2eextensions */
            ];
            newConfig[
              STR_CHANNELS
              /* @min:%2echannels */
            ] = cfg[
              STR_CHANNELS
              /* @min:%2echannels */
            ];
          }
          _configHandler._block(function(details) {
            var theConfig = details.cfg;
            _deepMergeConfig(details, theConfig, newConfig, mergeExisting);
            if (!mergeExisting) {
              objForEachKey(theConfig, function(key) {
                if (!objHasOwn(newConfig, key)) {
                  details.set(theConfig, key, UNDEFINED_VALUE);
                }
              });
            }
            details.setDf(theConfig, defaultConfig);
          }, true);
          _configHandler.notify();
          if (updateState) {
            _doUpdate(updateState);
          }
        };
        _self.evtNamespace = function() {
          return _evtNamespace;
        };
        _self.flush = _flushChannels;
        _self.getTraceCtx = function(createNew) {
          if (!_traceCtx) {
            _traceCtx = createDistributedTraceContext();
          }
          return _traceCtx;
        };
        _self.setTraceCtx = function(traceCtx) {
          _traceCtx = traceCtx || null;
        };
        _self.addUnloadHook = _addUnloadHook;
        proxyFunctionAs(_self, "addUnloadCb", function() {
          return _unloadHandlers;
        }, "add");
        _self.onCfgChange = function(handler) {
          var unloadHook;
          if (!_isInitialized) {
            unloadHook = _addDelayedCfgListener(_cfgListeners, handler);
          } else {
            unloadHook = onConfigChange(_configHandler.cfg, handler, _self[
              _DYN_LOGGER
              /* @min:%2elogger */
            ]);
          }
          return _createUnloadHook(unloadHook);
        };
        _self.getWParam = function() {
          return hasDocument() || !!_configHandler.cfg.enableWParam ? 0 : -1;
        };
        function _setPluginVersions() {
          var thePlugins = {};
          _pluginVersionStringArr = [];
          var _addPluginVersions = function(plugins) {
            if (plugins) {
              arrForEach(plugins, function(plugin) {
                if (plugin[
                  _DYN_IDENTIFIER
                  /* @min:%2eidentifier */
                ] && plugin[
                  _DYN_VERSION
                  /* @min:%2eversion */
                ] && !thePlugins[plugin.identifier]) {
                  var ver = plugin[
                    _DYN_IDENTIFIER
                    /* @min:%2eidentifier */
                  ] + "=" + plugin[
                    _DYN_VERSION
                    /* @min:%2eversion */
                  ];
                  _pluginVersionStringArr[
                    _DYN_PUSH
                    /* @min:%2epush */
                  ](ver);
                  thePlugins[plugin.identifier] = plugin;
                }
              });
            }
          };
          _addPluginVersions(_channels);
          if (_channelConfig) {
            arrForEach(_channelConfig, function(channels) {
              _addPluginVersions(channels);
            });
          }
          _addPluginVersions(_configExtensions);
        }
        function _initDefaults() {
          _isInitialized = false;
          _configHandler = createDynamicConfig({}, defaultConfig, _self[
            _DYN_LOGGER
            /* @min:%2elogger */
          ]);
          _configHandler.cfg[
            _DYN_LOGGING_LEVEL_CONSOL4
            /* @min:%2eloggingLevelConsole */
          ] = 1;
          objDefine(_self, "config", {
            g: function() {
              return _configHandler.cfg;
            },
            s: function(newValue) {
              _self.updateCfg(newValue, false);
            }
          });
          objDefine(_self, "pluginVersionStringArr", {
            g: function() {
              if (!_pluginVersionStringArr) {
                _setPluginVersions();
              }
              return _pluginVersionStringArr;
            }
          });
          objDefine(_self, "pluginVersionString", {
            g: function() {
              if (!_pluginVersionString) {
                if (!_pluginVersionStringArr) {
                  _setPluginVersions();
                }
                _pluginVersionString = _pluginVersionStringArr.join(";");
              }
              return _pluginVersionString || STR_EMPTY;
            }
          });
          objDefine(_self, "logger", {
            g: function() {
              if (!_logger) {
                _logger = new DiagnosticLogger(_configHandler.cfg);
                _configHandler[
                  _DYN_LOGGER
                  /* @min:%2elogger */
                ] = _logger;
              }
              return _logger;
            },
            s: function(newLogger) {
              _configHandler[
                _DYN_LOGGER
                /* @min:%2elogger */
              ] = newLogger;
              if (_logger !== newLogger) {
                runTargetUnload(_logger, false);
                _logger = newLogger;
              }
            }
          });
          _self[
            _DYN_LOGGER
            /* @min:%2elogger */
          ] = new DiagnosticLogger(_configHandler.cfg);
          _extensions = [];
          var cfgExtensions = _self.config[
            STR_EXTENSIONS
            /* @min:%2eextensions */
          ] || [];
          cfgExtensions.splice(0, cfgExtensions[
            _DYN_LENGTH
            /* @min:%2elength */
          ]);
          arrAppend(cfgExtensions, _extensions);
          _telemetryInitializerPlugin = new TelemetryInitializerPlugin();
          _eventQueue = [];
          runTargetUnload(_notificationManager, false);
          _notificationManager = null;
          _perfManager = null;
          _cfgPerfManager = null;
          runTargetUnload(_cookieManager, false);
          _cookieManager = null;
          _pluginChain = null;
          _configExtensions = [];
          _channelConfig = null;
          _channels = null;
          _isUnloading = false;
          _internalLogsEventName = null;
          _evtNamespace = createUniqueNamespace("AIBaseCore", true);
          _unloadHandlers = createUnloadHandlerContainer();
          _traceCtx = null;
          _instrumentationKey = null;
          _hookContainer = createUnloadHookContainer();
          _cfgListeners = [];
          _pluginVersionString = null;
          _pluginVersionStringArr = null;
          _forceStopInternalLogPoller = false;
          _internalLogPoller = null;
          _internalLogPollerListening = false;
          _activeStatus = 0;
          _endpoint = null;
          _initInMemoMaxSize = null;
          _isStatusSet = false;
          _initTimer = null;
        }
        function _createTelCtx() {
          var theCtx = createProcessTelemetryContext(_getPluginChain(), _configHandler.cfg, _self);
          theCtx[
            _DYN_ON_COMPLETE
            /* @min:%2eonComplete */
          ](_startLogPoller);
          return theCtx;
        }
        function _initPluginChain(updateState) {
          var theExtensions = _validateExtensions(_self[
            _DYN_LOGGER
            /* @min:%2elogger */
          ], ChannelControllerPriority, _configExtensions);
          _pluginChain = null;
          _pluginVersionString = null;
          _pluginVersionStringArr = null;
          _channels = (_channelConfig || [])[0] || [];
          _channels = sortPlugins(arrAppend(_channels, theExtensions[
            STR_CHANNELS
            /* @min:%2echannels */
          ]));
          var allExtensions = arrAppend(sortPlugins(theExtensions[
            STR_CORE
            /* @min:%2ecore */
          ]), _channels);
          _extensions = objFreeze(allExtensions);
          var cfgExtensions = _self.config[
            STR_EXTENSIONS
            /* @min:%2eextensions */
          ] || [];
          cfgExtensions.splice(0, cfgExtensions[
            _DYN_LENGTH
            /* @min:%2elength */
          ]);
          arrAppend(cfgExtensions, _extensions);
          var rootCtx = _createTelCtx();
          if (_channels && _channels[
            _DYN_LENGTH
            /* @min:%2elength */
          ] > 0) {
            initializePlugins(rootCtx[
              _DYN_CREATE_NEW
              /* @min:%2ecreateNew */
            ](_channels), allExtensions);
          }
          initializePlugins(rootCtx, allExtensions);
          if (updateState) {
            _doUpdate(updateState);
          }
        }
        function _getPlugin(pluginIdentifier) {
          var theExt = null;
          var thePlugin = null;
          var channelHosts = [];
          arrForEach(_extensions, function(ext) {
            if (ext[
              _DYN_IDENTIFIER
              /* @min:%2eidentifier */
            ] === pluginIdentifier && ext !== _telemetryInitializerPlugin) {
              thePlugin = ext;
              return -1;
            }
            if (ext.getChannel) {
              channelHosts[
                _DYN_PUSH
                /* @min:%2epush */
              ](ext);
            }
          });
          if (!thePlugin && channelHosts[
            _DYN_LENGTH
            /* @min:%2elength */
          ] > 0) {
            arrForEach(channelHosts, function(host) {
              thePlugin = host.getChannel(pluginIdentifier);
              if (!thePlugin) {
                return -1;
              }
            });
          }
          if (thePlugin) {
            theExt = {
              plugin: thePlugin,
              setEnabled: function(enabled) {
                _getPluginState(thePlugin)[STR_DISABLED] = !enabled;
              },
              isEnabled: function() {
                var pluginState = _getPluginState(thePlugin);
                return !pluginState[
                  _DYN_TEARDOWN
                  /* @min:%2eteardown */
                ] && !pluginState[STR_DISABLED];
              },
              remove: function(isAsync, removeCb) {
                if (isAsync === void 0) {
                  isAsync = true;
                }
                var pluginsToRemove = [thePlugin];
                var unloadState = {
                  reason: 1,
                  isAsync
                };
                _removePlugins(pluginsToRemove, unloadState, function(removed) {
                  if (removed) {
                    _initPluginChain({
                      reason: 32,
                      removed: pluginsToRemove
                    });
                  }
                  removeCb && removeCb(removed);
                });
              }
            };
          }
          return theExt;
        }
        function _getPluginChain() {
          if (!_pluginChain) {
            var extensions = (_extensions || []).slice();
            if (arrIndexOf(extensions, _telemetryInitializerPlugin) === -1) {
              extensions[
                _DYN_PUSH
                /* @min:%2epush */
              ](_telemetryInitializerPlugin);
            }
            _pluginChain = createTelemetryProxyChain(sortPlugins(extensions), _configHandler.cfg, _self);
          }
          return _pluginChain;
        }
        function _removePlugins(thePlugins, unloadState, removeComplete) {
          if (thePlugins && thePlugins[
            _DYN_LENGTH
            /* @min:%2elength */
          ] > 0) {
            var unloadChain = createTelemetryProxyChain(thePlugins, _configHandler.cfg, _self);
            var unloadCtx = createProcessTelemetryUnloadContext(unloadChain, _self);
            unloadCtx[
              _DYN_ON_COMPLETE
              /* @min:%2eonComplete */
            ](function() {
              var removed = false;
              var newConfigExtensions = [];
              arrForEach(_configExtensions, function(plugin, idx) {
                if (!_isPluginPresent(plugin, thePlugins)) {
                  newConfigExtensions[
                    _DYN_PUSH
                    /* @min:%2epush */
                  ](plugin);
                } else {
                  removed = true;
                }
              });
              _configExtensions = newConfigExtensions;
              _pluginVersionString = null;
              _pluginVersionStringArr = null;
              var newChannelConfig = [];
              if (_channelConfig) {
                arrForEach(_channelConfig, function(queue, idx) {
                  var newQueue = [];
                  arrForEach(queue, function(channel) {
                    if (!_isPluginPresent(channel, thePlugins)) {
                      newQueue[
                        _DYN_PUSH
                        /* @min:%2epush */
                      ](channel);
                    } else {
                      removed = true;
                    }
                  });
                  newChannelConfig[
                    _DYN_PUSH
                    /* @min:%2epush */
                  ](newQueue);
                });
                _channelConfig = newChannelConfig;
              }
              removeComplete && removeComplete(removed);
              _startLogPoller();
            });
            unloadCtx[
              _DYN_PROCESS_NEXT
              /* @min:%2eprocessNext */
            ](unloadState);
          } else {
            removeComplete(false);
          }
        }
        function _flushInternalLogs() {
          if (_logger && _logger.queue) {
            var queue = _logger.queue.slice(0);
            _logger.queue[
              _DYN_LENGTH
              /* @min:%2elength */
            ] = 0;
            arrForEach(queue, function(logMessage) {
              var item = {
                name: _internalLogsEventName ? _internalLogsEventName : "InternalMessageId: " + logMessage[
                  _DYN_MESSAGE_ID
                  /* @min:%2emessageId */
                ],
                iKey: _instrumentationKey,
                time: toISOString(/* @__PURE__ */ new Date()),
                baseType: _InternalLogMessage.dataType,
                baseData: {
                  message: logMessage[
                    _DYN_MESSAGE
                    /* @min:%2emessage */
                  ]
                }
              };
              _self.track(item);
            });
          }
        }
        function _flushChannels(isAsync, callBack, sendReason, cbTimeout) {
          var waiting = 1;
          var doneIterating = false;
          var cbTimer = null;
          cbTimeout = cbTimeout || 5e3;
          function doCallback() {
            waiting--;
            if (doneIterating && waiting === 0) {
              cbTimer && cbTimer[
                _DYN_CANCEL
                /* @min:%2ecancel */
              ]();
              cbTimer = null;
              callBack && callBack(doneIterating);
              callBack = null;
            }
          }
          if (_channels && _channels[
            _DYN_LENGTH
            /* @min:%2elength */
          ] > 0) {
            var flushCtx = _createTelCtx()[
              _DYN_CREATE_NEW
              /* @min:%2ecreateNew */
            ](_channels);
            flushCtx.iterate(function(plugin) {
              if (plugin.flush) {
                waiting++;
                var handled_1 = false;
                if (!plugin.flush(isAsync, function() {
                  handled_1 = true;
                  doCallback();
                }, sendReason)) {
                  if (!handled_1) {
                    if (isAsync && cbTimer == null) {
                      cbTimer = scheduleTimeout(function() {
                        cbTimer = null;
                        doCallback();
                      }, cbTimeout);
                    } else {
                      doCallback();
                    }
                  }
                }
              }
            });
          }
          doneIterating = true;
          doCallback();
          return true;
        }
        function _initPerfManager() {
          var prevCfgPerfMgr;
          _addUnloadHook(_configHandler[
            _DYN_WATCH
            /* @min:%2ewatch */
          ](function(details) {
            var enablePerfMgr = details.cfg.enablePerfMgr;
            if (enablePerfMgr) {
              var createPerfMgr = details.cfg[
                STR_CREATE_PERF_MGR
                /* @min:%2ecreatePerfMgr */
              ];
              if (prevCfgPerfMgr !== createPerfMgr || !prevCfgPerfMgr) {
                if (!createPerfMgr) {
                  createPerfMgr = _createPerfManager;
                }
                getSetValue(details.cfg, STR_CREATE_PERF_MGR, createPerfMgr);
                prevCfgPerfMgr = createPerfMgr;
                _cfgPerfManager = null;
              }
              if (!_perfManager && !_cfgPerfManager && isFunction3(createPerfMgr)) {
                _cfgPerfManager = createPerfMgr(_self, _self[
                  _DYN_GET_NOTIFY_MGR
                  /* @min:%2egetNotifyMgr */
                ]());
              }
            } else {
              _cfgPerfManager = null;
              prevCfgPerfMgr = null;
            }
          }));
        }
        function _doUpdate(updateState) {
          var updateCtx = createProcessTelemetryUpdateContext(_getPluginChain(), _self);
          updateCtx[
            _DYN_ON_COMPLETE
            /* @min:%2eonComplete */
          ](_startLogPoller);
          if (!_self._updateHook || _self._updateHook(updateCtx, updateState) !== true) {
            updateCtx[
              _DYN_PROCESS_NEXT
              /* @min:%2eprocessNext */
            ](updateState);
          }
        }
        function _logOrThrowError(message) {
          var logger = _self[
            _DYN_LOGGER
            /* @min:%2elogger */
          ];
          if (logger) {
            _throwInternal(logger, 2, 73, message);
            _startLogPoller();
          } else {
            throwError3(message);
          }
        }
        function _notifyInvalidEvent(telemetryItem) {
          var manager = _self[
            _DYN_GET_NOTIFY_MGR
            /* @min:%2egetNotifyMgr */
          ]();
          if (manager) {
            manager[
              STR_EVENTS_DISCARDED
              /* @min:%2eeventsDiscarded */
            ](
              [telemetryItem],
              2
              /* eEventsDiscardedReason.InvalidEvent */
            );
          }
        }
        function _addUnloadHook(hooks) {
          _hookContainer.add(hooks);
        }
      });
    }
    AppInsightsCore2.__ieDyn = 1;
    return AppInsightsCore2;
  }()
);

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/ResponseHelpers.js
function parseResponse(response, diagLog) {
  try {
    if (response && response !== "") {
      var result = getJSON().parse(response);
      if (result && result[
        _DYN_ITEMS_RECEIVED
        /* @min:%2eitemsReceived */
      ] && result[
        _DYN_ITEMS_RECEIVED
        /* @min:%2eitemsReceived */
      ] >= result.itemsAccepted && result.itemsReceived - result.itemsAccepted === result.errors[
        _DYN_LENGTH
        /* @min:%2elength */
      ]) {
        return result;
      }
    }
  } catch (e) {
    _throwInternal(diagLog, 1, 43, "Cannot parse the response. " + (e[
      _DYN_NAME
      /* @min:%2ename */
    ] || dumpObj(e)), {
      response
    });
  }
  return null;
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/SenderPostManager.js
var STR_EMPTY2 = "";
var STR_NO_RESPONSE_BODY = "NoResponseBody";
var _noResponseQs = "&" + STR_NO_RESPONSE_BODY + "=true";
var STR_POST_METHOD = "POST";
var SenderPostManager = (
  /** @class */
  function() {
    function SenderPostManager2() {
      var _syncFetchPayload = 0;
      var _enableSendPromise;
      var _isInitialized;
      var _diagLog;
      var _isOneDs;
      var _onCompleteFuncs;
      var _disableCredentials;
      var _fetchCredentials;
      var _fallbackInst;
      var _disableXhr;
      var _disableBeacon;
      var _disableBeaconSync;
      var _disableFetchKeepAlive;
      var _addNoResponse;
      var _timeoutWrapper;
      dynamicProto(SenderPostManager2, this, function(_self, _base) {
        var _sendCredentials = true;
        _initDefaults();
        _self[
          _DYN_INITIALIZE
          /* @min:%2einitialize */
        ] = function(config2, diagLog) {
          _diagLog = diagLog;
          if (_isInitialized) {
            _throwInternal(_diagLog, 1, 28, "Sender is already initialized");
          }
          _self.SetConfig(config2);
          _isInitialized = true;
        };
        _self["_getDbgPlgTargets"] = function() {
          return [_isInitialized, _isOneDs, _disableCredentials, _enableSendPromise];
        };
        _self.SetConfig = function(config2) {
          try {
            _onCompleteFuncs = config2.senderOnCompleteCallBack || {};
            _disableCredentials = !!config2.disableCredentials;
            _fetchCredentials = config2.fetchCredentials;
            _isOneDs = !!config2.isOneDs;
            _enableSendPromise = !!config2.enableSendPromise;
            _disableXhr = !!config2.disableXhr;
            _disableBeacon = !!config2.disableBeacon;
            _disableBeaconSync = !!config2.disableBeaconSync;
            _timeoutWrapper = config2.timeWrapper;
            _addNoResponse = !!config2.addNoResponse;
            _disableFetchKeepAlive = !!config2.disableFetchKeepAlive;
            _fallbackInst = {
              sendPOST: _xhrSender
            };
            if (!_isOneDs) {
              _sendCredentials = false;
            }
            if (_disableCredentials) {
              var location_1 = getLocation();
              if (location_1 && location_1.protocol && location_1.protocol[
                _DYN_TO_LOWER_CASE
                /* @min:%2etoLowerCase */
              ]() === "file:") {
                _sendCredentials = false;
              }
            }
            return true;
          } catch (e) {
          }
          return false;
        };
        _self.getSyncFetchPayload = function() {
          return _syncFetchPayload;
        };
        _self.getSenderInst = function(transports, sync) {
          if (transports && transports[
            _DYN_LENGTH
            /* @min:%2elength */
          ]) {
            return _getSenderInterface(transports, sync);
          }
          return null;
        };
        _self.getFallbackInst = function() {
          return _fallbackInst;
        };
        _self[
          _DYN__DO_TEARDOWN
          /* @min:%2e_doTeardown */
        ] = function(unloadCtx, unloadState) {
          _initDefaults();
        };
        function _onSuccess(res, onComplete) {
          _doOnComplete(onComplete, 200, {}, res);
        }
        function _onError(message, onComplete) {
          _throwInternal(_diagLog, 2, 26, "Failed to send telemetry.", {
            message
          });
          _doOnComplete(onComplete, 400, {});
        }
        function _onNoPayloadUrl(onComplete) {
          _onError("No endpoint url is provided for the batch", onComplete);
        }
        function _getSenderInterface(transports, syncSupport) {
          var transportType = 0;
          var sendPostFunc = null;
          var lp = 0;
          while (sendPostFunc == null && lp < transports[
            _DYN_LENGTH
            /* @min:%2elength */
          ]) {
            transportType = transports[lp];
            if (!_disableXhr && transportType === 1) {
              if (useXDomainRequest()) {
                sendPostFunc = _xdrSender;
              } else if (isXhrSupported()) {
                sendPostFunc = _xhrSender;
              }
            } else if (transportType === 2 && isFetchSupported(syncSupport) && (!syncSupport || !_disableFetchKeepAlive)) {
              sendPostFunc = _doFetchSender;
            } else if (transportType === 3 && isBeaconsSupported() && (syncSupport ? !_disableBeaconSync : !_disableBeacon)) {
              sendPostFunc = _beaconSender;
            }
            lp++;
          }
          if (sendPostFunc) {
            return {
              _transport: transportType,
              _isSync: syncSupport,
              sendPOST: sendPostFunc
            };
          }
          return null;
        }
        function _doOnComplete(oncomplete, status, headers, response) {
          try {
            oncomplete && oncomplete(status, headers, response);
          } catch (e) {
          }
        }
        function _doBeaconSend(payload, oncomplete) {
          var nav = getNavigator();
          var url = payload[
            _DYN_URL_STRING
            /* @min:%2eurlString */
          ];
          if (!url) {
            _onNoPayloadUrl(oncomplete);
            return true;
          }
          url = payload[
            _DYN_URL_STRING
            /* @min:%2eurlString */
          ] + (_addNoResponse ? _noResponseQs : STR_EMPTY2);
          var data = payload[
            _DYN_DATA
            /* @min:%2edata */
          ];
          var plainTextBatch = _isOneDs ? data : new Blob([data], {
            type: "text/plain;charset=UTF-8"
          });
          var queued = nav.sendBeacon(url, plainTextBatch);
          return queued;
        }
        function _beaconSender(payload, oncomplete, sync) {
          var data = payload[
            _DYN_DATA
            /* @min:%2edata */
          ];
          try {
            if (data) {
              if (!_doBeaconSend(payload, oncomplete)) {
                var onRetry = _onCompleteFuncs && _onCompleteFuncs.beaconOnRetry;
                if (onRetry && isFunction3(onRetry)) {
                  onRetry(payload, oncomplete, _doBeaconSend);
                } else {
                  _fallbackInst && _fallbackInst.sendPOST(payload, oncomplete, true);
                  _throwInternal(_diagLog, 2, 40, ". Failed to send telemetry with Beacon API, retried with normal sender.");
                }
              } else {
                _onSuccess(STR_EMPTY2, oncomplete);
              }
            }
          } catch (e) {
            _isOneDs && _warnToConsole(_diagLog, "Failed to send telemetry using sendBeacon API. Ex:" + dumpObj(e));
            _doOnComplete(oncomplete, _isOneDs ? 0 : 400, {}, STR_EMPTY2);
          }
          return;
        }
        function _xhrSender(payload, oncomplete, sync) {
          var thePromise;
          var resolveFunc;
          var rejectFunc;
          var headers = payload[
            _DYN_HEADERS
            /* @min:%2eheaders */
          ] || {};
          if (!sync && _enableSendPromise) {
            thePromise = createPromise(function(resolve, reject) {
              resolveFunc = resolve;
              rejectFunc = reject;
            });
          }
          if (_isOneDs && sync && payload.disableXhrSync) {
            sync = false;
          }
          var endPointUrl = payload[
            _DYN_URL_STRING
            /* @min:%2eurlString */
          ];
          if (!endPointUrl) {
            _onNoPayloadUrl(oncomplete);
            resolveFunc && resolveFunc(false);
            return;
          }
          var xhr = openXhr(STR_POST_METHOD, endPointUrl, _sendCredentials, true, sync, payload[
            _DYN_TIMEOUT
            /* @min:%2etimeout */
          ]);
          if (!_isOneDs) {
            xhr.setRequestHeader("Content-type", "application/json");
          }
          arrForEach(objKeys(headers), function(headerName) {
            xhr.setRequestHeader(headerName, headers[headerName]);
          });
          xhr.onreadystatechange = function() {
            if (!_isOneDs) {
              _doOnReadyFunc(xhr);
              if (xhr.readyState === 4) {
                resolveFunc && resolveFunc(true);
              }
            }
          };
          xhr.onload = function() {
            if (_isOneDs) {
              _doOnReadyFunc(xhr);
            }
          };
          function _doOnReadyFunc(xhr2) {
            var onReadyFunc = _onCompleteFuncs && _onCompleteFuncs.xhrOnComplete;
            var onReadyFuncExist = onReadyFunc && isFunction3(onReadyFunc);
            if (onReadyFuncExist) {
              onReadyFunc(xhr2, oncomplete, payload);
            } else {
              var response = getResponseText(xhr2);
              _doOnComplete(oncomplete, xhr2[
                _DYN_STATUS
                /* @min:%2estatus */
              ], _getAllResponseHeaders(xhr2, _isOneDs), response);
            }
          }
          xhr.onerror = function(event) {
            _doOnComplete(oncomplete, _isOneDs ? xhr[
              _DYN_STATUS
              /* @min:%2estatus */
            ] : 400, _getAllResponseHeaders(xhr, _isOneDs), _isOneDs ? STR_EMPTY2 : formatErrorMessageXhr(xhr));
            rejectFunc && rejectFunc(event);
          };
          xhr.ontimeout = function() {
            _doOnComplete(oncomplete, _isOneDs ? xhr[
              _DYN_STATUS
              /* @min:%2estatus */
            ] : 500, _getAllResponseHeaders(xhr, _isOneDs), _isOneDs ? STR_EMPTY2 : formatErrorMessageXhr(xhr));
            resolveFunc && resolveFunc(false);
          };
          xhr.send(payload[
            _DYN_DATA
            /* @min:%2edata */
          ]);
          return thePromise;
        }
        function _doFetchSender(payload, oncomplete, sync) {
          var _a12;
          var endPointUrl = payload[
            _DYN_URL_STRING
            /* @min:%2eurlString */
          ];
          var batch = payload[
            _DYN_DATA
            /* @min:%2edata */
          ];
          var plainTextBatch = _isOneDs ? batch : new Blob([batch], {
            type: "application/json"
          });
          var thePromise;
          var resolveFunc;
          var rejectFunc;
          var requestHeaders = new Headers();
          var batchLength = batch[
            _DYN_LENGTH
            /* @min:%2elength */
          ];
          var ignoreResponse = false;
          var responseHandled = false;
          var headers = payload[
            _DYN_HEADERS
            /* @min:%2eheaders */
          ] || {};
          var init = (_a12 = {
            method: STR_POST_METHOD,
            body: plainTextBatch
          }, _a12[DisabledPropertyName] = true, _a12);
          if (payload.headers && objKeys(payload.headers)[
            _DYN_LENGTH
            /* @min:%2elength */
          ] > 0) {
            arrForEach(objKeys(headers), function(headerName) {
              requestHeaders.append(headerName, headers[headerName]);
            });
            init[
              _DYN_HEADERS
              /* @min:%2eheaders */
            ] = requestHeaders;
          }
          if (_fetchCredentials) {
            init.credentials = _fetchCredentials;
          } else if (_sendCredentials && _isOneDs) {
            init.credentials = "include";
          }
          if (sync) {
            init.keepalive = true;
            _syncFetchPayload += batchLength;
            if (_isOneDs) {
              if (payload["_sendReason"] === 2) {
                ignoreResponse = true;
                if (_addNoResponse) {
                  endPointUrl += _noResponseQs;
                }
              }
            } else {
              ignoreResponse = true;
            }
          }
          var request = new Request(endPointUrl, init);
          try {
            request[DisabledPropertyName] = true;
          } catch (e) {
          }
          if (!sync && _enableSendPromise) {
            thePromise = createPromise(function(resolve, reject) {
              resolveFunc = resolve;
              rejectFunc = reject;
            });
          }
          if (!endPointUrl) {
            _onNoPayloadUrl(oncomplete);
            resolveFunc && resolveFunc(false);
            return;
          }
          function _handleError(res) {
            _doOnComplete(oncomplete, _isOneDs ? 0 : 400, {}, _isOneDs ? STR_EMPTY2 : res);
          }
          function _onFetchComplete(response, payload2, value) {
            var status = response[
              _DYN_STATUS
              /* @min:%2estatus */
            ];
            var onCompleteFunc = _onCompleteFuncs.fetchOnComplete;
            if (onCompleteFunc && isFunction3(onCompleteFunc)) {
              onCompleteFunc(response, oncomplete, value || STR_EMPTY2, payload2);
            } else {
              _doOnComplete(oncomplete, status, {}, value || STR_EMPTY2);
            }
          }
          try {
            doAwaitResponse(fetch(_isOneDs ? endPointUrl : request, _isOneDs ? init : null), function(result) {
              if (sync) {
                _syncFetchPayload -= batchLength;
                batchLength = 0;
              }
              if (!responseHandled) {
                responseHandled = true;
                if (!result.rejected) {
                  var response_1 = result[
                    _DYN_VALUE
                    /* @min:%2evalue */
                  ];
                  try {
                    if (!_isOneDs && !response_1.ok) {
                      _handleError(response_1.statusText);
                      resolveFunc && resolveFunc(false);
                    } else {
                      if (_isOneDs && !response_1.body) {
                        _onFetchComplete(response_1, null, STR_EMPTY2);
                        resolveFunc && resolveFunc(true);
                      } else {
                        doAwaitResponse(response_1.text(), function(resp) {
                          _onFetchComplete(response_1, payload, resp[
                            _DYN_VALUE
                            /* @min:%2evalue */
                          ]);
                          resolveFunc && resolveFunc(true);
                        });
                      }
                    }
                  } catch (e) {
                    _handleError(dumpObj(e));
                    rejectFunc && rejectFunc(e);
                  }
                } else {
                  _handleError(result.reason && result.reason[
                    _DYN_MESSAGE
                    /* @min:%2emessage */
                  ]);
                  rejectFunc && rejectFunc(result.reason);
                }
              }
            });
          } catch (e) {
            if (!responseHandled) {
              _handleError(dumpObj(e));
              rejectFunc && rejectFunc(e);
            }
          }
          if (ignoreResponse && !responseHandled) {
            responseHandled = true;
            _doOnComplete(oncomplete, 200, {});
            resolveFunc && resolveFunc(true);
          }
          if (_isOneDs && !responseHandled && payload[
            _DYN_TIMEOUT
            /* @min:%2etimeout */
          ] > 0) {
            _timeoutWrapper && _timeoutWrapper.set(function() {
              if (!responseHandled) {
                responseHandled = true;
                _doOnComplete(oncomplete, 500, {});
                resolveFunc && resolveFunc(true);
              }
            }, payload[
              _DYN_TIMEOUT
              /* @min:%2etimeout */
            ]);
          }
          return thePromise;
        }
        function _xdrSender(payload, oncomplete, sync) {
          var _window = getWindow();
          var xdr = new XDomainRequest();
          var data = payload[
            _DYN_DATA
            /* @min:%2edata */
          ];
          xdr.onload = function() {
            var response = getResponseText(xdr);
            var onloadFunc = _onCompleteFuncs && _onCompleteFuncs.xdrOnComplete;
            if (onloadFunc && isFunction3(onloadFunc)) {
              onloadFunc(xdr, oncomplete, payload);
            } else {
              _doOnComplete(oncomplete, 200, {}, response);
            }
          };
          xdr.onerror = function() {
            _doOnComplete(oncomplete, 400, {}, _isOneDs ? STR_EMPTY2 : formatErrorMessageXdr(xdr));
          };
          xdr.ontimeout = function() {
            _doOnComplete(oncomplete, 500, {});
          };
          xdr.onprogress = function() {
          };
          var hostingProtocol = _window && _window.location && _window.location.protocol || "";
          var endpoint = payload[
            _DYN_URL_STRING
            /* @min:%2eurlString */
          ];
          if (!endpoint) {
            _onNoPayloadUrl(oncomplete);
            return;
          }
          if (!_isOneDs && endpoint.lastIndexOf(hostingProtocol, 0) !== 0) {
            var msg = "Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol.";
            _throwInternal(_diagLog, 2, 40, ". " + msg);
            _onError(msg, oncomplete);
            return;
          }
          var endpointUrl = _isOneDs ? endpoint : endpoint[
            _DYN_REPLACE
            /* @min:%2ereplace */
          ](/^(https?:)/, "");
          xdr.open(STR_POST_METHOD, endpointUrl);
          if (payload[
            _DYN_TIMEOUT
            /* @min:%2etimeout */
          ]) {
            xdr[
              _DYN_TIMEOUT
              /* @min:%2etimeout */
            ] = payload[
              _DYN_TIMEOUT
              /* @min:%2etimeout */
            ];
          }
          xdr.send(data);
          if (_isOneDs && sync) {
            _timeoutWrapper && _timeoutWrapper.set(function() {
              xdr.send(data);
            }, 0);
          } else {
            xdr.send(data);
          }
        }
        function _initDefaults() {
          _syncFetchPayload = 0;
          _isInitialized = false;
          _enableSendPromise = false;
          _diagLog = null;
          _isOneDs = null;
          _onCompleteFuncs = null;
          _disableCredentials = null;
          _fetchCredentials = null;
          _fallbackInst = null;
          _disableXhr = false;
          _disableBeacon = false;
          _disableBeaconSync = false;
          _disableFetchKeepAlive = false;
          _addNoResponse = false;
          _timeoutWrapper = null;
        }
      });
    }
    SenderPostManager2.__ieDyn = 1;
    return SenderPostManager2;
  }()
);

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/EventHelpers.js
var strOnPrefix = "on";
var strAttachEvent = "attachEvent";
var strAddEventHelper = "addEventListener";
var strDetachEvent = "detachEvent";
var strRemoveEventListener = "removeEventListener";
var strEvents = "events";
var strVisibilityChangeEvt = "visibilitychange";
var strPageHide = "pagehide";
var strUnload = "unload";
var strBeforeUnload = "beforeunload";
var strPageHideNamespace = createUniqueNamespace("aiEvtPageHide");
var strPageShowNamespace = createUniqueNamespace("aiEvtPageShow");
var rRemoveEmptyNs = /\.[\.]+/g;
var rRemoveTrailingEmptyNs = /[\.]+$/;
var _guid = 1;
var elmNodeData = createElmNodeData("events");
var eventNamespace = /^([^.]*)(?:\.(.+)|)/;
function _normalizeNamespace(name) {
  if (name && name[
    _DYN_REPLACE
    /* @min:%2ereplace */
  ]) {
    return name[
      _DYN_REPLACE
      /* @min:%2ereplace */
    ](/^[\s\.]+|(?=[\s\.])[\.\s]+$/g, STR_EMPTY);
  }
  return name;
}
function _getEvtNamespace(eventName, evtNamespace) {
  if (evtNamespace) {
    var theNamespace_1 = STR_EMPTY;
    if (isArray3(evtNamespace)) {
      theNamespace_1 = STR_EMPTY;
      arrForEach(evtNamespace, function(name) {
        name = _normalizeNamespace(name);
        if (name) {
          if (name[0] !== ".") {
            name = "." + name;
          }
          theNamespace_1 += name;
        }
      });
    } else {
      theNamespace_1 = _normalizeNamespace(evtNamespace);
    }
    if (theNamespace_1) {
      if (theNamespace_1[0] !== ".") {
        theNamespace_1 = "." + theNamespace_1;
      }
      eventName = (eventName || STR_EMPTY) + theNamespace_1;
    }
  }
  var parsedEvent = eventNamespace.exec(eventName || STR_EMPTY) || [];
  return {
    type: parsedEvent[1],
    ns: (parsedEvent[2] || STR_EMPTY).replace(rRemoveEmptyNs, ".").replace(rRemoveTrailingEmptyNs, STR_EMPTY)[
      _DYN_SPLIT
      /* @min:%2esplit */
    ](".").sort().join(".")
  };
}
function _getRegisteredEvents(target, evtName, addDefault) {
  if (addDefault === void 0) {
    addDefault = true;
  }
  var aiEvts = elmNodeData.get(target, strEvents, {}, addDefault);
  var registeredEvents = aiEvts[evtName];
  if (!registeredEvents) {
    registeredEvents = aiEvts[evtName] = [];
  }
  return registeredEvents;
}
function _doDetach(obj, evtName, handlerRef, useCapture) {
  if (obj && evtName && evtName[
    _DYN_TYPE
    /* @min:%2etype */
  ]) {
    if (obj[strRemoveEventListener]) {
      obj[strRemoveEventListener](evtName[
        _DYN_TYPE
        /* @min:%2etype */
      ], handlerRef, useCapture);
    } else if (obj[strDetachEvent]) {
      obj[strDetachEvent](strOnPrefix + evtName[
        _DYN_TYPE
        /* @min:%2etype */
      ], handlerRef);
    }
  }
}
function _doAttach(obj, evtName, handlerRef, useCapture) {
  var result = false;
  if (obj && evtName && evtName[
    _DYN_TYPE
    /* @min:%2etype */
  ] && handlerRef) {
    if (obj[strAddEventHelper]) {
      obj[strAddEventHelper](evtName[
        _DYN_TYPE
        /* @min:%2etype */
      ], handlerRef, useCapture);
      result = true;
    } else if (obj[strAttachEvent]) {
      obj[strAttachEvent](strOnPrefix + evtName[
        _DYN_TYPE
        /* @min:%2etype */
      ], handlerRef);
      result = true;
    }
  }
  return result;
}
function _doUnregister(target, events, evtName, unRegFn) {
  var idx = events[
    _DYN_LENGTH
    /* @min:%2elength */
  ];
  while (idx--) {
    var theEvent = events[idx];
    if (theEvent) {
      if (!evtName.ns || evtName.ns === theEvent[
        _DYN_EVT_NAME
        /* @min:%2eevtName */
      ].ns) {
        if (!unRegFn || unRegFn(theEvent)) {
          _doDetach(target, theEvent[
            _DYN_EVT_NAME
            /* @min:%2eevtName */
          ], theEvent.handler, theEvent.capture);
          events[
            _DYN_SPLICE
            /* @min:%2esplice */
          ](idx, 1);
        }
      }
    }
  }
}
function _unregisterEvents(target, evtName, unRegFn) {
  if (evtName[
    _DYN_TYPE
    /* @min:%2etype */
  ]) {
    _doUnregister(target, _getRegisteredEvents(target, evtName[
      _DYN_TYPE
      /* @min:%2etype */
    ]), evtName, unRegFn);
  } else {
    var eventCache = elmNodeData.get(target, strEvents, {});
    objForEachKey(eventCache, function(evtType, events) {
      _doUnregister(target, events, evtName, unRegFn);
    });
    if (objKeys(eventCache)[
      _DYN_LENGTH
      /* @min:%2elength */
    ] === 0) {
      elmNodeData.kill(target, strEvents);
    }
  }
}
function mergeEvtNamespace(theNamespace, namespaces) {
  var newNamespaces;
  if (namespaces) {
    if (isArray3(namespaces)) {
      newNamespaces = [theNamespace].concat(namespaces);
    } else {
      newNamespaces = [theNamespace, namespaces];
    }
    newNamespaces = _getEvtNamespace("xx", newNamespaces).ns[
      _DYN_SPLIT
      /* @min:%2esplit */
    ](".");
  } else {
    newNamespaces = theNamespace;
  }
  return newNamespaces;
}
function eventOn(target, eventName, handlerRef, evtNamespace, useCapture) {
  if (useCapture === void 0) {
    useCapture = false;
  }
  var result = false;
  if (target) {
    try {
      var evtName = _getEvtNamespace(eventName, evtNamespace);
      result = _doAttach(target, evtName, handlerRef, useCapture);
      if (result && elmNodeData.accept(target)) {
        var registeredEvent = {
          guid: _guid++,
          evtName,
          handler: handlerRef,
          capture: useCapture
        };
        _getRegisteredEvents(target, evtName.type)[
          _DYN_PUSH
          /* @min:%2epush */
        ](registeredEvent);
      }
    } catch (e) {
    }
  }
  return result;
}
function eventOff(target, eventName, handlerRef, evtNamespace, useCapture) {
  if (useCapture === void 0) {
    useCapture = false;
  }
  if (target) {
    try {
      var evtName_1 = _getEvtNamespace(eventName, evtNamespace);
      var found_1 = false;
      _unregisterEvents(target, evtName_1, function(regEvent) {
        if (evtName_1.ns && !handlerRef || regEvent.handler === handlerRef) {
          found_1 = true;
          return true;
        }
        return false;
      });
      if (!found_1) {
        _doDetach(target, evtName_1, handlerRef, useCapture);
      }
    } catch (e) {
    }
  }
}
function addEventHandler(eventName, callback, evtNamespace) {
  var result = false;
  var w = getWindow();
  if (w) {
    result = eventOn(w, eventName, callback, evtNamespace);
    result = eventOn(w["body"], eventName, callback, evtNamespace) || result;
  }
  var doc = getDocument2();
  if (doc) {
    result = eventOn(doc, eventName, callback, evtNamespace) || result;
  }
  return result;
}
function removeEventHandler(eventName, callback, evtNamespace) {
  var w = getWindow();
  if (w) {
    eventOff(w, eventName, callback, evtNamespace);
    eventOff(w["body"], eventName, callback, evtNamespace);
  }
  var doc = getDocument2();
  if (doc) {
    eventOff(doc, eventName, callback, evtNamespace);
  }
}
function _addEventListeners(events, listener, excludeEvents, evtNamespace) {
  var added = false;
  if (listener && events && events[
    _DYN_LENGTH
    /* @min:%2elength */
  ] > 0) {
    arrForEach(events, function(name) {
      if (name) {
        if (!excludeEvents || arrIndexOf(excludeEvents, name) === -1) {
          added = addEventHandler(name, listener, evtNamespace) || added;
        }
      }
    });
  }
  return added;
}
function addEventListeners(events, listener, excludeEvents, evtNamespace) {
  var added = false;
  if (listener && events && isArray3(events)) {
    added = _addEventListeners(events, listener, excludeEvents, evtNamespace);
    if (!added && excludeEvents && excludeEvents[
      _DYN_LENGTH
      /* @min:%2elength */
    ] > 0) {
      added = _addEventListeners(events, listener, null, evtNamespace);
    }
  }
  return added;
}
function removeEventListeners2(events, listener, evtNamespace) {
  if (events && isArray3(events)) {
    arrForEach(events, function(name) {
      if (name) {
        removeEventHandler(name, listener, evtNamespace);
      }
    });
  }
}
function addPageUnloadEventListener(listener, excludeEvents, evtNamespace) {
  return addEventListeners([strBeforeUnload, strUnload, strPageHide], listener, excludeEvents, evtNamespace);
}
function removePageUnloadEventListener(listener, evtNamespace) {
  removeEventListeners2([strBeforeUnload, strUnload, strPageHide], listener, evtNamespace);
}
function addPageHideEventListener(listener, excludeEvents, evtNamespace) {
  function _handlePageVisibility(evt) {
    var doc = getDocument2();
    if (listener && doc && doc.visibilityState === "hidden") {
      listener(evt);
    }
  }
  var newNamespaces = mergeEvtNamespace(strPageHideNamespace, evtNamespace);
  var pageUnloadAdded = _addEventListeners([strPageHide], listener, excludeEvents, newNamespaces);
  if (!excludeEvents || arrIndexOf(excludeEvents, strVisibilityChangeEvt) === -1) {
    pageUnloadAdded = _addEventListeners([strVisibilityChangeEvt], _handlePageVisibility, excludeEvents, newNamespaces) || pageUnloadAdded;
  }
  if (!pageUnloadAdded && excludeEvents) {
    pageUnloadAdded = addPageHideEventListener(listener, null, evtNamespace);
  }
  return pageUnloadAdded;
}
function removePageHideEventListener(listener, evtNamespace) {
  var newNamespaces = mergeEvtNamespace(strPageHideNamespace, evtNamespace);
  removeEventListeners2([strPageHide], listener, newNamespaces);
  removeEventListeners2([strVisibilityChangeEvt], null, newNamespaces);
}

// node_modules/@microsoft/applicationinsights-core-js/dist-es5/JavaScriptSDK/InstrumentHooks.js
var aiInstrumentHooks = "_aiHooks";
var cbNames = ["req", "rsp", "hkErr", "fnErr"];
function _arrLoop(arr, fn) {
  if (arr) {
    for (var lp = 0; lp < arr[
      _DYN_LENGTH
      /* @min:%2elength */
    ]; lp++) {
      if (fn(arr[lp], lp)) {
        break;
      }
    }
  }
}
function _doCallbacks(hooks, callDetails, cbArgs, hookCtx, type) {
  if (type >= 0 && type <= 2) {
    _arrLoop(hooks, function(hook, idx) {
      var cbks = hook.cbks;
      var cb = cbks[cbNames[type]];
      if (cb) {
        callDetails.ctx = function() {
          var ctx = hookCtx[idx] = hookCtx[idx] || {};
          return ctx;
        };
        try {
          cb[
            _DYN_APPLY
            /* @min:%2eapply */
          ](callDetails.inst, cbArgs);
        } catch (err) {
          var orgEx = callDetails.err;
          try {
            var hookErrorCb = cbks[cbNames[
              2
              /* CallbackType.HookError */
            ]];
            if (hookErrorCb) {
              callDetails.err = err;
              hookErrorCb[
                _DYN_APPLY
                /* @min:%2eapply */
              ](callDetails.inst, cbArgs);
            }
          } catch (e) {
          } finally {
            callDetails.err = orgEx;
          }
        }
      }
    });
  }
}
function _createFunctionHook(aiHook) {
  return function() {
    var funcThis = this;
    var orgArgs = arguments;
    var hooks = aiHook.h;
    var funcArgs = {
      name: aiHook.n,
      inst: funcThis,
      ctx: null,
      set: _replaceArg
    };
    var hookCtx = [];
    var cbArgs = _createArgs([funcArgs], orgArgs);
    funcArgs.evt = getInst("event");
    function _createArgs(target, theArgs) {
      _arrLoop(theArgs, function(arg) {
        target[
          _DYN_PUSH
          /* @min:%2epush */
        ](arg);
      });
      return target;
    }
    function _replaceArg(idx, value) {
      orgArgs = _createArgs([], orgArgs);
      orgArgs[idx] = value;
      cbArgs = _createArgs([funcArgs], orgArgs);
    }
    _doCallbacks(
      hooks,
      funcArgs,
      cbArgs,
      hookCtx,
      0
      /* CallbackType.Request */
    );
    var theFunc = aiHook.f;
    if (theFunc) {
      try {
        funcArgs.rslt = theFunc[
          _DYN_APPLY
          /* @min:%2eapply */
        ](funcThis, orgArgs);
      } catch (err) {
        funcArgs.err = err;
        _doCallbacks(
          hooks,
          funcArgs,
          cbArgs,
          hookCtx,
          3
          /* CallbackType.FunctionError */
        );
        throw err;
      }
    }
    _doCallbacks(
      hooks,
      funcArgs,
      cbArgs,
      hookCtx,
      1
      /* CallbackType.Response */
    );
    return funcArgs.rslt;
  };
}
function _getOwner(target, name, checkPrototype, checkParentProto) {
  var owner = null;
  if (target) {
    if (objHasOwnProperty(target, name)) {
      owner = target;
    } else if (checkPrototype) {
      owner = _getOwner(_getObjProto2(target), name, checkParentProto, false);
    }
  }
  return owner;
}
function InstrumentProto(target, funcName, callbacks) {
  if (target) {
    return InstrumentFunc(target[strShimPrototype], funcName, callbacks, false);
  }
  return null;
}
function _createInstrumentHook(owner, funcName, fn, callbacks) {
  var aiHook = fn && fn[aiInstrumentHooks];
  if (!aiHook) {
    aiHook = {
      i: 0,
      n: funcName,
      f: fn,
      h: []
    };
    var newFunc = _createFunctionHook(aiHook);
    newFunc[aiInstrumentHooks] = aiHook;
    owner[funcName] = newFunc;
  }
  var theHook = {
    // tslint:disable:object-literal-shorthand
    id: aiHook.i,
    cbks: callbacks,
    rm: function() {
      var id = this.id;
      _arrLoop(aiHook.h, function(hook, idx) {
        if (hook.id === id) {
          aiHook.h[
            _DYN_SPLICE
            /* @min:%2esplice */
          ](idx, 1);
          return 1;
        }
      });
    }
    // tslint:enable:object-literal-shorthand
  };
  aiHook.i++;
  aiHook.h[
    _DYN_PUSH
    /* @min:%2epush */
  ](theHook);
  return theHook;
}
function InstrumentFunc(target, funcName, callbacks, checkPrototype, checkParentProto) {
  if (checkPrototype === void 0) {
    checkPrototype = true;
  }
  if (target && funcName && callbacks) {
    var owner = _getOwner(target, funcName, checkPrototype, checkParentProto);
    if (owner) {
      var fn = owner[funcName];
      if (typeof fn === strShimFunction) {
        return _createInstrumentHook(owner, funcName, fn, callbacks);
      }
    }
  }
  return null;
}
function InstrumentEvent(target, evtName, callbacks, checkPrototype, checkParentProto) {
  if (target && evtName && callbacks) {
    var owner = _getOwner(target, evtName, checkPrototype, checkParentProto) || target;
    if (owner) {
      return _createInstrumentHook(owner, evtName, owner[evtName], callbacks);
    }
  }
  return null;
}

// node_modules/@microsoft/applicationinsights-common/dist-es5/Constants.js
var DisabledPropertyName2 = "Microsoft_ApplicationInsights_BypassAjaxInstrumentation";
var SampleRate = "sampleRate";
var ProcessLegacy = "ProcessLegacy";
var HttpMethod = "http.method";
var DEFAULT_BREEZE_ENDPOINT = "https://dc.services.visualstudio.com";
var DEFAULT_BREEZE_PATH = "/v2/track";
var strNotSpecified = "not_specified";
var strIkey = "iKey";

// node_modules/@microsoft/applicationinsights-common/dist-es5/RequestResponseHeaders.js
var RequestHeaders = createValueMap({
  requestContextHeader: [0, "Request-Context"],
  requestContextTargetKey: [1, "appId"],
  requestContextAppIdFormat: [2, "appId=cid-v1:"],
  requestIdHeader: [3, "Request-Id"],
  traceParentHeader: [4, "traceparent"],
  traceStateHeader: [5, "tracestate"],
  sdkContextHeader: [6, "Sdk-Context"],
  sdkContextHeaderAppIdRequest: [7, "appId"],
  requestContextHeaderLowerCase: [8, "request-context"]
});

// node_modules/@microsoft/applicationinsights-common/dist-es5/__DynamicConstants.js
var _DYN_SPLIT2 = "split";
var _DYN_LENGTH2 = "length";
var _DYN_TO_LOWER_CASE2 = "toLowerCase";
var _DYN_INGESTIONENDPOINT = "ingestionendpoint";
var _DYN_TO_STRING = "toString";
var _DYN_REMOVE_ITEM = "removeItem";
var _DYN_MESSAGE2 = "message";
var _DYN_COUNT = "count";
var _DYN_PRE_TRIGGER_DATE = "preTriggerDate";
var _DYN_GET_UTCDATE = "getUTCDate";
var _DYN_STRINGIFY = "stringify";
var _DYN_PATHNAME = "pathname";
var _DYN_MATCH = "match";
var _DYN_CORRELATION_HEADER_E0 = "correlationHeaderExcludePatterns";
var _DYN_NAME2 = "name";
var _DYN_PROPERTIES = "properties";
var _DYN_MEASUREMENTS = "measurements";
var _DYN_SIZE_IN_BYTES = "sizeInBytes";
var _DYN_TYPE_NAME = "typeName";
var _DYN_EXCEPTIONS = "exceptions";
var _DYN_SEVERITY_LEVEL = "severityLevel";
var _DYN_PROBLEM_GROUP = "problemGroup";
var _DYN_PARSED_STACK = "parsedStack";
var _DYN_HAS_FULL_STACK = "hasFullStack";
var _DYN_ASSEMBLY = "assembly";
var _DYN_FILE_NAME = "fileName";
var _DYN_LINE = "line";
var _DYN_AI_DATA_CONTRACT = "aiDataContract";
var _DYN_DURATION = "duration";

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/Common/DataSanitizer.js
function dataSanitizeKeyAndAddUniqueness(logger, key, map2) {
  var origLength = key[
    _DYN_LENGTH2
    /* @min:%2elength */
  ];
  var field = dataSanitizeKey(logger, key);
  if (field[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] !== origLength) {
    var i = 0;
    var uniqueField = field;
    while (map2[uniqueField] !== void 0) {
      i++;
      uniqueField = strSubstring(field, 0, 150 - 3) + dsPadNumber(i);
    }
    field = uniqueField;
  }
  return field;
}
function dataSanitizeKey(logger, name) {
  var nameTrunc;
  if (name) {
    name = strTrim(asString(name));
    if (name[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > 150) {
      nameTrunc = strSubstring(
        name,
        0,
        150
        /* DataSanitizerValues.MAX_NAME_LENGTH */
      );
      _throwInternal(logger, 2, 57, "name is too long.  It has been truncated to 150 characters.", {
        name
      }, true);
    }
  }
  return nameTrunc || name;
}
function dataSanitizeString(logger, value, maxLength) {
  if (maxLength === void 0) {
    maxLength = 1024;
  }
  var valueTrunc;
  if (value) {
    maxLength = maxLength ? maxLength : 1024;
    value = strTrim(asString(value));
    if (value[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > maxLength) {
      valueTrunc = strSubstring(value, 0, maxLength);
      _throwInternal(logger, 2, 61, "string value is too long. It has been truncated to " + maxLength + " characters.", {
        value
      }, true);
    }
  }
  return valueTrunc || value;
}
function dataSanitizeUrl(logger, url) {
  return dataSanitizeInput(
    logger,
    url,
    2048,
    66
    /* _eInternalMessageId.UrlTooLong */
  );
}
function dataSanitizeMessage(logger, message) {
  var messageTrunc;
  if (message) {
    if (message[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > 32768) {
      messageTrunc = strSubstring(
        message,
        0,
        32768
        /* DataSanitizerValues.MAX_MESSAGE_LENGTH */
      );
      _throwInternal(logger, 2, 56, "message is too long, it has been truncated to 32768 characters.", {
        message
      }, true);
    }
  }
  return messageTrunc || message;
}
function dataSanitizeException(logger, exception) {
  var exceptionTrunc;
  if (exception) {
    var value = "" + exception;
    if (value[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > 32768) {
      exceptionTrunc = strSubstring(
        value,
        0,
        32768
        /* DataSanitizerValues.MAX_EXCEPTION_LENGTH */
      );
      _throwInternal(logger, 2, 52, "exception is too long, it has been truncated to 32768 characters.", {
        exception
      }, true);
    }
  }
  return exceptionTrunc || exception;
}
function dataSanitizeProperties(logger, properties) {
  if (properties) {
    var tempProps_1 = {};
    objForEachKey(properties, function(prop, value) {
      if (isObject(value) && hasJSON()) {
        try {
          value = getJSON()[
            _DYN_STRINGIFY
            /* @min:%2estringify */
          ](value);
        } catch (e) {
          _throwInternal(logger, 2, 49, "custom property is not valid", {
            exception: e
          }, true);
        }
      }
      value = dataSanitizeString(
        logger,
        value,
        8192
        /* DataSanitizerValues.MAX_PROPERTY_LENGTH */
      );
      prop = dataSanitizeKeyAndAddUniqueness(logger, prop, tempProps_1);
      tempProps_1[prop] = value;
    });
    properties = tempProps_1;
  }
  return properties;
}
function dataSanitizeMeasurements(logger, measurements) {
  if (measurements) {
    var tempMeasurements_1 = {};
    objForEachKey(measurements, function(measure, value) {
      measure = dataSanitizeKeyAndAddUniqueness(logger, measure, tempMeasurements_1);
      tempMeasurements_1[measure] = value;
    });
    measurements = tempMeasurements_1;
  }
  return measurements;
}
function dataSanitizeId(logger, id) {
  return id ? dataSanitizeInput(
    logger,
    id,
    128,
    69
    /* _eInternalMessageId.IdTooLong */
  )[
    _DYN_TO_STRING
    /* @min:%2etoString */
  ]() : id;
}
function dataSanitizeInput(logger, input2, maxLength, _msgId) {
  var inputTrunc;
  if (input2) {
    input2 = strTrim(asString(input2));
    if (input2[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > maxLength) {
      inputTrunc = strSubstring(input2, 0, maxLength);
      _throwInternal(logger, 2, _msgId, "input is too long, it has been truncated to " + maxLength + " characters.", {
        data: input2
      }, true);
    }
  }
  return inputTrunc || input2;
}
function dsPadNumber(num) {
  var s = "00" + num;
  return strSubstr(s, s[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] - 3);
}

// node_modules/@microsoft/applicationinsights-common/dist-es5/UrlHelperFuncs.js
var _document2 = getDocument2() || {};
var _htmlAnchorIdx = 0;
var _htmlAnchorElement = [null, null, null, null, null];
function urlParseUrl(url) {
  var anchorIdx = _htmlAnchorIdx;
  var anchorCache = _htmlAnchorElement;
  var tempAnchor = anchorCache[anchorIdx];
  if (!_document2.createElement) {
    tempAnchor = {
      host: urlParseHost(url, true)
    };
  } else if (!anchorCache[anchorIdx]) {
    tempAnchor = anchorCache[anchorIdx] = _document2.createElement("a");
  }
  tempAnchor.href = url;
  anchorIdx++;
  if (anchorIdx >= anchorCache[
    _DYN_LENGTH2
    /* @min:%2elength */
  ]) {
    anchorIdx = 0;
  }
  _htmlAnchorIdx = anchorIdx;
  return tempAnchor;
}
function urlGetAbsoluteUrl(url) {
  var result;
  var a = urlParseUrl(url);
  if (a) {
    result = a.href;
  }
  return result;
}
function urlGetCompleteUrl(method, absoluteUrl) {
  if (method) {
    return method.toUpperCase() + " " + absoluteUrl;
  }
  return absoluteUrl;
}
function urlParseHost(url, inclPort) {
  var fullHost = urlParseFullHost(url, inclPort) || "";
  if (fullHost) {
    var match2 = fullHost[
      _DYN_MATCH
      /* @min:%2ematch */
    ](/(www\d{0,5}\.)?([^\/:]{1,256})(:\d{1,20})?/i);
    if (match2 != null && match2[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > 3 && isString(match2[2]) && match2[2][
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > 0) {
      return match2[2] + (match2[3] || "");
    }
  }
  return fullHost;
}
function urlParseFullHost(url, inclPort) {
  var result = null;
  if (url) {
    var match2 = url[
      _DYN_MATCH
      /* @min:%2ematch */
    ](/(\w{1,150}):\/\/([^\/:]{1,256})(:\d{1,20})?/i);
    if (match2 != null && match2[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > 2 && isString(match2[2]) && match2[2][
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > 0) {
      result = match2[2] || "";
      if (inclPort && match2[
        _DYN_LENGTH2
        /* @min:%2elength */
      ] > 2) {
        var protocol = (match2[1] || "")[
          _DYN_TO_LOWER_CASE2
          /* @min:%2etoLowerCase */
        ]();
        var port = match2[3] || "";
        if (protocol === "http" && port === ":80") {
          port = "";
        } else if (protocol === "https" && port === ":443") {
          port = "";
        }
        result += port;
      }
    }
  }
  return result;
}

// node_modules/@microsoft/applicationinsights-common/dist-es5/Util.js
var _internalEndpoints = [DEFAULT_BREEZE_ENDPOINT + DEFAULT_BREEZE_PATH, "https://breeze.aimon.applicationinsights.io" + DEFAULT_BREEZE_PATH, "https://dc-int.services.visualstudio.com" + DEFAULT_BREEZE_PATH];
var _correlationIdPrefix = "cid-v1:";
function isInternalApplicationInsightsEndpoint(endpointUrl) {
  return arrIndexOf(_internalEndpoints, endpointUrl[
    _DYN_TO_LOWER_CASE2
    /* @min:%2etoLowerCase */
  ]()) !== -1;
}
function correlationIdCanIncludeCorrelationHeader(config2, requestUrl, currentHost) {
  if (!requestUrl || config2 && config2.disableCorrelationHeaders) {
    return false;
  }
  if (config2 && config2[
    _DYN_CORRELATION_HEADER_E0
    /* @min:%2ecorrelationHeaderExcludePatterns */
  ]) {
    for (var i = 0; i < config2.correlationHeaderExcludePatterns[
      _DYN_LENGTH2
      /* @min:%2elength */
    ]; i++) {
      if (config2[
        _DYN_CORRELATION_HEADER_E0
        /* @min:%2ecorrelationHeaderExcludePatterns */
      ][i].test(requestUrl)) {
        return false;
      }
    }
  }
  var requestHost = urlParseUrl(requestUrl).host[
    _DYN_TO_LOWER_CASE2
    /* @min:%2etoLowerCase */
  ]();
  if (requestHost && (strIndexOf(requestHost, ":443") !== -1 || strIndexOf(requestHost, ":80") !== -1)) {
    requestHost = (urlParseFullHost(requestUrl, true) || "")[
      _DYN_TO_LOWER_CASE2
      /* @min:%2etoLowerCase */
    ]();
  }
  if ((!config2 || !config2.enableCorsCorrelation) && requestHost && requestHost !== currentHost) {
    return false;
  }
  var includedDomains = config2 && config2.correlationHeaderDomains;
  if (includedDomains) {
    var matchExists_1;
    arrForEach(includedDomains, function(domain) {
      var regex2 = new RegExp(domain.toLowerCase().replace(/\\/g, "\\\\").replace(/\./g, "\\.").replace(/\*/g, ".*"));
      matchExists_1 = matchExists_1 || regex2.test(requestHost);
    });
    if (!matchExists_1) {
      return false;
    }
  }
  var excludedDomains = config2 && config2.correlationHeaderExcludedDomains;
  if (!excludedDomains || excludedDomains[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] === 0) {
    return true;
  }
  for (var i = 0; i < excludedDomains[
    _DYN_LENGTH2
    /* @min:%2elength */
  ]; i++) {
    var regex = new RegExp(excludedDomains[i].toLowerCase().replace(/\\/g, "\\\\").replace(/\./g, "\\.").replace(/\*/g, ".*"));
    if (regex.test(requestHost)) {
      return false;
    }
  }
  return requestHost && requestHost[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] > 0;
}
function correlationIdGetCorrelationContext(responseHeader) {
  if (responseHeader) {
    var correlationId = correlationIdGetCorrelationContextValue(responseHeader, RequestHeaders[
      1
      /* eRequestHeaders.requestContextTargetKey */
    ]);
    if (correlationId && correlationId !== _correlationIdPrefix) {
      return correlationId;
    }
  }
}
function correlationIdGetCorrelationContextValue(responseHeader, key) {
  if (responseHeader) {
    var keyValues = responseHeader[
      _DYN_SPLIT2
      /* @min:%2esplit */
    ](",");
    for (var i = 0; i < keyValues[
      _DYN_LENGTH2
      /* @min:%2elength */
    ]; ++i) {
      var keyValue = keyValues[i][
        _DYN_SPLIT2
        /* @min:%2esplit */
      ]("=");
      if (keyValue[
        _DYN_LENGTH2
        /* @min:%2elength */
      ] === 2 && keyValue[0] === key) {
        return keyValue[1];
      }
    }
  }
}
function AjaxHelperParseDependencyPath(logger, absoluteUrl, method, commandName) {
  var target, name = commandName, data = commandName;
  if (absoluteUrl && absoluteUrl[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] > 0) {
    var parsedUrl = urlParseUrl(absoluteUrl);
    target = parsedUrl.host;
    if (!name) {
      if (parsedUrl[
        _DYN_PATHNAME
        /* @min:%2epathname */
      ] != null) {
        var pathName = parsedUrl.pathname[
          _DYN_LENGTH2
          /* @min:%2elength */
        ] === 0 ? "/" : parsedUrl[
          _DYN_PATHNAME
          /* @min:%2epathname */
        ];
        if (pathName.charAt(0) !== "/") {
          pathName = "/" + pathName;
        }
        data = parsedUrl[
          _DYN_PATHNAME
          /* @min:%2epathname */
        ];
        name = dataSanitizeString(logger, method ? method + " " + pathName : pathName);
      } else {
        name = dataSanitizeString(logger, absoluteUrl);
      }
    }
  } else {
    target = commandName;
    name = commandName;
  }
  return {
    target,
    name,
    data
  };
}
function dateTimeUtilsNow() {
  var perf = getPerformance();
  if (perf && perf.now && perf.timing) {
    var now = perf.now() + perf.timing.navigationStart;
    if (now > 0) {
      return now;
    }
  }
  return utcNow();
}
function dateTimeUtilsDuration(start, end) {
  var result = null;
  if (start !== 0 && end !== 0 && !isNullOrUndefined(start) && !isNullOrUndefined(end)) {
    result = end - start;
  }
  return result;
}
function createDistributedTraceContextFromTrace(telemetryTrace, parentCtx) {
  var trace = telemetryTrace || {};
  return {
    getName: function() {
      return trace[
        _DYN_NAME2
        /* @min:%2ename */
      ];
    },
    setName: function(newValue) {
      parentCtx && parentCtx.setName(newValue);
      trace[
        _DYN_NAME2
        /* @min:%2ename */
      ] = newValue;
    },
    getTraceId: function() {
      return trace.traceID;
    },
    setTraceId: function(newValue) {
      parentCtx && parentCtx.setTraceId(newValue);
      if (isValidTraceId(newValue)) {
        trace.traceID = newValue;
      }
    },
    getSpanId: function() {
      return trace.parentID;
    },
    setSpanId: function(newValue) {
      parentCtx && parentCtx.setSpanId(newValue);
      if (isValidSpanId(newValue)) {
        trace.parentID = newValue;
      }
    },
    getTraceFlags: function() {
      return trace.traceFlags;
    },
    setTraceFlags: function(newTraceFlags) {
      parentCtx && parentCtx.setTraceFlags(newTraceFlags);
      trace.traceFlags = newTraceFlags;
    }
  };
}

// node_modules/@microsoft/applicationinsights-common/dist-es5/Enums.js
var StorageType = createEnumStyle({
  LocalStorage: 0,
  SessionStorage: 1
  /* eStorageType.SessionStorage */
});
var DistributedTracingModes = createEnumStyle({
  AI: 0,
  AI_AND_W3C: 1,
  W3C: 2
  /* eDistributedTracingModes.W3C */
});
var EventPersistence = createEnumStyle({
  /**
   * Normal persistence.
   */
  Normal: 1,
  /**
   * Critical persistence.
   */
  Critical: 2
  /* EventPersistenceValue.Critical */
});

// node_modules/@microsoft/applicationinsights-common/dist-es5/StorageHelperFuncs.js
var _canUseLocalStorage = void 0;
var _canUseSessionStorage = void 0;
var _storagePrefix = "";
function _getLocalStorageObject() {
  if (utlCanUseLocalStorage()) {
    return _getVerifiedStorageObject(StorageType.LocalStorage);
  }
  return null;
}
function _getVerifiedStorageObject(storageType) {
  try {
    if (isNullOrUndefined(getGlobal())) {
      return null;
    }
    var uid = (/* @__PURE__ */ new Date())[
      _DYN_TO_STRING
      /* @min:%2etoString */
    ]();
    var storage = getInst(storageType === StorageType.LocalStorage ? "localStorage" : "sessionStorage");
    var name_1 = _storagePrefix + uid;
    storage.setItem(name_1, uid);
    var fail = storage.getItem(name_1) !== uid;
    storage[
      _DYN_REMOVE_ITEM
      /* @min:%2eremoveItem */
    ](name_1);
    if (!fail) {
      return storage;
    }
  } catch (exception) {
  }
  return null;
}
function _getSessionStorageObject() {
  if (utlCanUseSessionStorage()) {
    return _getVerifiedStorageObject(StorageType.SessionStorage);
  }
  return null;
}
function utlDisableStorage() {
  _canUseLocalStorage = false;
  _canUseSessionStorage = false;
}
function utlSetStoragePrefix(storagePrefix) {
  _storagePrefix = storagePrefix || "";
}
function utlEnableStorage() {
  _canUseLocalStorage = utlCanUseLocalStorage(true);
  _canUseSessionStorage = utlCanUseSessionStorage(true);
}
function utlCanUseLocalStorage(reset) {
  if (reset || _canUseLocalStorage === void 0) {
    _canUseLocalStorage = !!_getVerifiedStorageObject(StorageType.LocalStorage);
  }
  return _canUseLocalStorage;
}
function utlGetLocalStorage(logger, name) {
  var storage = _getLocalStorageObject();
  if (storage !== null) {
    try {
      return storage.getItem(name);
    } catch (e) {
      _canUseLocalStorage = false;
      _throwInternal(logger, 2, 1, "Browser failed read of local storage. " + getExceptionName(e), {
        exception: dumpObj(e)
      });
    }
  }
  return null;
}
function utlSetLocalStorage(logger, name, data) {
  var storage = _getLocalStorageObject();
  if (storage !== null) {
    try {
      storage.setItem(name, data);
      return true;
    } catch (e) {
      _canUseLocalStorage = false;
      _throwInternal(logger, 2, 3, "Browser failed write to local storage. " + getExceptionName(e), {
        exception: dumpObj(e)
      });
    }
  }
  return false;
}
function utlRemoveStorage(logger, name) {
  var storage = _getLocalStorageObject();
  if (storage !== null) {
    try {
      storage[
        _DYN_REMOVE_ITEM
        /* @min:%2eremoveItem */
      ](name);
      return true;
    } catch (e) {
      _canUseLocalStorage = false;
      _throwInternal(logger, 2, 5, "Browser failed removal of local storage item. " + getExceptionName(e), {
        exception: dumpObj(e)
      });
    }
  }
  return false;
}
function utlCanUseSessionStorage(reset) {
  if (reset || _canUseSessionStorage === void 0) {
    _canUseSessionStorage = !!_getVerifiedStorageObject(StorageType.SessionStorage);
  }
  return _canUseSessionStorage;
}
function utlGetSessionStorage(logger, name) {
  var storage = _getSessionStorageObject();
  if (storage !== null) {
    try {
      return storage.getItem(name);
    } catch (e) {
      _canUseSessionStorage = false;
      _throwInternal(logger, 2, 2, "Browser failed read of session storage. " + getExceptionName(e), {
        exception: dumpObj(e)
      });
    }
  }
  return null;
}
function utlSetSessionStorage(logger, name, data) {
  var storage = _getSessionStorageObject();
  if (storage !== null) {
    try {
      storage.setItem(name, data);
      return true;
    } catch (e) {
      _canUseSessionStorage = false;
      _throwInternal(logger, 2, 4, "Browser failed write to session storage. " + getExceptionName(e), {
        exception: dumpObj(e)
      });
    }
  }
  return false;
}
function utlRemoveSessionStorage(logger, name) {
  var storage = _getSessionStorageObject();
  if (storage !== null) {
    try {
      storage[
        _DYN_REMOVE_ITEM
        /* @min:%2eremoveItem */
      ](name);
      return true;
    } catch (e) {
      _canUseSessionStorage = false;
      _throwInternal(logger, 2, 6, "Browser failed removal of session storage item. " + getExceptionName(e), {
        exception: dumpObj(e)
      });
    }
  }
  return false;
}

// node_modules/@microsoft/applicationinsights-common/dist-es5/ThrottleMgr.js
var THROTTLE_STORAGE_PREFIX = "appInsightsThrottle";
var ThrottleMgr = (
  /** @class */
  /* @__PURE__ */ function() {
    function ThrottleMgr2(core, namePrefix) {
      var _self = this;
      var _canUseLocalStorage2;
      var _logger;
      var _config;
      var _localStorageObj;
      var _isTriggered;
      var _namePrefix;
      var _queue;
      var _isReady = false;
      var _isSpecificDaysGiven = false;
      _initConfig();
      _self["_getDbgPlgTargets"] = function() {
        return [_queue];
      };
      _self.getConfig = function() {
        return _config;
      };
      _self.canThrottle = function(msgId) {
        var localObj = _getLocalStorageObjByKey(msgId);
        var cfg = _getCfgByKey(msgId);
        return _canThrottle(cfg, _canUseLocalStorage2, localObj);
      };
      _self.isTriggered = function(msgId) {
        return _isTrigger(msgId);
      };
      _self.isReady = function() {
        return _isReady;
      };
      _self.flush = function(msgId) {
        try {
          var queue = _getQueueByKey(msgId);
          if (queue && queue[
            _DYN_LENGTH2
            /* @min:%2elength */
          ] > 0) {
            var items = queue.slice(0);
            _queue[msgId] = [];
            arrForEach(items, function(item) {
              _flushMessage(item.msgID, item[
                _DYN_MESSAGE2
                /* @min:%2emessage */
              ], item.severity, false);
            });
            return true;
          }
        } catch (err) {
        }
        return false;
      };
      _self.flushAll = function() {
        try {
          if (_queue) {
            var result_1 = true;
            objForEachKey(_queue, function(key) {
              var isFlushed = _self.flush(parseInt(key));
              result_1 = result_1 && isFlushed;
            });
            return result_1;
          }
        } catch (err) {
        }
        return false;
      };
      _self.onReadyState = function(isReady, flushAll) {
        if (flushAll === void 0) {
          flushAll = true;
        }
        _isReady = isNullOrUndefined(isReady) ? true : isReady;
        if (_isReady && flushAll) {
          return _self.flushAll();
        }
        return null;
      };
      _self.sendMessage = function(msgID, message, severity) {
        return _flushMessage(msgID, message, severity, true);
      };
      function _flushMessage(msgID, message, severity, saveUnsentMsg) {
        if (_isReady) {
          var isSampledIn = _canSampledIn(msgID);
          if (!isSampledIn) {
            return;
          }
          var cfg = _getCfgByKey(msgID);
          var localStorageObj = _getLocalStorageObjByKey(msgID);
          var canThrottle = _canThrottle(cfg, _canUseLocalStorage2, localStorageObj);
          var throttled = false;
          var number = 0;
          var isTriggered = _isTrigger(msgID);
          try {
            if (canThrottle && !isTriggered) {
              number = mathMin(cfg.limit.maxSendNumber, localStorageObj[
                _DYN_COUNT
                /* @min:%2ecount */
              ] + 1);
              localStorageObj[
                _DYN_COUNT
                /* @min:%2ecount */
              ] = 0;
              throttled = true;
              _isTriggered[msgID] = true;
              localStorageObj[
                _DYN_PRE_TRIGGER_DATE
                /* @min:%2epreTriggerDate */
              ] = /* @__PURE__ */ new Date();
            } else {
              _isTriggered[msgID] = canThrottle;
              localStorageObj[
                _DYN_COUNT
                /* @min:%2ecount */
              ] += 1;
            }
            var localStorageName = _getLocalStorageName(msgID);
            _resetLocalStorage(_logger, localStorageName, localStorageObj);
            for (var i = 0; i < number; i++) {
              _sendMessage(msgID, _logger, message, severity);
            }
          } catch (e) {
          }
          return {
            isThrottled: throttled,
            throttleNum: number
          };
        } else {
          if (!!saveUnsentMsg) {
            var queue = _getQueueByKey(msgID);
            queue.push({
              msgID,
              message,
              severity
            });
          }
        }
        return null;
      }
      function _initConfig() {
        _logger = safeGetLogger(core);
        _isTriggered = {};
        _localStorageObj = {};
        _queue = {};
        _config = {};
        _setCfgByKey(
          109
          /* _eInternalMessageId.DefaultThrottleMsgKey */
        );
        _namePrefix = isNotNullOrUndefined(namePrefix) ? namePrefix : "";
        core.addUnloadHook(onConfigChange(core.config, function(details) {
          var coreConfig = details.cfg;
          _canUseLocalStorage2 = utlCanUseLocalStorage();
          var configMgr = coreConfig.throttleMgrCfg || {};
          objForEachKey(configMgr, function(key, cfg) {
            _setCfgByKey(parseInt(key), cfg);
          });
        }));
      }
      function _getCfgByKey(msgID) {
        return _config[msgID] || _config[
          109
          /* _eInternalMessageId.DefaultThrottleMsgKey */
        ];
      }
      function _setCfgByKey(msgID, config2) {
        var _a12, _b4;
        try {
          var cfg = config2 || {};
          var curCfg = {};
          curCfg.disabled = !!cfg.disabled;
          var configInterval = cfg.interval || {};
          _isSpecificDaysGiven = (configInterval === null || configInterval === void 0 ? void 0 : configInterval.daysOfMonth) && (configInterval === null || configInterval === void 0 ? void 0 : configInterval.daysOfMonth[
            _DYN_LENGTH2
            /* @min:%2elength */
          ]) > 0;
          curCfg.interval = _getIntervalConfig(configInterval);
          var limit = {
            samplingRate: ((_a12 = cfg.limit) === null || _a12 === void 0 ? void 0 : _a12.samplingRate) || 100,
            // dafault: every time sent only 1 event
            maxSendNumber: ((_b4 = cfg.limit) === null || _b4 === void 0 ? void 0 : _b4.maxSendNumber) || 1
          };
          curCfg.limit = limit;
          _config[msgID] = curCfg;
        } catch (e) {
        }
      }
      function _getIntervalConfig(interval) {
        interval = interval || {};
        var monthInterval = interval === null || interval === void 0 ? void 0 : interval.monthInterval;
        var dayInterval = interval === null || interval === void 0 ? void 0 : interval.dayInterval;
        if (isNullOrUndefined(monthInterval) && isNullOrUndefined(dayInterval)) {
          interval.monthInterval = 3;
          if (!_isSpecificDaysGiven) {
            interval.daysOfMonth = [28];
            _isSpecificDaysGiven = true;
          }
        }
        interval = {
          // dafault: sent every three months
          monthInterval: interval === null || interval === void 0 ? void 0 : interval.monthInterval,
          dayInterval: interval === null || interval === void 0 ? void 0 : interval.dayInterval,
          daysOfMonth: interval === null || interval === void 0 ? void 0 : interval.daysOfMonth
        };
        return interval;
      }
      function _canThrottle(config2, canUseLocalStorage, localStorageObj) {
        if (config2 && !config2.disabled && canUseLocalStorage && isNotNullOrUndefined(localStorageObj)) {
          var curDate = _getThrottleDate();
          var date = localStorageObj.date;
          var interval = config2.interval;
          var monthCheck = 1;
          if (interval === null || interval === void 0 ? void 0 : interval.monthInterval) {
            var monthExpand = (curDate.getUTCFullYear() - date.getUTCFullYear()) * 12 + curDate.getUTCMonth() - date.getUTCMonth();
            monthCheck = _checkInterval(interval.monthInterval, 0, monthExpand);
          }
          var dayCheck = 1;
          if (_isSpecificDaysGiven) {
            dayCheck = arrIndexOf(interval.daysOfMonth, curDate[
              _DYN_GET_UTCDATE
              /* @min:%2egetUTCDate */
            ]());
          } else if (interval === null || interval === void 0 ? void 0 : interval.dayInterval) {
            var daySpan = mathFloor((curDate.getTime() - date.getTime()) / 864e5);
            dayCheck = _checkInterval(interval.dayInterval, 0, daySpan);
          }
          return monthCheck >= 0 && dayCheck >= 0;
        }
        return false;
      }
      function _getLocalStorageName(msgKey, prefix) {
        var fix = isNotNullOrUndefined(prefix) ? prefix : "";
        if (msgKey) {
          return THROTTLE_STORAGE_PREFIX + fix + "-" + msgKey;
        }
        return null;
      }
      function _isTriggeredOnCurDate(preTriggerDate) {
        try {
          if (preTriggerDate) {
            var curDate = /* @__PURE__ */ new Date();
            return preTriggerDate.getUTCFullYear() === curDate.getUTCFullYear() && preTriggerDate.getUTCMonth() === curDate.getUTCMonth() && preTriggerDate[
              _DYN_GET_UTCDATE
              /* @min:%2egetUTCDate */
            ]() === curDate[
              _DYN_GET_UTCDATE
              /* @min:%2egetUTCDate */
            ]();
          }
        } catch (e) {
        }
        return false;
      }
      function _getLocalStorageObj(value, logger, storageName) {
        try {
          var storageObj = {
            date: _getThrottleDate(),
            count: 0
          };
          if (value) {
            var obj = JSON.parse(value);
            var curObj = {
              date: _getThrottleDate(obj.date) || storageObj.date,
              count: obj[
                _DYN_COUNT
                /* @min:%2ecount */
              ] || storageObj[
                _DYN_COUNT
                /* @min:%2ecount */
              ],
              preTriggerDate: obj.preTriggerDate ? _getThrottleDate(obj[
                _DYN_PRE_TRIGGER_DATE
                /* @min:%2epreTriggerDate */
              ]) : void 0
            };
            return curObj;
          } else {
            _resetLocalStorage(logger, storageName, storageObj);
            return storageObj;
          }
        } catch (e) {
        }
        return null;
      }
      function _getThrottleDate(dateStr) {
        try {
          if (dateStr) {
            var date = new Date(dateStr);
            if (!isNaN(date.getDate())) {
              return date;
            }
          } else {
            return /* @__PURE__ */ new Date();
          }
        } catch (e) {
        }
        return null;
      }
      function _resetLocalStorage(logger, storageName, obj) {
        try {
          return utlSetLocalStorage(logger, storageName, strTrim(JSON[
            _DYN_STRINGIFY
            /* @min:%2estringify */
          ](obj)));
        } catch (e) {
        }
        return false;
      }
      function _checkInterval(interval, start, current) {
        if (interval <= 0) {
          return 1;
        }
        return current >= start && (current - start) % interval == 0 ? mathFloor((current - start) / interval) + 1 : -1;
      }
      function _sendMessage(msgID, logger, message, severity) {
        _throwInternal(logger, severity || 1, msgID, message);
      }
      function _canSampledIn(msgID) {
        try {
          var cfg = _getCfgByKey(msgID);
          return randomValue(1e6) <= cfg.limit.samplingRate;
        } catch (e) {
        }
        return false;
      }
      function _getLocalStorageObjByKey(key) {
        try {
          var curObj = _localStorageObj[key];
          if (!curObj) {
            var localStorageName = _getLocalStorageName(key, _namePrefix);
            curObj = _getLocalStorageObj(utlGetLocalStorage(_logger, localStorageName), _logger, localStorageName);
            _localStorageObj[key] = curObj;
          }
          return _localStorageObj[key];
        } catch (e) {
        }
        return null;
      }
      function _isTrigger(key) {
        var isTrigger = _isTriggered[key];
        if (isNullOrUndefined(isTrigger)) {
          isTrigger = false;
          var localStorageObj = _getLocalStorageObjByKey(key);
          if (localStorageObj) {
            isTrigger = _isTriggeredOnCurDate(localStorageObj[
              _DYN_PRE_TRIGGER_DATE
              /* @min:%2epreTriggerDate */
            ]);
          }
          _isTriggered[key] = isTrigger;
        }
        return _isTriggered[key];
      }
      function _getQueueByKey(key) {
        _queue = _queue || {};
        if (isNullOrUndefined(_queue[key])) {
          _queue[key] = [];
        }
        return _queue[key];
      }
    }
    return ThrottleMgr2;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/ConnectionStringParser.js
var _FIELDS_SEPARATOR = ";";
var _FIELD_KEY_VALUE_SEPARATOR = "=";
function parseConnectionString(connectionString) {
  if (!connectionString) {
    return {};
  }
  var kvPairs = connectionString[
    _DYN_SPLIT2
    /* @min:%2esplit */
  ](_FIELDS_SEPARATOR);
  var result = arrReduce(kvPairs, function(fields, kv) {
    var kvParts = kv[
      _DYN_SPLIT2
      /* @min:%2esplit */
    ](_FIELD_KEY_VALUE_SEPARATOR);
    if (kvParts[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] === 2) {
      var key = kvParts[0][
        _DYN_TO_LOWER_CASE2
        /* @min:%2etoLowerCase */
      ]();
      var value = kvParts[1];
      fields[key] = value;
    }
    return fields;
  }, {});
  if (objKeys(result)[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] > 0) {
    if (result.endpointsuffix) {
      var locationPrefix = result.location ? result.location + "." : "";
      result[
        _DYN_INGESTIONENDPOINT
        /* @min:%2eingestionendpoint */
      ] = result[
        _DYN_INGESTIONENDPOINT
        /* @min:%2eingestionendpoint */
      ] || "https://" + locationPrefix + "dc." + result.endpointsuffix;
    }
    result[
      _DYN_INGESTIONENDPOINT
      /* @min:%2eingestionendpoint */
    ] = result[
      _DYN_INGESTIONENDPOINT
      /* @min:%2eingestionendpoint */
    ] || DEFAULT_BREEZE_ENDPOINT;
    if (strEndsWith(result[
      _DYN_INGESTIONENDPOINT
      /* @min:%2eingestionendpoint */
    ], "/")) {
      result[
        _DYN_INGESTIONENDPOINT
        /* @min:%2eingestionendpoint */
      ] = result[
        _DYN_INGESTIONENDPOINT
        /* @min:%2eingestionendpoint */
      ].slice(0, -1);
    }
  }
  return result;
}

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/Common/Envelope.js
var Envelope = (
  /** @class */
  /* @__PURE__ */ function() {
    function Envelope2(logger, data, name) {
      var _this = this;
      var _self = this;
      _self.ver = 1;
      _self.sampleRate = 100;
      _self.tags = {};
      _self[
        _DYN_NAME2
        /* @min:%2ename */
      ] = dataSanitizeString(logger, name) || strNotSpecified;
      _self.data = data;
      _self.time = toISOString(/* @__PURE__ */ new Date());
      _self[
        _DYN_AI_DATA_CONTRACT
        /* @min:%2eaiDataContract */
      ] = {
        time: 1,
        iKey: 1,
        name: 1,
        sampleRate: function() {
          return _this.sampleRate === 100 ? 4 : 1;
        },
        tags: 1,
        data: 1
        /* FieldType.Required */
      };
    }
    return Envelope2;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/Event.js
var Event2 = (
  /** @class */
  function() {
    function Event3(logger, name, properties, measurements) {
      this.aiDataContract = {
        ver: 1,
        name: 1,
        properties: 0,
        measurements: 0
        /* FieldType.Default */
      };
      var _self = this;
      _self.ver = 2;
      _self[
        _DYN_NAME2
        /* @min:%2ename */
      ] = dataSanitizeString(logger, name) || strNotSpecified;
      _self[
        _DYN_PROPERTIES
        /* @min:%2eproperties */
      ] = dataSanitizeProperties(logger, properties);
      _self[
        _DYN_MEASUREMENTS
        /* @min:%2emeasurements */
      ] = dataSanitizeMeasurements(logger, measurements);
    }
    Event3.envelopeType = "Microsoft.ApplicationInsights.{0}.Event";
    Event3.dataType = "EventData";
    return Event3;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/Exception.js
var STACKFRAME_BASE_SIZE = 58;
var IS_FRAME = /^\s{0,50}(from\s|at\s|Line\s{1,5}\d{1,10}\s{1,5}of|\w{1,50}@\w{1,80}|[^\(\s\n]+:[0-9\?]+(?::[0-9\?]+)?)/;
var FULL_STACK_FRAME_1 = /^(?:\s{0,50}at)?\s{0,50}([^\@\()\s]+)?\s{0,50}(?:\s|\@|\()\s{0,5}([^\(\s\n\]]+):([0-9\?]+):([0-9\?]+)\)?$/;
var FULL_STACK_FRAME_2 = /^(?:\s{0,50}at)?\s{0,50}([^\@\()\s]+)?\s{0,50}(?:\s|\@|\()\s{0,5}([^\(\s\n\]]+):([0-9\?]+)\)?$/;
var FULL_STACK_FRAME_3 = /^(?:\s{0,50}at)?\s{0,50}([^\@\()\s]+)?\s{0,50}(?:\s|\@|\()\s{0,5}([^\(\s\n\)\]]+)\)?$/;
var EXTRACT_FILENAME = /(?:^|\(|\s{0,10}[\w\)]+\@)?([^\(\n\s\]\)]+)(?:\:([0-9]+)(?:\:([0-9]+))?)?\)?(?:,|$)/;
var PARSE_FILENAME_LINE_COL = /([^\(\s\n]+):([0-9]+):([0-9]+)$/;
var PARSE_FILENAME_LINE_ONLY = /([^\(\s\n]+):([0-9]+)$/;
var NoMethod = "<no_method>";
var strError = "error";
var strStack = "stack";
var strStackDetails = "stackDetails";
var strErrorSrc = "errorSrc";
var strMessage = "message";
var strDescription = "description";
var _parseSequence = [{
  re: FULL_STACK_FRAME_1,
  len: 5,
  m: 1,
  fn: 2,
  ln: 3,
  col: 4
}, {
  chk: _ignoreNative,
  pre: _scrubAnonymous,
  re: FULL_STACK_FRAME_2,
  len: 4,
  m: 1,
  fn: 2,
  ln: 3
}, {
  re: FULL_STACK_FRAME_3,
  len: 3,
  m: 1,
  fn: 2,
  hdl: _handleFilename
}, {
  re: EXTRACT_FILENAME,
  len: 2,
  fn: 1,
  hdl: _handleFilename
}];
function _scrubAnonymous(frame) {
  return frame.replace(/(\(anonymous\))/, "<anonymous>");
}
function _ignoreNative(frame) {
  return strIndexOf(frame, "[native") < 0;
}
function _stringify(value, convertToString) {
  var result = value;
  if (result && !isString(result)) {
    if (JSON && JSON[
      _DYN_STRINGIFY
      /* @min:%2estringify */
    ]) {
      result = JSON[
        _DYN_STRINGIFY
        /* @min:%2estringify */
      ](value);
      if (convertToString && (!result || result === "{}")) {
        if (isFunction3(value[
          _DYN_TO_STRING
          /* @min:%2etoString */
        ])) {
          result = value[
            _DYN_TO_STRING
            /* @min:%2etoString */
          ]();
        } else {
          result = "" + value;
        }
      }
    } else {
      result = "" + value + " - (Missing JSON.stringify)";
    }
  }
  return result || "";
}
function _formatMessage(theEvent, errorType) {
  var evtMessage = theEvent;
  if (theEvent) {
    if (evtMessage && !isString(evtMessage)) {
      evtMessage = theEvent[strMessage] || theEvent[strDescription] || evtMessage;
    }
    if (evtMessage && !isString(evtMessage)) {
      evtMessage = _stringify(evtMessage, true);
    }
    if (theEvent["filename"]) {
      evtMessage = evtMessage + " @" + (theEvent["filename"] || "") + ":" + (theEvent["lineno"] || "?") + ":" + (theEvent["colno"] || "?");
    }
  }
  if (errorType && errorType !== "String" && errorType !== "Object" && errorType !== "Error" && strIndexOf(evtMessage || "", errorType) === -1) {
    evtMessage = errorType + ": " + evtMessage;
  }
  return evtMessage || "";
}
function _isExceptionDetailsInternal(value) {
  try {
    if (isObject(value)) {
      return "hasFullStack" in value && "typeName" in value;
    }
  } catch (e) {
  }
  return false;
}
function _isExceptionInternal(value) {
  try {
    if (isObject(value)) {
      return "ver" in value && "exceptions" in value && "properties" in value;
    }
  } catch (e) {
  }
  return false;
}
function _isStackDetails(details) {
  return details && details.src && isString(details.src) && details.obj && isArray3(details.obj);
}
function _convertStackObj(errorStack) {
  var src = errorStack || "";
  if (!isString(src)) {
    if (isString(src[strStack])) {
      src = src[strStack];
    } else {
      src = "" + src;
    }
  }
  var items = src[
    _DYN_SPLIT2
    /* @min:%2esplit */
  ]("\n");
  return {
    src,
    obj: items
  };
}
function _getOperaStack(errorMessage) {
  var stack = [];
  var lines = errorMessage[
    _DYN_SPLIT2
    /* @min:%2esplit */
  ]("\n");
  for (var lp = 0; lp < lines[
    _DYN_LENGTH2
    /* @min:%2elength */
  ]; lp++) {
    var entry = lines[lp];
    if (lines[lp + 1]) {
      entry += "@" + lines[lp + 1];
      lp++;
    }
    stack.push(entry);
  }
  return {
    src: errorMessage,
    obj: stack
  };
}
function _getStackFromErrorObj(errorObj) {
  var details = null;
  if (errorObj) {
    try {
      if (errorObj[strStack]) {
        details = _convertStackObj(errorObj[strStack]);
      } else if (errorObj[strError] && errorObj[strError][strStack]) {
        details = _convertStackObj(errorObj[strError][strStack]);
      } else if (errorObj["exception"] && errorObj.exception[strStack]) {
        details = _convertStackObj(errorObj.exception[strStack]);
      } else if (_isStackDetails(errorObj)) {
        details = errorObj;
      } else if (_isStackDetails(errorObj[strStackDetails])) {
        details = errorObj[strStackDetails];
      } else if (getWindow() && getWindow()["opera"] && errorObj[strMessage]) {
        details = _getOperaStack(errorObj[
          _DYN_MESSAGE2
          /* @min:%2emessage */
        ]);
      } else if (errorObj["reason"] && errorObj.reason[strStack]) {
        details = _convertStackObj(errorObj.reason[strStack]);
      } else if (isString(errorObj)) {
        details = _convertStackObj(errorObj);
      } else {
        var evtMessage = errorObj[strMessage] || errorObj[strDescription] || "";
        if (isString(errorObj[strErrorSrc])) {
          if (evtMessage) {
            evtMessage += "\n";
          }
          evtMessage += " from " + errorObj[strErrorSrc];
        }
        if (evtMessage) {
          details = _convertStackObj(evtMessage);
        }
      }
    } catch (e) {
      details = _convertStackObj(e);
    }
  }
  return details || {
    src: "",
    obj: null
  };
}
function _formatStackTrace(stackDetails) {
  var stack = "";
  if (stackDetails) {
    if (stackDetails.obj) {
      stack = stackDetails.obj.join("\n");
    } else {
      stack = stackDetails.src || "";
    }
  }
  return stack;
}
function _parseStack(stack) {
  var parsedStack;
  var frames = stack.obj;
  if (frames && frames[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] > 0) {
    parsedStack = [];
    var level_1 = 0;
    var foundStackStart_1 = false;
    var totalSizeInBytes_1 = 0;
    arrForEach(frames, function(frame) {
      if (foundStackStart_1 || _isStackFrame(frame)) {
        var theFrame = asString(frame);
        foundStackStart_1 = true;
        var parsedFrame = _extractStackFrame(theFrame, level_1);
        if (parsedFrame) {
          totalSizeInBytes_1 += parsedFrame[
            _DYN_SIZE_IN_BYTES
            /* @min:%2esizeInBytes */
          ];
          parsedStack.push(parsedFrame);
          level_1++;
        }
      }
    });
    var exceptionParsedStackThreshold = 32 * 1024;
    if (totalSizeInBytes_1 > exceptionParsedStackThreshold) {
      var left = 0;
      var right = parsedStack[
        _DYN_LENGTH2
        /* @min:%2elength */
      ] - 1;
      var size = 0;
      var acceptedLeft = left;
      var acceptedRight = right;
      while (left < right) {
        var lSize = parsedStack[left][
          _DYN_SIZE_IN_BYTES
          /* @min:%2esizeInBytes */
        ];
        var rSize = parsedStack[right][
          _DYN_SIZE_IN_BYTES
          /* @min:%2esizeInBytes */
        ];
        size += lSize + rSize;
        if (size > exceptionParsedStackThreshold) {
          var howMany = acceptedRight - acceptedLeft + 1;
          parsedStack.splice(acceptedLeft, howMany);
          break;
        }
        acceptedLeft = left;
        acceptedRight = right;
        left++;
        right--;
      }
    }
  }
  return parsedStack;
}
function _getErrorType(errorType) {
  var typeName = "";
  if (errorType) {
    typeName = errorType.typeName || errorType[
      _DYN_NAME2
      /* @min:%2ename */
    ] || "";
    if (!typeName) {
      try {
        var funcNameRegex = /function (.{1,200})\(/;
        var results = funcNameRegex.exec(errorType.constructor[
          _DYN_TO_STRING
          /* @min:%2etoString */
        ]());
        typeName = results && results[
          _DYN_LENGTH2
          /* @min:%2elength */
        ] > 1 ? results[1] : "";
      } catch (e) {
      }
    }
  }
  return typeName;
}
function _formatErrorCode(errorObj) {
  if (errorObj) {
    try {
      if (!isString(errorObj)) {
        var errorType = _getErrorType(errorObj);
        var result = _stringify(errorObj, false);
        if (!result || result === "{}") {
          if (errorObj[strError]) {
            errorObj = errorObj[strError];
            errorType = _getErrorType(errorObj);
          }
          result = _stringify(errorObj, true);
        }
        if (strIndexOf(result, errorType) !== 0 && errorType !== "String") {
          return errorType + ":" + result;
        }
        return result;
      }
    } catch (e) {
    }
  }
  return "" + (errorObj || "");
}
var Exception = (
  /** @class */
  function() {
    function Exception2(logger, exception, properties, measurements, severityLevel, id) {
      this.aiDataContract = {
        ver: 1,
        exceptions: 1,
        severityLevel: 0,
        properties: 0,
        measurements: 0
        /* FieldType.Default */
      };
      var _self = this;
      _self.ver = 2;
      if (!_isExceptionInternal(exception)) {
        if (!properties) {
          properties = {};
        }
        if (id) {
          properties.id = id;
        }
        _self[
          _DYN_EXCEPTIONS
          /* @min:%2eexceptions */
        ] = [_createExceptionDetails(logger, exception, properties)];
        _self[
          _DYN_PROPERTIES
          /* @min:%2eproperties */
        ] = dataSanitizeProperties(logger, properties);
        _self[
          _DYN_MEASUREMENTS
          /* @min:%2emeasurements */
        ] = dataSanitizeMeasurements(logger, measurements);
        if (severityLevel) {
          _self[
            _DYN_SEVERITY_LEVEL
            /* @min:%2eseverityLevel */
          ] = severityLevel;
        }
        if (id) {
          _self.id = id;
        }
      } else {
        _self[
          _DYN_EXCEPTIONS
          /* @min:%2eexceptions */
        ] = exception[
          _DYN_EXCEPTIONS
          /* @min:%2eexceptions */
        ] || [];
        _self[
          _DYN_PROPERTIES
          /* @min:%2eproperties */
        ] = exception[
          _DYN_PROPERTIES
          /* @min:%2eproperties */
        ];
        _self[
          _DYN_MEASUREMENTS
          /* @min:%2emeasurements */
        ] = exception[
          _DYN_MEASUREMENTS
          /* @min:%2emeasurements */
        ];
        if (exception[
          _DYN_SEVERITY_LEVEL
          /* @min:%2eseverityLevel */
        ]) {
          _self[
            _DYN_SEVERITY_LEVEL
            /* @min:%2eseverityLevel */
          ] = exception[
            _DYN_SEVERITY_LEVEL
            /* @min:%2eseverityLevel */
          ];
        }
        if (exception.id) {
          _self.id = exception.id;
          exception[
            _DYN_PROPERTIES
            /* @min:%2eproperties */
          ].id = exception.id;
        }
        if (exception[
          _DYN_PROBLEM_GROUP
          /* @min:%2eproblemGroup */
        ]) {
          _self[
            _DYN_PROBLEM_GROUP
            /* @min:%2eproblemGroup */
          ] = exception[
            _DYN_PROBLEM_GROUP
            /* @min:%2eproblemGroup */
          ];
        }
        if (!isNullOrUndefined(exception.isManual)) {
          _self.isManual = exception.isManual;
        }
      }
    }
    Exception2.CreateAutoException = function(message, url, lineNumber, columnNumber, error, evt, stack, errorSrc) {
      var errorType = _getErrorType(error || evt || message);
      return {
        message: _formatMessage(message, errorType),
        url,
        lineNumber,
        columnNumber,
        error: _formatErrorCode(error || evt || message),
        evt: _formatErrorCode(evt || message),
        typeName: errorType,
        stackDetails: _getStackFromErrorObj(stack || error || evt),
        errorSrc
      };
    };
    Exception2.CreateFromInterface = function(logger, exception, properties, measurements) {
      var exceptions = exception[
        _DYN_EXCEPTIONS
        /* @min:%2eexceptions */
      ] && arrMap(exception[
        _DYN_EXCEPTIONS
        /* @min:%2eexceptions */
      ], function(ex) {
        return _createExDetailsFromInterface(logger, ex);
      });
      var exceptionData = new Exception2(logger, __assignFn(__assignFn({}, exception), {
        exceptions
      }), properties, measurements);
      return exceptionData;
    };
    Exception2.prototype.toInterface = function() {
      var _a12 = this, exceptions = _a12.exceptions, properties = _a12.properties, measurements = _a12.measurements, severityLevel = _a12.severityLevel, problemGroup = _a12.problemGroup, id = _a12.id, isManual = _a12.isManual;
      var exceptionDetailsInterface = exceptions instanceof Array && arrMap(exceptions, function(exception) {
        return exception.toInterface();
      }) || void 0;
      return {
        ver: "4.0",
        exceptions: exceptionDetailsInterface,
        severityLevel,
        properties,
        measurements,
        problemGroup,
        id,
        isManual
      };
    };
    Exception2.CreateSimpleException = function(message, typeName, assembly, fileName, details, line) {
      var _a12;
      return {
        exceptions: [(_a12 = {}, _a12[
          _DYN_HAS_FULL_STACK
          /* @min:hasFullStack */
        ] = true, _a12.message = message, _a12.stack = details, _a12.typeName = typeName, _a12)]
      };
    };
    Exception2.envelopeType = "Microsoft.ApplicationInsights.{0}.Exception";
    Exception2.dataType = "ExceptionData";
    Exception2.formatError = _formatErrorCode;
    return Exception2;
  }()
);
var exDetailsAiDataContract = objFreeze({
  id: 0,
  outerId: 0,
  typeName: 1,
  message: 1,
  hasFullStack: 0,
  stack: 0,
  parsedStack: 2
  /* FieldType.Array */
});
function _toInterface() {
  var _self = this;
  var parsedStack = isArray3(_self[
    _DYN_PARSED_STACK
    /* @min:%2eparsedStack */
  ]) && arrMap(_self[
    _DYN_PARSED_STACK
    /* @min:%2eparsedStack */
  ], function(frame) {
    return _parsedFrameToInterface(frame);
  });
  var exceptionDetailsInterface = {
    id: _self.id,
    outerId: _self.outerId,
    typeName: _self[
      _DYN_TYPE_NAME
      /* @min:%2etypeName */
    ],
    message: _self[
      _DYN_MESSAGE2
      /* @min:%2emessage */
    ],
    hasFullStack: _self[
      _DYN_HAS_FULL_STACK
      /* @min:%2ehasFullStack */
    ],
    stack: _self[strStack],
    parsedStack: parsedStack || void 0
  };
  return exceptionDetailsInterface;
}
function _createExceptionDetails(logger, exception, properties) {
  var _a12;
  var id;
  var outerId;
  var typeName;
  var message;
  var hasFullStack;
  var theStack;
  var parsedStack;
  if (!_isExceptionDetailsInternal(exception)) {
    var error = exception;
    var evt = error && error.evt;
    if (!isError(error)) {
      error = error[strError] || evt || error;
    }
    typeName = dataSanitizeString(logger, _getErrorType(error)) || strNotSpecified;
    message = dataSanitizeMessage(logger, _formatMessage(exception || error, typeName)) || strNotSpecified;
    var stack = exception[strStackDetails] || _getStackFromErrorObj(exception);
    parsedStack = _parseStack(stack);
    if (isArray3(parsedStack)) {
      arrMap(parsedStack, function(frame) {
        frame[
          _DYN_ASSEMBLY
          /* @min:%2eassembly */
        ] = dataSanitizeString(logger, frame[
          _DYN_ASSEMBLY
          /* @min:%2eassembly */
        ]);
        frame[
          _DYN_FILE_NAME
          /* @min:%2efileName */
        ] = dataSanitizeString(logger, frame[
          _DYN_FILE_NAME
          /* @min:%2efileName */
        ]);
      });
    }
    theStack = dataSanitizeException(logger, _formatStackTrace(stack));
    hasFullStack = isArray3(parsedStack) && parsedStack[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > 0;
    if (properties) {
      properties[
        _DYN_TYPE_NAME
        /* @min:%2etypeName */
      ] = properties[
        _DYN_TYPE_NAME
        /* @min:%2etypeName */
      ] || typeName;
    }
  } else {
    typeName = exception[
      _DYN_TYPE_NAME
      /* @min:%2etypeName */
    ];
    message = exception[
      _DYN_MESSAGE2
      /* @min:%2emessage */
    ];
    theStack = exception[strStack];
    parsedStack = exception[
      _DYN_PARSED_STACK
      /* @min:%2eparsedStack */
    ] || [];
    hasFullStack = exception[
      _DYN_HAS_FULL_STACK
      /* @min:%2ehasFullStack */
    ];
  }
  return _a12 = {}, _a12[
    _DYN_AI_DATA_CONTRACT
    /* @min:aiDataContract */
  ] = exDetailsAiDataContract, _a12.id = id, _a12.outerId = outerId, _a12.typeName = typeName, _a12.message = message, _a12[
    _DYN_HAS_FULL_STACK
    /* @min:hasFullStack */
  ] = hasFullStack, _a12.stack = theStack, _a12.parsedStack = parsedStack, _a12.toInterface = _toInterface, _a12;
}
function _createExDetailsFromInterface(logger, exception) {
  var parsedStack = isArray3(exception[
    _DYN_PARSED_STACK
    /* @min:%2eparsedStack */
  ]) && arrMap(exception[
    _DYN_PARSED_STACK
    /* @min:%2eparsedStack */
  ], function(frame) {
    return _stackFrameFromInterface(frame);
  }) || exception[
    _DYN_PARSED_STACK
    /* @min:%2eparsedStack */
  ];
  var exceptionDetails = _createExceptionDetails(logger, __assignFn(__assignFn({}, exception), {
    parsedStack
  }));
  return exceptionDetails;
}
function _parseFilename(theFrame, fileName) {
  var lineCol = fileName[
    _DYN_MATCH
    /* @min:%2ematch */
  ](PARSE_FILENAME_LINE_COL);
  if (lineCol && lineCol[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] >= 4) {
    theFrame[
      _DYN_FILE_NAME
      /* @min:%2efileName */
    ] = lineCol[1];
    theFrame[
      _DYN_LINE
      /* @min:%2eline */
    ] = parseInt(lineCol[2]);
  } else {
    var lineNo = fileName[
      _DYN_MATCH
      /* @min:%2ematch */
    ](PARSE_FILENAME_LINE_ONLY);
    if (lineNo && lineNo[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] >= 3) {
      theFrame[
        _DYN_FILE_NAME
        /* @min:%2efileName */
      ] = lineNo[1];
      theFrame[
        _DYN_LINE
        /* @min:%2eline */
      ] = parseInt(lineNo[2]);
    } else {
      theFrame[
        _DYN_FILE_NAME
        /* @min:%2efileName */
      ] = fileName;
    }
  }
}
function _handleFilename(theFrame, sequence, matches) {
  var filename = theFrame[
    _DYN_FILE_NAME
    /* @min:%2efileName */
  ];
  if (sequence.fn && matches && matches[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] > sequence.fn) {
    if (sequence.ln && matches[
      _DYN_LENGTH2
      /* @min:%2elength */
    ] > sequence.ln) {
      filename = strTrim(matches[sequence.fn] || "");
      theFrame[
        _DYN_LINE
        /* @min:%2eline */
      ] = parseInt(strTrim(matches[sequence.ln] || "")) || 0;
    } else {
      filename = strTrim(matches[sequence.fn] || "");
    }
  }
  if (filename) {
    _parseFilename(theFrame, filename);
  }
}
function _isStackFrame(frame) {
  var result = false;
  if (frame && isString(frame)) {
    var trimmedFrame = strTrim(frame);
    if (trimmedFrame) {
      result = IS_FRAME.test(trimmedFrame);
    }
  }
  return result;
}
var stackFrameAiDataContract = objFreeze({
  level: 1,
  method: 1,
  assembly: 0,
  fileName: 0,
  line: 0
  /* FieldType.Default */
});
function _extractStackFrame(frame, level) {
  var _a12;
  var theFrame;
  if (frame && isString(frame) && strTrim(frame)) {
    theFrame = (_a12 = {}, _a12[
      _DYN_AI_DATA_CONTRACT
      /* @min:aiDataContract */
    ] = stackFrameAiDataContract, _a12.level = level, _a12.assembly = strTrim(frame), _a12.method = NoMethod, _a12.fileName = "", _a12.line = 0, _a12.sizeInBytes = 0, _a12);
    var idx = 0;
    while (idx < _parseSequence[
      _DYN_LENGTH2
      /* @min:%2elength */
    ]) {
      var sequence = _parseSequence[idx];
      if (sequence.chk && !sequence.chk(frame)) {
        break;
      }
      if (sequence.pre) {
        frame = sequence.pre(frame);
      }
      var matches = frame[
        _DYN_MATCH
        /* @min:%2ematch */
      ](sequence.re);
      if (matches && matches[
        _DYN_LENGTH2
        /* @min:%2elength */
      ] >= sequence.len) {
        if (sequence.m) {
          theFrame.method = strTrim(matches[sequence.m] || NoMethod);
        }
        if (sequence.hdl) {
          sequence.hdl(theFrame, sequence, matches);
        } else if (sequence.fn) {
          if (sequence.ln) {
            theFrame[
              _DYN_FILE_NAME
              /* @min:%2efileName */
            ] = strTrim(matches[sequence.fn] || "");
            theFrame[
              _DYN_LINE
              /* @min:%2eline */
            ] = parseInt(strTrim(matches[sequence.ln] || "")) || 0;
          } else {
            _parseFilename(theFrame, matches[sequence.fn] || "");
          }
        }
        break;
      }
      idx++;
    }
  }
  return _populateFrameSizeInBytes(theFrame);
}
function _stackFrameFromInterface(frame) {
  var _a12;
  var parsedFrame = (_a12 = {}, _a12[
    _DYN_AI_DATA_CONTRACT
    /* @min:aiDataContract */
  ] = stackFrameAiDataContract, _a12.level = frame.level, _a12.method = frame.method, _a12.assembly = frame[
    _DYN_ASSEMBLY
    /* @min:%2eassembly */
  ], _a12.fileName = frame[
    _DYN_FILE_NAME
    /* @min:%2efileName */
  ], _a12.line = frame[
    _DYN_LINE
    /* @min:%2eline */
  ], _a12.sizeInBytes = 0, _a12);
  return _populateFrameSizeInBytes(parsedFrame);
}
function _populateFrameSizeInBytes(frame) {
  var sizeInBytes = STACKFRAME_BASE_SIZE;
  if (frame) {
    sizeInBytes += frame.method[
      _DYN_LENGTH2
      /* @min:%2elength */
    ];
    sizeInBytes += frame.assembly[
      _DYN_LENGTH2
      /* @min:%2elength */
    ];
    sizeInBytes += frame.fileName[
      _DYN_LENGTH2
      /* @min:%2elength */
    ];
    sizeInBytes += frame.level.toString()[
      _DYN_LENGTH2
      /* @min:%2elength */
    ];
    sizeInBytes += frame.line.toString()[
      _DYN_LENGTH2
      /* @min:%2elength */
    ];
    frame[
      _DYN_SIZE_IN_BYTES
      /* @min:%2esizeInBytes */
    ] = sizeInBytes;
  }
  return frame;
}
function _parsedFrameToInterface(frame) {
  return {
    level: frame.level,
    method: frame.method,
    assembly: frame[
      _DYN_ASSEMBLY
      /* @min:%2eassembly */
    ],
    fileName: frame[
      _DYN_FILE_NAME
      /* @min:%2efileName */
    ],
    line: frame[
      _DYN_LINE
      /* @min:%2eline */
    ]
  };
}

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/Common/DataPoint.js
var DataPoint = (
  /** @class */
  /* @__PURE__ */ function() {
    function DataPoint2() {
      this.aiDataContract = {
        name: 1,
        kind: 0,
        value: 1,
        count: 0,
        min: 0,
        max: 0,
        stdDev: 0
        /* FieldType.Default */
      };
      this.kind = 0;
    }
    return DataPoint2;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/Metric.js
var Metric = (
  /** @class */
  function() {
    function Metric2(logger, name, value, count, min, max, stdDev, properties, measurements) {
      this.aiDataContract = {
        ver: 1,
        metrics: 1,
        properties: 0
        /* FieldType.Default */
      };
      var _self = this;
      _self.ver = 2;
      var dataPoint = new DataPoint();
      dataPoint[
        _DYN_COUNT
        /* @min:%2ecount */
      ] = count > 0 ? count : void 0;
      dataPoint.max = isNaN(max) || max === null ? void 0 : max;
      dataPoint.min = isNaN(min) || min === null ? void 0 : min;
      dataPoint[
        _DYN_NAME2
        /* @min:%2ename */
      ] = dataSanitizeString(logger, name) || strNotSpecified;
      dataPoint.value = value;
      dataPoint.stdDev = isNaN(stdDev) || stdDev === null ? void 0 : stdDev;
      _self.metrics = [dataPoint];
      _self[
        _DYN_PROPERTIES
        /* @min:%2eproperties */
      ] = dataSanitizeProperties(logger, properties);
      _self[
        _DYN_MEASUREMENTS
        /* @min:%2emeasurements */
      ] = dataSanitizeMeasurements(logger, measurements);
    }
    Metric2.envelopeType = "Microsoft.ApplicationInsights.{0}.Metric";
    Metric2.dataType = "MetricData";
    return Metric2;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/HelperFuncs.js
var strEmpty = "";
function msToTimeSpan(totalms) {
  if (isNaN(totalms) || totalms < 0) {
    totalms = 0;
  }
  totalms = mathRound(totalms);
  var ms = strEmpty + totalms % 1e3;
  var sec = strEmpty + mathFloor(totalms / 1e3) % 60;
  var min = strEmpty + mathFloor(totalms / (1e3 * 60)) % 60;
  var hour = strEmpty + mathFloor(totalms / (1e3 * 60 * 60)) % 24;
  var days = mathFloor(totalms / (1e3 * 60 * 60 * 24));
  ms = ms[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] === 1 ? "00" + ms : ms[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] === 2 ? "0" + ms : ms;
  sec = sec[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] < 2 ? "0" + sec : sec;
  min = min[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] < 2 ? "0" + min : min;
  hour = hour[
    _DYN_LENGTH2
    /* @min:%2elength */
  ] < 2 ? "0" + hour : hour;
  return (days > 0 ? days + "." : strEmpty) + hour + ":" + min + ":" + sec + "." + ms;
}
function isCrossOriginError(message, url, lineNumber, columnNumber, error) {
  return !error && isString(message) && (message === "Script error." || message === "Script error");
}

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/PageView.js
var PageView = (
  /** @class */
  function() {
    function PageView2(logger, name, url, durationMs, properties, measurements, id) {
      this.aiDataContract = {
        ver: 1,
        name: 0,
        url: 0,
        duration: 0,
        properties: 0,
        measurements: 0,
        id: 0
        /* FieldType.Default */
      };
      var _self = this;
      _self.ver = 2;
      _self.id = dataSanitizeId(logger, id);
      _self.url = dataSanitizeUrl(logger, url);
      _self[
        _DYN_NAME2
        /* @min:%2ename */
      ] = dataSanitizeString(logger, name) || strNotSpecified;
      if (!isNaN(durationMs)) {
        _self[
          _DYN_DURATION
          /* @min:%2eduration */
        ] = msToTimeSpan(durationMs);
      }
      _self[
        _DYN_PROPERTIES
        /* @min:%2eproperties */
      ] = dataSanitizeProperties(logger, properties);
      _self[
        _DYN_MEASUREMENTS
        /* @min:%2emeasurements */
      ] = dataSanitizeMeasurements(logger, measurements);
    }
    PageView2.envelopeType = "Microsoft.ApplicationInsights.{0}.Pageview";
    PageView2.dataType = "PageviewData";
    return PageView2;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/RemoteDependencyData.js
var RemoteDependencyData = (
  /** @class */
  function() {
    function RemoteDependencyData2(logger, id, absoluteUrl, commandName, value, success, resultCode, method, requestAPI, correlationContext, properties, measurements) {
      if (requestAPI === void 0) {
        requestAPI = "Ajax";
      }
      this.aiDataContract = {
        id: 1,
        ver: 1,
        name: 0,
        resultCode: 0,
        duration: 0,
        success: 0,
        data: 0,
        target: 0,
        type: 0,
        properties: 0,
        measurements: 0,
        kind: 0,
        value: 0,
        count: 0,
        min: 0,
        max: 0,
        stdDev: 0,
        dependencyKind: 0,
        dependencySource: 0,
        commandName: 0,
        dependencyTypeName: 0
        /* FieldType.Default */
      };
      var _self = this;
      _self.ver = 2;
      _self.id = id;
      _self[
        _DYN_DURATION
        /* @min:%2eduration */
      ] = msToTimeSpan(value);
      _self.success = success;
      _self.resultCode = resultCode + "";
      _self.type = dataSanitizeString(logger, requestAPI);
      var dependencyFields = AjaxHelperParseDependencyPath(logger, absoluteUrl, method, commandName);
      _self.data = dataSanitizeUrl(logger, commandName) || dependencyFields.data;
      _self.target = dataSanitizeString(logger, dependencyFields.target);
      if (correlationContext) {
        _self.target = "".concat(_self.target, " | ").concat(correlationContext);
      }
      _self[
        _DYN_NAME2
        /* @min:%2ename */
      ] = dataSanitizeString(logger, dependencyFields[
        _DYN_NAME2
        /* @min:%2ename */
      ]);
      _self[
        _DYN_PROPERTIES
        /* @min:%2eproperties */
      ] = dataSanitizeProperties(logger, properties);
      _self[
        _DYN_MEASUREMENTS
        /* @min:%2emeasurements */
      ] = dataSanitizeMeasurements(logger, measurements);
    }
    RemoteDependencyData2.envelopeType = "Microsoft.ApplicationInsights.{0}.RemoteDependency";
    RemoteDependencyData2.dataType = "RemoteDependencyData";
    return RemoteDependencyData2;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/Trace.js
var Trace = (
  /** @class */
  function() {
    function Trace2(logger, message, severityLevel, properties, measurements) {
      this.aiDataContract = {
        ver: 1,
        message: 1,
        severityLevel: 0,
        properties: 0
        /* FieldType.Default */
      };
      var _self = this;
      _self.ver = 2;
      message = message || strNotSpecified;
      _self[
        _DYN_MESSAGE2
        /* @min:%2emessage */
      ] = dataSanitizeMessage(logger, message);
      _self[
        _DYN_PROPERTIES
        /* @min:%2eproperties */
      ] = dataSanitizeProperties(logger, properties);
      _self[
        _DYN_MEASUREMENTS
        /* @min:%2emeasurements */
      ] = dataSanitizeMeasurements(logger, measurements);
      if (severityLevel) {
        _self[
          _DYN_SEVERITY_LEVEL
          /* @min:%2eseverityLevel */
        ] = severityLevel;
      }
    }
    Trace2.envelopeType = "Microsoft.ApplicationInsights.{0}.Message";
    Trace2.dataType = "MessageData";
    return Trace2;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/PageViewPerformance.js
var PageViewPerformance = (
  /** @class */
  function() {
    function PageViewPerformance2(logger, name, url, unused, properties, measurements, cs4BaseData) {
      this.aiDataContract = {
        ver: 1,
        name: 0,
        url: 0,
        duration: 0,
        perfTotal: 0,
        networkConnect: 0,
        sentRequest: 0,
        receivedResponse: 0,
        domProcessing: 0,
        properties: 0,
        measurements: 0
        /* FieldType.Default */
      };
      var _self = this;
      _self.ver = 2;
      _self.url = dataSanitizeUrl(logger, url);
      _self[
        _DYN_NAME2
        /* @min:%2ename */
      ] = dataSanitizeString(logger, name) || strNotSpecified;
      _self[
        _DYN_PROPERTIES
        /* @min:%2eproperties */
      ] = dataSanitizeProperties(logger, properties);
      _self[
        _DYN_MEASUREMENTS
        /* @min:%2emeasurements */
      ] = dataSanitizeMeasurements(logger, measurements);
      if (cs4BaseData) {
        _self.domProcessing = cs4BaseData.domProcessing;
        _self[
          _DYN_DURATION
          /* @min:%2eduration */
        ] = cs4BaseData[
          _DYN_DURATION
          /* @min:%2eduration */
        ];
        _self.networkConnect = cs4BaseData.networkConnect;
        _self.perfTotal = cs4BaseData.perfTotal;
        _self.receivedResponse = cs4BaseData.receivedResponse;
        _self.sentRequest = cs4BaseData.sentRequest;
      }
    }
    PageViewPerformance2.envelopeType = "Microsoft.ApplicationInsights.{0}.PageviewPerformance";
    PageViewPerformance2.dataType = "PageviewPerformanceData";
    return PageViewPerformance2;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/Telemetry/Common/Data.js
var Data = (
  /** @class */
  /* @__PURE__ */ function() {
    function Data2(baseType, data) {
      this.aiDataContract = {
        baseType: 1,
        baseData: 1
        /* FieldType.Required */
      };
      this.baseType = baseType;
      this.baseData = data;
    }
    return Data2;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/Interfaces/Contracts/ContextTagKeys.js
function _aiNameFunc(baseName) {
  var aiName = "ai." + baseName + ".";
  return function(name) {
    return aiName + name;
  };
}
var _aiApplication = _aiNameFunc("application");
var _aiDevice = _aiNameFunc("device");
var _aiLocation = _aiNameFunc("location");
var _aiOperation = _aiNameFunc("operation");
var _aiSession = _aiNameFunc("session");
var _aiUser = _aiNameFunc("user");
var _aiCloud = _aiNameFunc("cloud");
var _aiInternal = _aiNameFunc("internal");
var ContextTagKeys = (
  /** @class */
  function(_super) {
    __extendsFn(ContextTagKeys2, _super);
    function ContextTagKeys2() {
      return _super.call(this) || this;
    }
    return ContextTagKeys2;
  }(createClassFromInterface({
    applicationVersion: _aiApplication("ver"),
    applicationBuild: _aiApplication("build"),
    applicationTypeId: _aiApplication("typeId"),
    applicationId: _aiApplication("applicationId"),
    applicationLayer: _aiApplication("layer"),
    deviceId: _aiDevice("id"),
    deviceIp: _aiDevice("ip"),
    deviceLanguage: _aiDevice("language"),
    deviceLocale: _aiDevice("locale"),
    deviceModel: _aiDevice("model"),
    deviceFriendlyName: _aiDevice("friendlyName"),
    deviceNetwork: _aiDevice("network"),
    deviceNetworkName: _aiDevice("networkName"),
    deviceOEMName: _aiDevice("oemName"),
    deviceOS: _aiDevice("os"),
    deviceOSVersion: _aiDevice("osVersion"),
    deviceRoleInstance: _aiDevice("roleInstance"),
    deviceRoleName: _aiDevice("roleName"),
    deviceScreenResolution: _aiDevice("screenResolution"),
    deviceType: _aiDevice("type"),
    deviceMachineName: _aiDevice("machineName"),
    deviceVMName: _aiDevice("vmName"),
    deviceBrowser: _aiDevice("browser"),
    deviceBrowserVersion: _aiDevice("browserVersion"),
    locationIp: _aiLocation("ip"),
    locationCountry: _aiLocation("country"),
    locationProvince: _aiLocation("province"),
    locationCity: _aiLocation("city"),
    operationId: _aiOperation("id"),
    operationName: _aiOperation("name"),
    operationParentId: _aiOperation("parentId"),
    operationRootId: _aiOperation("rootId"),
    operationSyntheticSource: _aiOperation("syntheticSource"),
    operationCorrelationVector: _aiOperation("correlationVector"),
    sessionId: _aiSession("id"),
    sessionIsFirst: _aiSession("isFirst"),
    sessionIsNew: _aiSession("isNew"),
    userAccountAcquisitionDate: _aiUser("accountAcquisitionDate"),
    userAccountId: _aiUser("accountId"),
    userAgent: _aiUser("userAgent"),
    userId: _aiUser("id"),
    userStoreRegion: _aiUser("storeRegion"),
    userAuthUserId: _aiUser("authUserId"),
    userAnonymousUserAcquisitionDate: _aiUser("anonUserAcquisitionDate"),
    userAuthenticatedUserAcquisitionDate: _aiUser("authUserAcquisitionDate"),
    cloudName: _aiCloud("name"),
    cloudRole: _aiCloud("role"),
    cloudRoleVer: _aiCloud("roleVer"),
    cloudRoleInstance: _aiCloud("roleInstance"),
    cloudEnvironment: _aiCloud("environment"),
    cloudLocation: _aiCloud("location"),
    cloudDeploymentUnit: _aiCloud("deploymentUnit"),
    internalNodeName: _aiInternal("nodeName"),
    internalSdkVersion: _aiInternal("sdkVersion"),
    internalAgentVersion: _aiInternal("agentVersion"),
    internalSnippet: _aiInternal("snippet"),
    internalSdkSrc: _aiInternal("sdkSrc")
  }))
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/TelemetryItemCreator.js
function createTelemetryItem(item, baseType, envelopeName, logger, customProperties, systemProperties) {
  envelopeName = dataSanitizeString(logger, envelopeName) || strNotSpecified;
  if (isNullOrUndefined(item) || isNullOrUndefined(baseType) || isNullOrUndefined(envelopeName)) {
    throwError3("Input doesn't contain all required fields");
  }
  var iKey = "";
  if (item[strIkey]) {
    iKey = item[strIkey];
    delete item[strIkey];
  }
  var telemetryItem = {
    name: envelopeName,
    time: toISOString(/* @__PURE__ */ new Date()),
    iKey,
    ext: systemProperties ? systemProperties : {},
    tags: [],
    data: {},
    baseType,
    baseData: item
    // Part B
  };
  if (!isNullOrUndefined(customProperties)) {
    objForEachKey(customProperties, function(prop, value) {
      telemetryItem.data[prop] = value;
    });
  }
  return telemetryItem;
}
var TelemetryItemCreator = (
  /** @class */
  function() {
    function TelemetryItemCreator2() {
    }
    TelemetryItemCreator2.create = createTelemetryItem;
    return TelemetryItemCreator2;
  }()
);

// node_modules/@microsoft/applicationinsights-common/dist-es5/Interfaces/PartAExtensions.js
var Extensions = {
  UserExt: "user",
  DeviceExt: "device",
  TraceExt: "trace",
  WebExt: "web",
  AppExt: "app",
  OSExt: "os",
  SessionExt: "ses",
  SDKExt: "sdk"
};
var CtxTagKeys = new ContextTagKeys();

// node_modules/@microsoft/applicationinsights-common/dist-es5/DomHelperFuncs.js
function createDomEvent(eventName) {
  var event = null;
  if (isFunction3(Event)) {
    event = new Event(eventName);
  } else {
    var doc = getDocument2();
    if (doc && doc.createEvent) {
      event = doc.createEvent("Event");
      event.initEvent(eventName, true, true);
    }
  }
  return event;
}

// node_modules/@microsoft/applicationinsights-common/dist-es5/Offline.js
function _disableEvents(target, evtNamespace) {
  eventOff(target, null, null, evtNamespace);
}
function createOfflineListener(parentEvtNamespace) {
  var _document3 = getDocument2();
  var _navigator = getNavigator();
  var _isListening = false;
  var listenerList = [];
  var rState = 1;
  if (_navigator && !isNullOrUndefined(_navigator.onLine) && !_navigator.onLine) {
    rState = 2;
  }
  var uState = 0;
  var _currentState = calCurrentState();
  var _evtNamespace = mergeEvtNamespace(createUniqueNamespace("OfflineListener"), parentEvtNamespace);
  try {
    if (_enableEvents(getWindow())) {
      _isListening = true;
    }
    if (_document3) {
      var target = _document3.body || _document3;
      if (target.ononline) {
        if (_enableEvents(target)) {
          _isListening = true;
        }
      }
    }
  } catch (e) {
    _isListening = false;
  }
  function _enableEvents(target2) {
    var enabled = false;
    if (target2) {
      enabled = eventOn(target2, "online", _setOnline, _evtNamespace);
      if (enabled) {
        eventOn(target2, "offline", _setOffline, _evtNamespace);
      }
    }
    return enabled;
  }
  function _isOnline() {
    return _currentState;
  }
  function calCurrentState() {
    if (uState === 2 || rState === 2) {
      return false;
    }
    return true;
  }
  function listnerNoticeCheck() {
    var newState = calCurrentState();
    if (_currentState !== newState) {
      _currentState = newState;
      arrForEach(listenerList, function(callback) {
        var offlineState = {
          isOnline: _currentState,
          rState,
          uState
        };
        try {
          callback(offlineState);
        } catch (e) {
        }
      });
    }
  }
  function setOnlineState(newState) {
    uState = newState;
    listnerNoticeCheck();
  }
  function _setOnline() {
    rState = 1;
    listnerNoticeCheck();
  }
  function _setOffline() {
    rState = 2;
    listnerNoticeCheck();
  }
  function _unload() {
    var win = getWindow();
    if (win && _isListening) {
      _disableEvents(win, _evtNamespace);
      if (_document3) {
        var target2 = _document3.body || _document3;
        if (!isUndefined(target2.ononline)) {
          _disableEvents(target2, _evtNamespace);
        }
      }
      _isListening = false;
    }
  }
  function addListener(callback) {
    listenerList.push(callback);
    return {
      rm: function() {
        var index = listenerList.indexOf(callback);
        if (index > -1) {
          return listenerList.splice(index, 1);
        } else {
          return;
        }
      }
    };
  }
  return {
    isOnline: _isOnline,
    isListening: function() {
      return _isListening;
    },
    unload: _unload,
    addListener,
    setOnlineState
  };
}

// node_modules/@microsoft/applicationinsights-common/dist-es5/applicationinsights-common.js
var PropertiesPluginIdentifier = "AppInsightsPropertiesPlugin";
var BreezeChannelIdentifier = "AppInsightsChannelPlugin";
var AnalyticsPluginIdentifier = "ApplicationInsightsAnalytics";

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/__DynamicConstants.js
var _DYN_TO_STRING2 = "toString";
var _DYN_IS_STORAGE_USE_DISAB0 = "isStorageUseDisabled";
var _DYN__ADD_HOOK = "_addHook";
var _DYN_CORE = "core";
var _DYN_DATA_TYPE = "dataType";
var _DYN_ENVELOPE_TYPE = "envelopeType";
var _DYN_DIAG_LOG2 = "diagLog";
var _DYN_TRACK = "track";
var _DYN_TRACK_PAGE_VIEW = "trackPageView";
var _DYN_TRACK_PREVIOUS_PAGE_1 = "trackPreviousPageVisit";
var _DYN_SEND_PAGE_VIEW_INTER2 = "sendPageViewInternal";
var _DYN_START_TIME = "startTime";
var _DYN_PROPERTIES2 = "properties";
var _DYN_DURATION2 = "duration";
var _DYN_SEND_PAGE_VIEW_PERFO3 = "sendPageViewPerformanceInternal";
var _DYN_POPULATE_PAGE_VIEW_P4 = "populatePageViewPerformanceEvent";
var _DYN_HREF = "href";
var _DYN_SEND_EXCEPTION_INTER5 = "sendExceptionInternal";
var _DYN_ERROR = "error";
var _DYN_LINE_NUMBER = "lineNumber";
var _DYN_COLUMN_NUMBER = "columnNumber";
var _DYN__CREATE_AUTO_EXCEPTI6 = "CreateAutoException";
var _DYN_ADD_TELEMETRY_INITIA7 = "addTelemetryInitializer";
var _DYN_OVERRIDE_PAGE_VIEW_D8 = "overridePageViewDuration";
var _DYN_AUTO_EXCEPTION_INSTR9 = "autoExceptionInstrumented";
var _DYN_AUTO_TRACK_PAGE_VISI10 = "autoTrackPageVisitTime";
var _DYN_IS_BROWSER_LINK_TRAC11 = "isBrowserLinkTrackingEnabled";
var _DYN_LENGTH3 = "length";
var _DYN_ENABLE_AUTO_ROUTE_TR12 = "enableAutoRouteTracking";
var _DYN_ENABLE_UNHANDLED_PRO13 = "enableUnhandledPromiseRejectionTracking";
var _DYN_AUTO_UNHANDLED_PROMI14 = "autoUnhandledPromiseInstrumented";
var _DYN_GET_ENTRIES_BY_TYPE = "getEntriesByType";
var _DYN_IS_PERFORMANCE_TIMIN15 = "isPerformanceTimingSupported";
var _DYN_GET_PERFORMANCE_TIMI16 = "getPerformanceTiming";
var _DYN_NAVIGATION_START = "navigationStart";
var _DYN_SHOULD_COLLECT_DURAT17 = "shouldCollectDuration";
var _DYN_IS_PERFORMANCE_TIMIN18 = "isPerformanceTimingDataReady";
var _DYN_RESPONSE_START = "responseStart";
var _DYN_REQUEST_START = "requestStart";
var _DYN_LOAD_EVENT_END = "loadEventEnd";
var _DYN_RESPONSE_END = "responseEnd";
var _DYN_CONNECT_END = "connectEnd";

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Telemetry/PageViewManager.js
var PageViewManager = (
  /** @class */
  function() {
    function PageViewManager2(appInsights, overridePageViewDuration, core, pageViewPerformanceManager) {
      dynamicProto(PageViewManager2, this, function(_self) {
        var queueTimer = null;
        var itemQueue = [];
        var pageViewPerformanceSent = false;
        var firstPageViewSent = false;
        var _logger;
        if (core) {
          _logger = core.logger;
        }
        function _flushChannels(isAsync) {
          if (core) {
            core.flush(isAsync, function() {
            });
          }
        }
        function _startTimer() {
          if (!queueTimer) {
            queueTimer = scheduleTimeout(function() {
              queueTimer = null;
              var allItems = itemQueue.slice(0);
              var doFlush = false;
              itemQueue = [];
              arrForEach(allItems, function(item) {
                if (!item()) {
                  itemQueue.push(item);
                } else {
                  doFlush = true;
                }
              });
              if (itemQueue[
                _DYN_LENGTH3
                /* @min:%2elength */
              ] > 0) {
                _startTimer();
              }
              if (doFlush) {
                _flushChannels(true);
              }
            }, 100);
          }
        }
        function _addQueue(cb) {
          itemQueue.push(cb);
          _startTimer();
        }
        _self[
          _DYN_TRACK_PAGE_VIEW
          /* @min:%2etrackPageView */
        ] = function(pageView, customProperties) {
          var name = pageView.name;
          if (isNullOrUndefined(name) || typeof name !== "string") {
            var doc = getDocument2();
            name = pageView.name = doc && doc.title || "";
          }
          var uri = pageView.uri;
          if (isNullOrUndefined(uri) || typeof uri !== "string") {
            var location_1 = getLocation();
            uri = pageView.uri = location_1 && location_1[
              _DYN_HREF
              /* @min:%2ehref */
            ] || "";
          }
          if (!firstPageViewSent) {
            var perf = getPerformance();
            var navigationEntries = perf && perf[
              _DYN_GET_ENTRIES_BY_TYPE
              /* @min:%2egetEntriesByType */
            ] && perf[
              _DYN_GET_ENTRIES_BY_TYPE
              /* @min:%2egetEntriesByType */
            ]("navigation");
            if (navigationEntries && navigationEntries[0] && !isUndefined(perf.timeOrigin)) {
              var loadEventStart = navigationEntries[0].loadEventStart;
              pageView[
                _DYN_START_TIME
                /* @min:%2estartTime */
              ] = new Date(perf.timeOrigin + loadEventStart);
            } else {
              var duration_1 = (customProperties || pageView[
                _DYN_PROPERTIES2
                /* @min:%2eproperties */
              ] || {})[
                _DYN_DURATION2
                /* @min:%2eduration */
              ] || 0;
              pageView[
                _DYN_START_TIME
                /* @min:%2estartTime */
              ] = new Date((/* @__PURE__ */ new Date()).getTime() - duration_1);
            }
            firstPageViewSent = true;
          }
          if (!pageViewPerformanceManager[
            _DYN_IS_PERFORMANCE_TIMIN15
            /* @min:%2eisPerformanceTimingSupported */
          ]()) {
            appInsights[
              _DYN_SEND_PAGE_VIEW_INTER2
              /* @min:%2esendPageViewInternal */
            ](pageView, customProperties);
            _flushChannels(true);
            if (!isWebWorker()) {
              _throwInternal(_logger, 2, 25, "trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.");
            }
            return;
          }
          var pageViewSent = false;
          var customDuration;
          var start = pageViewPerformanceManager[
            _DYN_GET_PERFORMANCE_TIMI16
            /* @min:%2egetPerformanceTiming */
          ]()[
            _DYN_NAVIGATION_START
            /* @min:%2enavigationStart */
          ];
          if (start > 0) {
            customDuration = dateTimeUtilsDuration(start, +/* @__PURE__ */ new Date());
            if (!pageViewPerformanceManager[
              _DYN_SHOULD_COLLECT_DURAT17
              /* @min:%2eshouldCollectDuration */
            ](customDuration)) {
              customDuration = void 0;
            }
          }
          var duration;
          if (!isNullOrUndefined(customProperties) && !isNullOrUndefined(customProperties[
            _DYN_DURATION2
            /* @min:%2eduration */
          ])) {
            duration = customProperties[
              _DYN_DURATION2
              /* @min:%2eduration */
            ];
          }
          if (overridePageViewDuration || !isNaN(duration)) {
            if (isNaN(duration)) {
              if (!customProperties) {
                customProperties = {};
              }
              customProperties[
                _DYN_DURATION2
                /* @min:%2eduration */
              ] = customDuration;
            }
            appInsights[
              _DYN_SEND_PAGE_VIEW_INTER2
              /* @min:%2esendPageViewInternal */
            ](pageView, customProperties);
            _flushChannels(true);
            pageViewSent = true;
          }
          var maxDurationLimit = 6e4;
          if (!customProperties) {
            customProperties = {};
          }
          _addQueue(function() {
            var processed = false;
            try {
              if (pageViewPerformanceManager[
                _DYN_IS_PERFORMANCE_TIMIN18
                /* @min:%2eisPerformanceTimingDataReady */
              ]()) {
                processed = true;
                var pageViewPerformance = {
                  name,
                  uri
                };
                pageViewPerformanceManager[
                  _DYN_POPULATE_PAGE_VIEW_P4
                  /* @min:%2epopulatePageViewPerformanceEvent */
                ](pageViewPerformance);
                if (!pageViewPerformance.isValid && !pageViewSent) {
                  customProperties[
                    _DYN_DURATION2
                    /* @min:%2eduration */
                  ] = customDuration;
                  appInsights[
                    _DYN_SEND_PAGE_VIEW_INTER2
                    /* @min:%2esendPageViewInternal */
                  ](pageView, customProperties);
                } else {
                  if (!pageViewSent) {
                    customProperties[
                      _DYN_DURATION2
                      /* @min:%2eduration */
                    ] = pageViewPerformance.durationMs;
                    appInsights[
                      _DYN_SEND_PAGE_VIEW_INTER2
                      /* @min:%2esendPageViewInternal */
                    ](pageView, customProperties);
                  }
                  if (!pageViewPerformanceSent) {
                    appInsights[
                      _DYN_SEND_PAGE_VIEW_PERFO3
                      /* @min:%2esendPageViewPerformanceInternal */
                    ](pageViewPerformance, customProperties);
                    pageViewPerformanceSent = true;
                  }
                }
              } else if (start > 0 && dateTimeUtilsDuration(start, +/* @__PURE__ */ new Date()) > maxDurationLimit) {
                processed = true;
                if (!pageViewSent) {
                  customProperties[
                    _DYN_DURATION2
                    /* @min:%2eduration */
                  ] = maxDurationLimit;
                  appInsights[
                    _DYN_SEND_PAGE_VIEW_INTER2
                    /* @min:%2esendPageViewInternal */
                  ](pageView, customProperties);
                }
              }
            } catch (e) {
              _throwInternal(_logger, 1, 38, "trackPageView failed on page load calculation: " + getExceptionName(e), {
                exception: dumpObj(e)
              });
            }
            return processed;
          });
        };
        _self.teardown = function(unloadCtx, unloadState) {
          if (queueTimer) {
            queueTimer.cancel();
            queueTimer = null;
            var allItems = itemQueue.slice(0);
            var doFlush_1 = false;
            itemQueue = [];
            arrForEach(allItems, function(item) {
              if (item()) {
                doFlush_1 = true;
              }
            });
          }
        };
      });
    }
    PageViewManager2.__ieDyn = 1;
    return PageViewManager2;
  }()
);

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js
var MAX_DURATION_ALLOWED = 36e5;
var botAgentNames = ["googlebot", "adsbot-google", "apis-google", "mediapartners-google"];
function _isPerformanceTimingSupported() {
  var perf = getPerformance();
  return perf && !!perf.timing;
}
function _isPerformanceNavigationTimingSupported() {
  var perf = getPerformance();
  return perf && perf.getEntriesByType && perf.getEntriesByType("navigation")[
    _DYN_LENGTH3
    /* @min:%2elength */
  ] > 0;
}
function _isPerformanceTimingDataReady() {
  var perf = getPerformance();
  var timing = perf ? perf.timing : 0;
  return timing && timing.domainLookupStart > 0 && timing[
    _DYN_NAVIGATION_START
    /* @min:%2enavigationStart */
  ] > 0 && timing[
    _DYN_RESPONSE_START
    /* @min:%2eresponseStart */
  ] > 0 && timing[
    _DYN_REQUEST_START
    /* @min:%2erequestStart */
  ] > 0 && timing[
    _DYN_LOAD_EVENT_END
    /* @min:%2eloadEventEnd */
  ] > 0 && timing[
    _DYN_RESPONSE_END
    /* @min:%2eresponseEnd */
  ] > 0 && timing[
    _DYN_CONNECT_END
    /* @min:%2econnectEnd */
  ] > 0 && timing.domLoading > 0;
}
function _getPerformanceTiming() {
  if (_isPerformanceTimingSupported()) {
    return getPerformance().timing;
  }
  return null;
}
function _getPerformanceNavigationTiming() {
  if (_isPerformanceNavigationTimingSupported()) {
    return getPerformance()[
      _DYN_GET_ENTRIES_BY_TYPE
      /* @min:%2egetEntriesByType */
    ]("navigation")[0];
  }
  return null;
}
function _shouldCollectDuration() {
  var durations = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    durations[_i] = arguments[_i];
  }
  var _navigator = getNavigator() || {};
  var userAgent = _navigator.userAgent;
  var isGoogleBot = false;
  if (userAgent) {
    for (var i = 0; i < botAgentNames[
      _DYN_LENGTH3
      /* @min:%2elength */
    ]; i++) {
      isGoogleBot = isGoogleBot || strIndexOf(userAgent.toLowerCase(), botAgentNames[i]) !== -1;
    }
  }
  if (isGoogleBot) {
    return false;
  } else {
    for (var i = 0; i < durations[
      _DYN_LENGTH3
      /* @min:%2elength */
    ]; i++) {
      if (durations[i] < 0 || durations[i] >= MAX_DURATION_ALLOWED) {
        return false;
      }
    }
  }
  return true;
}
var PageViewPerformanceManager = (
  /** @class */
  function() {
    function PageViewPerformanceManager2(core) {
      var _logger = safeGetLogger(core);
      dynamicProto(PageViewPerformanceManager2, this, function(_self) {
        _self[
          _DYN_POPULATE_PAGE_VIEW_P4
          /* @min:%2epopulatePageViewPerformanceEvent */
        ] = function(pageViewPerformance) {
          pageViewPerformance.isValid = false;
          var navigationTiming = _getPerformanceNavigationTiming();
          var timing = _getPerformanceTiming();
          var total = 0;
          var network = 0;
          var request = 0;
          var response = 0;
          var dom = 0;
          if (navigationTiming || timing) {
            if (navigationTiming) {
              total = navigationTiming[
                _DYN_DURATION2
                /* @min:%2eduration */
              ];
              network = navigationTiming[
                _DYN_START_TIME
                /* @min:%2estartTime */
              ] === 0 ? navigationTiming[
                _DYN_CONNECT_END
                /* @min:%2econnectEnd */
              ] : dateTimeUtilsDuration(navigationTiming[
                _DYN_START_TIME
                /* @min:%2estartTime */
              ], navigationTiming[
                _DYN_CONNECT_END
                /* @min:%2econnectEnd */
              ]);
              request = dateTimeUtilsDuration(navigationTiming.requestStart, navigationTiming[
                _DYN_RESPONSE_START
                /* @min:%2eresponseStart */
              ]);
              response = dateTimeUtilsDuration(navigationTiming[
                _DYN_RESPONSE_START
                /* @min:%2eresponseStart */
              ], navigationTiming[
                _DYN_RESPONSE_END
                /* @min:%2eresponseEnd */
              ]);
              dom = dateTimeUtilsDuration(navigationTiming.responseEnd, navigationTiming[
                _DYN_LOAD_EVENT_END
                /* @min:%2eloadEventEnd */
              ]);
            } else {
              total = dateTimeUtilsDuration(timing[
                _DYN_NAVIGATION_START
                /* @min:%2enavigationStart */
              ], timing[
                _DYN_LOAD_EVENT_END
                /* @min:%2eloadEventEnd */
              ]);
              network = dateTimeUtilsDuration(timing[
                _DYN_NAVIGATION_START
                /* @min:%2enavigationStart */
              ], timing[
                _DYN_CONNECT_END
                /* @min:%2econnectEnd */
              ]);
              request = dateTimeUtilsDuration(timing.requestStart, timing[
                _DYN_RESPONSE_START
                /* @min:%2eresponseStart */
              ]);
              response = dateTimeUtilsDuration(timing[
                _DYN_RESPONSE_START
                /* @min:%2eresponseStart */
              ], timing[
                _DYN_RESPONSE_END
                /* @min:%2eresponseEnd */
              ]);
              dom = dateTimeUtilsDuration(timing.responseEnd, timing[
                _DYN_LOAD_EVENT_END
                /* @min:%2eloadEventEnd */
              ]);
            }
            if (total === 0) {
              _throwInternal(_logger, 2, 10, "error calculating page view performance.", {
                total,
                network,
                request,
                response,
                dom
              });
            } else if (!_self[
              _DYN_SHOULD_COLLECT_DURAT17
              /* @min:%2eshouldCollectDuration */
            ](total, network, request, response, dom)) {
              _throwInternal(_logger, 2, 45, "Invalid page load duration value. Browser perf data won't be sent.", {
                total,
                network,
                request,
                response,
                dom
              });
            } else if (total < mathFloor(network) + mathFloor(request) + mathFloor(response) + mathFloor(dom)) {
              _throwInternal(_logger, 2, 8, "client performance math error.", {
                total,
                network,
                request,
                response,
                dom
              });
            } else {
              pageViewPerformance.durationMs = total;
              pageViewPerformance.perfTotal = pageViewPerformance[
                _DYN_DURATION2
                /* @min:%2eduration */
              ] = msToTimeSpan(total);
              pageViewPerformance.networkConnect = msToTimeSpan(network);
              pageViewPerformance.sentRequest = msToTimeSpan(request);
              pageViewPerformance.receivedResponse = msToTimeSpan(response);
              pageViewPerformance.domProcessing = msToTimeSpan(dom);
              pageViewPerformance.isValid = true;
            }
          }
        };
        _self[
          _DYN_GET_PERFORMANCE_TIMI16
          /* @min:%2egetPerformanceTiming */
        ] = _getPerformanceTiming;
        _self[
          _DYN_IS_PERFORMANCE_TIMIN15
          /* @min:%2eisPerformanceTimingSupported */
        ] = _isPerformanceTimingSupported;
        _self[
          _DYN_IS_PERFORMANCE_TIMIN18
          /* @min:%2eisPerformanceTimingDataReady */
        ] = _isPerformanceTimingDataReady;
        _self[
          _DYN_SHOULD_COLLECT_DURAT17
          /* @min:%2eshouldCollectDuration */
        ] = _shouldCollectDuration;
      });
    }
    PageViewPerformanceManager2.__ieDyn = 1;
    return PageViewPerformanceManager2;
  }()
);

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Telemetry/PageVisitTimeManager.js
var PageVisitTimeManager = (
  /** @class */
  function() {
    function PageVisitTimeManager2(logger, pageVisitTimeTrackingHandler) {
      var prevPageVisitDataKeyName = "prevPageVisitData";
      dynamicProto(PageVisitTimeManager2, this, function(_self) {
        _self[
          _DYN_TRACK_PREVIOUS_PAGE_1
          /* @min:%2etrackPreviousPageVisit */
        ] = function(currentPageName, currentPageUrl) {
          try {
            var prevPageVisitTimeData = restartPageVisitTimer(currentPageName, currentPageUrl);
            if (prevPageVisitTimeData) {
              pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);
            }
          } catch (e) {
            _warnToConsole(logger, "Auto track page visit time failed, metric will not be collected: " + dumpObj(e));
          }
        };
        function restartPageVisitTimer(pageName, pageUrl) {
          var prevPageVisitData = null;
          try {
            prevPageVisitData = stopPageVisitTimer();
            if (utlCanUseSessionStorage()) {
              if (utlGetSessionStorage(logger, prevPageVisitDataKeyName) != null) {
                throwError3("Cannot call startPageVisit consecutively without first calling stopPageVisit");
              }
              var currPageVisitDataStr = getJSON().stringify(new PageVisitData(pageName, pageUrl));
              utlSetSessionStorage(logger, prevPageVisitDataKeyName, currPageVisitDataStr);
            }
          } catch (e) {
            _warnToConsole(logger, "Call to restart failed: " + dumpObj(e));
            prevPageVisitData = null;
          }
          return prevPageVisitData;
        }
        function stopPageVisitTimer() {
          var prevPageVisitData = null;
          try {
            if (utlCanUseSessionStorage()) {
              var pageVisitEndTime = utcNow();
              var pageVisitDataJsonStr = utlGetSessionStorage(logger, prevPageVisitDataKeyName);
              if (pageVisitDataJsonStr && hasJSON()) {
                prevPageVisitData = getJSON().parse(pageVisitDataJsonStr);
                prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData.pageVisitStartTime;
                utlRemoveSessionStorage(logger, prevPageVisitDataKeyName);
              }
            }
          } catch (e) {
            _warnToConsole(logger, "Stop page visit timer failed: " + dumpObj(e));
            prevPageVisitData = null;
          }
          return prevPageVisitData;
        }
        objDefine(_self, "_logger", {
          g: function() {
            return logger;
          }
        });
        objDefine(_self, "pageVisitTimeTrackingHandler", {
          g: function() {
            return pageVisitTimeTrackingHandler;
          }
        });
      });
    }
    PageVisitTimeManager2.__ieDyn = 1;
    return PageVisitTimeManager2;
  }()
);
var PageVisitData = (
  /** @class */
  /* @__PURE__ */ function() {
    function PageVisitData2(pageName, pageUrl) {
      this.pageVisitStartTime = utcNow();
      this.pageName = pageName;
      this.pageUrl = pageUrl;
    }
    return PageVisitData2;
  }()
);

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/Timing.js
var Timing = (
  /** @class */
  /* @__PURE__ */ function() {
    function Timing2(logger, name) {
      var _self = this;
      var _events = {};
      _self.start = function(name2) {
        if (typeof _events[name2] !== "undefined") {
          _throwInternal(logger, 2, 62, "start was called more than once for this event without calling stop.", {
            name: name2,
            key: name2
          }, true);
        }
        _events[name2] = +/* @__PURE__ */ new Date();
      };
      _self.stop = function(name2, url, properties, measurements) {
        var start = _events[name2];
        if (isNaN(start)) {
          _throwInternal(logger, 2, 63, "stop was called without a corresponding start.", {
            name: name2,
            key: name2
          }, true);
        } else {
          var end = +/* @__PURE__ */ new Date();
          var duration = dateTimeUtilsDuration(start, end);
          _self.action(name2, url, duration, properties, measurements);
        }
        delete _events[name2];
        _events[name2] = void 0;
      };
    }
    return Timing2;
  }()
);

// node_modules/@microsoft/applicationinsights-analytics-js/dist-es5/JavaScriptSDK/AnalyticsPlugin.js
var _a6;
var strEvent = "event";
function _dispatchEvent(target, evnt) {
  if (target && target.dispatchEvent && evnt) {
    target.dispatchEvent(evnt);
  }
}
function _getReason(error) {
  if (error && error.reason) {
    var reason = error.reason;
    if (!isString(reason) && isFunction3(reason[
      _DYN_TO_STRING2
      /* @min:%2etoString */
    ])) {
      return reason[
        _DYN_TO_STRING2
        /* @min:%2etoString */
      ]();
    }
    return dumpObj(reason);
  }
  return error || "";
}
var MinMilliSeconds = 6e4;
var defaultValues4 = objDeepFreeze((_a6 = {
  sessionRenewalMs: cfgDfSet(_chkConfigMilliseconds, 30 * 60 * 1e3),
  sessionExpirationMs: cfgDfSet(_chkConfigMilliseconds, 24 * 60 * 60 * 1e3),
  disableExceptionTracking: cfgDfBoolean()
}, _a6[
  _DYN_AUTO_TRACK_PAGE_VISI10
  /* @min:autoTrackPageVisitTime */
] = cfgDfBoolean(), _a6[
  _DYN_OVERRIDE_PAGE_VIEW_D8
  /* @min:overridePageViewDuration */
] = cfgDfBoolean(), _a6[
  _DYN_ENABLE_UNHANDLED_PRO13
  /* @min:enableUnhandledPromiseRejectionTracking */
] = cfgDfBoolean(), _a6[
  _DYN_AUTO_UNHANDLED_PROMI14
  /* @min:autoUnhandledPromiseInstrumented */
] = false, _a6.samplingPercentage = cfgDfValidate(_chkSampling, 100), _a6[
  _DYN_IS_STORAGE_USE_DISAB0
  /* @min:isStorageUseDisabled */
] = cfgDfBoolean(), _a6[
  _DYN_IS_BROWSER_LINK_TRAC11
  /* @min:isBrowserLinkTrackingEnabled */
] = cfgDfBoolean(), _a6[
  _DYN_ENABLE_AUTO_ROUTE_TR12
  /* @min:enableAutoRouteTracking */
] = cfgDfBoolean(), _a6.namePrefix = cfgDfString(), _a6.enableDebug = cfgDfBoolean(), _a6.disableFlushOnBeforeUnload = cfgDfBoolean(), _a6.disableFlushOnUnload = cfgDfBoolean(false, "disableFlushOnBeforeUnload"), _a6.expCfg = cfgDfMerge({
  inclScripts: false,
  expLog: void 0,
  maxLogs: 50
}), _a6));
function _chkConfigMilliseconds(value, defValue) {
  value = value || defValue;
  if (value < MinMilliSeconds) {
    value = MinMilliSeconds;
  }
  return +value;
}
function _chkSampling(value) {
  return !isNaN(value) && value > 0 && value <= 100;
}
function _updateStorageUsage(extConfig) {
  if (!isUndefined(extConfig[
    _DYN_IS_STORAGE_USE_DISAB0
    /* @min:%2eisStorageUseDisabled */
  ])) {
    if (extConfig[
      _DYN_IS_STORAGE_USE_DISAB0
      /* @min:%2eisStorageUseDisabled */
    ]) {
      utlDisableStorage();
    } else {
      utlEnableStorage();
    }
  }
}
var AnalyticsPlugin = (
  /** @class */
  function(_super) {
    __extendsFn(AnalyticsPlugin2, _super);
    function AnalyticsPlugin2() {
      var _this = _super.call(this) || this;
      _this.identifier = AnalyticsPluginIdentifier;
      _this.priority = 180;
      _this.autoRoutePVDelay = 500;
      var _eventTracking;
      var _pageTracking;
      var _pageViewManager;
      var _pageViewPerformanceManager;
      var _pageVisitTimeManager;
      var _preInitTelemetryInitializers;
      var _isBrowserLinkTrackingEnabled;
      var _browserLinkInitializerAdded;
      var _enableAutoRouteTracking;
      var _historyListenerAdded;
      var _disableExceptionTracking;
      var _autoExceptionInstrumented;
      var _enableUnhandledPromiseRejectionTracking;
      var _autoUnhandledPromiseInstrumented;
      var _extConfig;
      var _autoTrackPageVisitTime;
      var _expCfg;
      var _trackAjaxAttempts = 0;
      var _prevUri;
      var _currUri;
      var _evtNamespace;
      var _errorHookCnt;
      dynamicProto(AnalyticsPlugin2, _this, function(_self, _base) {
        var _addHook = _base[
          _DYN__ADD_HOOK
          /* @min:%2e_addHook */
        ];
        _initDefaults();
        _self.getCookieMgr = function() {
          return safeGetCookieMgr(_self[
            _DYN_CORE
            /* @min:%2ecore */
          ]);
        };
        _self.processTelemetry = function(env, itemCtx) {
          _self.processNext(env, itemCtx);
        };
        _self.trackEvent = function(event, customProperties) {
          try {
            var telemetryItem = createTelemetryItem(event, Event2[
              _DYN_DATA_TYPE
              /* @min:%2edataType */
            ], Event2[
              _DYN_ENVELOPE_TYPE
              /* @min:%2eenvelopeType */
            ], _self[
              _DYN_DIAG_LOG2
              /* @min:%2ediagLog */
            ](), customProperties);
            _self[
              _DYN_CORE
              /* @min:%2ecore */
            ][
              _DYN_TRACK
              /* @min:%2etrack */
            ](telemetryItem);
          } catch (e) {
            _throwInternal2(2, 39, "trackTrace failed, trace will not be collected: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
        };
        _self.startTrackEvent = function(name) {
          try {
            _eventTracking.start(name);
          } catch (e) {
            _throwInternal2(1, 29, "startTrackEvent failed, event will not be collected: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
        };
        _self.stopTrackEvent = function(name, properties, measurements) {
          try {
            _eventTracking.stop(name, void 0, properties, measurements);
          } catch (e) {
            _throwInternal2(1, 30, "stopTrackEvent failed, event will not be collected: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
        };
        _self.trackTrace = function(trace, customProperties) {
          try {
            var telemetryItem = createTelemetryItem(trace, Trace[
              _DYN_DATA_TYPE
              /* @min:%2edataType */
            ], Trace[
              _DYN_ENVELOPE_TYPE
              /* @min:%2eenvelopeType */
            ], _self[
              _DYN_DIAG_LOG2
              /* @min:%2ediagLog */
            ](), customProperties);
            _self[
              _DYN_CORE
              /* @min:%2ecore */
            ][
              _DYN_TRACK
              /* @min:%2etrack */
            ](telemetryItem);
          } catch (e) {
            _throwInternal2(2, 39, "trackTrace failed, trace will not be collected: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
        };
        _self.trackMetric = function(metric, customProperties) {
          try {
            var telemetryItem = createTelemetryItem(metric, Metric[
              _DYN_DATA_TYPE
              /* @min:%2edataType */
            ], Metric[
              _DYN_ENVELOPE_TYPE
              /* @min:%2eenvelopeType */
            ], _self[
              _DYN_DIAG_LOG2
              /* @min:%2ediagLog */
            ](), customProperties);
            _self[
              _DYN_CORE
              /* @min:%2ecore */
            ][
              _DYN_TRACK
              /* @min:%2etrack */
            ](telemetryItem);
          } catch (e) {
            _throwInternal2(1, 36, "trackMetric failed, metric will not be collected: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
        };
        _self[
          _DYN_TRACK_PAGE_VIEW
          /* @min:%2etrackPageView */
        ] = function(pageView, customProperties) {
          try {
            var inPv = pageView || {};
            _pageViewManager[
              _DYN_TRACK_PAGE_VIEW
              /* @min:%2etrackPageView */
            ](inPv, __assignFn(__assignFn(__assignFn({}, inPv.properties), inPv.measurements), customProperties));
            if (_autoTrackPageVisitTime) {
              _pageVisitTimeManager[
                _DYN_TRACK_PREVIOUS_PAGE_1
                /* @min:%2etrackPreviousPageVisit */
              ](inPv.name, inPv.uri);
            }
          } catch (e) {
            _throwInternal2(1, 37, "trackPageView failed, page view will not be collected: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
        };
        _self[
          _DYN_SEND_PAGE_VIEW_INTER2
          /* @min:%2esendPageViewInternal */
        ] = function(pageView, properties, systemProperties) {
          var doc = getDocument2();
          if (doc) {
            pageView.refUri = pageView.refUri === void 0 ? doc.referrer : pageView.refUri;
          }
          if (isNullOrUndefined(pageView[
            _DYN_START_TIME
            /* @min:%2estartTime */
          ])) {
            var duration = (properties || pageView[
              _DYN_PROPERTIES2
              /* @min:%2eproperties */
            ] || {})[
              _DYN_DURATION2
              /* @min:%2eduration */
            ] || 0;
            pageView[
              _DYN_START_TIME
              /* @min:%2estartTime */
            ] = new Date((/* @__PURE__ */ new Date()).getTime() - duration);
          }
          var telemetryItem = createTelemetryItem(pageView, PageView[
            _DYN_DATA_TYPE
            /* @min:%2edataType */
          ], PageView[
            _DYN_ENVELOPE_TYPE
            /* @min:%2eenvelopeType */
          ], _self[
            _DYN_DIAG_LOG2
            /* @min:%2ediagLog */
          ](), properties, systemProperties);
          _self[
            _DYN_CORE
            /* @min:%2ecore */
          ][
            _DYN_TRACK
            /* @min:%2etrack */
          ](telemetryItem);
          _trackAjaxAttempts = 0;
        };
        _self[
          _DYN_SEND_PAGE_VIEW_PERFO3
          /* @min:%2esendPageViewPerformanceInternal */
        ] = function(pageViewPerformance, properties, systemProperties) {
          var telemetryItem = createTelemetryItem(pageViewPerformance, PageViewPerformance[
            _DYN_DATA_TYPE
            /* @min:%2edataType */
          ], PageViewPerformance[
            _DYN_ENVELOPE_TYPE
            /* @min:%2eenvelopeType */
          ], _self[
            _DYN_DIAG_LOG2
            /* @min:%2ediagLog */
          ](), properties, systemProperties);
          _self[
            _DYN_CORE
            /* @min:%2ecore */
          ][
            _DYN_TRACK
            /* @min:%2etrack */
          ](telemetryItem);
        };
        _self.trackPageViewPerformance = function(pageViewPerformance, customProperties) {
          var inPvp = pageViewPerformance || {};
          try {
            _pageViewPerformanceManager[
              _DYN_POPULATE_PAGE_VIEW_P4
              /* @min:%2epopulatePageViewPerformanceEvent */
            ](inPvp);
            _self[
              _DYN_SEND_PAGE_VIEW_PERFO3
              /* @min:%2esendPageViewPerformanceInternal */
            ](inPvp, customProperties);
          } catch (e) {
            _throwInternal2(1, 37, "trackPageViewPerformance failed, page view will not be collected: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
        };
        _self.startTrackPage = function(name) {
          try {
            if (typeof name !== "string") {
              var doc = getDocument2();
              name = doc && doc.title || "";
            }
            _pageTracking.start(name);
          } catch (e) {
            _throwInternal2(1, 31, "startTrackPage failed, page view may not be collected: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
        };
        _self.stopTrackPage = function(name, url, properties, measurement) {
          try {
            if (typeof name !== "string") {
              var doc = getDocument2();
              name = doc && doc.title || "";
            }
            if (typeof url !== "string") {
              var loc = getLocation();
              url = loc && loc[
                _DYN_HREF
                /* @min:%2ehref */
              ] || "";
            }
            _pageTracking.stop(name, url, properties, measurement);
            if (_autoTrackPageVisitTime) {
              _pageVisitTimeManager[
                _DYN_TRACK_PREVIOUS_PAGE_1
                /* @min:%2etrackPreviousPageVisit */
              ](name, url);
            }
          } catch (e) {
            _throwInternal2(1, 32, "stopTrackPage failed, page view will not be collected: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
        };
        _self[
          _DYN_SEND_EXCEPTION_INTER5
          /* @min:%2esendExceptionInternal */
        ] = function(exception, customProperties, systemProperties) {
          var theError = exception && (exception.exception || exception[
            _DYN_ERROR
            /* @min:%2eerror */
          ]) || // - Handle someone calling trackException based of v1 API where the exception was the Error
          isError(exception) && exception || // - Handles no error being defined and instead of creating a new Error() instance attempt to map so any stacktrace
          //   is preserved and does not list ApplicationInsights code as the source
          {
            name: exception && typeof exception,
            message: exception || strNotSpecified
          };
          exception = exception || {};
          var exceptionPartB = new Exception(_self[
            _DYN_DIAG_LOG2
            /* @min:%2ediagLog */
          ](), theError, exception[
            _DYN_PROPERTIES2
            /* @min:%2eproperties */
          ] || customProperties, exception.measurements, exception.severityLevel, exception.id).toInterface();
          var doc = getDocument2();
          if (doc && (_expCfg === null || _expCfg === void 0 ? void 0 : _expCfg.inclScripts)) {
            var scriptsInfo = findAllScripts(doc);
            exceptionPartB[
              _DYN_PROPERTIES2
              /* @min:%2eproperties */
            ]["exceptionScripts"] = JSON.stringify(scriptsInfo);
          }
          if (_expCfg === null || _expCfg === void 0 ? void 0 : _expCfg.expLog) {
            var logs = _expCfg.expLog();
            if (logs && logs.logs && isArray3(logs.logs)) {
              exceptionPartB[
                _DYN_PROPERTIES2
                /* @min:%2eproperties */
              ]["exceptionLog"] = logs.logs.slice(0, _expCfg.maxLogs).join("\n");
            }
          }
          var telemetryItem = createTelemetryItem(exceptionPartB, Exception[
            _DYN_DATA_TYPE
            /* @min:%2edataType */
          ], Exception[
            _DYN_ENVELOPE_TYPE
            /* @min:%2eenvelopeType */
          ], _self[
            _DYN_DIAG_LOG2
            /* @min:%2ediagLog */
          ](), customProperties, systemProperties);
          _self[
            _DYN_CORE
            /* @min:%2ecore */
          ][
            _DYN_TRACK
            /* @min:%2etrack */
          ](telemetryItem);
        };
        _self.trackException = function(exception, customProperties) {
          if (exception && !exception.exception && exception[
            _DYN_ERROR
            /* @min:%2eerror */
          ]) {
            exception.exception = exception[
              _DYN_ERROR
              /* @min:%2eerror */
            ];
          }
          try {
            _self[
              _DYN_SEND_EXCEPTION_INTER5
              /* @min:%2esendExceptionInternal */
            ](exception, customProperties);
          } catch (e) {
            _throwInternal2(1, 35, "trackException failed, exception will not be collected: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
        };
        _self._onerror = function(exception) {
          var error = exception && exception[
            _DYN_ERROR
            /* @min:%2eerror */
          ];
          var evt = exception && exception.evt;
          try {
            if (!evt) {
              var _window = getWindow();
              if (_window) {
                evt = _window[strEvent];
              }
            }
            var url = exception && exception.url || (getDocument2() || {}).URL;
            var errorSrc = exception.errorSrc || "window.onerror@" + url + ":" + (exception[
              _DYN_LINE_NUMBER
              /* @min:%2elineNumber */
            ] || 0) + ":" + (exception[
              _DYN_COLUMN_NUMBER
              /* @min:%2ecolumnNumber */
            ] || 0);
            var properties = {
              errorSrc,
              url,
              lineNumber: exception[
                _DYN_LINE_NUMBER
                /* @min:%2elineNumber */
              ] || 0,
              columnNumber: exception[
                _DYN_COLUMN_NUMBER
                /* @min:%2ecolumnNumber */
              ] || 0,
              message: exception.message
            };
            if (isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception[
              _DYN_ERROR
              /* @min:%2eerror */
            ])) {
              _sendCORSException(Exception[
                _DYN__CREATE_AUTO_EXCEPTI6
                /* @min:%2eCreateAutoException */
              ]("Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.", url, exception[
                _DYN_LINE_NUMBER
                /* @min:%2elineNumber */
              ] || 0, exception[
                _DYN_COLUMN_NUMBER
                /* @min:%2ecolumnNumber */
              ] || 0, error, evt, null, errorSrc), properties);
            } else {
              if (!exception.errorSrc) {
                exception.errorSrc = errorSrc;
              }
              _self.trackException({
                exception,
                severityLevel: 3
                /* eSeverityLevel.Error */
              }, properties);
            }
          } catch (e) {
            var errorString = error ? error.name + ", " + error.message : "null";
            _throwInternal2(1, 11, "_onError threw exception while logging error, error will not be collected: " + getExceptionName(e), {
              exception: dumpObj(e),
              errorString
            });
          }
        };
        _self[
          _DYN_ADD_TELEMETRY_INITIA7
          /* @min:%2eaddTelemetryInitializer */
        ] = function(telemetryInitializer) {
          if (_self[
            _DYN_CORE
            /* @min:%2ecore */
          ]) {
            return _self[
              _DYN_CORE
              /* @min:%2ecore */
            ][
              _DYN_ADD_TELEMETRY_INITIA7
              /* @min:%2eaddTelemetryInitializer */
            ](telemetryInitializer);
          }
          if (!_preInitTelemetryInitializers) {
            _preInitTelemetryInitializers = [];
          }
          _preInitTelemetryInitializers.push(telemetryInitializer);
        };
        _self.initialize = function(config2, core, extensions, pluginChain) {
          if (_self.isInitialized()) {
            return;
          }
          if (isNullOrUndefined(core)) {
            throwError3("Error initializing");
          }
          _base.initialize(config2, core, extensions, pluginChain);
          try {
            _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());
            if (_preInitTelemetryInitializers) {
              arrForEach(_preInitTelemetryInitializers, function(initializer) {
                core[
                  _DYN_ADD_TELEMETRY_INITIA7
                  /* @min:%2eaddTelemetryInitializer */
                ](initializer);
              });
              _preInitTelemetryInitializers = null;
            }
            _populateDefaults(config2);
            _pageViewPerformanceManager = new PageViewPerformanceManager(_self[
              _DYN_CORE
              /* @min:%2ecore */
            ]);
            _pageViewManager = new PageViewManager(_self, _extConfig.overridePageViewDuration, _self[
              _DYN_CORE
              /* @min:%2ecore */
            ], _pageViewPerformanceManager);
            _pageVisitTimeManager = new PageVisitTimeManager(_self[
              _DYN_DIAG_LOG2
              /* @min:%2ediagLog */
            ](), function(pageName, pageUrl, pageVisitTime) {
              return trackPageVisitTime(pageName, pageUrl, pageVisitTime);
            });
            _eventTracking = new Timing(_self[
              _DYN_DIAG_LOG2
              /* @min:%2ediagLog */
            ](), "trackEvent");
            _eventTracking.action = function(name, url, duration, properties, measurements) {
              if (!properties) {
                properties = {};
              }
              if (!measurements) {
                measurements = {};
              }
              properties.duration = duration[
                _DYN_TO_STRING2
                /* @min:%2etoString */
              ]();
              _self.trackEvent({
                name,
                properties,
                measurements
              });
            };
            _pageTracking = new Timing(_self[
              _DYN_DIAG_LOG2
              /* @min:%2ediagLog */
            ](), "trackPageView");
            _pageTracking.action = function(name, url, duration, properties, measurements) {
              if (isNullOrUndefined(properties)) {
                properties = {};
              }
              properties.duration = duration[
                _DYN_TO_STRING2
                /* @min:%2etoString */
              ]();
              var pageViewItem = {
                name,
                uri: url,
                properties,
                measurements
              };
              _self[
                _DYN_SEND_PAGE_VIEW_INTER2
                /* @min:%2esendPageViewInternal */
              ](pageViewItem, properties);
            };
            if (hasWindow()) {
              _updateExceptionTracking();
              _updateLocationChange();
            }
          } catch (e) {
            _self.setInitialized(false);
            throw e;
          }
        };
        _self._doTeardown = function(unloadCtx, unloadState) {
          _pageViewManager && _pageViewManager.teardown(unloadCtx, unloadState);
          eventOff(window, null, null, _evtNamespace);
          _initDefaults();
        };
        _self["_getDbgPlgTargets"] = function() {
          return [_errorHookCnt, _autoExceptionInstrumented];
        };
        function _populateDefaults(config2) {
          var identifier = _self.identifier;
          var core = _self[
            _DYN_CORE
            /* @min:%2ecore */
          ];
          _self[
            _DYN__ADD_HOOK
            /* @min:%2e_addHook */
          ](onConfigChange(config2, function() {
            var ctx = createProcessTelemetryContext(null, config2, core);
            _extConfig = ctx.getExtCfg(identifier, defaultValues4);
            _autoExceptionInstrumented = _autoExceptionInstrumented || config2[
              _DYN_AUTO_EXCEPTION_INSTR9
              /* @min:%2eautoExceptionInstrumented */
            ] || _extConfig[
              _DYN_AUTO_EXCEPTION_INSTR9
              /* @min:%2eautoExceptionInstrumented */
            ];
            _expCfg = _extConfig.expCfg;
            _autoTrackPageVisitTime = _extConfig[
              _DYN_AUTO_TRACK_PAGE_VISI10
              /* @min:%2eautoTrackPageVisitTime */
            ];
            if (config2.storagePrefix) {
              utlSetStoragePrefix(config2.storagePrefix);
            }
            _updateStorageUsage(_extConfig);
            _isBrowserLinkTrackingEnabled = _extConfig[
              _DYN_IS_BROWSER_LINK_TRAC11
              /* @min:%2eisBrowserLinkTrackingEnabled */
            ];
            _addDefaultTelemetryInitializers();
          }));
        }
        function trackPageVisitTime(pageName, pageUrl, pageVisitTime) {
          var properties = {
            PageName: pageName,
            PageUrl: pageUrl
          };
          _self.trackMetric({
            name: "PageVisitTime",
            average: pageVisitTime,
            max: pageVisitTime,
            min: pageVisitTime,
            sampleCount: 1
          }, properties);
        }
        function _addDefaultTelemetryInitializers() {
          if (!_browserLinkInitializerAdded && _isBrowserLinkTrackingEnabled) {
            var browserLinkPaths_1 = ["/browserLinkSignalR/", "/__browserLink/"];
            var dropBrowserLinkRequests = function(envelope) {
              if (_isBrowserLinkTrackingEnabled && envelope.baseType === RemoteDependencyData[
                _DYN_DATA_TYPE
                /* @min:%2edataType */
              ]) {
                var remoteData = envelope.baseData;
                if (remoteData) {
                  for (var i = 0; i < browserLinkPaths_1[
                    _DYN_LENGTH3
                    /* @min:%2elength */
                  ]; i++) {
                    if (remoteData.target && strIndexOf(remoteData.target, browserLinkPaths_1[i]) >= 0) {
                      return false;
                    }
                  }
                }
              }
              return true;
            };
            _self[
              _DYN__ADD_HOOK
              /* @min:%2e_addHook */
            ](_self[
              _DYN_ADD_TELEMETRY_INITIA7
              /* @min:%2eaddTelemetryInitializer */
            ](dropBrowserLinkRequests));
            _browserLinkInitializerAdded = true;
          }
        }
        function _sendCORSException(exception, properties) {
          var telemetryItem = createTelemetryItem(exception, Exception[
            _DYN_DATA_TYPE
            /* @min:%2edataType */
          ], Exception[
            _DYN_ENVELOPE_TYPE
            /* @min:%2eenvelopeType */
          ], _self[
            _DYN_DIAG_LOG2
            /* @min:%2ediagLog */
          ](), properties);
          _self[
            _DYN_CORE
            /* @min:%2ecore */
          ][
            _DYN_TRACK
            /* @min:%2etrack */
          ](telemetryItem);
        }
        function _updateExceptionTracking() {
          var _window = getWindow();
          var locn = getLocation(true);
          _self[
            _DYN__ADD_HOOK
            /* @min:%2e_addHook */
          ](onConfigChange(_extConfig, function() {
            _disableExceptionTracking = _extConfig.disableExceptionTracking;
            if (!_disableExceptionTracking && !_autoExceptionInstrumented && !_extConfig[
              _DYN_AUTO_EXCEPTION_INSTR9
              /* @min:%2eautoExceptionInstrumented */
            ]) {
              _addHook(InstrumentEvent(_window, "onerror", {
                ns: _evtNamespace,
                rsp: function(callDetails, message, url, lineNumber, columnNumber, error) {
                  if (!_disableExceptionTracking && callDetails.rslt !== true) {
                    _self._onerror(Exception[
                      _DYN__CREATE_AUTO_EXCEPTI6
                      /* @min:%2eCreateAutoException */
                    ](message, url, lineNumber, columnNumber, error, callDetails.evt));
                  }
                }
              }, false));
              _errorHookCnt++;
              _autoExceptionInstrumented = true;
            }
          }));
          _addUnhandledPromiseRejectionTracking(_window, locn);
        }
        function _updateLocationChange() {
          var win = getWindow();
          var locn = getLocation(true);
          _self[
            _DYN__ADD_HOOK
            /* @min:%2e_addHook */
          ](onConfigChange(_extConfig, function() {
            _enableAutoRouteTracking = _extConfig[
              _DYN_ENABLE_AUTO_ROUTE_TR12
              /* @min:%2eenableAutoRouteTracking */
            ] === true;
            if (win && _enableAutoRouteTracking && !_historyListenerAdded && hasHistory()) {
              var _history = getHistory();
              if (isFunction3(_history.pushState) && isFunction3(_history.replaceState) && typeof Event !== strShimUndefined) {
                _addHistoryListener(win, _history, locn);
              }
            }
          }));
        }
        function _getDistributedTraceCtx() {
          var distributedTraceCtx = null;
          if (_self[
            _DYN_CORE
            /* @min:%2ecore */
          ] && _self[
            _DYN_CORE
            /* @min:%2ecore */
          ].getTraceCtx) {
            distributedTraceCtx = _self[
              _DYN_CORE
              /* @min:%2ecore */
            ].getTraceCtx(false);
          }
          if (!distributedTraceCtx) {
            var properties = _self[
              _DYN_CORE
              /* @min:%2ecore */
            ].getPlugin(PropertiesPluginIdentifier);
            if (properties) {
              var context2 = properties.plugin.context;
              if (context2) {
                distributedTraceCtx = createDistributedTraceContextFromTrace(context2.telemetryTrace);
              }
            }
          }
          return distributedTraceCtx;
        }
        function _addHistoryListener(win, history, locn) {
          if (_historyListenerAdded) {
            return;
          }
          var namePrefix = _extConfig.namePrefix || "";
          function _popstateHandler() {
            if (_enableAutoRouteTracking) {
              _dispatchEvent(win, createDomEvent(namePrefix + "locationchange"));
            }
          }
          function _locationChangeHandler() {
            if (_currUri) {
              _prevUri = _currUri;
              _currUri = locn && locn[
                _DYN_HREF
                /* @min:%2ehref */
              ] || "";
            } else {
              _currUri = locn && locn[
                _DYN_HREF
                /* @min:%2ehref */
              ] || "";
            }
            if (_enableAutoRouteTracking) {
              var distributedTraceCtx = _getDistributedTraceCtx();
              if (distributedTraceCtx) {
                distributedTraceCtx.setTraceId(generateW3CId());
                var traceLocationName = "_unknown_";
                if (locn && locn.pathname) {
                  traceLocationName = locn.pathname + (locn.hash || "");
                }
                distributedTraceCtx.setName(dataSanitizeString(_self[
                  _DYN_DIAG_LOG2
                  /* @min:%2ediagLog */
                ](), traceLocationName));
              }
              scheduleTimeout((function(uri) {
                _self[
                  _DYN_TRACK_PAGE_VIEW
                  /* @min:%2etrackPageView */
                ]({
                  refUri: uri,
                  properties: {
                    duration: 0
                  }
                });
              }).bind(_self, _prevUri), _self.autoRoutePVDelay);
            }
          }
          _addHook(InstrumentEvent(history, "pushState", {
            ns: _evtNamespace,
            rsp: function() {
              if (_enableAutoRouteTracking) {
                _dispatchEvent(win, createDomEvent(namePrefix + "pushState"));
                _dispatchEvent(win, createDomEvent(namePrefix + "locationchange"));
              }
            }
          }, true));
          _addHook(InstrumentEvent(history, "replaceState", {
            ns: _evtNamespace,
            rsp: function() {
              if (_enableAutoRouteTracking) {
                _dispatchEvent(win, createDomEvent(namePrefix + "replaceState"));
                _dispatchEvent(win, createDomEvent(namePrefix + "locationchange"));
              }
            }
          }, true));
          eventOn(win, namePrefix + "popstate", _popstateHandler, _evtNamespace);
          eventOn(win, namePrefix + "locationchange", _locationChangeHandler, _evtNamespace);
          _historyListenerAdded = true;
        }
        function _addUnhandledPromiseRejectionTracking(_window, _location) {
          _self[
            _DYN__ADD_HOOK
            /* @min:%2e_addHook */
          ](onConfigChange(_extConfig, function() {
            _enableUnhandledPromiseRejectionTracking = _extConfig[
              _DYN_ENABLE_UNHANDLED_PRO13
              /* @min:%2eenableUnhandledPromiseRejectionTracking */
            ] === true;
            _autoExceptionInstrumented = _autoExceptionInstrumented || _extConfig[
              _DYN_AUTO_UNHANDLED_PROMI14
              /* @min:%2eautoUnhandledPromiseInstrumented */
            ];
            if (_enableUnhandledPromiseRejectionTracking && !_autoUnhandledPromiseInstrumented) {
              _addHook(InstrumentEvent(_window, "onunhandledrejection", {
                ns: _evtNamespace,
                rsp: function(callDetails, error) {
                  if (_enableUnhandledPromiseRejectionTracking && callDetails.rslt !== true) {
                    _self._onerror(Exception[
                      _DYN__CREATE_AUTO_EXCEPTI6
                      /* @min:%2eCreateAutoException */
                    ](_getReason(error), _location ? _location[
                      _DYN_HREF
                      /* @min:%2ehref */
                    ] : "", 0, 0, error, callDetails.evt));
                  }
                }
              }, false));
              _errorHookCnt++;
              _extConfig[
                _DYN_AUTO_UNHANDLED_PROMI14
                /* @min:%2eautoUnhandledPromiseInstrumented */
              ] = _autoUnhandledPromiseInstrumented = true;
            }
          }));
        }
        function _throwInternal2(severity, msgId, msg, properties, isUserAct) {
          _self[
            _DYN_DIAG_LOG2
            /* @min:%2ediagLog */
          ]().throwInternal(severity, msgId, msg, properties, isUserAct);
        }
        function _initDefaults() {
          _eventTracking = null;
          _pageTracking = null;
          _pageViewManager = null;
          _pageViewPerformanceManager = null;
          _pageVisitTimeManager = null;
          _preInitTelemetryInitializers = null;
          _isBrowserLinkTrackingEnabled = false;
          _browserLinkInitializerAdded = false;
          _enableAutoRouteTracking = false;
          _historyListenerAdded = false;
          _disableExceptionTracking = false;
          _autoExceptionInstrumented = false;
          _enableUnhandledPromiseRejectionTracking = false;
          _autoUnhandledPromiseInstrumented = false;
          _autoTrackPageVisitTime = false;
          _trackAjaxAttempts = 0;
          var location2 = getLocation(true);
          _prevUri = location2 && location2[
            _DYN_HREF
            /* @min:%2ehref */
          ] || "";
          _currUri = null;
          _evtNamespace = null;
          _extConfig = null;
          _errorHookCnt = 0;
          objDefine(_self, "config", {
            g: function() {
              return _extConfig;
            }
          });
        }
        objDefine(_self, "_pageViewManager", {
          g: function() {
            return _pageViewManager;
          }
        });
        objDefine(_self, "_pageViewPerformanceManager", {
          g: function() {
            return _pageViewPerformanceManager;
          }
        });
        objDefine(_self, "_pageVisitTimeManager", {
          g: function() {
            return _pageVisitTimeManager;
          }
        });
        objDefine(_self, "_evtNamespace", {
          g: function() {
            return "." + _evtNamespace;
          }
        });
      });
      return _this;
    }
    AnalyticsPlugin2.Version = "3.3.6";
    return AnalyticsPlugin2;
  }(BaseTelemetryPlugin)
);

// node_modules/@microsoft/applicationinsights-cfgsync-js/dist-es5/__DynamicConstants.js
var _DYN_FEATURE_OPT_IN = "featureOptIn";
var _DYN_SCHEDULE_FETCH_TIMEO0 = "scheduleFetchTimeout";

// node_modules/@microsoft/applicationinsights-cfgsync-js/dist-es5/CfgSyncHelperFuncs.js
function replaceByNonOverrideCfg(cfg, nonOverrideConfigs, curLevel, maxLevel) {
  try {
    var exceedMaxLevel = curLevel > maxLevel;
    if (exceedMaxLevel) {
      cfg = null;
    }
    var curCfg_1 = curLevel == 0 ? objExtend({}, cfg) : cfg;
    if (curCfg_1 && nonOverrideConfigs && !exceedMaxLevel) {
      objForEachKey(curCfg_1, function(key) {
        var nonOverrideVal = nonOverrideConfigs[key];
        if (!!nonOverrideVal) {
          if (isObject(curCfg_1[key]) && isObject(nonOverrideVal)) {
            curCfg_1[key] = replaceByNonOverrideCfg(curCfg_1[key], nonOverrideVal, ++curLevel, maxLevel);
          } else {
            delete curCfg_1[key];
          }
        }
      });
    }
    return curCfg_1;
  } catch (e) {
  }
  return cfg;
}
var F = "featureOptIn.";
var M = ".mode";
var ON = ".onCfg";
var OFF = ".offCfg";
function resolveCdnFeatureCfg(field, cdnCfg, userOptInDetails) {
  var _a12;
  if (!cdnCfg || !cdnCfg.enabled) {
    return null;
  }
  var cdnFt = (cdnCfg[
    _DYN_FEATURE_OPT_IN
    /* @min:%2efeatureOptIn */
  ] || {})[field] || {
    mode: 1
    /* CdnFeatureMode.none */
  };
  var cdnM = cdnFt.mode;
  var cdnOnV = cdnFt.onCfg;
  var cdnOffV = cdnFt.offCfg;
  var userFt = (userOptInDetails || {})[field] || {
    mode: 2
    /* FeatureOptInMode.disable */
  };
  var userM = userFt.mode;
  var userOnV = userFt.onCfg;
  var userOffV = userFt.offCfg;
  var blockCdn = !!userFt.blockCdnCfg;
  var mFld = F + field + M;
  var onFld = F + field + ON;
  var offFld = F + field + OFF;
  var mode = userM;
  var onV = userOnV;
  var offV = userOffV;
  if (!blockCdn) {
    if (cdnM === 4 || cdnM === 5) {
      mode = cdnM == 4 ? 3 : 2;
      onV = cdnOnV || userOnV;
      offV = cdnOffV || userOffV;
    } else if (cdnM === 2 || userM === 2) {
      mode = 2;
      onV = userOnV || cdnOnV;
      offV = userOffV || cdnOffV;
    } else if (cdnM === 3) {
      mode = 3;
      onV = userOnV || cdnOnV;
      offV = userOffV || cdnOffV;
    } else if (cdnM === 1 && userM === 1) {
      mode = 1;
    }
  }
  return _a12 = {}, _a12[mFld] = mode, _a12[onFld] = onV, _a12[offFld] = offV, _a12;
}
function applyCdnfeatureCfg(cdnCfg, core) {
  try {
    if (!cdnCfg || !cdnCfg.enabled) {
      return null;
    }
    if (!cdnCfg[
      _DYN_FEATURE_OPT_IN
      /* @min:%2efeatureOptIn */
    ]) {
      return cdnCfg.config;
    }
    var optInMap = cdnCfg[
      _DYN_FEATURE_OPT_IN
      /* @min:%2efeatureOptIn */
    ];
    var cdnConfig_1 = cdnCfg.config || {};
    objForEachKey(optInMap, function(key) {
      var featureVal = resolveCdnFeatureCfg(key, cdnCfg, core.config[
        _DYN_FEATURE_OPT_IN
        /* @min:%2efeatureOptIn */
      ]);
      if (!isNullOrUndefined(featureVal)) {
        objForEachKey(featureVal, function(config2, val) {
          setValueByKey(cdnConfig_1, config2, val);
        });
        _overrideCdnCfgByFeature(key, featureVal, cdnConfig_1);
      }
    });
    return cdnConfig_1;
  } catch (e) {
  }
  return null;
}
function _overrideCdnCfgByFeature(field, ftVal, config2) {
  var mode = ftVal[F + field + M];
  var val = ftVal[F + field + ON];
  var dVal = ftVal[F + field + OFF];
  var target = null;
  if (mode === 3) {
    target = val;
  }
  if (mode === 2) {
    target = dVal;
  }
  if (target) {
    objForEachKey(target, function(key, cfg) {
      setValueByKey(config2, key, cfg);
    });
  }
}

// node_modules/@microsoft/applicationinsights-cfgsync-js/dist-es5/CfgSyncPlugin.js
var _a7;
var EVENT_NAME = "ai_cfgsync";
var STR_GET_METHOD = "GET";
var FETCH_TIMEOUT = 18e5;
var udfVal = void 0;
var defaultNonOverrideCfg = {
  instrumentationKey: true,
  connectionString: true,
  endpointUrl: true
};
var _defaultConfig = objDeepFreeze((_a7 = {
  syncMode: 1,
  blkCdnCfg: udfVal,
  customEvtName: udfVal,
  cfgUrl: udfVal,
  overrideSyncFn: udfVal,
  overrideFetchFn: udfVal,
  onCfgChangeReceive: udfVal
}, _a7[
  _DYN_SCHEDULE_FETCH_TIMEO0
  /* @min:scheduleFetchTimeout */
] = FETCH_TIMEOUT, _a7.nonOverrideConfigs = defaultNonOverrideCfg, _a7.enableAjax = false, _a7));
var CfgSyncPlugin = (
  /** @class */
  function(_super) {
    __extendsFn(CfgSyncPlugin2, _super);
    function CfgSyncPlugin2() {
      var _this = _super.call(this) || this;
      _this.priority = 198;
      _this.identifier = "AppInsightsCfgSyncPlugin";
      var _extensionConfig;
      var _mainConfig;
      var _evtName;
      var _evtNamespace;
      var _cfgUrl;
      var _timeoutHandle;
      var _receiveChanges;
      var _broadcastChanges;
      var _blkCdnCfg;
      var _fetchTimeout;
      var _retryCnt;
      var _onCfgChangeReceive;
      var _nonOverrideConfigs;
      var _fetchFn;
      var _overrideFetchFn;
      var _overrideSyncFn;
      var _paused = false;
      var _enableAjax;
      dynamicProto(CfgSyncPlugin2, _this, function(_self, _base) {
        _initDefaults();
        _self.initialize = function(config2, core, extensions, pluginChain) {
          _base.initialize(config2, core, extensions, pluginChain);
          _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());
          _populateDefaults(config2);
        };
        _self.getCfg = function() {
          return _mainConfig;
        };
        _self.pause = function() {
          _paused = true;
          _clearScheduledTimer();
        };
        _self.resume = function() {
          _paused = false;
          _setupTimer();
        };
        _self.setCfg = function(config2) {
          return _setCfg(config2);
        };
        _self.sync = function(customDetails) {
          return _sendCfgsyncEvents(customDetails);
        };
        _self.updateEventListenerName = function(eventName) {
          return _updateEventListenerName(eventName);
        };
        _self._doTeardown = function(unloadCtx, unloadState) {
          _eventOff();
          _clearScheduledTimer();
          _initDefaults();
        };
        _self["_getDbgPlgTargets"] = function() {
          return [_broadcastChanges, _receiveChanges, _evtName, _blkCdnCfg, _nonOverrideConfigs];
        };
        function _initDefaults() {
          _mainConfig = null;
          _evtName = null;
          _evtNamespace = null;
          _cfgUrl = null;
          _receiveChanges = null;
          _broadcastChanges = null;
          _nonOverrideConfigs = null;
          _timeoutHandle = null;
          _fetchTimeout = null;
          _retryCnt = null;
          _blkCdnCfg = null;
          _enableAjax = false;
          _overrideFetchFn = null;
          _overrideSyncFn = null;
          _onCfgChangeReceive = null;
        }
        function _populateDefaults(config2) {
          var identifier = _self.identifier;
          var core = _self.core;
          _self._addHook(onConfigChange(config2, function() {
            var ctx = createProcessTelemetryContext(null, config2, core);
            _extensionConfig = ctx.getExtCfg(identifier, _defaultConfig);
            var preBlkCdn = _blkCdnCfg;
            _blkCdnCfg = !!_extensionConfig.blkCdnCfg;
            _enableAjax = !!_extensionConfig.enableAjax;
            if (!isNullOrUndefined(preBlkCdn) && preBlkCdn !== _blkCdnCfg) {
              if (!_blkCdnCfg && _cfgUrl) {
                _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);
              } else {
                _clearScheduledTimer();
              }
            }
            if (isNullOrUndefined(_receiveChanges)) {
              _receiveChanges = _extensionConfig.syncMode === 2;
            }
            if (isNullOrUndefined(_broadcastChanges)) {
              _broadcastChanges = _extensionConfig.syncMode === 1;
            }
            var newEvtName = _extensionConfig.customEvtName || EVENT_NAME;
            if (_evtName !== newEvtName) {
              if (_receiveChanges) {
                _updateEventListenerName(newEvtName);
              } else {
                _eventOff();
                _evtName = newEvtName;
              }
            }
            if (isNullOrUndefined(_cfgUrl)) {
              _cfgUrl = _extensionConfig.cfgUrl;
            }
            if (!_cfgUrl) {
              _mainConfig = config2;
              if (_broadcastChanges) {
                _sendCfgsyncEvents();
              }
            }
          }));
          _overrideSyncFn = _extensionConfig.overrideSyncFn;
          _overrideFetchFn = _extensionConfig.overrideFetchFn;
          _onCfgChangeReceive = _extensionConfig.onCfgChangeReceive;
          _nonOverrideConfigs = _extensionConfig.nonOverrideConfigs;
          _fetchTimeout = _extensionConfig[
            _DYN_SCHEDULE_FETCH_TIMEO0
            /* @min:%2escheduleFetchTimeout */
          ];
          _fetchFn = _getFetchFnInterface();
          _retryCnt = 0;
          if (_cfgUrl && !_blkCdnCfg) {
            _fetchFn && _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);
          }
        }
        function _setCfg(config2, isAutoSync) {
          if (config2) {
            _mainConfig = config2;
            if (!!isAutoSync && !_paused) {
              return _sendCfgsyncEvents();
            }
            if (_receiveChanges && !_paused) {
              _self.core.updateCfg(config2);
              return true;
            }
          }
          return false;
        }
        function _eventOff() {
          try {
            var global_1 = getGlobal();
            if (global_1) {
              eventOff(global_1, null, null, _evtNamespace);
            }
          } catch (e) {
          }
        }
        function _sendCfgsyncEvents(customDetails) {
          try {
            if (!!_overrideSyncFn && isFunction3(_overrideSyncFn)) {
              return _overrideSyncFn(_mainConfig, customDetails);
            }
            return sendCustomEvent(_evtName, _mainConfig, customDetails);
          } catch (e) {
          }
          return false;
        }
        function _updateEventListenerName(name) {
          try {
            _eventOff();
            if (name) {
              _evtName = name;
              _addEventListener();
            }
            return true;
          } catch (e) {
          }
          return false;
        }
        function _getFetchFnInterface() {
          var _fetchFn2 = _overrideFetchFn;
          if (isNullOrUndefined(_fetchFn2)) {
            if (isFetchSupported()) {
              _fetchFn2 = _fetchSender;
            } else if (isXhrSupported()) {
              _fetchFn2 = _xhrSender;
            }
          }
          return _fetchFn2;
        }
        function _fetchSender(url, oncomplete, isAutoSync) {
          var global2 = getGlobal();
          var fetchFn = global2 && global2.fetch || null;
          if (url && fetchFn && isFunction3(fetchFn)) {
            try {
              var init = {
                method: STR_GET_METHOD
              };
              if (!_enableAjax) {
                init[DisabledPropertyName2] = true;
              }
              var request = new Request(url, init);
              if (!_enableAjax) {
                try {
                  request[DisabledPropertyName2] = true;
                } catch (e) {
                }
              }
              doAwaitResponse(fetch(request), function(result) {
                var response = result.value;
                if (!result.rejected) {
                  if (response.ok) {
                    doAwaitResponse(response.text(), function(res) {
                      _doOnComplete(oncomplete, response.status, res.value, isAutoSync);
                    });
                  } else {
                    _doOnComplete(oncomplete, response.status, null, isAutoSync);
                  }
                } else {
                  _doOnComplete(oncomplete, 400);
                }
              });
            } catch (e) {
            }
          }
        }
        function _xhrSender(url, oncomplete, isAutoSync) {
          try {
            var xhr_1 = new XMLHttpRequest();
            if (!_enableAjax) {
              xhr_1[DisabledPropertyName2] = true;
            }
            xhr_1.open(STR_GET_METHOD, url);
            xhr_1.onreadystatechange = function() {
              if (xhr_1.readyState === XMLHttpRequest.DONE) {
                _doOnComplete(oncomplete, xhr_1.status, xhr_1.responseText, isAutoSync);
              }
            };
            xhr_1.onerror = function() {
              _doOnComplete(oncomplete, 400);
            };
            xhr_1.ontimeout = function() {
              _doOnComplete(oncomplete, 400);
            };
            xhr_1.send();
          } catch (e) {
          }
        }
        function _onFetchComplete(status, response, isAutoSync) {
          try {
            if (status >= 200 && status < 400 && response) {
              _retryCnt = 0;
              var JSON_1 = getJSON();
              if (JSON_1) {
                var cdnCfg = JSON_1.parse(response);
                var cfg = applyCdnfeatureCfg(cdnCfg, _self.core);
                var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);
                newCfg && _setCfg(newCfg, isAutoSync);
              }
            } else {
              _retryCnt++;
            }
            if (_retryCnt < 3) {
              _setupTimer();
            }
          } catch (e) {
          }
        }
        function _doOnComplete(oncomplete, status, response, isAutoSync) {
          try {
            oncomplete(status, response, isAutoSync);
          } catch (e) {
          }
        }
        function _addEventListener() {
          if (_receiveChanges) {
            var global_2 = getGlobal();
            if (global_2) {
              try {
                eventOn(global_2, _evtName, function(event) {
                  var cfgEvent = event && event.detail;
                  if (_onCfgChangeReceive && cfgEvent) {
                    _onCfgChangeReceive(cfgEvent);
                  } else {
                    var cfg = cfgEvent && cfgEvent.cfg;
                    var newCfg = cfg && isPlainObject(cfg) && _replaceTartgetByKeys(cfg);
                    newCfg && _setCfg(newCfg);
                  }
                }, _evtNamespace, true);
              } catch (e) {
              }
            }
          }
        }
        function _replaceTartgetByKeys(cfg, level) {
          var _cfg = null;
          try {
            if (cfg) {
              _cfg = replaceByNonOverrideCfg(cfg, _nonOverrideConfigs, 0, 5);
            }
          } catch (e) {
          }
          return _cfg;
        }
        function _setupTimer() {
          if (!_timeoutHandle && _fetchTimeout) {
            _timeoutHandle = scheduleTimeout(function() {
              _timeoutHandle = null;
              _fetchFn(_cfgUrl, _onFetchComplete, _broadcastChanges);
            }, _fetchTimeout);
            _timeoutHandle.unref();
          }
        }
        function _clearScheduledTimer() {
          _timeoutHandle && _timeoutHandle.cancel();
          _timeoutHandle = null;
          _retryCnt = 0;
        }
        _self.processTelemetry = function(env, itemCtx) {
          _self.processNext(env, itemCtx);
        };
      });
      return _this;
    }
    CfgSyncPlugin2.__ieDyn = 1;
    return CfgSyncPlugin2;
  }(BaseTelemetryPlugin)
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/InternalConstants.js
var STR_DURATION = "duration";

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/__DynamicConstants.js
var _DYN_TAGS = "tags";
var _DYN_DEVICE_TYPE = "deviceType";
var _DYN_DATA2 = "data";
var _DYN_NAME3 = "name";
var _DYN_TRACE_ID = "traceID";
var _DYN_LENGTH4 = "length";
var _DYN_STRINGIFY2 = "stringify";
var _DYN_MEASUREMENTS2 = "measurements";
var _DYN_DATA_TYPE2 = "dataType";
var _DYN_ENVELOPE_TYPE2 = "envelopeType";
var _DYN_TO_STRING3 = "toString";
var _DYN_ENQUEUE = "enqueue";
var _DYN_COUNT2 = "count";
var _DYN_PUSH2 = "push";
var _DYN_EMIT_LINE_DELIMITED_0 = "emitLineDelimitedJson";
var _DYN_CLEAR = "clear";
var _DYN_MARK_AS_SENT = "markAsSent";
var _DYN_CLEAR_SENT = "clearSent";
var _DYN_BUFFER_OVERRIDE = "bufferOverride";
var _DYN__BUFFER__KEY = "BUFFER_KEY";
var _DYN__SENT__BUFFER__KEY = "SENT_BUFFER_KEY";
var _DYN_CONCAT = "concat";
var _DYN__MAX__BUFFER__SIZE = "MAX_BUFFER_SIZE";
var _DYN_TRIGGER_SEND = "triggerSend";
var _DYN_DIAG_LOG3 = "diagLog";
var _DYN_INITIALIZE2 = "initialize";
var _DYN__SENDER = "_sender";
var _DYN_ENDPOINT_URL = "endpointUrl";
var _DYN_INSTRUMENTATION_KEY = "instrumentationKey";
var _DYN_CUSTOM_HEADERS = "customHeaders";
var _DYN_MAX_BATCH_SIZE_IN_BY1 = "maxBatchSizeInBytes";
var _DYN_ONUNLOAD_DISABLE_BEA2 = "onunloadDisableBeacon";
var _DYN_IS_BEACON_API_DISABL3 = "isBeaconApiDisabled";
var _DYN_ALWAYS_USE_XHR_OVERR4 = "alwaysUseXhrOverride";
var _DYN_ENABLE_SESSION_STORA5 = "enableSessionStorageBuffer";
var _DYN__BUFFER = "_buffer";
var _DYN_ONUNLOAD_DISABLE_FET6 = "onunloadDisableFetch";
var _DYN_DISABLE_SEND_BEACON_7 = "disableSendBeaconSplit";
var _DYN_GET_SENDER_INST = "getSenderInst";
var _DYN__ON_ERROR = "_onError";
var _DYN__ON_PARTIAL_SUCCESS = "_onPartialSuccess";
var _DYN__ON_SUCCESS = "_onSuccess";
var _DYN_ITEMS_RECEIVED2 = "itemsReceived";
var _DYN_ITEMS_ACCEPTED = "itemsAccepted";
var _DYN_BASE_TYPE = "baseType";
var _DYN_SAMPLE_RATE = "sampleRate";
var _DYN_GET_HASH_CODE_SCORE = "getHashCodeScore";

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/EnvelopeCreator.js
var strBaseType = "baseType";
var strBaseData = "baseData";
var strProperties = "properties";
var strTrue = "true";
function _setValueIf(target, field, value) {
  return setValue(target, field, value, isTruthy);
}
function _extractPartAExtensions(logger, item, env) {
  var envTags = env[
    _DYN_TAGS
    /* @min:%2etags */
  ] = env[
    _DYN_TAGS
    /* @min:%2etags */
  ] || {};
  var itmExt = item.ext = item.ext || {};
  var itmTags = item[
    _DYN_TAGS
    /* @min:%2etags */
  ] = item[
    _DYN_TAGS
    /* @min:%2etags */
  ] || [];
  var extUser = itmExt.user;
  if (extUser) {
    _setValueIf(envTags, CtxTagKeys.userAuthUserId, extUser.authId);
    _setValueIf(envTags, CtxTagKeys.userId, extUser.id || extUser.localId);
  }
  var extApp = itmExt.app;
  if (extApp) {
    _setValueIf(envTags, CtxTagKeys.sessionId, extApp.sesId);
  }
  var extDevice = itmExt.device;
  if (extDevice) {
    _setValueIf(envTags, CtxTagKeys.deviceId, extDevice.id || extDevice.localId);
    _setValueIf(envTags, CtxTagKeys[
      _DYN_DEVICE_TYPE
      /* @min:%2edeviceType */
    ], extDevice.deviceClass);
    _setValueIf(envTags, CtxTagKeys.deviceIp, extDevice.ip);
    _setValueIf(envTags, CtxTagKeys.deviceModel, extDevice.model);
    _setValueIf(envTags, CtxTagKeys[
      _DYN_DEVICE_TYPE
      /* @min:%2edeviceType */
    ], extDevice[
      _DYN_DEVICE_TYPE
      /* @min:%2edeviceType */
    ]);
  }
  var web = item.ext.web;
  if (web) {
    _setValueIf(envTags, CtxTagKeys.deviceLanguage, web.browserLang);
    _setValueIf(envTags, CtxTagKeys.deviceBrowserVersion, web.browserVer);
    _setValueIf(envTags, CtxTagKeys.deviceBrowser, web.browser);
    var envData = env[
      _DYN_DATA2
      /* @min:%2edata */
    ] = env[
      _DYN_DATA2
      /* @min:%2edata */
    ] || {};
    var envBaseData = envData[strBaseData] = envData[strBaseData] || {};
    var envProps = envBaseData[strProperties] = envBaseData[strProperties] || {};
    _setValueIf(envProps, "domain", web.domain);
    _setValueIf(envProps, "isManual", web.isManual ? strTrue : null);
    _setValueIf(envProps, "screenRes", web.screenRes);
    _setValueIf(envProps, "userConsent", web.userConsent ? strTrue : null);
  }
  var extOs = itmExt.os;
  if (extOs) {
    _setValueIf(envTags, CtxTagKeys.deviceOS, extOs[
      _DYN_NAME3
      /* @min:%2ename */
    ]);
    _setValueIf(envTags, CtxTagKeys.deviceOSVersion, extOs.osVer);
  }
  var extTrace = itmExt.trace;
  if (extTrace) {
    _setValueIf(envTags, CtxTagKeys.operationParentId, extTrace.parentID);
    _setValueIf(envTags, CtxTagKeys.operationName, dataSanitizeString(logger, extTrace[
      _DYN_NAME3
      /* @min:%2ename */
    ]));
    _setValueIf(envTags, CtxTagKeys.operationId, extTrace[
      _DYN_TRACE_ID
      /* @min:%2etraceID */
    ]);
  }
  var tgs = {};
  for (var i = itmTags[
    _DYN_LENGTH4
    /* @min:%2elength */
  ] - 1; i >= 0; i--) {
    var tg = itmTags[i];
    objForEachKey(tg, function(key, value) {
      tgs[key] = value;
    });
    itmTags.splice(i, 1);
  }
  objForEachKey(itmTags, function(tg2, value) {
    tgs[tg2] = value;
  });
  var theTags = __assignFn(__assignFn({}, envTags), tgs);
  if (!theTags[CtxTagKeys.internalSdkVersion]) {
    theTags[CtxTagKeys.internalSdkVersion] = dataSanitizeString(logger, "javascript:".concat(EnvelopeCreator.Version), 64);
  }
  env[
    _DYN_TAGS
    /* @min:%2etags */
  ] = optimizeObject(theTags);
}
function _extractPropsAndMeasurements(data, properties, measurements) {
  if (!isNullOrUndefined(data)) {
    objForEachKey(data, function(key, value) {
      if (isNumber(value)) {
        measurements[key] = value;
      } else if (isString(value)) {
        properties[key] = value;
      } else if (hasJSON()) {
        properties[key] = getJSON()[
          _DYN_STRINGIFY2
          /* @min:%2estringify */
        ](value);
      }
    });
  }
}
function _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue) {
  if (!isNullOrUndefined(properties)) {
    objForEachKey(properties, function(key, value) {
      properties[key] = value || customUndefinedValue;
    });
  }
}
function _createEnvelope(logger, envelopeType, telemetryItem, data) {
  var envelope = new Envelope(logger, data, envelopeType);
  _setValueIf(envelope, "sampleRate", telemetryItem[SampleRate]);
  if ((telemetryItem[strBaseData] || {}).startTime) {
    envelope.time = toISOString(telemetryItem[strBaseData].startTime);
  }
  envelope.iKey = telemetryItem.iKey;
  var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, "");
  envelope[
    _DYN_NAME3
    /* @min:%2ename */
  ] = envelope[
    _DYN_NAME3
    /* @min:%2ename */
  ].replace("{0}", iKeyNoDashes);
  _extractPartAExtensions(logger, telemetryItem, envelope);
  telemetryItem[
    _DYN_TAGS
    /* @min:%2etags */
  ] = telemetryItem[
    _DYN_TAGS
    /* @min:%2etags */
  ] || [];
  return optimizeObject(envelope);
}
function EnvelopeCreatorInit(logger, telemetryItem) {
  if (isNullOrUndefined(telemetryItem[strBaseData])) {
    _throwInternal(logger, 1, 46, "telemetryItem.baseData cannot be null.");
  }
}
var EnvelopeCreator = {
  Version: "3.3.6"
};
function DependencyEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var customMeasurements = telemetryItem[strBaseData][
    _DYN_MEASUREMENTS2
    /* @min:%2emeasurements */
  ] || {};
  var customProperties = telemetryItem[strBaseData][strProperties] || {};
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA2
    /* @min:%2edata */
  ], customProperties, customMeasurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
  }
  var bd = telemetryItem[strBaseData];
  if (isNullOrUndefined(bd)) {
    _warnToConsole(logger, "Invalid input for dependency data");
    return null;
  }
  var method = bd[strProperties] && bd[strProperties][HttpMethod] ? bd[strProperties][HttpMethod] : "GET";
  var remoteDepData = new RemoteDependencyData(logger, bd.id, bd.target, bd[
    _DYN_NAME3
    /* @min:%2ename */
  ], bd[
    STR_DURATION
    /* @min:%2eduration */
  ], bd.success, bd.responseCode, method, bd.type, bd.correlationContext, customProperties, customMeasurements);
  var data = new Data(RemoteDependencyData[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], remoteDepData);
  return _createEnvelope(logger, RemoteDependencyData[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function EventEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var customProperties = {};
  var customMeasurements = {};
  if (telemetryItem[strBaseType] !== Event2[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ]) {
    customProperties["baseTypeSource"] = telemetryItem[strBaseType];
  }
  if (telemetryItem[strBaseType] === Event2[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ]) {
    customProperties = telemetryItem[strBaseData][strProperties] || {};
    customMeasurements = telemetryItem[strBaseData][
      _DYN_MEASUREMENTS2
      /* @min:%2emeasurements */
    ] || {};
  } else {
    if (telemetryItem[strBaseData]) {
      _extractPropsAndMeasurements(telemetryItem[strBaseData], customProperties, customMeasurements);
    }
  }
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA2
    /* @min:%2edata */
  ], customProperties, customMeasurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
  }
  var eventName = telemetryItem[strBaseData][
    _DYN_NAME3
    /* @min:%2ename */
  ];
  var eventData = new Event2(logger, eventName, customProperties, customMeasurements);
  var data = new Data(Event2[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], eventData);
  return _createEnvelope(logger, Event2[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function ExceptionEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var customMeasurements = telemetryItem[strBaseData][
    _DYN_MEASUREMENTS2
    /* @min:%2emeasurements */
  ] || {};
  var customProperties = telemetryItem[strBaseData][strProperties] || {};
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA2
    /* @min:%2edata */
  ], customProperties, customMeasurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(customProperties, customUndefinedValue);
  }
  var bd = telemetryItem[strBaseData];
  var exData = Exception.CreateFromInterface(logger, bd, customProperties, customMeasurements);
  var data = new Data(Exception[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], exData);
  return _createEnvelope(logger, Exception[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function MetricEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var baseData = telemetryItem[strBaseData];
  var props = baseData[strProperties] || {};
  var measurements = baseData[
    _DYN_MEASUREMENTS2
    /* @min:%2emeasurements */
  ] || {};
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA2
    /* @min:%2edata */
  ], props, measurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);
  }
  var baseMetricData = new Metric(logger, baseData[
    _DYN_NAME3
    /* @min:%2ename */
  ], baseData.average, baseData.sampleCount, baseData.min, baseData.max, baseData.stdDev, props, measurements);
  var data = new Data(Metric[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], baseMetricData);
  return _createEnvelope(logger, Metric[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function PageViewEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var duration;
  var baseData = telemetryItem[strBaseData];
  if (!isNullOrUndefined(baseData) && !isNullOrUndefined(baseData[strProperties]) && !isNullOrUndefined(baseData[strProperties][STR_DURATION])) {
    duration = baseData[strProperties][STR_DURATION];
    delete baseData[strProperties][STR_DURATION];
  } else if (!isNullOrUndefined(telemetryItem[
    _DYN_DATA2
    /* @min:%2edata */
  ]) && !isNullOrUndefined(telemetryItem[
    _DYN_DATA2
    /* @min:%2edata */
  ][STR_DURATION])) {
    duration = telemetryItem[
      _DYN_DATA2
      /* @min:%2edata */
    ][STR_DURATION];
    delete telemetryItem[
      _DYN_DATA2
      /* @min:%2edata */
    ][STR_DURATION];
  }
  var bd = telemetryItem[strBaseData];
  var currentContextId;
  if (((telemetryItem.ext || {}).trace || {})[
    _DYN_TRACE_ID
    /* @min:%2etraceID */
  ]) {
    currentContextId = telemetryItem.ext.trace[
      _DYN_TRACE_ID
      /* @min:%2etraceID */
    ];
  }
  var id = bd.id || currentContextId;
  var name = bd[
    _DYN_NAME3
    /* @min:%2ename */
  ];
  var url = bd.uri;
  var properties = bd[strProperties] || {};
  var measurements = bd[
    _DYN_MEASUREMENTS2
    /* @min:%2emeasurements */
  ] || {};
  if (!isNullOrUndefined(bd.refUri)) {
    properties["refUri"] = bd.refUri;
  }
  if (!isNullOrUndefined(bd.pageType)) {
    properties["pageType"] = bd.pageType;
  }
  if (!isNullOrUndefined(bd.isLoggedIn)) {
    properties["isLoggedIn"] = bd.isLoggedIn[
      _DYN_TO_STRING3
      /* @min:%2etoString */
    ]();
  }
  if (!isNullOrUndefined(bd[strProperties])) {
    var pageTags = bd[strProperties];
    objForEachKey(pageTags, function(key, value) {
      properties[key] = value;
    });
  }
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA2
    /* @min:%2edata */
  ], properties, measurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);
  }
  var pageViewData = new PageView(logger, name, url, duration, properties, measurements, id);
  var data = new Data(PageView[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], pageViewData);
  return _createEnvelope(logger, PageView[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function PageViewPerformanceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var bd = telemetryItem[strBaseData];
  var name = bd[
    _DYN_NAME3
    /* @min:%2ename */
  ];
  var url = bd.uri || bd.url;
  var properties = bd[strProperties] || {};
  var measurements = bd[
    _DYN_MEASUREMENTS2
    /* @min:%2emeasurements */
  ] || {};
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA2
    /* @min:%2edata */
  ], properties, measurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(properties, customUndefinedValue);
  }
  var baseData = new PageViewPerformance(logger, name, url, void 0, properties, measurements, bd);
  var data = new Data(PageViewPerformance[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], baseData);
  return _createEnvelope(logger, PageViewPerformance[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}
function TraceEnvelopeCreator(logger, telemetryItem, customUndefinedValue) {
  EnvelopeCreatorInit(logger, telemetryItem);
  var message = telemetryItem[strBaseData].message;
  var severityLevel = telemetryItem[strBaseData].severityLevel;
  var props = telemetryItem[strBaseData][strProperties] || {};
  var measurements = telemetryItem[strBaseData][
    _DYN_MEASUREMENTS2
    /* @min:%2emeasurements */
  ] || {};
  _extractPropsAndMeasurements(telemetryItem[
    _DYN_DATA2
    /* @min:%2edata */
  ], props, measurements);
  if (!isNullOrUndefined(customUndefinedValue)) {
    _convertPropsUndefinedToCustomDefinedValue(props, customUndefinedValue);
  }
  var baseData = new Trace(logger, message, severityLevel, props, measurements);
  var data = new Data(Trace[
    _DYN_DATA_TYPE2
    /* @min:%2edataType */
  ], baseData);
  return _createEnvelope(logger, Trace[
    _DYN_ENVELOPE_TYPE2
    /* @min:%2eenvelopeType */
  ], telemetryItem, data);
}

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/SendBuffer.js
var BaseSendBuffer = (
  /** @class */
  function() {
    function BaseSendBuffer2(logger, config2) {
      var _buffer = [];
      var _bufferFullMessageSent = false;
      var _maxRetryCnt = config2.maxRetryCnt;
      this._get = function() {
        return _buffer;
      };
      this._set = function(buffer) {
        _buffer = buffer;
        return _buffer;
      };
      dynamicProto(BaseSendBuffer2, this, function(_self) {
        _self[
          _DYN_ENQUEUE
          /* @min:%2eenqueue */
        ] = function(payload) {
          if (_self[
            _DYN_COUNT2
            /* @min:%2ecount */
          ]() >= config2.eventsLimitInMem) {
            if (!_bufferFullMessageSent) {
              _throwInternal(logger, 2, 105, "Maximum in-memory buffer size reached: " + _self[
                _DYN_COUNT2
                /* @min:%2ecount */
              ](), true);
              _bufferFullMessageSent = true;
            }
            return;
          }
          payload.cnt = payload.cnt || 0;
          if (!isNullOrUndefined(_maxRetryCnt)) {
            if (payload.cnt > _maxRetryCnt) {
              return;
            }
          }
          _buffer[
            _DYN_PUSH2
            /* @min:%2epush */
          ](payload);
          return;
        };
        _self[
          _DYN_COUNT2
          /* @min:%2ecount */
        ] = function() {
          return _buffer[
            _DYN_LENGTH4
            /* @min:%2elength */
          ];
        };
        _self.size = function() {
          var size = _buffer[
            _DYN_LENGTH4
            /* @min:%2elength */
          ];
          for (var lp = 0; lp < _buffer[
            _DYN_LENGTH4
            /* @min:%2elength */
          ]; lp++) {
            size += _buffer[lp].item[
              _DYN_LENGTH4
              /* @min:%2elength */
            ];
          }
          if (!config2[
            _DYN_EMIT_LINE_DELIMITED_0
            /* @min:%2eemitLineDelimitedJson */
          ]) {
            size += 2;
          }
          return size;
        };
        _self[
          _DYN_CLEAR
          /* @min:%2eclear */
        ] = function() {
          _buffer = [];
          _bufferFullMessageSent = false;
        };
        _self.getItems = function() {
          return _buffer.slice(0);
        };
        _self.batchPayloads = function(payloads) {
          if (payloads && payloads[
            _DYN_LENGTH4
            /* @min:%2elength */
          ] > 0) {
            var payloadStr_1 = [];
            arrForEach(payloads, function(payload) {
              payloadStr_1[
                _DYN_PUSH2
                /* @min:%2epush */
              ](payload.item);
            });
            var batch = config2[
              _DYN_EMIT_LINE_DELIMITED_0
              /* @min:%2eemitLineDelimitedJson */
            ] ? payloadStr_1.join("\n") : "[" + payloadStr_1.join(",") + "]";
            return batch;
          }
          return null;
        };
        _self.createNew = function(newLogger, newConfig, canUseSessionStorage) {
          var items = _buffer.slice(0);
          newLogger = newLogger || logger;
          newConfig = newConfig || {};
          var newBuffer = !!canUseSessionStorage ? new SessionStorageSendBuffer(newLogger, newConfig) : new ArraySendBuffer(newLogger, newConfig);
          arrForEach(items, function(payload) {
            newBuffer[
              _DYN_ENQUEUE
              /* @min:%2eenqueue */
            ](payload);
          });
          return newBuffer;
        };
      });
    }
    BaseSendBuffer2.__ieDyn = 1;
    return BaseSendBuffer2;
  }()
);
var ArraySendBuffer = (
  /** @class */
  function(_super) {
    __extendsFn(ArraySendBuffer2, _super);
    function ArraySendBuffer2(logger, config2) {
      var _this = _super.call(this, logger, config2) || this;
      dynamicProto(ArraySendBuffer2, _this, function(_self, _base) {
        _self[
          _DYN_MARK_AS_SENT
          /* @min:%2emarkAsSent */
        ] = function(payload) {
          _base[
            _DYN_CLEAR
            /* @min:%2eclear */
          ]();
        };
        _self[
          _DYN_CLEAR_SENT
          /* @min:%2eclearSent */
        ] = function(payload) {
        };
      });
      return _this;
    }
    ArraySendBuffer2.__ieDyn = 1;
    return ArraySendBuffer2;
  }(BaseSendBuffer)
);
var PREVIOUS_KEYS = ["AI_buffer", "AI_sentBuffer"];
var SessionStorageSendBuffer = (
  /** @class */
  function(_super) {
    __extendsFn(SessionStorageSendBuffer2, _super);
    function SessionStorageSendBuffer2(logger, config2) {
      var _this = _super.call(this, logger, config2) || this;
      var _bufferFullMessageSent = false;
      var _namePrefix = config2 === null || config2 === void 0 ? void 0 : config2.namePrefix;
      var _b4 = config2[
        _DYN_BUFFER_OVERRIDE
        /* @min:%2ebufferOverride */
      ] || {
        getItem: utlGetSessionStorage,
        setItem: utlSetSessionStorage
      }, getItem = _b4.getItem, setItem = _b4.setItem;
      var _maxRetryCnt = config2.maxRetryCnt;
      dynamicProto(SessionStorageSendBuffer2, _this, function(_self, _base) {
        var bufferItems = _getBuffer(SessionStorageSendBuffer2[
          _DYN__BUFFER__KEY
          /* @min:%2eBUFFER_KEY */
        ]);
        var itemsInSentBuffer = _getBuffer(SessionStorageSendBuffer2[
          _DYN__SENT__BUFFER__KEY
          /* @min:%2eSENT_BUFFER_KEY */
        ]);
        var previousItems = _getPreviousEvents();
        var notDeliveredItems = itemsInSentBuffer[
          _DYN_CONCAT
          /* @min:%2econcat */
        ](previousItems);
        var buffer = _self._set(bufferItems[
          _DYN_CONCAT
          /* @min:%2econcat */
        ](notDeliveredItems));
        if (buffer[
          _DYN_LENGTH4
          /* @min:%2elength */
        ] > SessionStorageSendBuffer2[
          _DYN__MAX__BUFFER__SIZE
          /* @min:%2eMAX_BUFFER_SIZE */
        ]) {
          buffer[
            _DYN_LENGTH4
            /* @min:%2elength */
          ] = SessionStorageSendBuffer2[
            _DYN__MAX__BUFFER__SIZE
            /* @min:%2eMAX_BUFFER_SIZE */
          ];
        }
        _setBuffer(SessionStorageSendBuffer2[
          _DYN__SENT__BUFFER__KEY
          /* @min:%2eSENT_BUFFER_KEY */
        ], []);
        _setBuffer(SessionStorageSendBuffer2[
          _DYN__BUFFER__KEY
          /* @min:%2eBUFFER_KEY */
        ], buffer);
        _self[
          _DYN_ENQUEUE
          /* @min:%2eenqueue */
        ] = function(payload) {
          if (_self[
            _DYN_COUNT2
            /* @min:%2ecount */
          ]() >= SessionStorageSendBuffer2[
            _DYN__MAX__BUFFER__SIZE
            /* @min:%2eMAX_BUFFER_SIZE */
          ]) {
            if (!_bufferFullMessageSent) {
              _throwInternal(logger, 2, 67, "Maximum buffer size reached: " + _self[
                _DYN_COUNT2
                /* @min:%2ecount */
              ](), true);
              _bufferFullMessageSent = true;
            }
            return;
          }
          payload.cnt = payload.cnt || 0;
          if (!isNullOrUndefined(_maxRetryCnt)) {
            if (payload.cnt > _maxRetryCnt) {
              return;
            }
          }
          _base[
            _DYN_ENQUEUE
            /* @min:%2eenqueue */
          ](payload);
          _setBuffer(SessionStorageSendBuffer2[
            _DYN__BUFFER__KEY
            /* @min:%2eBUFFER_KEY */
          ], _self._get());
        };
        _self[
          _DYN_CLEAR
          /* @min:%2eclear */
        ] = function() {
          _base[
            _DYN_CLEAR
            /* @min:%2eclear */
          ]();
          _setBuffer(SessionStorageSendBuffer2[
            _DYN__BUFFER__KEY
            /* @min:%2eBUFFER_KEY */
          ], _self._get());
          _setBuffer(SessionStorageSendBuffer2[
            _DYN__SENT__BUFFER__KEY
            /* @min:%2eSENT_BUFFER_KEY */
          ], []);
          _bufferFullMessageSent = false;
        };
        _self[
          _DYN_MARK_AS_SENT
          /* @min:%2emarkAsSent */
        ] = function(payload) {
          _setBuffer(SessionStorageSendBuffer2[
            _DYN__BUFFER__KEY
            /* @min:%2eBUFFER_KEY */
          ], _self._set(_removePayloadsFromBuffer(payload, _self._get())));
          var sentElements = _getBuffer(SessionStorageSendBuffer2[
            _DYN__SENT__BUFFER__KEY
            /* @min:%2eSENT_BUFFER_KEY */
          ]);
          if (sentElements instanceof Array && payload instanceof Array) {
            sentElements = sentElements[
              _DYN_CONCAT
              /* @min:%2econcat */
            ](payload);
            if (sentElements[
              _DYN_LENGTH4
              /* @min:%2elength */
            ] > SessionStorageSendBuffer2[
              _DYN__MAX__BUFFER__SIZE
              /* @min:%2eMAX_BUFFER_SIZE */
            ]) {
              _throwInternal(logger, 1, 67, "Sent buffer reached its maximum size: " + sentElements[
                _DYN_LENGTH4
                /* @min:%2elength */
              ], true);
              sentElements[
                _DYN_LENGTH4
                /* @min:%2elength */
              ] = SessionStorageSendBuffer2[
                _DYN__MAX__BUFFER__SIZE
                /* @min:%2eMAX_BUFFER_SIZE */
              ];
            }
            _setBuffer(SessionStorageSendBuffer2[
              _DYN__SENT__BUFFER__KEY
              /* @min:%2eSENT_BUFFER_KEY */
            ], sentElements);
          }
        };
        _self[
          _DYN_CLEAR_SENT
          /* @min:%2eclearSent */
        ] = function(payload) {
          var sentElements = _getBuffer(SessionStorageSendBuffer2[
            _DYN__SENT__BUFFER__KEY
            /* @min:%2eSENT_BUFFER_KEY */
          ]);
          sentElements = _removePayloadsFromBuffer(payload, sentElements);
          _setBuffer(SessionStorageSendBuffer2[
            _DYN__SENT__BUFFER__KEY
            /* @min:%2eSENT_BUFFER_KEY */
          ], sentElements);
        };
        _self.createNew = function(newLogger, newConfig, canUseSessionStorage) {
          canUseSessionStorage = !!canUseSessionStorage;
          var unsentItems = _self._get().slice(0);
          var sentItems = _getBuffer(SessionStorageSendBuffer2[
            _DYN__SENT__BUFFER__KEY
            /* @min:%2eSENT_BUFFER_KEY */
          ]).slice(0);
          newLogger = newLogger || logger;
          newConfig = newConfig || {};
          _self[
            _DYN_CLEAR
            /* @min:%2eclear */
          ]();
          var newBuffer = canUseSessionStorage ? new SessionStorageSendBuffer2(newLogger, newConfig) : new ArraySendBuffer(newLogger, newConfig);
          arrForEach(unsentItems, function(payload) {
            newBuffer[
              _DYN_ENQUEUE
              /* @min:%2eenqueue */
            ](payload);
          });
          if (canUseSessionStorage) {
            newBuffer[
              _DYN_MARK_AS_SENT
              /* @min:%2emarkAsSent */
            ](sentItems);
          }
          return newBuffer;
        };
        function _removePayloadsFromBuffer(payloads, buffer2) {
          var remaining = [];
          var payloadStr = [];
          arrForEach(payloads, function(payload) {
            payloadStr[
              _DYN_PUSH2
              /* @min:%2epush */
            ](payload.item);
          });
          arrForEach(buffer2, function(value) {
            if (!isFunction3(value) && arrIndexOf(payloadStr, value.item) === -1) {
              remaining[
                _DYN_PUSH2
                /* @min:%2epush */
              ](value);
            }
          });
          return remaining;
        }
        function _getBuffer(key) {
          var prefixedKey = key;
          prefixedKey = _namePrefix ? _namePrefix + "_" + prefixedKey : prefixedKey;
          return _getBufferBase(prefixedKey);
        }
        function _getBufferBase(key) {
          try {
            var bufferJson = getItem(logger, key);
            if (bufferJson) {
              var buffer_1 = getJSON().parse(bufferJson);
              if (isString(buffer_1)) {
                buffer_1 = getJSON().parse(buffer_1);
              }
              if (buffer_1 && isArray3(buffer_1)) {
                return buffer_1;
              }
            }
          } catch (e) {
            _throwInternal(logger, 1, 42, " storage key: " + key + ", " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
          return [];
        }
        function _setBuffer(key, buffer2) {
          var prefixedKey = key;
          try {
            prefixedKey = _namePrefix ? _namePrefix + "_" + prefixedKey : prefixedKey;
            var bufferJson = JSON[
              _DYN_STRINGIFY2
              /* @min:%2estringify */
            ](buffer2);
            setItem(logger, prefixedKey, bufferJson);
          } catch (e) {
            setItem(logger, prefixedKey, JSON[
              _DYN_STRINGIFY2
              /* @min:%2estringify */
            ]([]));
            _throwInternal(logger, 2, 41, " storage key: " + prefixedKey + ", " + getExceptionName(e) + ". Buffer cleared", {
              exception: dumpObj(e)
            });
          }
        }
        function _getPreviousEvents() {
          var items = [];
          try {
            arrForEach(PREVIOUS_KEYS, function(key) {
              var events = _getItemsFromPreviousKey(key);
              items = items[
                _DYN_CONCAT
                /* @min:%2econcat */
              ](events);
              if (_namePrefix) {
                var prefixedKey = _namePrefix + "_" + key;
                var prefixEvents = _getItemsFromPreviousKey(prefixedKey);
                items = items[
                  _DYN_CONCAT
                  /* @min:%2econcat */
                ](prefixEvents);
              }
            });
            return items;
          } catch (e) {
            _throwInternal(logger, 2, 41, "Transfer events from previous buffers: " + getExceptionName(e) + ". previous Buffer items can not be removed", {
              exception: dumpObj(e)
            });
          }
          return [];
        }
        function _getItemsFromPreviousKey(key) {
          try {
            var items = _getBufferBase(key);
            var transFormedItems_1 = [];
            arrForEach(items, function(item) {
              var internalItem = {
                item,
                cnt: 0
                // previous events will be default to 0 count
              };
              transFormedItems_1[
                _DYN_PUSH2
                /* @min:%2epush */
              ](internalItem);
            });
            utlRemoveSessionStorage(logger, key);
            return transFormedItems_1;
          } catch (e) {
          }
          return [];
        }
      });
      return _this;
    }
    var _a12;
    _a12 = SessionStorageSendBuffer2;
    SessionStorageSendBuffer2.VERSION = "_1";
    SessionStorageSendBuffer2.BUFFER_KEY = "AI_buffer" + _a12.VERSION;
    SessionStorageSendBuffer2.SENT_BUFFER_KEY = "AI_sentBuffer" + _a12.VERSION;
    SessionStorageSendBuffer2.MAX_BUFFER_SIZE = 2e3;
    return SessionStorageSendBuffer2;
  }(BaseSendBuffer)
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/Serializer.js
var Serializer = (
  /** @class */
  function() {
    function Serializer2(logger) {
      dynamicProto(Serializer2, this, function(_self) {
        _self.serialize = function(input2) {
          var output = _serializeObject(input2, "root");
          try {
            return getJSON()[
              _DYN_STRINGIFY2
              /* @min:%2estringify */
            ](output);
          } catch (e) {
            _throwInternal(logger, 1, 48, e && isFunction3(e[
              _DYN_TO_STRING3
              /* @min:%2etoString */
            ]) ? e[
              _DYN_TO_STRING3
              /* @min:%2etoString */
            ]() : "Error serializing object", null, true);
          }
        };
        function _serializeObject(source, name) {
          var circularReferenceCheck = "__aiCircularRefCheck";
          var output = {};
          if (!source) {
            _throwInternal(logger, 1, 48, "cannot serialize object because it is null or undefined", {
              name
            }, true);
            return output;
          }
          if (source[circularReferenceCheck]) {
            _throwInternal(logger, 2, 50, "Circular reference detected while serializing object", {
              name
            }, true);
            return output;
          }
          if (!source.aiDataContract) {
            if (name === "measurements") {
              output = _serializeStringMap(source, "number", name);
            } else if (name === "properties") {
              output = _serializeStringMap(source, "string", name);
            } else if (name === "tags") {
              output = _serializeStringMap(source, "string", name);
            } else if (isArray3(source)) {
              output = _serializeArray(source, name);
            } else {
              _throwInternal(logger, 2, 49, "Attempting to serialize an object which does not implement ISerializable", {
                name
              }, true);
              try {
                getJSON()[
                  _DYN_STRINGIFY2
                  /* @min:%2estringify */
                ](source);
                output = source;
              } catch (e) {
                _throwInternal(logger, 1, 48, e && isFunction3(e[
                  _DYN_TO_STRING3
                  /* @min:%2etoString */
                ]) ? e[
                  _DYN_TO_STRING3
                  /* @min:%2etoString */
                ]() : "Error serializing object", null, true);
              }
            }
            return output;
          }
          source[circularReferenceCheck] = true;
          objForEachKey(source.aiDataContract, function(field, contract) {
            var isRequired = isFunction3(contract) ? contract() & 1 : contract & 1;
            var isHidden = isFunction3(contract) ? contract() & 4 : contract & 4;
            var isArray4 = contract & 2;
            var isPresent = source[field] !== void 0;
            var isObj = isObject(source[field]) && source[field] !== null;
            if (isRequired && !isPresent && !isArray4) {
              _throwInternal(logger, 1, 24, "Missing required field specification. The field is required but not present on source", {
                field,
                name
              });
            } else if (!isHidden) {
              var value = void 0;
              if (isObj) {
                if (isArray4) {
                  value = _serializeArray(source[field], field);
                } else {
                  value = _serializeObject(source[field], field);
                }
              } else {
                value = source[field];
              }
              if (value !== void 0) {
                output[field] = value;
              }
            }
          });
          delete source[circularReferenceCheck];
          return output;
        }
        function _serializeArray(sources, name) {
          var output;
          if (!!sources) {
            if (!isArray3(sources)) {
              _throwInternal(logger, 1, 54, "This field was specified as an array in the contract but the item is not an array.\r\n", {
                name
              }, true);
            } else {
              output = [];
              for (var i = 0; i < sources[
                _DYN_LENGTH4
                /* @min:%2elength */
              ]; i++) {
                var source = sources[i];
                var item = _serializeObject(source, name + "[" + i + "]");
                output[
                  _DYN_PUSH2
                  /* @min:%2epush */
                ](item);
              }
            }
          }
          return output;
        }
        function _serializeStringMap(map2, expectedType, name) {
          var output;
          if (map2) {
            output = {};
            objForEachKey(map2, function(field, value) {
              if (expectedType === "string") {
                if (value === void 0) {
                  output[field] = "undefined";
                } else if (value === null) {
                  output[field] = "null";
                } else if (!value[
                  _DYN_TO_STRING3
                  /* @min:%2etoString */
                ]) {
                  output[field] = "invalid field: toString() is not defined.";
                } else {
                  output[field] = value[
                    _DYN_TO_STRING3
                    /* @min:%2etoString */
                  ]();
                }
              } else if (expectedType === "number") {
                if (value === void 0) {
                  output[field] = "undefined";
                } else if (value === null) {
                  output[field] = "null";
                } else {
                  var num = parseFloat(value);
                  output[field] = num;
                }
              } else {
                output[field] = "invalid field: " + name + " is of unknown type.";
                _throwInternal(logger, 1, output[field], null, true);
              }
            });
          }
          return output;
        }
      });
    }
    Serializer2.__ieDyn = 1;
    return Serializer2;
  }()
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js
var MIN_INPUT_LENGTH = 8;
var HashCodeScoreGenerator = (
  /** @class */
  function() {
    function HashCodeScoreGenerator2() {
    }
    HashCodeScoreGenerator2.prototype.getHashCodeScore = function(key) {
      var score = this.getHashCode(key) / HashCodeScoreGenerator2.INT_MAX_VALUE;
      return score * 100;
    };
    HashCodeScoreGenerator2.prototype.getHashCode = function(input2) {
      if (input2 === "") {
        return 0;
      }
      while (input2[
        _DYN_LENGTH4
        /* @min:%2elength */
      ] < MIN_INPUT_LENGTH) {
        input2 = input2[
          _DYN_CONCAT
          /* @min:%2econcat */
        ](input2);
      }
      var hash = 5381;
      for (var i = 0; i < input2[
        _DYN_LENGTH4
        /* @min:%2elength */
      ]; ++i) {
        hash = (hash << 5) + hash + input2.charCodeAt(i);
        hash = hash & hash;
      }
      return Math.abs(hash);
    };
    HashCodeScoreGenerator2.INT_MAX_VALUE = 2147483647;
    return HashCodeScoreGenerator2;
  }()
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/TelemetryProcessors/SamplingScoreGenerators/SamplingScoreGenerator.js
var SamplingScoreGenerator = (
  /** @class */
  /* @__PURE__ */ function() {
    function SamplingScoreGenerator2() {
      var _self = this;
      var hashCodeGenerator = new HashCodeScoreGenerator();
      var keys = new ContextTagKeys();
      _self.getSamplingScore = function(item) {
        var score = 0;
        if (item[
          _DYN_TAGS
          /* @min:%2etags */
        ] && item[
          _DYN_TAGS
          /* @min:%2etags */
        ][keys.userId]) {
          score = hashCodeGenerator.getHashCodeScore(item[
            _DYN_TAGS
            /* @min:%2etags */
          ][keys.userId]);
        } else if (item.ext && item.ext.user && item.ext.user.id) {
          score = hashCodeGenerator[
            _DYN_GET_HASH_CODE_SCORE
            /* @min:%2egetHashCodeScore */
          ](item.ext.user.id);
        } else if (item[
          _DYN_TAGS
          /* @min:%2etags */
        ] && item[
          _DYN_TAGS
          /* @min:%2etags */
        ][keys.operationId]) {
          score = hashCodeGenerator.getHashCodeScore(item[
            _DYN_TAGS
            /* @min:%2etags */
          ][keys.operationId]);
        } else if (item.ext && item.ext.telemetryTrace && item.ext.telemetryTrace[
          _DYN_TRACE_ID
          /* @min:%2etraceID */
        ]) {
          score = hashCodeGenerator.getHashCodeScore(item.ext.telemetryTrace[
            _DYN_TRACE_ID
            /* @min:%2etraceID */
          ]);
        } else {
          score = Math.random() * 100;
        }
        return score;
      };
    }
    return SamplingScoreGenerator2;
  }()
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/TelemetryProcessors/Sample.js
var Sample = (
  /** @class */
  function() {
    function Sample2(sampleRate, logger) {
      this.INT_MAX_VALUE = 2147483647;
      var _logger = logger || safeGetLogger(null);
      if (sampleRate > 100 || sampleRate < 0) {
        _logger.throwInternal(2, 58, "Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.", {
          samplingRate: sampleRate
        }, true);
        sampleRate = 100;
      }
      this[
        _DYN_SAMPLE_RATE
        /* @min:%2esampleRate */
      ] = sampleRate;
      this.samplingScoreGenerator = new SamplingScoreGenerator();
    }
    Sample2.prototype.isSampledIn = function(envelope) {
      var samplingPercentage = this[
        _DYN_SAMPLE_RATE
        /* @min:%2esampleRate */
      ];
      var isSampledIn = false;
      if (samplingPercentage === null || samplingPercentage === void 0 || samplingPercentage >= 100) {
        return true;
      } else if (envelope.baseType === Metric[
        _DYN_DATA_TYPE2
        /* @min:%2edataType */
      ]) {
        return true;
      }
      isSampledIn = this.samplingScoreGenerator.getSamplingScore(envelope) < samplingPercentage;
      return isSampledIn;
    };
    return Sample2;
  }()
);

// node_modules/@microsoft/applicationinsights-channel-js/dist-es5/Sender.js
var _a8;
var _b2;
var UNDEFINED_VALUE2 = void 0;
var EMPTY_STR = "";
var FetchSyncRequestSizeLimitBytes = 65e3;
function _getResponseText(xhr) {
  try {
    return xhr.responseText;
  } catch (e) {
  }
  return null;
}
function isOverrideFn(httpXHROverride) {
  return httpXHROverride && httpXHROverride.sendPOST;
}
var defaultAppInsightsChannelConfig = objDeepFreeze((_a8 = {
  // Use the default value (handles empty string in the configuration)
  endpointUrl: cfgDfValidate(isTruthy, DEFAULT_BREEZE_ENDPOINT + DEFAULT_BREEZE_PATH)
}, _a8[
  _DYN_EMIT_LINE_DELIMITED_0
  /* @min:emitLineDelimitedJson */
] = cfgDfBoolean(), _a8.maxBatchInterval = 15e3, _a8[
  _DYN_MAX_BATCH_SIZE_IN_BY1
  /* @min:maxBatchSizeInBytes */
] = 102400, _a8.disableTelemetry = cfgDfBoolean(), _a8[
  _DYN_ENABLE_SESSION_STORA5
  /* @min:enableSessionStorageBuffer */
] = cfgDfBoolean(true), _a8.isRetryDisabled = cfgDfBoolean(), _a8[
  _DYN_IS_BEACON_API_DISABL3
  /* @min:isBeaconApiDisabled */
] = cfgDfBoolean(true), _a8[
  _DYN_DISABLE_SEND_BEACON_7
  /* @min:disableSendBeaconSplit */
] = cfgDfBoolean(true), _a8.disableXhr = cfgDfBoolean(), _a8[
  _DYN_ONUNLOAD_DISABLE_FET6
  /* @min:onunloadDisableFetch */
] = cfgDfBoolean(), _a8[
  _DYN_ONUNLOAD_DISABLE_BEA2
  /* @min:onunloadDisableBeacon */
] = cfgDfBoolean(), _a8[
  _DYN_INSTRUMENTATION_KEY
  /* @min:instrumentationKey */
] = UNDEFINED_VALUE2, _a8.namePrefix = UNDEFINED_VALUE2, _a8.samplingPercentage = cfgDfValidate(_chkSampling2, 100), _a8[
  _DYN_CUSTOM_HEADERS
  /* @min:customHeaders */
] = UNDEFINED_VALUE2, _a8.convertUndefined = UNDEFINED_VALUE2, _a8.eventsLimitInMem = 1e4, _a8[
  _DYN_BUFFER_OVERRIDE
  /* @min:bufferOverride */
] = false, _a8.httpXHROverride = {
  isVal: isOverrideFn,
  v: UNDEFINED_VALUE2
}, _a8[
  _DYN_ALWAYS_USE_XHR_OVERR4
  /* @min:alwaysUseXhrOverride */
] = cfgDfBoolean(), _a8.transports = UNDEFINED_VALUE2, _a8.retryCodes = UNDEFINED_VALUE2, _a8.maxRetryCnt = {
  isVal: isNumber,
  v: 10
}, _a8));
function _chkSampling2(value) {
  return !isNaN(value) && value > 0 && value <= 100;
}
var EnvelopeTypeCreator = (_b2 = {}, _b2[Event2.dataType] = EventEnvelopeCreator, _b2[Trace.dataType] = TraceEnvelopeCreator, _b2[PageView.dataType] = PageViewEnvelopeCreator, _b2[PageViewPerformance.dataType] = PageViewPerformanceEnvelopeCreator, _b2[Exception.dataType] = ExceptionEnvelopeCreator, _b2[Metric.dataType] = MetricEnvelopeCreator, _b2[RemoteDependencyData.dataType] = DependencyEnvelopeCreator, _b2);
var Sender = (
  /** @class */
  function(_super) {
    __extendsFn(Sender2, _super);
    function Sender2() {
      var _this = _super.call(this) || this;
      _this.priority = 1001;
      _this.identifier = BreezeChannelIdentifier;
      var _consecutiveErrors;
      var _retryAt;
      var _lastSend;
      var _paused;
      var _timeoutHandle;
      var _serializer;
      var _stamp_specific_redirects;
      var _headers;
      var _syncFetchPayload = 0;
      var _syncUnloadSender;
      var _offlineListener;
      var _evtNamespace;
      var _endpointUrl;
      var _orgEndpointUrl;
      var _maxBatchSizeInBytes;
      var _beaconSupported;
      var _beaconOnUnloadSupported;
      var _beaconNormalSupported;
      var _customHeaders;
      var _disableTelemetry;
      var _instrumentationKey;
      var _convertUndefined;
      var _isRetryDisabled;
      var _maxBatchInterval;
      var _sessionStorageUsed;
      var _bufferOverrideUsed;
      var _namePrefix;
      var _enableSendPromise;
      var _alwaysUseCustomSend;
      var _disableXhr;
      var _fetchKeepAlive;
      var _xhrSend;
      var _fallbackSend;
      var _disableBeaconSplit;
      var _sendPostMgr;
      var _retryCodes;
      dynamicProto(Sender2, _this, function(_self, _base) {
        _initDefaults();
        _self.pause = function() {
          _clearScheduledTimer();
          _paused = true;
        };
        _self.resume = function() {
          if (_paused) {
            _paused = false;
            _retryAt = null;
            _checkMaxSize();
            _setupTimer();
          }
        };
        _self.flush = function(isAsync, callBack, sendReason) {
          if (isAsync === void 0) {
            isAsync = true;
          }
          if (!_paused) {
            _clearScheduledTimer();
            try {
              return _self[
                _DYN_TRIGGER_SEND
                /* @min:%2etriggerSend */
              ](
                isAsync,
                null,
                sendReason || 1
                /* SendRequestReason.ManualFlush */
              );
            } catch (e) {
              _throwInternal(_self[
                _DYN_DIAG_LOG3
                /* @min:%2ediagLog */
              ](), 1, 22, "flush failed, telemetry will not be collected: " + getExceptionName(e), {
                exception: dumpObj(e)
              });
            }
          }
        };
        _self.onunloadFlush = function() {
          if (!_paused) {
            if (_beaconSupported || _alwaysUseCustomSend) {
              try {
                return _self[
                  _DYN_TRIGGER_SEND
                  /* @min:%2etriggerSend */
                ](
                  true,
                  _doUnloadSend,
                  2
                  /* SendRequestReason.Unload */
                );
              } catch (e) {
                _throwInternal(_self[
                  _DYN_DIAG_LOG3
                  /* @min:%2ediagLog */
                ](), 1, 20, "failed to flush with beacon sender on page unload, telemetry will not be collected: " + getExceptionName(e), {
                  exception: dumpObj(e)
                });
              }
            } else {
              _self.flush(false);
            }
          }
        };
        _self.addHeader = function(name, value) {
          _headers[name] = value;
        };
        _self[
          _DYN_INITIALIZE2
          /* @min:%2einitialize */
        ] = function(config2, core, extensions, pluginChain) {
          if (_self.isInitialized()) {
            _throwInternal(_self[
              _DYN_DIAG_LOG3
              /* @min:%2ediagLog */
            ](), 1, 28, "Sender is already initialized");
          }
          _base[
            _DYN_INITIALIZE2
            /* @min:%2einitialize */
          ](config2, core, extensions, pluginChain);
          var identifier = _self.identifier;
          _serializer = new Serializer(core.logger);
          _consecutiveErrors = 0;
          _retryAt = null;
          _lastSend = 0;
          _self[
            _DYN__SENDER
            /* @min:%2e_sender */
          ] = null;
          _stamp_specific_redirects = 0;
          var diagLog = _self[
            _DYN_DIAG_LOG3
            /* @min:%2ediagLog */
          ]();
          _evtNamespace = mergeEvtNamespace(createUniqueNamespace("Sender"), core.evtNamespace && core.evtNamespace());
          _offlineListener = createOfflineListener(_evtNamespace);
          _self._addHook(onConfigChange(config2, function(details) {
            var config3 = details.cfg;
            if (config3.storagePrefix) {
              utlSetStoragePrefix(config3.storagePrefix);
            }
            var ctx = createProcessTelemetryContext(null, config3, core);
            var senderConfig = ctx.getExtCfg(identifier, defaultAppInsightsChannelConfig);
            var curExtUrl = senderConfig[
              _DYN_ENDPOINT_URL
              /* @min:%2eendpointUrl */
            ];
            if (_endpointUrl && curExtUrl === _endpointUrl) {
              var coreUrl = config3[
                _DYN_ENDPOINT_URL
                /* @min:%2eendpointUrl */
              ];
              if (coreUrl && coreUrl !== curExtUrl) {
                senderConfig[
                  _DYN_ENDPOINT_URL
                  /* @min:%2eendpointUrl */
                ] = coreUrl;
              }
            }
            if (isPromiseLike(senderConfig[
              _DYN_INSTRUMENTATION_KEY
              /* @min:%2einstrumentationKey */
            ])) {
              senderConfig[
                _DYN_INSTRUMENTATION_KEY
                /* @min:%2einstrumentationKey */
              ] = config3[
                _DYN_INSTRUMENTATION_KEY
                /* @min:%2einstrumentationKey */
              ];
            }
            objDefine(_self, "_senderConfig", {
              g: function() {
                return senderConfig;
              }
            });
            if (_orgEndpointUrl !== senderConfig[
              _DYN_ENDPOINT_URL
              /* @min:%2eendpointUrl */
            ]) {
              if (_orgEndpointUrl) {
              }
              _endpointUrl = _orgEndpointUrl = senderConfig[
                _DYN_ENDPOINT_URL
                /* @min:%2eendpointUrl */
              ];
            }
            if (core.activeStatus() === ActiveStatus.PENDING) {
              _self.pause();
            } else if (core.activeStatus() === ActiveStatus.ACTIVE) {
              _self.resume();
            }
            if (_customHeaders && _customHeaders !== senderConfig[
              _DYN_CUSTOM_HEADERS
              /* @min:%2ecustomHeaders */
            ]) {
              arrForEach(_customHeaders, function(customHeader) {
                delete _headers[customHeader.header];
              });
            }
            _maxBatchSizeInBytes = senderConfig[
              _DYN_MAX_BATCH_SIZE_IN_BY1
              /* @min:%2emaxBatchSizeInBytes */
            ];
            _beaconSupported = (senderConfig[
              _DYN_ONUNLOAD_DISABLE_BEA2
              /* @min:%2eonunloadDisableBeacon */
            ] === false || senderConfig[
              _DYN_IS_BEACON_API_DISABL3
              /* @min:%2eisBeaconApiDisabled */
            ] === false) && isBeaconsSupported();
            _beaconOnUnloadSupported = senderConfig[
              _DYN_ONUNLOAD_DISABLE_BEA2
              /* @min:%2eonunloadDisableBeacon */
            ] === false && isBeaconsSupported();
            _beaconNormalSupported = senderConfig[
              _DYN_IS_BEACON_API_DISABL3
              /* @min:%2eisBeaconApiDisabled */
            ] === false && isBeaconsSupported();
            _alwaysUseCustomSend = senderConfig[
              _DYN_ALWAYS_USE_XHR_OVERR4
              /* @min:%2ealwaysUseXhrOverride */
            ];
            _disableXhr = !!senderConfig.disableXhr;
            _retryCodes = senderConfig.retryCodes;
            var bufferOverride = senderConfig[
              _DYN_BUFFER_OVERRIDE
              /* @min:%2ebufferOverride */
            ];
            var canUseSessionStorage = !!senderConfig[
              _DYN_ENABLE_SESSION_STORA5
              /* @min:%2eenableSessionStorageBuffer */
            ] && (!!bufferOverride || utlCanUseSessionStorage());
            var namePrefix = senderConfig.namePrefix;
            var shouldUpdate = canUseSessionStorage !== _sessionStorageUsed || canUseSessionStorage && _namePrefix !== namePrefix || canUseSessionStorage && _bufferOverrideUsed !== bufferOverride;
            if (_self[
              _DYN__BUFFER
              /* @min:%2e_buffer */
            ]) {
              if (shouldUpdate) {
                try {
                  _self[
                    _DYN__BUFFER
                    /* @min:%2e_buffer */
                  ] = _self[
                    _DYN__BUFFER
                    /* @min:%2e_buffer */
                  ].createNew(diagLog, senderConfig, canUseSessionStorage);
                } catch (e) {
                  _throwInternal(_self[
                    _DYN_DIAG_LOG3
                    /* @min:%2ediagLog */
                  ](), 1, 12, "failed to transfer telemetry to different buffer storage, telemetry will be lost: " + getExceptionName(e), {
                    exception: dumpObj(e)
                  });
                }
              }
              _checkMaxSize();
            } else {
              _self[
                _DYN__BUFFER
                /* @min:%2e_buffer */
              ] = canUseSessionStorage ? new SessionStorageSendBuffer(diagLog, senderConfig) : new ArraySendBuffer(diagLog, senderConfig);
            }
            _namePrefix = namePrefix;
            _sessionStorageUsed = canUseSessionStorage;
            _bufferOverrideUsed = bufferOverride;
            _fetchKeepAlive = !senderConfig[
              _DYN_ONUNLOAD_DISABLE_FET6
              /* @min:%2eonunloadDisableFetch */
            ] && isFetchSupported(true);
            _disableBeaconSplit = !!senderConfig[
              _DYN_DISABLE_SEND_BEACON_7
              /* @min:%2edisableSendBeaconSplit */
            ];
            _self._sample = new Sample(senderConfig.samplingPercentage, diagLog);
            _instrumentationKey = senderConfig[
              _DYN_INSTRUMENTATION_KEY
              /* @min:%2einstrumentationKey */
            ];
            if (!isPromiseLike(_instrumentationKey) && !_validateInstrumentationKey(_instrumentationKey, config3)) {
              _throwInternal(diagLog, 1, 100, "Invalid Instrumentation key " + _instrumentationKey);
            }
            _customHeaders = senderConfig[
              _DYN_CUSTOM_HEADERS
              /* @min:%2ecustomHeaders */
            ];
            if (isString(_endpointUrl) && !isInternalApplicationInsightsEndpoint(_endpointUrl) && _customHeaders && _customHeaders[
              _DYN_LENGTH4
              /* @min:%2elength */
            ] > 0) {
              arrForEach(_customHeaders, function(customHeader) {
                _this.addHeader(customHeader.header, customHeader.value);
              });
            } else {
              _customHeaders = null;
            }
            _enableSendPromise = senderConfig.enableSendPromise;
            var sendPostConfig = _getSendPostMgrConfig();
            if (!_sendPostMgr) {
              _sendPostMgr = new SenderPostManager();
              _sendPostMgr[
                _DYN_INITIALIZE2
                /* @min:%2einitialize */
              ](sendPostConfig, diagLog);
            } else {
              _sendPostMgr.SetConfig(sendPostConfig);
            }
            var customInterface = senderConfig.httpXHROverride;
            var httpInterface = null;
            var syncInterface = null;
            var theTransports = prependTransports([
              3,
              1,
              2
              /* TransportType.Fetch */
            ], senderConfig.transports);
            httpInterface = _sendPostMgr && _sendPostMgr[
              _DYN_GET_SENDER_INST
              /* @min:%2egetSenderInst */
            ](theTransports, false);
            var xhrInterface = _sendPostMgr && _sendPostMgr.getFallbackInst();
            _xhrSend = function(payload, isAsync) {
              return _doSend(xhrInterface, payload, isAsync);
            };
            _fallbackSend = function(payload, isAsync) {
              return _doSend(xhrInterface, payload, isAsync, false);
            };
            httpInterface = _alwaysUseCustomSend ? customInterface : httpInterface || customInterface || xhrInterface;
            _self[
              _DYN__SENDER
              /* @min:%2e_sender */
            ] = function(payload, isAsync) {
              return _doSend(httpInterface, payload, isAsync);
            };
            if (_fetchKeepAlive) {
              _syncUnloadSender = _fetchKeepAliveSender;
            }
            var syncTransports = prependTransports([
              3,
              1
              /* TransportType.Xhr */
            ], senderConfig.unloadTransports);
            if (!_fetchKeepAlive) {
              syncTransports = syncTransports.filter(function(transport) {
                return transport !== 2;
              });
            }
            syncInterface = _sendPostMgr && _sendPostMgr[
              _DYN_GET_SENDER_INST
              /* @min:%2egetSenderInst */
            ](syncTransports, true);
            syncInterface = _alwaysUseCustomSend ? customInterface : syncInterface || customInterface;
            if ((_alwaysUseCustomSend || senderConfig.unloadTransports || !_syncUnloadSender) && syncInterface) {
              _syncUnloadSender = function(payload, isAsync) {
                return _doSend(syncInterface, payload, isAsync);
              };
            }
            if (!_syncUnloadSender) {
              _syncUnloadSender = _xhrSend;
            }
            _disableTelemetry = senderConfig.disableTelemetry;
            _convertUndefined = senderConfig.convertUndefined || UNDEFINED_VALUE2;
            _isRetryDisabled = senderConfig.isRetryDisabled;
            _maxBatchInterval = senderConfig.maxBatchInterval;
          }));
        };
        _self.processTelemetry = function(telemetryItem, itemCtx) {
          itemCtx = _self._getTelCtx(itemCtx);
          var diagLogger = itemCtx[
            _DYN_DIAG_LOG3
            /* @min:%2ediagLog */
          ]();
          try {
            var isValidate = _validate(telemetryItem, diagLogger);
            if (!isValidate) {
              return;
            }
            var aiEnvelope = _getEnvelope(telemetryItem, diagLogger);
            if (!aiEnvelope) {
              return;
            }
            var payload = _serializer.serialize(aiEnvelope);
            var buffer = _self[
              _DYN__BUFFER
              /* @min:%2e_buffer */
            ];
            _checkMaxSize(payload);
            var payloadItem = {
              item: payload,
              cnt: 0
              // inital cnt will always be 0
            };
            buffer[
              _DYN_ENQUEUE
              /* @min:%2eenqueue */
            ](payloadItem);
            _setupTimer();
          } catch (e) {
            _throwInternal(diagLogger, 2, 12, "Failed adding telemetry to the sender's buffer, some telemetry will be lost: " + getExceptionName(e), {
              exception: dumpObj(e)
            });
          }
          _self.processNext(telemetryItem, itemCtx);
        };
        _self.isCompletelyIdle = function() {
          return !_paused && _syncFetchPayload === 0 && _self._buffer[
            _DYN_COUNT2
            /* @min:%2ecount */
          ]() === 0;
        };
        _self.getOfflineListener = function() {
          return _offlineListener;
        };
        _self._xhrReadyStateChange = function(xhr, payload, countOfItemsInPayload) {
          if (_isStringArr(payload)) {
            return;
          }
          return _xhrReadyStateChange(xhr, payload, countOfItemsInPayload);
        };
        _self[
          _DYN_TRIGGER_SEND
          /* @min:%2etriggerSend */
        ] = function(async, forcedSender, sendReason) {
          if (async === void 0) {
            async = true;
          }
          var result;
          if (!_paused) {
            try {
              var buffer = _self[
                _DYN__BUFFER
                /* @min:%2e_buffer */
              ];
              if (!_disableTelemetry) {
                if (buffer[
                  _DYN_COUNT2
                  /* @min:%2ecount */
                ]() > 0) {
                  var payload = buffer.getItems();
                  _notifySendRequest(sendReason || 0, async);
                  if (forcedSender) {
                    result = forcedSender.call(_self, payload, async);
                  } else {
                    result = _self[
                      _DYN__SENDER
                      /* @min:%2e_sender */
                    ](payload, async);
                  }
                }
                _lastSend = +/* @__PURE__ */ new Date();
              } else {
                buffer[
                  _DYN_CLEAR
                  /* @min:%2eclear */
                ]();
              }
              _clearScheduledTimer();
            } catch (e) {
              var ieVer = getIEVersion();
              if (!ieVer || ieVer > 9) {
                _throwInternal(_self[
                  _DYN_DIAG_LOG3
                  /* @min:%2ediagLog */
                ](), 1, 40, "Telemetry transmission failed, some telemetry will be lost: " + getExceptionName(e), {
                  exception: dumpObj(e)
                });
              }
            }
          }
          return result;
        };
        _self.getOfflineSupport = function() {
          return {
            getUrl: function() {
              return _endpointUrl;
            },
            createPayload: _createPayload,
            serialize: _serialize,
            batch: _batch,
            shouldProcess: function(evt) {
              return !!_validate(evt);
            }
          };
        };
        _self._doTeardown = function(unloadCtx, unloadState) {
          _self.onunloadFlush();
          runTargetUnload(_offlineListener, false);
          _initDefaults();
        };
        _self[
          _DYN__ON_ERROR
          /* @min:%2e_onError */
        ] = function(payload, message, event) {
          if (_isStringArr(payload)) {
            return;
          }
          return _onError(payload, message, event);
        };
        _self[
          _DYN__ON_PARTIAL_SUCCESS
          /* @min:%2e_onPartialSuccess */
        ] = function(payload, results) {
          if (_isStringArr(payload)) {
            return;
          }
          return _onPartialSuccess(payload, results);
        };
        _self[
          _DYN__ON_SUCCESS
          /* @min:%2e_onSuccess */
        ] = function(payload, countOfItemsInPayload) {
          if (_isStringArr(payload)) {
            return;
          }
          return _onSuccess(payload, countOfItemsInPayload);
        };
        _self._xdrOnLoad = function(xdr, payload) {
          if (_isStringArr(payload)) {
            return;
          }
          return _xdrOnLoad(xdr, payload);
        };
        function _xdrOnLoad(xdr, payload) {
          var responseText = _getResponseText(xdr);
          if (xdr && (responseText + "" === "200" || responseText === "")) {
            _consecutiveErrors = 0;
            _self[
              _DYN__ON_SUCCESS
              /* @min:%2e_onSuccess */
            ](payload, 0);
          } else {
            var results = parseResponse(responseText);
            if (results && results[
              _DYN_ITEMS_RECEIVED2
              /* @min:%2eitemsReceived */
            ] && results[
              _DYN_ITEMS_RECEIVED2
              /* @min:%2eitemsReceived */
            ] > results[
              _DYN_ITEMS_ACCEPTED
              /* @min:%2eitemsAccepted */
            ] && !_isRetryDisabled) {
              _self[
                _DYN__ON_PARTIAL_SUCCESS
                /* @min:%2e_onPartialSuccess */
              ](payload, results);
            } else {
              _self[
                _DYN__ON_ERROR
                /* @min:%2e_onError */
              ](payload, formatErrorMessageXdr(xdr));
            }
          }
        }
        function _getSendPostMgrConfig() {
          try {
            var onCompleteFuncs = {
              xdrOnComplete: function(xdr, oncomplete, payload) {
                var data = _getPayloadArr(payload);
                if (!data) {
                  return;
                }
                return _xdrOnLoad(xdr, data);
              },
              fetchOnComplete: function(response, onComplete, resValue, payload) {
                var data = _getPayloadArr(payload);
                if (!data) {
                  return;
                }
                return _checkResponsStatus(response.status, data, response.url, data[
                  _DYN_LENGTH4
                  /* @min:%2elength */
                ], response.statusText, resValue || "");
              },
              xhrOnComplete: function(request, oncomplete, payload) {
                var data = _getPayloadArr(payload);
                if (!data) {
                  return;
                }
                return _xhrReadyStateChange(request, data, data[
                  _DYN_LENGTH4
                  /* @min:%2elength */
                ]);
              },
              beaconOnRetry: function(data, onComplete, canSend) {
                return _onBeaconRetry(data, onComplete, canSend);
              }
            };
            var config2 = {
              enableSendPromise: _enableSendPromise,
              isOneDs: false,
              disableCredentials: false,
              disableXhr: _disableXhr,
              disableBeacon: !_beaconNormalSupported,
              disableBeaconSync: !_beaconOnUnloadSupported,
              senderOnCompleteCallBack: onCompleteFuncs
            };
            return config2;
          } catch (e) {
          }
          return null;
        }
        function _xhrReadyStateChange(xhr, payload, countOfItemsInPayload) {
          if (xhr.readyState === 4) {
            _checkResponsStatus(xhr.status, payload, xhr.responseURL, countOfItemsInPayload, formatErrorMessageXhr(xhr), _getResponseText(xhr) || xhr.response);
          }
        }
        function _onError(payload, message, event) {
          _throwInternal(_self[
            _DYN_DIAG_LOG3
            /* @min:%2ediagLog */
          ](), 2, 26, "Failed to send telemetry.", {
            message
          });
          _self._buffer && _self._buffer[
            _DYN_CLEAR_SENT
            /* @min:%2eclearSent */
          ](payload);
        }
        function _onPartialSuccess(payload, results) {
          var failed = [];
          var retry = [];
          var errors = results.errors.reverse();
          for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
            var error = errors_1[_i];
            var extracted = payload.splice(error.index, 1)[0];
            if (_isRetriable(error.statusCode)) {
              retry[
                _DYN_PUSH2
                /* @min:%2epush */
              ](extracted);
            } else {
              failed[
                _DYN_PUSH2
                /* @min:%2epush */
              ](extracted);
            }
          }
          if (payload[
            _DYN_LENGTH4
            /* @min:%2elength */
          ] > 0) {
            _self[
              _DYN__ON_SUCCESS
              /* @min:%2e_onSuccess */
            ](payload, results[
              _DYN_ITEMS_ACCEPTED
              /* @min:%2eitemsAccepted */
            ]);
          }
          if (failed[
            _DYN_LENGTH4
            /* @min:%2elength */
          ] > 0) {
            _self[
              _DYN__ON_ERROR
              /* @min:%2e_onError */
            ](failed, formatErrorMessageXhr(null, ["partial success", results[
              _DYN_ITEMS_ACCEPTED
              /* @min:%2eitemsAccepted */
            ], "of", results.itemsReceived].join(" ")));
          }
          if (retry[
            _DYN_LENGTH4
            /* @min:%2elength */
          ] > 0) {
            _resendPayload(retry);
            _throwInternal(_self[
              _DYN_DIAG_LOG3
              /* @min:%2ediagLog */
            ](), 2, 40, "Partial success. Delivered: " + payload[
              _DYN_LENGTH4
              /* @min:%2elength */
            ] + ", Failed: " + failed[
              _DYN_LENGTH4
              /* @min:%2elength */
            ] + ". Will retry to send " + retry[
              _DYN_LENGTH4
              /* @min:%2elength */
            ] + " our of " + results[
              _DYN_ITEMS_RECEIVED2
              /* @min:%2eitemsReceived */
            ] + " items");
          }
        }
        function _onSuccess(payload, countOfItemsInPayload) {
          _self._buffer && _self._buffer[
            _DYN_CLEAR_SENT
            /* @min:%2eclearSent */
          ](payload);
        }
        function _getPayloadArr(payload) {
          try {
            if (payload) {
              var internalPayload = payload;
              var arr = internalPayload.oriPayload;
              if (arr && arr[
                _DYN_LENGTH4
                /* @min:%2elength */
              ]) {
                return arr;
              }
              return null;
            }
          } catch (e) {
          }
          return null;
        }
        function _validate(telemetryItem, diagLogger) {
          if (_disableTelemetry) {
            return false;
          }
          if (!telemetryItem) {
            diagLogger && _throwInternal(diagLogger, 1, 7, "Cannot send empty telemetry");
            return false;
          }
          if (telemetryItem.baseData && !telemetryItem[
            _DYN_BASE_TYPE
            /* @min:%2ebaseType */
          ]) {
            diagLogger && _throwInternal(diagLogger, 1, 70, "Cannot send telemetry without baseData and baseType");
            return false;
          }
          if (!telemetryItem[
            _DYN_BASE_TYPE
            /* @min:%2ebaseType */
          ]) {
            telemetryItem[
              _DYN_BASE_TYPE
              /* @min:%2ebaseType */
            ] = "EventData";
          }
          if (!_self[
            _DYN__SENDER
            /* @min:%2e_sender */
          ]) {
            diagLogger && _throwInternal(diagLogger, 1, 28, "Sender was not initialized");
            return false;
          }
          if (!_isSampledIn(telemetryItem)) {
            diagLogger && _throwInternal(diagLogger, 2, 33, "Telemetry item was sampled out and not sent", {
              SampleRate: _self._sample[
                _DYN_SAMPLE_RATE
                /* @min:%2esampleRate */
              ]
            });
            return false;
          } else {
            telemetryItem[SampleRate] = _self._sample[
              _DYN_SAMPLE_RATE
              /* @min:%2esampleRate */
            ];
          }
          return true;
        }
        function _getEnvelope(telemetryItem, diagLogger) {
          var defaultEnvelopeIkey = telemetryItem.iKey || _instrumentationKey;
          var aiEnvelope = Sender2.constructEnvelope(telemetryItem, defaultEnvelopeIkey, diagLogger, _convertUndefined);
          if (!aiEnvelope) {
            _throwInternal(diagLogger, 1, 47, "Unable to create an AppInsights envelope");
            return;
          }
          var doNotSendItem = false;
          if (telemetryItem[
            _DYN_TAGS
            /* @min:%2etags */
          ] && telemetryItem[
            _DYN_TAGS
            /* @min:%2etags */
          ][ProcessLegacy]) {
            arrForEach(telemetryItem[
              _DYN_TAGS
              /* @min:%2etags */
            ][ProcessLegacy], function(callBack) {
              try {
                if (callBack && callBack(aiEnvelope) === false) {
                  doNotSendItem = true;
                  _warnToConsole(diagLogger, "Telemetry processor check returns false");
                }
              } catch (e) {
                _throwInternal(diagLogger, 1, 64, "One of telemetry initializers failed, telemetry item will not be sent: " + getExceptionName(e), {
                  exception: dumpObj(e)
                }, true);
              }
            });
            delete telemetryItem[
              _DYN_TAGS
              /* @min:%2etags */
            ][ProcessLegacy];
          }
          if (doNotSendItem) {
            return;
          }
          return aiEnvelope;
        }
        function _serialize(item) {
          var rlt = EMPTY_STR;
          var diagLogger = _self[
            _DYN_DIAG_LOG3
            /* @min:%2ediagLog */
          ]();
          try {
            var valid = _validate(item, diagLogger);
            var envelope = null;
            if (valid) {
              envelope = _getEnvelope(item, diagLogger);
            }
            if (envelope) {
              rlt = _serializer.serialize(envelope);
            }
          } catch (e) {
          }
          return rlt;
        }
        function _batch(arr) {
          var rlt = EMPTY_STR;
          if (arr && arr[
            _DYN_LENGTH4
            /* @min:%2elength */
          ]) {
            rlt = "[" + arr.join(",") + "]";
          }
          return rlt;
        }
        function _createPayload(data) {
          var headers = _getHeaders();
          return {
            urlString: _endpointUrl,
            data,
            headers
          };
        }
        function _isSampledIn(envelope) {
          return _self._sample.isSampledIn(envelope);
        }
        function _getOnComplete(payload, status, headers, response) {
          if (status === 200 && payload) {
            _self._onSuccess(payload, payload[
              _DYN_LENGTH4
              /* @min:%2elength */
            ]);
          } else {
            response && _self[
              _DYN__ON_ERROR
              /* @min:%2e_onError */
            ](payload, response);
          }
        }
        function _doSend(sendInterface, payload, isAsync, markAsSent) {
          if (markAsSent === void 0) {
            markAsSent = true;
          }
          var onComplete = function(status, headers, response) {
            return _getOnComplete(payload, status, headers, response);
          };
          var payloadData = _getPayload(payload);
          var sendPostFunc = sendInterface && sendInterface.sendPOST;
          if (sendPostFunc && payloadData) {
            if (markAsSent) {
              _self._buffer[
                _DYN_MARK_AS_SENT
                /* @min:%2emarkAsSent */
              ](payload);
            }
            return sendPostFunc(payloadData, onComplete, !isAsync);
          }
          return null;
        }
        function _getPayload(payload) {
          if (isArray3(payload) && payload[
            _DYN_LENGTH4
            /* @min:%2elength */
          ] > 0) {
            var batch = _self[
              _DYN__BUFFER
              /* @min:%2e_buffer */
            ].batchPayloads(payload);
            var headers = _getHeaders();
            var payloadData = {
              data: batch,
              urlString: _endpointUrl,
              headers,
              disableXhrSync: _disableXhr,
              disableFetchKeepAlive: !_fetchKeepAlive,
              oriPayload: payload
            };
            return payloadData;
          }
          return null;
        }
        function _getHeaders() {
          try {
            var headers = _headers || {};
            if (isInternalApplicationInsightsEndpoint(_endpointUrl)) {
              headers[RequestHeaders[
                6
                /* eRequestHeaders.sdkContextHeader */
              ]] = RequestHeaders[
                7
                /* eRequestHeaders.sdkContextHeaderAppIdRequest */
              ];
            }
            return headers;
          } catch (e) {
          }
          return null;
        }
        function _checkMaxSize(incomingPayload) {
          var incomingSize = incomingPayload ? incomingPayload[
            _DYN_LENGTH4
            /* @min:%2elength */
          ] : 0;
          if (_self[
            _DYN__BUFFER
            /* @min:%2e_buffer */
          ].size() + incomingSize > _maxBatchSizeInBytes) {
            if (!_offlineListener || _offlineListener.isOnline()) {
              _self[
                _DYN_TRIGGER_SEND
                /* @min:%2etriggerSend */
              ](
                true,
                null,
                10
                /* SendRequestReason.MaxBatchSize */
              );
            }
            return true;
          }
          return false;
        }
        function _checkResponsStatus(status, payload, responseUrl, countOfItemsInPayload, errorMessage, res) {
          var response = null;
          if (!_self._appId) {
            response = parseResponse(res);
            if (response && response.appId) {
              _self._appId = response.appId;
            }
          }
          if ((status < 200 || status >= 300) && status !== 0) {
            if (status === 301 || status === 307 || status === 308) {
              if (!_checkAndUpdateEndPointUrl(responseUrl)) {
                _self[
                  _DYN__ON_ERROR
                  /* @min:%2e_onError */
                ](payload, errorMessage);
                return;
              }
            }
            if (_offlineListener && !_offlineListener.isOnline()) {
              if (!_isRetryDisabled) {
                var offlineBackOffMultiplier = 10;
                _resendPayload(payload, offlineBackOffMultiplier);
                _throwInternal(_self[
                  _DYN_DIAG_LOG3
                  /* @min:%2ediagLog */
                ](), 2, 40, ". Offline - Response Code: ".concat(status, ". Offline status: ").concat(!_offlineListener.isOnline(), ". Will retry to send ").concat(payload.length, " items."));
              }
              return;
            }
            if (!_isRetryDisabled && _isRetriable(status)) {
              _resendPayload(payload);
              _throwInternal(_self[
                _DYN_DIAG_LOG3
                /* @min:%2ediagLog */
              ](), 2, 40, ". Response code " + status + ". Will retry to send " + payload[
                _DYN_LENGTH4
                /* @min:%2elength */
              ] + " items.");
            } else {
              _self[
                _DYN__ON_ERROR
                /* @min:%2e_onError */
              ](payload, errorMessage);
            }
          } else {
            _checkAndUpdateEndPointUrl(responseUrl);
            if (status === 206) {
              if (!response) {
                response = parseResponse(res);
              }
              if (response && !_isRetryDisabled) {
                _self[
                  _DYN__ON_PARTIAL_SUCCESS
                  /* @min:%2e_onPartialSuccess */
                ](payload, response);
              } else {
                _self[
                  _DYN__ON_ERROR
                  /* @min:%2e_onError */
                ](payload, errorMessage);
              }
            } else {
              _consecutiveErrors = 0;
              _self[
                _DYN__ON_SUCCESS
                /* @min:%2e_onSuccess */
              ](payload, countOfItemsInPayload);
            }
          }
        }
        function _checkAndUpdateEndPointUrl(responseUrl) {
          if (_stamp_specific_redirects >= 10) {
            return false;
          }
          if (!isNullOrUndefined(responseUrl) && responseUrl !== "") {
            if (responseUrl !== _endpointUrl) {
              _endpointUrl = responseUrl;
              ++_stamp_specific_redirects;
              return true;
            }
          }
          return false;
        }
        function _doUnloadSend(payload, isAsync) {
          if (_syncUnloadSender) {
            _syncUnloadSender(payload, false);
          } else {
            var beaconInst = _sendPostMgr && _sendPostMgr[
              _DYN_GET_SENDER_INST
              /* @min:%2egetSenderInst */
            ]([
              3
              /* TransportType.Beacon */
            ], true);
            return _doSend(beaconInst, payload, isAsync);
          }
        }
        function _onBeaconRetry(payload, onComplete, canSend) {
          var internalPayload = payload;
          var data = internalPayload && internalPayload.oriPayload;
          if (!_disableBeaconSplit) {
            var droppedPayload = [];
            for (var lp = 0; lp < data[
              _DYN_LENGTH4
              /* @min:%2elength */
            ]; lp++) {
              var thePayload = data[lp];
              var arr = [thePayload];
              var item = _getPayload(arr);
              if (!canSend(item, onComplete)) {
                droppedPayload[
                  _DYN_PUSH2
                  /* @min:%2epush */
                ](thePayload);
              } else {
                _self._onSuccess(arr, arr[
                  _DYN_LENGTH4
                  /* @min:%2elength */
                ]);
              }
            }
            if (droppedPayload[
              _DYN_LENGTH4
              /* @min:%2elength */
            ] > 0) {
              _fallbackSend && _fallbackSend(droppedPayload, true);
              _throwInternal(_self[
                _DYN_DIAG_LOG3
                /* @min:%2ediagLog */
              ](), 2, 40, ". Failed to send telemetry with Beacon API, retried with normal sender.");
            }
          } else {
            _fallbackSend && _fallbackSend(data, true);
            _throwInternal(_self[
              _DYN_DIAG_LOG3
              /* @min:%2ediagLog */
            ](), 2, 40, ". Failed to send telemetry with Beacon API, retried with normal sender.");
          }
        }
        function _isStringArr(arr) {
          try {
            if (arr && arr[
              _DYN_LENGTH4
              /* @min:%2elength */
            ]) {
              return isString(arr[0]);
            }
          } catch (e) {
          }
          return null;
        }
        function _fetchKeepAliveSender(payload, isAsync) {
          var transport = null;
          if (isArray3(payload)) {
            var payloadSize = payload[
              _DYN_LENGTH4
              /* @min:%2elength */
            ];
            for (var lp = 0; lp < payload[
              _DYN_LENGTH4
              /* @min:%2elength */
            ]; lp++) {
              payloadSize += payload[lp].item[
                _DYN_LENGTH4
                /* @min:%2elength */
              ];
            }
            var syncFetchPayload = _sendPostMgr.getSyncFetchPayload();
            if (syncFetchPayload + payloadSize <= FetchSyncRequestSizeLimitBytes) {
              transport = 2;
            } else if (isBeaconsSupported()) {
              transport = 3;
            } else {
              transport = 1;
              _throwInternal(_self[
                _DYN_DIAG_LOG3
                /* @min:%2ediagLog */
              ](), 2, 40, ". Failed to send telemetry with Beacon API, retried with xhrSender.");
            }
            var inst = _sendPostMgr && _sendPostMgr[
              _DYN_GET_SENDER_INST
              /* @min:%2egetSenderInst */
            ]([transport], true);
            return _doSend(inst, payload, isAsync);
          }
          return null;
        }
        function _resendPayload(payload, linearFactor) {
          if (linearFactor === void 0) {
            linearFactor = 1;
          }
          if (!payload || payload[
            _DYN_LENGTH4
            /* @min:%2elength */
          ] === 0) {
            return;
          }
          var buffer = _self[
            _DYN__BUFFER
            /* @min:%2e_buffer */
          ];
          buffer[
            _DYN_CLEAR_SENT
            /* @min:%2eclearSent */
          ](payload);
          _consecutiveErrors++;
          for (var _i = 0, payload_1 = payload; _i < payload_1.length; _i++) {
            var item = payload_1[_i];
            item.cnt = item.cnt || 0;
            item.cnt++;
            buffer[
              _DYN_ENQUEUE
              /* @min:%2eenqueue */
            ](item);
          }
          _setRetryTime(linearFactor);
          _setupTimer();
        }
        function _setRetryTime(linearFactor) {
          var SlotDelayInSeconds = 10;
          var delayInSeconds;
          if (_consecutiveErrors <= 1) {
            delayInSeconds = SlotDelayInSeconds;
          } else {
            var backOffSlot = (Math.pow(2, _consecutiveErrors) - 1) / 2;
            var backOffDelay = mathFloor(Math.random() * backOffSlot * SlotDelayInSeconds) + 1;
            backOffDelay = linearFactor * backOffDelay;
            delayInSeconds = mathMax(mathMin(backOffDelay, 3600), SlotDelayInSeconds);
          }
          var retryAfterTimeSpan = utcNow() + delayInSeconds * 1e3;
          _retryAt = retryAfterTimeSpan;
        }
        function _setupTimer() {
          if (!_timeoutHandle && !_paused) {
            var retryInterval = _retryAt ? mathMax(0, _retryAt - utcNow()) : 0;
            var timerValue = mathMax(_maxBatchInterval, retryInterval);
            _timeoutHandle = scheduleTimeout(function() {
              _timeoutHandle = null;
              _self[
                _DYN_TRIGGER_SEND
                /* @min:%2etriggerSend */
              ](
                true,
                null,
                1
                /* SendRequestReason.NormalSchedule */
              );
            }, timerValue);
          }
        }
        function _clearScheduledTimer() {
          _timeoutHandle && _timeoutHandle.cancel();
          _timeoutHandle = null;
          _retryAt = null;
        }
        function _isRetriable(statusCode) {
          if (!isNullOrUndefined(_retryCodes)) {
            return _retryCodes[
              _DYN_LENGTH4
              /* @min:%2elength */
            ] && _retryCodes.indexOf(statusCode) > -1;
          }
          return statusCode === 401 || statusCode === 408 || statusCode === 429 || statusCode === 500 || statusCode === 502 || statusCode === 503 || statusCode === 504;
        }
        function _getNotifyMgr() {
          var func = "getNotifyMgr";
          if (_self.core[func]) {
            return _self.core[func]();
          }
          return _self.core["_notificationManager"];
        }
        function _notifySendRequest(sendRequest, isAsync) {
          var manager = _getNotifyMgr();
          if (manager && manager.eventsSendRequest) {
            try {
              manager.eventsSendRequest(sendRequest, isAsync);
            } catch (e) {
              _throwInternal(_self[
                _DYN_DIAG_LOG3
                /* @min:%2ediagLog */
              ](), 1, 74, "send request notification failed: " + getExceptionName(e), {
                exception: dumpObj(e)
              });
            }
          }
        }
        function _validateInstrumentationKey(instrumentationKey, config2) {
          var disableValidation = config2.disableInstrumentationKeyValidation;
          var disableIKeyValidationFlag = isNullOrUndefined(disableValidation) ? false : disableValidation;
          if (disableIKeyValidationFlag) {
            return true;
          }
          var UUID_Regex = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$";
          var regexp = new RegExp(UUID_Regex);
          return regexp.test(instrumentationKey);
        }
        function _initDefaults() {
          _self[
            _DYN__SENDER
            /* @min:%2e_sender */
          ] = null;
          _self[
            _DYN__BUFFER
            /* @min:%2e_buffer */
          ] = null;
          _self._appId = null;
          _self._sample = null;
          _headers = {};
          _offlineListener = null;
          _consecutiveErrors = 0;
          _retryAt = null;
          _lastSend = null;
          _paused = false;
          _timeoutHandle = null;
          _serializer = null;
          _stamp_specific_redirects = 0;
          _syncFetchPayload = 0;
          _syncUnloadSender = null;
          _evtNamespace = null;
          _endpointUrl = null;
          _orgEndpointUrl = null;
          _maxBatchSizeInBytes = 0;
          _beaconSupported = false;
          _customHeaders = null;
          _disableTelemetry = false;
          _instrumentationKey = null;
          _convertUndefined = UNDEFINED_VALUE2;
          _isRetryDisabled = false;
          _sessionStorageUsed = null;
          _namePrefix = UNDEFINED_VALUE2;
          _disableXhr = false;
          _fetchKeepAlive = false;
          _disableBeaconSplit = false;
          _xhrSend = null;
          _fallbackSend = null;
          _sendPostMgr = null;
          objDefine(_self, "_senderConfig", {
            g: function() {
              return objExtend2({}, defaultAppInsightsChannelConfig);
            }
          });
        }
      });
      return _this;
    }
    Sender2.constructEnvelope = function(orig, iKey, logger, convertUndefined) {
      var envelope;
      if (iKey !== orig.iKey && !isNullOrUndefined(iKey)) {
        envelope = __assignFn(__assignFn({}, orig), {
          iKey
        });
      } else {
        envelope = orig;
      }
      var creator = EnvelopeTypeCreator[envelope.baseType] || EventEnvelopeCreator;
      return creator(logger, envelope, convertUndefined);
    };
    return Sender2;
  }(BaseTelemetryPlugin)
);

// node_modules/@microsoft/applicationinsights-dependencies-js/dist-es5/InternalConstants.js
var STR_DURATION2 = "duration";
var STR_PROPERTIES = "properties";

// node_modules/@microsoft/applicationinsights-dependencies-js/dist-es5/__DynamicConstants.js
var _DYN_REQUEST_URL = "requestUrl";
var _DYN_LENGTH5 = "length";
var _DYN_TRACE_ID2 = "traceID";
var _DYN_SPAN_ID = "spanID";
var _DYN_TRACE_FLAGS2 = "traceFlags";
var _DYN_CONTEXT = "context";
var _DYN_ABORTED = "aborted";
var _DYN__ADD_HOOK2 = "_addHook";
var _DYN_CORE2 = "core";
var _DYN_INCLUDE_CORRELATION_0 = "includeCorrelationHeaders";
var _DYN_GET_ABSOLUTE_URL = "getAbsoluteUrl";
var _DYN_HEADERS2 = "headers";
var _DYN_REQUEST_HEADERS = "requestHeaders";
var _DYN_SET_REQUEST_HEADER = "setRequestHeader";
var _DYN_TRACK_DEPENDENCY_DAT1 = "trackDependencyDataInternal";
var _DYN_START_TIME2 = "startTime";
var _DYN_TO_LOWER_CASE3 = "toLowerCase";
var _DYN_ENABLE_REQUEST_HEADE2 = "enableRequestHeaderTracking";
var _DYN_ENABLE_AJAX_ERROR_ST3 = "enableAjaxErrorStatusText";
var _DYN_ENABLE_AJAX_PERF_TRA4 = "enableAjaxPerfTracking";
var _DYN_MAX_AJAX_CALLS_PER_V5 = "maxAjaxCallsPerView";
var _DYN_EXCLUDE_REQUEST_FROM6 = "excludeRequestFromAutoTrackingPatterns";
var _DYN_DISABLE_AJAX_TRACKIN7 = "disableAjaxTracking";
var _DYN_AJAX_PERF_LOOKUP_DEL8 = "ajaxPerfLookupDelay";
var _DYN_DISABLE_FETCH_TRACKI9 = "disableFetchTracking";
var _DYN_ENABLE_RESPONSE_HEAD10 = "enableResponseHeaderTracking";
var _DYN_STATUS2 = "status";
var _DYN_STATUS_TEXT = "statusText";
var _DYN_HEADER_MAP = "headerMap";
var _DYN_REQUEST_SENT_TIME = "requestSentTime";
var _DYN_GET_TRACE_ID = "getTraceId";
var _DYN_GET_TRACE_FLAGS = "getTraceFlags";
var _DYN_METHOD = "method";
var _DYN_ERROR_STATUS_TEXT = "errorStatusText";
var _DYN_STATE_CHANGE_ATTACHE11 = "stateChangeAttached";
var _DYN_RESPONSE_TEXT = "responseText";
var _DYN_RESPONSE_FINISHED_TI12 = "responseFinishedTime";
var _DYN__CREATE_TRACK_ITEM = "CreateTrackItem";
var _DYN_GET_ALL_RESPONSE_HEA13 = "getAllResponseHeaders";
var _DYN_GET_PART_APROPS = "getPartAProps";
var _DYN_PERF_MARK = "perfMark";
var _DYN_PERF_TIMING = "perfTiming";
var _DYN_AJAX_DIAGNOSTICS_MES14 = "ajaxDiagnosticsMessage";
var _DYN_CORRELATION_CONTEXT = "correlationContext";
var _DYN_AJAX_TOTAL_DURATION = "ajaxTotalDuration";
var _DYN_EVENT_TRACE_CTX = "eventTraceCtx";

// node_modules/@microsoft/applicationinsights-dependencies-js/dist-es5/ajaxRecord.js
function _calcPerfDuration(resourceEntry, start, end) {
  var result = 0;
  var from2 = resourceEntry[start];
  var to = resourceEntry[end];
  if (from2 && to) {
    result = dateTimeUtilsDuration(from2, to);
  }
  return result;
}
function _setPerfDuration(props, name, resourceEntry, start, end) {
  var result = 0;
  var value = _calcPerfDuration(resourceEntry, start, end);
  if (value) {
    result = _setPerfValue(props, name, msToTimeSpan(value));
  }
  return result;
}
function _setPerfValue(props, name, value) {
  var strPerf = "ajaxPerf";
  var result = 0;
  if (props && name && value) {
    var perfData = props[strPerf] = props[strPerf] || {};
    perfData[name] = value;
    result = 1;
  }
  return result;
}
function _populatePerfData(ajaxData, dependency) {
  var resourceEntry = ajaxData[
    _DYN_PERF_TIMING
    /* @min:%2eperfTiming */
  ];
  var props = dependency[
    STR_PROPERTIES
    /* @min:%2eproperties */
  ] || {};
  var propsSet = 0;
  var strName = "name";
  var strStart = "Start";
  var strEnd = "End";
  var strDomainLookup = "domainLookup";
  var strConnect = "connect";
  var strRedirect = "redirect";
  var strRequest = "request";
  var strResponse = "response";
  var strStartTime = "startTime";
  var strDomainLookupStart = strDomainLookup + strStart;
  var strDomainLookupEnd = strDomainLookup + strEnd;
  var strConnectStart = strConnect + strStart;
  var strConnectEnd = strConnect + strEnd;
  var strRequestStart = strRequest + strStart;
  var strRequestEnd = strRequest + strEnd;
  var strResponseStart = strResponse + strStart;
  var strResponseEnd = strResponse + strEnd;
  var strRedirectStart = strRedirect + strStart;
  var strRedirectEnd = strRedirect = strEnd;
  var strTransferSize = "transferSize";
  var strEncodedBodySize = "encodedBodySize";
  var strDecodedBodySize = "decodedBodySize";
  var strServerTiming = "serverTiming";
  if (resourceEntry) {
    propsSet |= _setPerfDuration(props, strRedirect, resourceEntry, strRedirectStart, strRedirectEnd);
    propsSet |= _setPerfDuration(props, strDomainLookup, resourceEntry, strDomainLookupStart, strDomainLookupEnd);
    propsSet |= _setPerfDuration(props, strConnect, resourceEntry, strConnectStart, strConnectEnd);
    propsSet |= _setPerfDuration(props, strRequest, resourceEntry, strRequestStart, strRequestEnd);
    propsSet |= _setPerfDuration(props, strResponse, resourceEntry, strResponseStart, strResponseEnd);
    propsSet |= _setPerfDuration(props, "networkConnect", resourceEntry, strStartTime, strConnectEnd);
    propsSet |= _setPerfDuration(props, "sentRequest", resourceEntry, strRequestStart, strResponseEnd);
    var duration = resourceEntry[
      STR_DURATION2
      /* @min:%2eduration */
    ];
    if (!duration) {
      duration = _calcPerfDuration(resourceEntry, strStartTime, strResponseEnd) || 0;
    }
    propsSet |= _setPerfValue(props, STR_DURATION2, duration);
    propsSet |= _setPerfValue(props, "perfTotal", duration);
    var serverTiming = resourceEntry[strServerTiming];
    if (serverTiming) {
      var server_1 = {};
      arrForEach(serverTiming, function(value, idx) {
        var name = normalizeJsName(value[strName] || "" + idx);
        var newValue = server_1[name] || {};
        objForEachKey(value, function(key, val) {
          if (key !== strName && isString(val) || isNumber(val)) {
            if (newValue[key]) {
              val = newValue[key] + ";" + val;
            }
            if (val || !isString(val)) {
              newValue[key] = val;
            }
          }
        });
        server_1[name] = newValue;
      });
      propsSet |= _setPerfValue(props, strServerTiming, server_1);
    }
    propsSet |= _setPerfValue(props, strTransferSize, resourceEntry[strTransferSize]);
    propsSet |= _setPerfValue(props, strEncodedBodySize, resourceEntry[strEncodedBodySize]);
    propsSet |= _setPerfValue(props, strDecodedBodySize, resourceEntry[strDecodedBodySize]);
  } else {
    if (ajaxData[
      _DYN_PERF_MARK
      /* @min:%2eperfMark */
    ]) {
      propsSet |= _setPerfValue(props, "missing", ajaxData.perfAttempts);
    }
  }
  if (propsSet) {
    dependency[
      STR_PROPERTIES
      /* @min:%2eproperties */
    ] = props;
  }
}
var XHRMonitoringState = (
  /** @class */
  /* @__PURE__ */ function() {
    function XHRMonitoringState2() {
      var self2 = this;
      self2.openDone = false;
      self2.setRequestHeaderDone = false;
      self2.sendDone = false;
      self2.abortDone = false;
      self2[
        _DYN_STATE_CHANGE_ATTACHE11
        /* @min:%2estateChangeAttached */
      ] = false;
    }
    return XHRMonitoringState2;
  }()
);
var ajaxRecord = (
  /** @class */
  function() {
    function ajaxRecord2(traceId, spanId, logger, traceCtx) {
      var self2 = this;
      var _logger = logger;
      var strResponseText = "responseText";
      self2[
        _DYN_PERF_MARK
        /* @min:%2eperfMark */
      ] = null;
      self2.completed = false;
      self2.requestHeadersSize = null;
      self2[
        _DYN_REQUEST_HEADERS
        /* @min:%2erequestHeaders */
      ] = null;
      self2.responseReceivingDuration = null;
      self2.callbackDuration = null;
      self2[
        _DYN_AJAX_TOTAL_DURATION
        /* @min:%2eajaxTotalDuration */
      ] = null;
      self2[
        _DYN_ABORTED
        /* @min:%2eaborted */
      ] = 0;
      self2.pageUrl = null;
      self2[
        _DYN_REQUEST_URL
        /* @min:%2erequestUrl */
      ] = null;
      self2.requestSize = 0;
      self2[
        _DYN_METHOD
        /* @min:%2emethod */
      ] = null;
      self2[
        _DYN_STATUS2
        /* @min:%2estatus */
      ] = null;
      self2[
        _DYN_REQUEST_SENT_TIME
        /* @min:%2erequestSentTime */
      ] = null;
      self2.responseStartedTime = null;
      self2[
        _DYN_RESPONSE_FINISHED_TI12
        /* @min:%2eresponseFinishedTime */
      ] = null;
      self2.callbackFinishedTime = null;
      self2.endTime = null;
      self2.xhrMonitoringState = new XHRMonitoringState();
      self2.clientFailure = 0;
      self2[
        _DYN_TRACE_ID2
        /* @min:%2etraceID */
      ] = traceId;
      self2[
        _DYN_SPAN_ID
        /* @min:%2espanID */
      ] = spanId;
      self2[
        _DYN_TRACE_FLAGS2
        /* @min:%2etraceFlags */
      ] = traceCtx === null || traceCtx === void 0 ? void 0 : traceCtx.getTraceFlags();
      if (traceCtx) {
        self2[
          _DYN_EVENT_TRACE_CTX
          /* @min:%2eeventTraceCtx */
        ] = {
          traceId: traceCtx[
            _DYN_GET_TRACE_ID
            /* @min:%2egetTraceId */
          ](),
          spanId: traceCtx.getSpanId(),
          traceFlags: traceCtx[
            _DYN_GET_TRACE_FLAGS
            /* @min:%2egetTraceFlags */
          ]()
        };
      } else {
        self2[
          _DYN_EVENT_TRACE_CTX
          /* @min:%2eeventTraceCtx */
        ] = null;
      }
      dynamicProto(ajaxRecord2, self2, function(self3) {
        self3.getAbsoluteUrl = function() {
          return self3[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ] ? urlGetAbsoluteUrl(self3[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ]) : null;
        };
        self3.getPathName = function() {
          return self3[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ] ? dataSanitizeUrl(_logger, urlGetCompleteUrl(self3[
            _DYN_METHOD
            /* @min:%2emethod */
          ], self3[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ])) : null;
        };
        self3[
          _DYN__CREATE_TRACK_ITEM
          /* @min:%2eCreateTrackItem */
        ] = function(ajaxType, enableRequestHeaderTracking, getResponse) {
          var _a12;
          self3.ajaxTotalDuration = mathRound(dateTimeUtilsDuration(self3.requestSentTime, self3.responseFinishedTime) * 1e3) / 1e3;
          if (self3[
            _DYN_AJAX_TOTAL_DURATION
            /* @min:%2eajaxTotalDuration */
          ] < 0) {
            return null;
          }
          var dependency = (_a12 = {
            id: "|" + self3[
              _DYN_TRACE_ID2
              /* @min:%2etraceID */
            ] + "." + self3[
              _DYN_SPAN_ID
              /* @min:%2espanID */
            ],
            target: self3[
              _DYN_GET_ABSOLUTE_URL
              /* @min:%2egetAbsoluteUrl */
            ](),
            name: self3.getPathName(),
            type: ajaxType,
            startTime: null,
            duration: self3[
              _DYN_AJAX_TOTAL_DURATION
              /* @min:%2eajaxTotalDuration */
            ],
            success: +self3[
              _DYN_STATUS2
              /* @min:%2estatus */
            ] >= 200 && +self3[
              _DYN_STATUS2
              /* @min:%2estatus */
            ] < 400,
            responseCode: +self3[
              _DYN_STATUS2
              /* @min:%2estatus */
            ]
          }, _a12[STR_PROPERTIES] = {
            HttpMethod: self3[
              _DYN_METHOD
              /* @min:%2emethod */
            ]
          }, _a12);
          var props = dependency[STR_PROPERTIES];
          if (self3[
            _DYN_ABORTED
            /* @min:%2eaborted */
          ]) {
            props[
              _DYN_ABORTED
              /* @min:%2eaborted */
            ] = true;
          }
          if (self3[
            _DYN_REQUEST_SENT_TIME
            /* @min:%2erequestSentTime */
          ]) {
            dependency[
              _DYN_START_TIME2
              /* @min:%2estartTime */
            ] = /* @__PURE__ */ new Date();
            dependency[
              _DYN_START_TIME2
              /* @min:%2estartTime */
            ].setTime(self3[
              _DYN_REQUEST_SENT_TIME
              /* @min:%2erequestSentTime */
            ]);
          }
          _populatePerfData(self3, dependency);
          if (enableRequestHeaderTracking) {
            if (objKeys(self3.requestHeaders)[
              _DYN_LENGTH5
              /* @min:%2elength */
            ] > 0) {
              props[
                _DYN_REQUEST_HEADERS
                /* @min:%2erequestHeaders */
              ] = self3[
                _DYN_REQUEST_HEADERS
                /* @min:%2erequestHeaders */
              ];
            }
          }
          if (getResponse) {
            var response = getResponse();
            if (response) {
              var correlationContext = response[
                _DYN_CORRELATION_CONTEXT
                /* @min:%2ecorrelationContext */
              ];
              if (correlationContext) {
                dependency.correlationContext = /* dependency.target + " | " + */
                correlationContext;
              }
              if (response[
                _DYN_HEADER_MAP
                /* @min:%2eheaderMap */
              ]) {
                if (objKeys(response.headerMap)[
                  _DYN_LENGTH5
                  /* @min:%2elength */
                ] > 0) {
                  props.responseHeaders = response[
                    _DYN_HEADER_MAP
                    /* @min:%2eheaderMap */
                  ];
                }
              }
              if (self3[
                _DYN_ERROR_STATUS_TEXT
                /* @min:%2eerrorStatusText */
              ]) {
                if (self3[
                  _DYN_STATUS2
                  /* @min:%2estatus */
                ] >= 400) {
                  var responseType = response.type;
                  if (responseType === "" || responseType === "text") {
                    props.responseText = response.responseText ? response[
                      _DYN_STATUS_TEXT
                      /* @min:%2estatusText */
                    ] + " - " + response[strResponseText] : response[
                      _DYN_STATUS_TEXT
                      /* @min:%2estatusText */
                    ];
                  }
                  if (responseType === "json") {
                    props.responseText = response.response ? response[
                      _DYN_STATUS_TEXT
                      /* @min:%2estatusText */
                    ] + " - " + JSON.stringify(response.response) : response[
                      _DYN_STATUS_TEXT
                      /* @min:%2estatusText */
                    ];
                  }
                } else if (self3[
                  _DYN_STATUS2
                  /* @min:%2estatus */
                ] === 0) {
                  props.responseText = response[
                    _DYN_STATUS_TEXT
                    /* @min:%2estatusText */
                  ] || "";
                }
              }
            }
          }
          return dependency;
        };
        self3[
          _DYN_GET_PART_APROPS
          /* @min:%2egetPartAProps */
        ] = function() {
          var partA = null;
          var traceCtx2 = self3[
            _DYN_EVENT_TRACE_CTX
            /* @min:%2eeventTraceCtx */
          ];
          if (traceCtx2 && (traceCtx2.traceId || traceCtx2.spanId)) {
            partA = {};
            var traceExt = partA[Extensions.TraceExt] = {
              traceID: traceCtx2.traceId,
              parentID: traceCtx2.spanId
            };
            if (!isNullOrUndefined(traceCtx2[
              _DYN_TRACE_FLAGS2
              /* @min:%2etraceFlags */
            ])) {
              traceExt[
                _DYN_TRACE_FLAGS2
                /* @min:%2etraceFlags */
              ] = traceCtx2[
                _DYN_TRACE_FLAGS2
                /* @min:%2etraceFlags */
              ];
            }
          }
          return partA;
        };
      });
    }
    ajaxRecord2.__ieDyn = 1;
    return ajaxRecord2;
  }()
);

// node_modules/@microsoft/applicationinsights-dependencies-js/dist-es5/ajax.js
var _a9;
var strDiagLog = "diagLog";
var AJAX_DATA_CONTAINER = "_ajaxData";
var STR_FETCH = "fetch";
var ERROR_HEADER = "Failed to monitor XMLHttpRequest";
var ERROR_PREFIX = ", monitoring data for this ajax call ";
var ERROR_POSTFIX = ERROR_PREFIX + "may be incorrect.";
var ERROR_NOT_SENT = ERROR_PREFIX + "won't be sent.";
var CORRELATION_HEADER_ERROR = "Failed to get Request-Context correlation header as it may be not included in the response or not accessible.";
var CUSTOM_REQUEST_CONTEXT_ERROR = "Failed to add custom defined request context as configured call back may missing a null check.";
var FAILED_TO_CALCULATE_DURATION_ERROR = "Failed to calculate the duration of the ";
var _markCount = 0;
function _supportsFetch() {
  var _global2 = getGlobal();
  if (!_global2 || isNullOrUndefined(_global2.Request) || isNullOrUndefined(_global2.Request[strShimPrototype]) || isNullOrUndefined(_global2[STR_FETCH])) {
    return null;
  }
  return _global2[STR_FETCH];
}
function _supportsAjaxMonitoring(ajaxMonitorInstance, ajaxDataId) {
  var _a12;
  var result = false;
  if (isXhrSupported()) {
    var proto = XMLHttpRequest[strShimPrototype];
    result = !isNullOrUndefined(proto) && !isNullOrUndefined(proto.open) && // eslint-disable-line security/detect-non-literal-fs-filename -- false positive
    !isNullOrUndefined(proto.send) && !isNullOrUndefined(proto.abort);
  }
  var ieVer = getIEVersion();
  if (ieVer && ieVer < 9) {
    result = false;
  }
  if (result) {
    try {
      var xhr = new XMLHttpRequest();
      var xhrData = {
        xh: [],
        i: (_a12 = {}, _a12[ajaxDataId] = {}, _a12)
      };
      xhr[AJAX_DATA_CONTAINER] = xhrData;
      var theOpen = XMLHttpRequest[strShimPrototype].open;
      XMLHttpRequest[strShimPrototype].open = theOpen;
    } catch (e) {
      result = false;
      _throwInternalCritical(ajaxMonitorInstance, 15, "Failed to enable XMLHttpRequest monitoring, extension is not supported", {
        exception: dumpObj(e)
      });
    }
  }
  return result;
}
var _getAjaxData = function(xhr, ajaxDataId) {
  if (xhr && ajaxDataId && xhr[AJAX_DATA_CONTAINER]) {
    return (xhr[AJAX_DATA_CONTAINER].i || {})[ajaxDataId];
  }
  return null;
};
var _addSharedXhrHeaders = function(xhr, name, value) {
  if (xhr) {
    var headers = (xhr[AJAX_DATA_CONTAINER] || {}).xh;
    if (headers) {
      headers.push({
        n: name,
        v: value
      });
    }
  }
};
var _isHeaderSet = function(xhr, name) {
  var isPresent = false;
  if (xhr) {
    var headers = (xhr[AJAX_DATA_CONTAINER] || {}).xh;
    if (headers) {
      arrForEach(headers, function(header) {
        if (header.n === name) {
          isPresent = true;
          return -1;
        }
      });
    }
  }
  return isPresent;
};
function _getFailedAjaxDiagnosticsMessage(xhr, ajaxDataId) {
  var result = "";
  try {
    var ajaxData = _getAjaxData(xhr, ajaxDataId);
    if (ajaxData && ajaxData[
      _DYN_REQUEST_URL
      /* @min:%2erequestUrl */
    ]) {
      result += "(url: '" + ajaxData[
        _DYN_REQUEST_URL
        /* @min:%2erequestUrl */
      ] + "')";
    }
  } catch (e) {
  }
  return result;
}
function _throwInternalCritical(ajaxMonitorInstance, msgId, message, properties, isUserAct) {
  _throwInternal(ajaxMonitorInstance[strDiagLog](), 1, msgId, message, properties, isUserAct);
}
function _throwInternalWarning(ajaxMonitorInstance, msgId, message, properties, isUserAct) {
  _throwInternal(ajaxMonitorInstance[strDiagLog](), 2, msgId, message, properties, isUserAct);
}
function _createErrorCallbackFunc(ajaxMonitorInstance, internalMessage, message) {
  return function(callDetails) {
    var _a12;
    _throwInternalCritical(ajaxMonitorInstance, internalMessage, message, (_a12 = {}, _a12[
      _DYN_AJAX_DIAGNOSTICS_MES14
      /* @min:ajaxDiagnosticsMessage */
    ] = _getFailedAjaxDiagnosticsMessage(callDetails.inst, ajaxMonitorInstance._ajaxDataId), _a12.exception = dumpObj(callDetails.err), _a12));
  };
}
function _indexOf(value, match2) {
  if (value && match2) {
    return strIndexOf(value, match2);
  }
  return -1;
}
function _addHandler(container, id, theFunc) {
  var theHandler = {
    id,
    fn: theFunc
  };
  container.push(theHandler);
  return {
    remove: function() {
      arrForEach(container, function(initializer, idx) {
        if (initializer.id === theHandler.id) {
          container.splice(idx, 1);
          return -1;
        }
      });
    }
  };
}
function _processDependencyContainer(core, container, details, message) {
  var result = true;
  arrForEach(container, function(theFunc, idx) {
    try {
      if (theFunc.fn.call(null, details) === false) {
        result = false;
      }
    } catch (e) {
      _throwInternal(core && core.logger, 1, 64, "Dependency " + message + " [#" + idx + "] failed: " + getExceptionName(e), {
        exception: dumpObj(e)
      }, true);
    }
  });
  return result;
}
function _processDependencyListeners(listeners, core, ajaxData, xhr, input2, init) {
  var initializersCount = listeners[
    _DYN_LENGTH5
    /* @min:%2elength */
  ];
  if (initializersCount > 0) {
    var details = {
      core,
      xhr,
      input: input2,
      init,
      traceId: ajaxData[
        _DYN_TRACE_ID2
        /* @min:%2etraceID */
      ],
      spanId: ajaxData[
        _DYN_SPAN_ID
        /* @min:%2espanID */
      ],
      traceFlags: ajaxData[
        _DYN_TRACE_FLAGS2
        /* @min:%2etraceFlags */
      ],
      context: ajaxData[
        _DYN_CONTEXT
        /* @min:%2econtext */
      ] || {},
      aborted: !!ajaxData[
        _DYN_ABORTED
        /* @min:%2eaborted */
      ]
    };
    _processDependencyContainer(core, listeners, details, "listener");
    ajaxData[
      _DYN_TRACE_ID2
      /* @min:%2etraceID */
    ] = details.traceId;
    ajaxData[
      _DYN_SPAN_ID
      /* @min:%2espanID */
    ] = details.spanId;
    ajaxData[
      _DYN_TRACE_FLAGS2
      /* @min:%2etraceFlags */
    ] = details[
      _DYN_TRACE_FLAGS2
      /* @min:%2etraceFlags */
    ];
    ajaxData[
      _DYN_CONTEXT
      /* @min:%2econtext */
    ] = details[
      _DYN_CONTEXT
      /* @min:%2econtext */
    ];
  }
}
var BLOB_CORE = "*.blob.core.";
var DfltAjaxCorrelationHeaderExDomains = objFreeze([BLOB_CORE + "windows.net", BLOB_CORE + "chinacloudapi.cn", BLOB_CORE + "cloudapi.de", BLOB_CORE + "usgovcloudapi.net"]);
var _internalExcludeEndpoints = [/https:\/\/[^\/]*(\.pipe\.aria|aria\.pipe|events\.data|collector\.azure)\.[^\/]+\/(OneCollector\/1|Collector\/3)\.0/i];
var _defaultConfig2 = objFreeze((_a9 = {}, _a9[
  _DYN_MAX_AJAX_CALLS_PER_V5
  /* @min:maxAjaxCallsPerView */
] = 500, _a9[
  _DYN_DISABLE_AJAX_TRACKIN7
  /* @min:disableAjaxTracking */
] = false, _a9[
  _DYN_DISABLE_FETCH_TRACKI9
  /* @min:disableFetchTracking */
] = false, _a9[
  _DYN_EXCLUDE_REQUEST_FROM6
  /* @min:excludeRequestFromAutoTrackingPatterns */
] = void 0, _a9.disableCorrelationHeaders = false, _a9.distributedTracingMode = 1, _a9.correlationHeaderExcludedDomains = DfltAjaxCorrelationHeaderExDomains, _a9.correlationHeaderDomains = void 0, _a9.correlationHeaderExcludePatterns = void 0, _a9.appId = void 0, _a9.enableCorsCorrelation = false, _a9[
  _DYN_ENABLE_REQUEST_HEADE2
  /* @min:enableRequestHeaderTracking */
] = false, _a9[
  _DYN_ENABLE_RESPONSE_HEAD10
  /* @min:enableResponseHeaderTracking */
] = false, _a9[
  _DYN_ENABLE_AJAX_ERROR_ST3
  /* @min:enableAjaxErrorStatusText */
] = false, _a9[
  _DYN_ENABLE_AJAX_PERF_TRA4
  /* @min:enableAjaxPerfTracking */
] = false, _a9.maxAjaxPerfLookupAttempts = 3, _a9[
  _DYN_AJAX_PERF_LOOKUP_DEL8
  /* @min:ajaxPerfLookupDelay */
] = 25, _a9.ignoreHeaders = ["Authorization", "X-API-Key", "WWW-Authenticate"], _a9.addRequestContext = void 0, _a9.addIntEndpoints = true, _a9));
var AjaxMonitor = (
  /** @class */
  function(_super) {
    __extendsFn(AjaxMonitor2, _super);
    function AjaxMonitor2() {
      var _this = _super.call(this) || this;
      _this.identifier = AjaxMonitor2.identifier;
      _this.priority = 120;
      var _fetchInitialized;
      var _xhrInitialized;
      var _currentWindowHost;
      var _extensionConfig;
      var _enableRequestHeaderTracking;
      var _enableAjaxErrorStatusText;
      var _trackAjaxAttempts;
      var _context;
      var _isUsingW3CHeaders;
      var _isUsingAIHeaders;
      var _markPrefix;
      var _enableAjaxPerfTracking;
      var _maxAjaxCallsPerView;
      var _enableResponseHeaderTracking;
      var _disabledUrls;
      var _disableAjaxTracking;
      var _disableFetchTracking;
      var _excludeRequestFromAutoTrackingPatterns;
      var _addRequestContext;
      var _evtNamespace;
      var _ajaxDataId;
      var _dependencyHandlerId;
      var _dependencyListeners;
      var _dependencyInitializers;
      var _ignoreHeaders;
      var _maxAjaxPerfLookupAttempts;
      var _ajaxPerfLookupDelay;
      var _distributedTracingMode;
      var _appId;
      var _polyfillInitialized;
      dynamicProto(AjaxMonitor2, _this, function(_self, _base) {
        var _addHook = _base[
          _DYN__ADD_HOOK2
          /* @min:%2e_addHook */
        ];
        _initDefaults();
        _self.initialize = function(config2, core, extensions, pluginChain) {
          if (!_self.isInitialized()) {
            _base.initialize(config2, core, extensions, pluginChain);
            _evtNamespace = mergeEvtNamespace(createUniqueNamespace("ajax"), core && core.evtNamespace && core.evtNamespace());
            _populateDefaults(config2);
            _instrumentXhr();
            _instrumentFetch();
            _populateContext();
          }
        };
        _self._doTeardown = function() {
          _initDefaults();
        };
        _self.trackDependencyData = function(dependency, properties) {
          _reportDependencyInternal(_dependencyInitializers, _self[
            _DYN_CORE2
            /* @min:%2ecore */
          ], null, dependency, properties);
        };
        _self[
          _DYN_INCLUDE_CORRELATION_0
          /* @min:%2eincludeCorrelationHeaders */
        ] = function(ajaxData, input2, init, xhr) {
          var currentWindowHost = _self["_currentWindowHost"] || _currentWindowHost;
          _processDependencyListeners(_dependencyListeners, _self[
            _DYN_CORE2
            /* @min:%2ecore */
          ], ajaxData, xhr, input2, init);
          if (input2 || input2 === "") {
            if (correlationIdCanIncludeCorrelationHeader(_extensionConfig, ajaxData[
              _DYN_GET_ABSOLUTE_URL
              /* @min:%2egetAbsoluteUrl */
            ](), currentWindowHost)) {
              if (!init) {
                init = {};
              }
              var headers = new Headers(init[
                _DYN_HEADERS2
                /* @min:%2eheaders */
              ] || (input2 instanceof Request ? input2[
                _DYN_HEADERS2
                /* @min:%2eheaders */
              ] || {} : {}));
              if (_isUsingAIHeaders) {
                var id = "|" + ajaxData[
                  _DYN_TRACE_ID2
                  /* @min:%2etraceID */
                ] + "." + ajaxData[
                  _DYN_SPAN_ID
                  /* @min:%2espanID */
                ];
                headers.set(RequestHeaders[
                  3
                  /* eRequestHeaders.requestIdHeader */
                ], id);
                if (_enableRequestHeaderTracking) {
                  ajaxData[
                    _DYN_REQUEST_HEADERS
                    /* @min:%2erequestHeaders */
                  ][RequestHeaders[
                    3
                    /* eRequestHeaders.requestIdHeader */
                  ]] = id;
                }
              }
              var appId = _appId || _context && _context.appId();
              if (appId) {
                headers.set(RequestHeaders[
                  0
                  /* eRequestHeaders.requestContextHeader */
                ], RequestHeaders[
                  2
                  /* eRequestHeaders.requestContextAppIdFormat */
                ] + appId);
                if (_enableRequestHeaderTracking) {
                  ajaxData[
                    _DYN_REQUEST_HEADERS
                    /* @min:%2erequestHeaders */
                  ][RequestHeaders[
                    0
                    /* eRequestHeaders.requestContextHeader */
                  ]] = RequestHeaders[
                    2
                    /* eRequestHeaders.requestContextAppIdFormat */
                  ] + appId;
                }
              }
              if (_isUsingW3CHeaders) {
                var traceFlags = ajaxData[
                  _DYN_TRACE_FLAGS2
                  /* @min:%2etraceFlags */
                ];
                if (isNullOrUndefined(traceFlags)) {
                  traceFlags = 1;
                }
                var traceParent = formatTraceParent(createTraceParent(ajaxData[
                  _DYN_TRACE_ID2
                  /* @min:%2etraceID */
                ], ajaxData[
                  _DYN_SPAN_ID
                  /* @min:%2espanID */
                ], traceFlags));
                headers.set(RequestHeaders[
                  4
                  /* eRequestHeaders.traceParentHeader */
                ], traceParent);
                if (_enableRequestHeaderTracking) {
                  ajaxData[
                    _DYN_REQUEST_HEADERS
                    /* @min:%2erequestHeaders */
                  ][RequestHeaders[
                    4
                    /* eRequestHeaders.traceParentHeader */
                  ]] = traceParent;
                }
              }
              init[
                _DYN_HEADERS2
                /* @min:%2eheaders */
              ] = headers;
            }
            return init;
          } else if (xhr) {
            if (correlationIdCanIncludeCorrelationHeader(_extensionConfig, ajaxData[
              _DYN_GET_ABSOLUTE_URL
              /* @min:%2egetAbsoluteUrl */
            ](), currentWindowHost)) {
              if (_isUsingAIHeaders) {
                if (!_isHeaderSet(xhr, RequestHeaders[
                  3
                  /* eRequestHeaders.requestIdHeader */
                ])) {
                  var id = "|" + ajaxData[
                    _DYN_TRACE_ID2
                    /* @min:%2etraceID */
                  ] + "." + ajaxData[
                    _DYN_SPAN_ID
                    /* @min:%2espanID */
                  ];
                  xhr[
                    _DYN_SET_REQUEST_HEADER
                    /* @min:%2esetRequestHeader */
                  ](RequestHeaders[
                    3
                    /* eRequestHeaders.requestIdHeader */
                  ], id);
                  if (_enableRequestHeaderTracking) {
                    ajaxData[
                      _DYN_REQUEST_HEADERS
                      /* @min:%2erequestHeaders */
                    ][RequestHeaders[
                      3
                      /* eRequestHeaders.requestIdHeader */
                    ]] = id;
                  }
                } else {
                  _throwInternalWarning(_self, 71, "Unable to set [" + RequestHeaders[
                    3
                    /* eRequestHeaders.requestIdHeader */
                  ] + "] as it has already been set by another instance");
                }
              }
              var appId = _appId || _context && _context.appId();
              if (appId) {
                if (!_isHeaderSet(xhr, RequestHeaders[
                  0
                  /* eRequestHeaders.requestContextHeader */
                ])) {
                  xhr[
                    _DYN_SET_REQUEST_HEADER
                    /* @min:%2esetRequestHeader */
                  ](RequestHeaders[
                    0
                    /* eRequestHeaders.requestContextHeader */
                  ], RequestHeaders[
                    2
                    /* eRequestHeaders.requestContextAppIdFormat */
                  ] + appId);
                  if (_enableRequestHeaderTracking) {
                    ajaxData[
                      _DYN_REQUEST_HEADERS
                      /* @min:%2erequestHeaders */
                    ][RequestHeaders[
                      0
                      /* eRequestHeaders.requestContextHeader */
                    ]] = RequestHeaders[
                      2
                      /* eRequestHeaders.requestContextAppIdFormat */
                    ] + appId;
                  }
                } else {
                  _throwInternalWarning(_self, 71, "Unable to set [" + RequestHeaders[
                    0
                    /* eRequestHeaders.requestContextHeader */
                  ] + "] as it has already been set by another instance");
                }
              }
              if (_isUsingW3CHeaders) {
                var traceFlags = ajaxData[
                  _DYN_TRACE_FLAGS2
                  /* @min:%2etraceFlags */
                ];
                if (isNullOrUndefined(traceFlags)) {
                  traceFlags = 1;
                }
                if (!_isHeaderSet(xhr, RequestHeaders[
                  4
                  /* eRequestHeaders.traceParentHeader */
                ])) {
                  var traceParent = formatTraceParent(createTraceParent(ajaxData[
                    _DYN_TRACE_ID2
                    /* @min:%2etraceID */
                  ], ajaxData[
                    _DYN_SPAN_ID
                    /* @min:%2espanID */
                  ], traceFlags));
                  xhr[
                    _DYN_SET_REQUEST_HEADER
                    /* @min:%2esetRequestHeader */
                  ](RequestHeaders[
                    4
                    /* eRequestHeaders.traceParentHeader */
                  ], traceParent);
                  if (_enableRequestHeaderTracking) {
                    ajaxData[
                      _DYN_REQUEST_HEADERS
                      /* @min:%2erequestHeaders */
                    ][RequestHeaders[
                      4
                      /* eRequestHeaders.traceParentHeader */
                    ]] = traceParent;
                  }
                } else {
                  _throwInternalWarning(_self, 71, "Unable to set [" + RequestHeaders[
                    4
                    /* eRequestHeaders.traceParentHeader */
                  ] + "] as it has already been set by another instance");
                }
              }
            }
            return xhr;
          }
          return void 0;
        };
        _self[
          _DYN_TRACK_DEPENDENCY_DAT1
          /* @min:%2etrackDependencyDataInternal */
        ] = function(dependency, properties, systemProperties) {
          if (_maxAjaxCallsPerView === -1 || _trackAjaxAttempts < _maxAjaxCallsPerView) {
            if ((_distributedTracingMode === 2 || _distributedTracingMode === 1) && typeof dependency.id === "string" && dependency.id[dependency.id[
              _DYN_LENGTH5
              /* @min:%2elength */
            ] - 1] !== ".") {
              dependency.id += ".";
            }
            if (isNullOrUndefined(dependency[
              _DYN_START_TIME2
              /* @min:%2estartTime */
            ])) {
              dependency[
                _DYN_START_TIME2
                /* @min:%2estartTime */
              ] = /* @__PURE__ */ new Date();
            }
            var item = createTelemetryItem(dependency, RemoteDependencyData.dataType, RemoteDependencyData.envelopeType, _self[strDiagLog](), properties, systemProperties);
            _self[
              _DYN_CORE2
              /* @min:%2ecore */
            ].track(item);
          } else if (_trackAjaxAttempts === _maxAjaxCallsPerView) {
            _throwInternalCritical(_self, 55, "Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.", true);
          }
          ++_trackAjaxAttempts;
        };
        _self.addDependencyListener = function(dependencyListener) {
          return _addHandler(_dependencyListeners, _dependencyHandlerId++, dependencyListener);
        };
        _self.addDependencyInitializer = function(dependencyInitializer) {
          return _addHandler(_dependencyInitializers, _dependencyHandlerId++, dependencyInitializer);
        };
        function _initDefaults() {
          var location2 = getLocation();
          _fetchInitialized = false;
          _xhrInitialized = false;
          _polyfillInitialized = false;
          _currentWindowHost = location2 && location2.host && location2.host[
            _DYN_TO_LOWER_CASE3
            /* @min:%2etoLowerCase */
          ]();
          _extensionConfig = null;
          _enableRequestHeaderTracking = false;
          _enableAjaxErrorStatusText = false;
          _trackAjaxAttempts = 0;
          _context = null;
          _isUsingW3CHeaders = false;
          _isUsingAIHeaders = false;
          _markPrefix = null;
          _enableAjaxPerfTracking = false;
          _maxAjaxCallsPerView = 0;
          _enableResponseHeaderTracking = false;
          _disabledUrls = {};
          _disableAjaxTracking = false;
          _disableFetchTracking = false;
          _excludeRequestFromAutoTrackingPatterns = null;
          _addRequestContext = null;
          _evtNamespace = null;
          _dependencyHandlerId = 0;
          _dependencyListeners = [];
          _dependencyInitializers = [];
          _ajaxDataId = createUniqueNamespace("ajaxData");
          _self._ajaxDataId = _ajaxDataId;
          _ignoreHeaders = null;
          _maxAjaxPerfLookupAttempts = 1;
          _ajaxPerfLookupDelay = 1;
          _distributedTracingMode = 1;
          _appId = null;
        }
        function _populateDefaults(config2) {
          _self[
            _DYN__ADD_HOOK2
            /* @min:%2e_addHook */
          ](onConfigChange(config2, function(details) {
            var config3 = details.cfg;
            var ctx = createProcessTelemetryContext(null, config3, _self[
              _DYN_CORE2
              /* @min:%2ecore */
            ]);
            _extensionConfig = ctx.getExtCfg(AjaxMonitor2.identifier, _defaultConfig2);
            _distributedTracingMode = _extensionConfig.distributedTracingMode;
            _enableRequestHeaderTracking = _extensionConfig[
              _DYN_ENABLE_REQUEST_HEADE2
              /* @min:%2eenableRequestHeaderTracking */
            ];
            _enableAjaxErrorStatusText = _extensionConfig[
              _DYN_ENABLE_AJAX_ERROR_ST3
              /* @min:%2eenableAjaxErrorStatusText */
            ];
            _enableAjaxPerfTracking = _extensionConfig[
              _DYN_ENABLE_AJAX_PERF_TRA4
              /* @min:%2eenableAjaxPerfTracking */
            ];
            _maxAjaxCallsPerView = _extensionConfig[
              _DYN_MAX_AJAX_CALLS_PER_V5
              /* @min:%2emaxAjaxCallsPerView */
            ];
            _excludeRequestFromAutoTrackingPatterns = [].concat(_extensionConfig[
              _DYN_EXCLUDE_REQUEST_FROM6
              /* @min:%2eexcludeRequestFromAutoTrackingPatterns */
            ] || [], _extensionConfig.addIntEndpoints !== false ? _internalExcludeEndpoints : []);
            _addRequestContext = _extensionConfig.addRequestContext;
            _isUsingAIHeaders = _distributedTracingMode === 0 || _distributedTracingMode === 1;
            _isUsingW3CHeaders = _distributedTracingMode === 1 || _distributedTracingMode === 2;
            if (_enableAjaxPerfTracking) {
              _markPrefix = _ajaxDataId;
            }
            _disableAjaxTracking = !!_extensionConfig[
              _DYN_DISABLE_AJAX_TRACKIN7
              /* @min:%2edisableAjaxTracking */
            ];
            _maxAjaxPerfLookupAttempts = _extensionConfig.maxAjaxPerfLookupAttempts;
            _ajaxPerfLookupDelay = _extensionConfig[
              _DYN_AJAX_PERF_LOOKUP_DEL8
              /* @min:%2eajaxPerfLookupDelay */
            ];
            _ignoreHeaders = _extensionConfig.ignoreHeaders;
            _appId = _extensionConfig.appId;
          }));
        }
        function _populateContext() {
          var propExt = _self[
            _DYN_CORE2
            /* @min:%2ecore */
          ].getPlugin(PropertiesPluginIdentifier);
          if (propExt) {
            _context = propExt.plugin[
              _DYN_CONTEXT
              /* @min:%2econtext */
            ];
          }
        }
        function _canIncludeHeaders(header) {
          var rlt = true;
          if (header || _ignoreHeaders) {
            arrForEach(_ignoreHeaders, function(key) {
              if (key[
                _DYN_TO_LOWER_CASE3
                /* @min:%2etoLowerCase */
              ]() === header[
                _DYN_TO_LOWER_CASE3
                /* @min:%2etoLowerCase */
              ]()) {
                rlt = false;
                return -1;
              }
            });
          }
          return rlt;
        }
        function _instrumentFetch() {
          var fetch2 = _supportsFetch();
          if (!fetch2) {
            return;
          }
          var global2 = getGlobal();
          var isPolyfill = fetch2.polyfill;
          _self[
            _DYN__ADD_HOOK2
            /* @min:%2e_addHook */
          ](onConfigChange(_extensionConfig, function() {
            _disableFetchTracking = !!_extensionConfig[
              _DYN_DISABLE_FETCH_TRACKI9
              /* @min:%2edisableFetchTracking */
            ];
            _enableResponseHeaderTracking = _extensionConfig[
              _DYN_ENABLE_RESPONSE_HEAD10
              /* @min:%2eenableResponseHeaderTracking */
            ];
            if (!_disableFetchTracking && !_fetchInitialized) {
              _addHook(InstrumentFunc(global2, STR_FETCH, {
                ns: _evtNamespace,
                // Add request hook
                req: function(callDetails, input2, init) {
                  var fetchData;
                  if (!_disableFetchTracking && _fetchInitialized && !_isDisabledRequest(null, input2, init) && // If we have a polyfil and XHR instrumented then let XHR report otherwise we get duplicates
                  !(isPolyfill && _xhrInitialized)) {
                    var ctx = callDetails.ctx();
                    fetchData = _createFetchRecord(input2, init);
                    var newInit = _self[
                      _DYN_INCLUDE_CORRELATION_0
                      /* @min:%2eincludeCorrelationHeaders */
                    ](fetchData, input2, init);
                    if (newInit !== init) {
                      callDetails.set(1, newInit);
                    }
                    ctx.data = fetchData;
                  }
                },
                rsp: function(callDetails, input2) {
                  if (!_disableFetchTracking) {
                    var fetchData_1 = callDetails.ctx().data;
                    if (fetchData_1) {
                      callDetails.rslt = callDetails.rslt.then(function(response) {
                        _reportFetchMetrics(callDetails, (response || {})[
                          _DYN_STATUS2
                          /* @min:%2estatus */
                        ], input2, response, fetchData_1, function() {
                          var _a12;
                          var ajaxResponse = (_a12 = {
                            statusText: (response || {})[
                              _DYN_STATUS_TEXT
                              /* @min:%2estatusText */
                            ],
                            headerMap: null
                          }, _a12[
                            _DYN_CORRELATION_CONTEXT
                            /* @min:correlationContext */
                          ] = _getFetchCorrelationContext(response), _a12);
                          if (_enableResponseHeaderTracking && response) {
                            var responseHeaderMap_1 = {};
                            response.headers.forEach(function(value, name) {
                              if (_canIncludeHeaders(name)) {
                                responseHeaderMap_1[name] = value;
                              }
                            });
                            ajaxResponse[
                              _DYN_HEADER_MAP
                              /* @min:%2eheaderMap */
                            ] = responseHeaderMap_1;
                          }
                          return ajaxResponse;
                        });
                        return response;
                      }).catch(function(reason) {
                        _reportFetchMetrics(callDetails, 0, input2, null, fetchData_1, null, {
                          error: reason.message || dumpObj(reason)
                        });
                        throw reason;
                      });
                    }
                  }
                },
                // Create an error callback to report any hook errors
                hkErr: _createErrorCallbackFunc(_self, 15, "Failed to monitor Window.fetch" + ERROR_POSTFIX)
              }, true, isWebWorker()));
              _fetchInitialized = true;
            } else if (isPolyfill && !_polyfillInitialized) {
              _addHook(InstrumentFunc(global2, STR_FETCH, {
                ns: _evtNamespace,
                req: function(callDetails, input2, init) {
                  _isDisabledRequest(null, input2, init);
                }
              }));
              _polyfillInitialized = true;
            }
          }));
          if (isPolyfill) {
            global2[STR_FETCH].polyfill = isPolyfill;
          }
        }
        function _hookProto(target, funcName, callbacks) {
          _addHook(InstrumentProto(target, funcName, callbacks));
        }
        function _instrumentXhr() {
          if (!_supportsAjaxMonitoring(_self, _ajaxDataId)) {
            return;
          }
          _self[
            _DYN__ADD_HOOK2
            /* @min:%2e_addHook */
          ](onConfigChange(_extensionConfig, function() {
            _disableAjaxTracking = !!_extensionConfig[
              _DYN_DISABLE_AJAX_TRACKIN7
              /* @min:%2edisableAjaxTracking */
            ];
            _enableRequestHeaderTracking = _extensionConfig[
              _DYN_ENABLE_REQUEST_HEADE2
              /* @min:%2eenableRequestHeaderTracking */
            ];
            if (!_disableAjaxTracking && !_xhrInitialized) {
              _hookProto(XMLHttpRequest, "open", {
                ns: _evtNamespace,
                req: function(callDetails, method, url, async) {
                  if (!_disableAjaxTracking) {
                    var xhr = callDetails.inst;
                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);
                    if (!_isDisabledRequest(xhr, url) && _isMonitoredXhrInstance(xhr, ajaxData, true)) {
                      if (!ajaxData || !ajaxData.xhrMonitoringState.openDone) {
                        ajaxData = _openHandler(xhr, method, url, async);
                      }
                      _attachToOnReadyStateChange(xhr, ajaxData);
                    }
                  }
                },
                hkErr: _createErrorCallbackFunc(_self, 15, ERROR_HEADER + ".open" + ERROR_POSTFIX)
              });
              _hookProto(XMLHttpRequest, "send", {
                ns: _evtNamespace,
                req: function(callDetails, context2) {
                  if (!_disableAjaxTracking) {
                    var xhr = callDetails.inst;
                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);
                    if (_isMonitoredXhrInstance(xhr, ajaxData) && !ajaxData.xhrMonitoringState.sendDone) {
                      _createMarkId("xhr", ajaxData);
                      ajaxData[
                        _DYN_REQUEST_SENT_TIME
                        /* @min:%2erequestSentTime */
                      ] = dateTimeUtilsNow();
                      _self[
                        _DYN_INCLUDE_CORRELATION_0
                        /* @min:%2eincludeCorrelationHeaders */
                      ](ajaxData, void 0, void 0, xhr);
                      ajaxData.xhrMonitoringState.sendDone = true;
                    }
                  }
                },
                hkErr: _createErrorCallbackFunc(_self, 17, ERROR_HEADER + ERROR_POSTFIX)
              });
              _hookProto(XMLHttpRequest, "abort", {
                ns: _evtNamespace,
                req: function(callDetails) {
                  if (!_disableAjaxTracking) {
                    var xhr = callDetails.inst;
                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);
                    if (_isMonitoredXhrInstance(xhr, ajaxData) && !ajaxData.xhrMonitoringState.abortDone) {
                      ajaxData[
                        _DYN_ABORTED
                        /* @min:%2eaborted */
                      ] = 1;
                      ajaxData.xhrMonitoringState.abortDone = true;
                    }
                  }
                },
                hkErr: _createErrorCallbackFunc(_self, 13, ERROR_HEADER + ".abort" + ERROR_POSTFIX)
              });
              _hookProto(XMLHttpRequest, "setRequestHeader", {
                ns: _evtNamespace,
                req: function(callDetails, header, value) {
                  if (!_disableAjaxTracking) {
                    var xhr = callDetails.inst;
                    var ajaxData = _getAjaxData(xhr, _ajaxDataId);
                    if (ajaxData && _isMonitoredXhrInstance(xhr, ajaxData)) {
                      _addSharedXhrHeaders(xhr, header, value);
                      if (_enableRequestHeaderTracking && _canIncludeHeaders(header)) {
                        ajaxData[
                          _DYN_REQUEST_HEADERS
                          /* @min:%2erequestHeaders */
                        ][header] = value;
                      }
                    }
                  }
                },
                hkErr: _createErrorCallbackFunc(_self, 71, ERROR_HEADER + ".setRequestHeader" + ERROR_POSTFIX)
              });
              _xhrInitialized = true;
            }
          }));
        }
        function _isDisabledRequest(xhr, request, init) {
          var isDisabled = false;
          var theUrl = ((!isString(request) ? (request || {}).url || "" : request) || "")[
            _DYN_TO_LOWER_CASE3
            /* @min:%2etoLowerCase */
          ]();
          arrForEach(_excludeRequestFromAutoTrackingPatterns, function(regex) {
            var theRegex = regex;
            if (isString(regex)) {
              theRegex = new RegExp(regex);
            }
            if (!isDisabled) {
              isDisabled = theRegex.test(theUrl);
            }
          });
          if (isDisabled) {
            return isDisabled;
          }
          var idx = _indexOf(theUrl, "?");
          var idx2 = _indexOf(theUrl, "#");
          if (idx === -1 || idx2 !== -1 && idx2 < idx) {
            idx = idx2;
          }
          if (idx !== -1) {
            theUrl = theUrl.substring(0, idx);
          }
          if (!isNullOrUndefined(xhr)) {
            isDisabled = xhr[DisabledPropertyName2] === true || theUrl[DisabledPropertyName2] === true;
          } else if (!isNullOrUndefined(request)) {
            isDisabled = (typeof request === "object" ? request[DisabledPropertyName2] === true : false) || (init ? init[DisabledPropertyName2] === true : false);
          }
          if (!isDisabled && theUrl && isInternalApplicationInsightsEndpoint(theUrl)) {
            isDisabled = true;
          }
          if (isDisabled) {
            if (!_disabledUrls[theUrl]) {
              _disabledUrls[theUrl] = 1;
            }
          } else {
            if (_disabledUrls[theUrl]) {
              isDisabled = true;
            }
          }
          return isDisabled;
        }
        function _isMonitoredXhrInstance(xhr, ajaxData, excludeAjaxDataValidation) {
          var ajaxValidation = true;
          var initialized = _xhrInitialized;
          if (!isNullOrUndefined(xhr)) {
            ajaxValidation = excludeAjaxDataValidation === true || !isNullOrUndefined(ajaxData);
          }
          return initialized && ajaxValidation;
        }
        function _getDistributedTraceCtx() {
          var distributedTraceCtx = null;
          if (_self[
            _DYN_CORE2
            /* @min:%2ecore */
          ] && _self[
            _DYN_CORE2
            /* @min:%2ecore */
          ].getTraceCtx) {
            distributedTraceCtx = _self[
              _DYN_CORE2
              /* @min:%2ecore */
            ].getTraceCtx(false);
          }
          if (!distributedTraceCtx && _context && _context.telemetryTrace) {
            distributedTraceCtx = createDistributedTraceContextFromTrace(_context.telemetryTrace);
          }
          return distributedTraceCtx;
        }
        function _openHandler(xhr, method, url, async) {
          var _a12;
          var distributedTraceCtx = _getDistributedTraceCtx();
          var traceID = distributedTraceCtx && distributedTraceCtx[
            _DYN_GET_TRACE_ID
            /* @min:%2egetTraceId */
          ]() || generateW3CId();
          var spanID = strSubstr(generateW3CId(), 0, 16);
          var xhrRequestData = xhr[AJAX_DATA_CONTAINER] = xhr[AJAX_DATA_CONTAINER] || {
            xh: [],
            i: {}
          };
          var ajaxDataCntr = xhrRequestData.i = xhrRequestData.i || {};
          var ajaxData = ajaxDataCntr[_ajaxDataId] = ajaxDataCntr[_ajaxDataId] || new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a12 = _self.core) === null || _a12 === void 0 ? void 0 : _a12.getTraceCtx());
          ajaxData[
            _DYN_TRACE_FLAGS2
            /* @min:%2etraceFlags */
          ] = distributedTraceCtx && distributedTraceCtx[
            _DYN_GET_TRACE_FLAGS
            /* @min:%2egetTraceFlags */
          ]();
          ajaxData[
            _DYN_METHOD
            /* @min:%2emethod */
          ] = method;
          ajaxData[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ] = url;
          ajaxData.xhrMonitoringState.openDone = true;
          ajaxData[
            _DYN_REQUEST_HEADERS
            /* @min:%2erequestHeaders */
          ] = {};
          ajaxData.async = async;
          ajaxData[
            _DYN_ERROR_STATUS_TEXT
            /* @min:%2eerrorStatusText */
          ] = _enableAjaxErrorStatusText;
          return ajaxData;
        }
        function _attachToOnReadyStateChange(xhr, ajaxData) {
          ajaxData.xhrMonitoringState[
            _DYN_STATE_CHANGE_ATTACHE11
            /* @min:%2estateChangeAttached */
          ] = eventOn(xhr, "readystatechange", function() {
            var _a12;
            try {
              if (xhr && xhr.readyState === 4 && _isMonitoredXhrInstance(xhr, ajaxData)) {
                _onAjaxComplete(xhr);
              }
            } catch (e) {
              var exceptionText = dumpObj(e);
              if (!exceptionText || _indexOf(exceptionText[
                _DYN_TO_LOWER_CASE3
                /* @min:%2etoLowerCase */
              ](), "c00c023f") === -1) {
                _throwInternalCritical(_self, 16, ERROR_HEADER + " 'readystatechange' event handler" + ERROR_POSTFIX, (_a12 = {}, _a12[
                  _DYN_AJAX_DIAGNOSTICS_MES14
                  /* @min:ajaxDiagnosticsMessage */
                ] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId), _a12.exception = exceptionText, _a12));
              }
            }
          }, _evtNamespace);
        }
        function _getResponseText2(xhr) {
          try {
            var responseType = xhr.responseType;
            if (responseType === "" || responseType === "text") {
              return xhr[
                _DYN_RESPONSE_TEXT
                /* @min:%2eresponseText */
              ];
            }
          } catch (e) {
          }
          return null;
        }
        function _onAjaxComplete(xhr) {
          var ajaxData = _getAjaxData(xhr, _ajaxDataId);
          ajaxData[
            _DYN_RESPONSE_FINISHED_TI12
            /* @min:%2eresponseFinishedTime */
          ] = dateTimeUtilsNow();
          ajaxData[
            _DYN_STATUS2
            /* @min:%2estatus */
          ] = xhr[
            _DYN_STATUS2
            /* @min:%2estatus */
          ];
          function _reportXhrError(e, failedProps) {
            var errorProps = failedProps || {};
            errorProps["ajaxDiagnosticsMessage"] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId);
            if (e) {
              errorProps["exception"] = dumpObj(e);
            }
            _throwInternalWarning(_self, 14, FAILED_TO_CALCULATE_DURATION_ERROR + "ajax call" + ERROR_NOT_SENT, errorProps);
          }
          _findPerfResourceEntry("xmlhttprequest", ajaxData, function() {
            try {
              var dependency = ajaxData[
                _DYN__CREATE_TRACK_ITEM
                /* @min:%2eCreateTrackItem */
              ]("Ajax", _enableRequestHeaderTracking, function() {
                var _a12;
                var ajaxResponse = (_a12 = {
                  statusText: xhr[
                    _DYN_STATUS_TEXT
                    /* @min:%2estatusText */
                  ],
                  headerMap: null
                }, _a12[
                  _DYN_CORRELATION_CONTEXT
                  /* @min:correlationContext */
                ] = _getAjaxCorrelationContext(xhr), _a12.type = xhr.responseType, _a12[
                  _DYN_RESPONSE_TEXT
                  /* @min:responseText */
                ] = _getResponseText2(xhr), _a12.response = xhr.response, _a12);
                if (_enableResponseHeaderTracking) {
                  var headers = xhr[
                    _DYN_GET_ALL_RESPONSE_HEA13
                    /* @min:%2egetAllResponseHeaders */
                  ]();
                  if (headers) {
                    var arr = strTrim(headers).split(/[\r\n]+/);
                    var responseHeaderMap_2 = {};
                    arrForEach(arr, function(line) {
                      var parts = line.split(": ");
                      var header = parts.shift();
                      var value = parts.join(": ");
                      if (_canIncludeHeaders(header)) {
                        responseHeaderMap_2[header] = value;
                      }
                    });
                    ajaxResponse[
                      _DYN_HEADER_MAP
                      /* @min:%2eheaderMap */
                    ] = responseHeaderMap_2;
                  }
                }
                return ajaxResponse;
              });
              var properties = void 0;
              try {
                if (!!_addRequestContext) {
                  properties = _addRequestContext({
                    status: xhr[
                      _DYN_STATUS2
                      /* @min:%2estatus */
                    ],
                    xhr
                  });
                }
              } catch (e) {
                _throwInternalWarning(_self, 104, CUSTOM_REQUEST_CONTEXT_ERROR);
              }
              if (dependency) {
                if (properties !== void 0) {
                  dependency[
                    STR_PROPERTIES
                    /* @min:%2eproperties */
                  ] = __assignFn(__assignFn({}, dependency.properties), properties);
                }
                var sysProperties = ajaxData[
                  _DYN_GET_PART_APROPS
                  /* @min:%2egetPartAProps */
                ]();
                _reportDependencyInternal(_dependencyInitializers, _self[
                  _DYN_CORE2
                  /* @min:%2ecore */
                ], ajaxData, dependency, null, sysProperties);
              } else {
                _reportXhrError(null, {
                  requestSentTime: ajaxData[
                    _DYN_REQUEST_SENT_TIME
                    /* @min:%2erequestSentTime */
                  ],
                  responseFinishedTime: ajaxData[
                    _DYN_RESPONSE_FINISHED_TI12
                    /* @min:%2eresponseFinishedTime */
                  ]
                });
              }
            } finally {
              try {
                var xhrRequestData = xhr[AJAX_DATA_CONTAINER] || {
                  i: {}
                };
                var ajaxDataCntr = xhrRequestData.i || {};
                if (ajaxDataCntr[_ajaxDataId]) {
                  ajaxDataCntr[_ajaxDataId] = null;
                }
              } catch (e) {
              }
            }
          }, function(e) {
            _reportXhrError(e, null);
          });
        }
        function _getAjaxCorrelationContext(xhr) {
          var _a12;
          try {
            var responseHeadersString = xhr[
              _DYN_GET_ALL_RESPONSE_HEA13
              /* @min:%2egetAllResponseHeaders */
            ]();
            if (responseHeadersString !== null) {
              var index = _indexOf(responseHeadersString[
                _DYN_TO_LOWER_CASE3
                /* @min:%2etoLowerCase */
              ](), RequestHeaders[
                8
                /* eRequestHeaders.requestContextHeaderLowerCase */
              ]);
              if (index !== -1) {
                var responseHeader = xhr.getResponseHeader(RequestHeaders[
                  0
                  /* eRequestHeaders.requestContextHeader */
                ]);
                return correlationIdGetCorrelationContext(responseHeader);
              }
            }
          } catch (e) {
            _throwInternalWarning(_self, 18, CORRELATION_HEADER_ERROR, (_a12 = {}, _a12[
              _DYN_AJAX_DIAGNOSTICS_MES14
              /* @min:ajaxDiagnosticsMessage */
            ] = _getFailedAjaxDiagnosticsMessage(xhr, _ajaxDataId), _a12.exception = dumpObj(e), _a12));
          }
        }
        function _createMarkId(type, ajaxData) {
          if (ajaxData[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ] && _markPrefix && _enableAjaxPerfTracking) {
            var performance_1 = getPerformance();
            if (performance_1 && isFunction3(performance_1.mark)) {
              _markCount++;
              var markId = _markPrefix + type + "#" + _markCount;
              performance_1.mark(markId);
              var entries = performance_1.getEntriesByName(markId);
              if (entries && entries[
                _DYN_LENGTH5
                /* @min:%2elength */
              ] === 1) {
                ajaxData[
                  _DYN_PERF_MARK
                  /* @min:%2eperfMark */
                ] = entries[0];
              }
            }
          }
        }
        function _findPerfResourceEntry(initiatorType, ajaxData, trackCallback, reportError) {
          var perfMark = ajaxData[
            _DYN_PERF_MARK
            /* @min:%2eperfMark */
          ];
          var performance2 = getPerformance();
          var maxAttempts = _maxAjaxPerfLookupAttempts;
          var retryDelay = _ajaxPerfLookupDelay;
          var requestUrl = ajaxData[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ];
          var attempt = 0;
          (function locateResourceTiming() {
            try {
              if (performance2 && perfMark) {
                attempt++;
                var perfTiming = null;
                var entries = performance2.getEntries();
                for (var lp = entries[
                  _DYN_LENGTH5
                  /* @min:%2elength */
                ] - 1; lp >= 0; lp--) {
                  var entry = entries[lp];
                  if (entry) {
                    if (entry.entryType === "resource") {
                      if (entry.initiatorType === initiatorType && (_indexOf(entry.name, requestUrl) !== -1 || _indexOf(requestUrl, entry.name) !== -1)) {
                        perfTiming = entry;
                      }
                    } else if (entry.entryType === "mark" && entry.name === perfMark.name) {
                      ajaxData[
                        _DYN_PERF_TIMING
                        /* @min:%2eperfTiming */
                      ] = perfTiming;
                      break;
                    }
                    if (entry[
                      _DYN_START_TIME2
                      /* @min:%2estartTime */
                    ] < perfMark[
                      _DYN_START_TIME2
                      /* @min:%2estartTime */
                    ] - 1e3) {
                      break;
                    }
                  }
                }
              }
              if (!perfMark || // - we don't have a perfMark or
              ajaxData[
                _DYN_PERF_TIMING
                /* @min:%2eperfTiming */
              ] || // - we have not found the perf entry or
              attempt >= maxAttempts || // - we have tried too many attempts or
              ajaxData.async === false) {
                if (perfMark && isFunction3(performance2.clearMarks)) {
                  performance2.clearMarks(perfMark.name);
                }
                ajaxData.perfAttempts = attempt;
                trackCallback();
              } else {
                scheduleTimeout(locateResourceTiming, retryDelay);
              }
            } catch (e) {
              reportError(e);
            }
          })();
        }
        function _createFetchRecord(input2, init) {
          var _a12;
          var distributedTraceCtx = _getDistributedTraceCtx();
          var traceID = distributedTraceCtx && distributedTraceCtx[
            _DYN_GET_TRACE_ID
            /* @min:%2egetTraceId */
          ]() || generateW3CId();
          var spanID = strSubstr(generateW3CId(), 0, 16);
          var ajaxData = new ajaxRecord(traceID, spanID, _self[strDiagLog](), (_a12 = _self.core) === null || _a12 === void 0 ? void 0 : _a12.getTraceCtx());
          ajaxData[
            _DYN_TRACE_FLAGS2
            /* @min:%2etraceFlags */
          ] = distributedTraceCtx && distributedTraceCtx[
            _DYN_GET_TRACE_FLAGS
            /* @min:%2egetTraceFlags */
          ]();
          ajaxData[
            _DYN_REQUEST_SENT_TIME
            /* @min:%2erequestSentTime */
          ] = dateTimeUtilsNow();
          ajaxData[
            _DYN_ERROR_STATUS_TEXT
            /* @min:%2eerrorStatusText */
          ] = _enableAjaxErrorStatusText;
          var requestUrl;
          if (input2 instanceof Request) {
            requestUrl = (input2 || {}).url || "";
          } else {
            requestUrl = input2;
          }
          if (requestUrl === "") {
            var location_1 = getLocation();
            if (location_1 && location_1.href) {
              requestUrl = strSplit(location_1.href, "#")[0];
            }
          }
          ajaxData[
            _DYN_REQUEST_URL
            /* @min:%2erequestUrl */
          ] = requestUrl;
          var method = "GET";
          if (init && init[
            _DYN_METHOD
            /* @min:%2emethod */
          ]) {
            method = init[
              _DYN_METHOD
              /* @min:%2emethod */
            ];
          } else if (input2 && input2 instanceof Request) {
            method = input2[
              _DYN_METHOD
              /* @min:%2emethod */
            ];
          }
          ajaxData[
            _DYN_METHOD
            /* @min:%2emethod */
          ] = method;
          var requestHeaders = {};
          if (_enableRequestHeaderTracking) {
            var headers = new Headers((init ? init[
              _DYN_HEADERS2
              /* @min:%2eheaders */
            ] : 0) || (input2 instanceof Request ? input2[
              _DYN_HEADERS2
              /* @min:%2eheaders */
            ] || {} : {}));
            headers.forEach(function(value, key) {
              if (_canIncludeHeaders(key)) {
                requestHeaders[key] = value;
              }
            });
          }
          ajaxData[
            _DYN_REQUEST_HEADERS
            /* @min:%2erequestHeaders */
          ] = requestHeaders;
          _createMarkId(STR_FETCH, ajaxData);
          return ajaxData;
        }
        function _getFailedFetchDiagnosticsMessage(input2) {
          var result = "";
          try {
            if (!isNullOrUndefined(input2)) {
              if (typeof input2 === "string") {
                result += "(url: '".concat(input2, "')");
              } else {
                result += "(url: '".concat(input2.url, "')");
              }
            }
          } catch (e) {
            _throwInternalCritical(_self, 15, "Failed to grab failed fetch diagnostics message", {
              exception: dumpObj(e)
            });
          }
          return result;
        }
        function _reportFetchMetrics(callDetails, status, input2, response, ajaxData, getResponse, properties) {
          if (!ajaxData) {
            return;
          }
          function _reportFetchError(msgId, e, failedProps) {
            var errorProps = failedProps || {};
            errorProps["fetchDiagnosticsMessage"] = _getFailedFetchDiagnosticsMessage(input2);
            if (e) {
              errorProps["exception"] = dumpObj(e);
            }
            _throwInternalWarning(_self, msgId, FAILED_TO_CALCULATE_DURATION_ERROR + "fetch call" + ERROR_NOT_SENT, errorProps);
          }
          ajaxData[
            _DYN_RESPONSE_FINISHED_TI12
            /* @min:%2eresponseFinishedTime */
          ] = dateTimeUtilsNow();
          ajaxData[
            _DYN_STATUS2
            /* @min:%2estatus */
          ] = status;
          _findPerfResourceEntry(STR_FETCH, ajaxData, function() {
            var dependency = ajaxData[
              _DYN__CREATE_TRACK_ITEM
              /* @min:%2eCreateTrackItem */
            ]("Fetch", _enableRequestHeaderTracking, getResponse);
            var properties2;
            try {
              if (!!_addRequestContext) {
                properties2 = _addRequestContext({
                  status,
                  request: input2,
                  response
                });
              }
            } catch (e) {
              _throwInternalWarning(_self, 104, CUSTOM_REQUEST_CONTEXT_ERROR);
            }
            if (dependency) {
              if (properties2 !== void 0) {
                dependency[
                  STR_PROPERTIES
                  /* @min:%2eproperties */
                ] = __assignFn(__assignFn({}, dependency.properties), properties2);
              }
              var sysProperties = ajaxData[
                _DYN_GET_PART_APROPS
                /* @min:%2egetPartAProps */
              ]();
              _reportDependencyInternal(_dependencyInitializers, _self[
                _DYN_CORE2
                /* @min:%2ecore */
              ], ajaxData, dependency, null, sysProperties);
            } else {
              _reportFetchError(14, null, {
                requestSentTime: ajaxData[
                  _DYN_REQUEST_SENT_TIME
                  /* @min:%2erequestSentTime */
                ],
                responseFinishedTime: ajaxData[
                  _DYN_RESPONSE_FINISHED_TI12
                  /* @min:%2eresponseFinishedTime */
                ]
              });
            }
          }, function(e) {
            _reportFetchError(18, e, null);
          });
        }
        function _getFetchCorrelationContext(response) {
          if (response && response[
            _DYN_HEADERS2
            /* @min:%2eheaders */
          ]) {
            try {
              var responseHeader = response[
                _DYN_HEADERS2
                /* @min:%2eheaders */
              ].get(RequestHeaders[
                0
                /* eRequestHeaders.requestContextHeader */
              ]);
              return correlationIdGetCorrelationContext(responseHeader);
            } catch (e) {
              _throwInternalWarning(_self, 18, CORRELATION_HEADER_ERROR, {
                fetchDiagnosticsMessage: _getFailedFetchDiagnosticsMessage(response),
                exception: dumpObj(e)
              });
            }
          }
        }
        function _reportDependencyInternal(initializers, core, ajaxData, dependency, properties, systemProperties) {
          var result = true;
          var initializersCount = initializers[
            _DYN_LENGTH5
            /* @min:%2elength */
          ];
          if (initializersCount > 0) {
            var details = {
              item: dependency,
              properties,
              sysProperties: systemProperties,
              context: ajaxData ? ajaxData[
                _DYN_CONTEXT
                /* @min:%2econtext */
              ] : null,
              aborted: ajaxData ? !!ajaxData[
                _DYN_ABORTED
                /* @min:%2eaborted */
              ] : false
            };
            result = _processDependencyContainer(core, initializers, details, "initializer");
          }
          if (result) {
            _self[
              _DYN_TRACK_DEPENDENCY_DAT1
              /* @min:%2etrackDependencyDataInternal */
            ](dependency, properties, systemProperties);
          }
        }
      });
      return _this;
    }
    AjaxMonitor2.prototype.processTelemetry = function(item, itemCtx) {
      this.processNext(item, itemCtx);
    };
    AjaxMonitor2.prototype.addDependencyInitializer = function(dependencyInitializer) {
      return null;
    };
    AjaxMonitor2.identifier = "AjaxDependencyPlugin";
    return AjaxMonitor2;
  }(BaseTelemetryPlugin)
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/Application.js
var Application = (
  /** @class */
  /* @__PURE__ */ function() {
    function Application2() {
    }
    return Application2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/Device.js
var Device = (
  /** @class */
  /* @__PURE__ */ function() {
    function Device2() {
      this.id = "browser";
      this.deviceClass = "Browser";
    }
    return Device2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/Internal.js
var Version2 = "3.3.6";
var Internal = (
  /** @class */
  /* @__PURE__ */ function() {
    function Internal2(config2, unloadHookContainer) {
      var _this = this;
      var unloadHook = onConfigChange(config2, function() {
        var prefix = config2.sdkExtension;
        _this.sdkVersion = (prefix ? prefix + "_" : "") + "javascript:" + Version2;
      });
      unloadHookContainer && unloadHookContainer.add(unloadHook);
    }
    return Internal2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/Location.js
var Location2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function Location3() {
    }
    return Location3;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/__DynamicConstants.js
var _DYN_SESSION = "session";
var _DYN_SESSION_MANAGER = "sessionManager";
var _DYN_IS_USER_COOKIE_SET = "isUserCookieSet";
var _DYN_IS_NEW_USER = "isNewUser";
var _DYN_GET_TRACE_CTX = "getTraceCtx";
var _DYN_TELEMETRY_TRACE = "telemetryTrace";
var _DYN_APPLY_SESSION_CONTEX0 = "applySessionContext";
var _DYN_APPLY_APPLICATION_CO1 = "applyApplicationContext";
var _DYN_APPLY_OPERATION_CONT2 = "applyOperationContext";
var _DYN_APPLY_OPERATING_SYST3 = "applyOperatingSystemContxt";
var _DYN_APPLY_LOCATION_CONTE4 = "applyLocationContext";
var _DYN_APPLY_INTERNAL_CONTE5 = "applyInternalContext";
var _DYN_GET_SESSION_ID = "getSessionId";
var _DYN_SESSION_COOKIE_POSTF6 = "sessionCookiePostfix";
var _DYN_AUTOMATIC_SESSION = "automaticSession";
var _DYN_ACCOUNT_ID = "accountId";
var _DYN_AUTHENTICATED_ID = "authenticatedId";
var _DYN_ACQUISITION_DATE = "acquisitionDate";
var _DYN_RENEWAL_DATE = "renewalDate";
var _DYN_COOKIE_SEPARATOR = "cookieSeparator";
var _DYN_AUTH_USER_COOKIE_NAM7 = "authUserCookieName";

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/Session.js
var SESSION_COOKIE_NAME = "ai_session";
var ACQUISITION_SPAN = 864e5;
var RENEWAL_SPAN = 18e5;
var COOKIE_UPDATE_INTERVAL = 6e4;
var Session = (
  /** @class */
  /* @__PURE__ */ function() {
    function Session2() {
    }
    return Session2;
  }()
);
var _SessionManager = (
  /** @class */
  function() {
    function _SessionManager2(config2, core, unloadHookContainer) {
      var self2 = this;
      var _storageNamePrefix;
      var _cookieUpdatedTimestamp;
      var _logger = safeGetLogger(core);
      var _cookieManager = safeGetCookieMgr(core);
      var _sessionExpirationMs;
      var _sessionRenewalMs;
      dynamicProto(_SessionManager2, self2, function(_self) {
        if (!config2) {
          config2 = {};
        }
        var unloadHook = onConfigChange(config2, function(details) {
          _sessionExpirationMs = config2.sessionExpirationMs || ACQUISITION_SPAN;
          _sessionRenewalMs = config2.sessionRenewalMs || RENEWAL_SPAN;
          var sessionCookiePostfix = config2[
            _DYN_SESSION_COOKIE_POSTF6
            /* @min:%2esessionCookiePostfix */
          ] || config2.namePrefix || "";
          _storageNamePrefix = SESSION_COOKIE_NAME + sessionCookiePostfix;
        });
        unloadHookContainer && unloadHookContainer.add(unloadHook);
        _self[
          _DYN_AUTOMATIC_SESSION
          /* @min:%2eautomaticSession */
        ] = new Session();
        _self.update = function() {
          var nowMs = utcNow();
          var isExpired = false;
          var session = _self[
            _DYN_AUTOMATIC_SESSION
            /* @min:%2eautomaticSession */
          ];
          if (!session.id) {
            isExpired = !_initializeAutomaticSession(session, nowMs);
          }
          if (!isExpired && _sessionExpirationMs > 0) {
            var timeSinceAcqMs = nowMs - session[
              _DYN_ACQUISITION_DATE
              /* @min:%2eacquisitionDate */
            ];
            var timeSinceRenewalMs = nowMs - session[
              _DYN_RENEWAL_DATE
              /* @min:%2erenewalDate */
            ];
            isExpired = timeSinceAcqMs < 0 || timeSinceRenewalMs < 0;
            isExpired = isExpired || timeSinceAcqMs > _sessionExpirationMs;
            isExpired = isExpired || timeSinceRenewalMs > _sessionRenewalMs;
          }
          if (isExpired) {
            _renew(nowMs);
          } else {
            if (!_cookieUpdatedTimestamp || nowMs - _cookieUpdatedTimestamp > COOKIE_UPDATE_INTERVAL) {
              _setCookie(session, nowMs);
            }
          }
        };
        _self.backup = function() {
          var session = _self[
            _DYN_AUTOMATIC_SESSION
            /* @min:%2eautomaticSession */
          ];
          _setStorage(session.id, session[
            _DYN_ACQUISITION_DATE
            /* @min:%2eacquisitionDate */
          ], session[
            _DYN_RENEWAL_DATE
            /* @min:%2erenewalDate */
          ]);
        };
        function _initializeAutomaticSession(session, now) {
          var isValid = false;
          var cookieValue = _cookieManager.get(_storageNamePrefix);
          if (cookieValue && isFunction3(cookieValue.split)) {
            isValid = _initializeAutomaticSessionWithData(session, cookieValue);
          } else {
            var storageValue = utlGetLocalStorage(_logger, _storageNamePrefix);
            if (storageValue) {
              isValid = _initializeAutomaticSessionWithData(session, storageValue);
            }
          }
          return isValid || !!session.id;
        }
        function _initializeAutomaticSessionWithData(session, sessionData) {
          var isValid = false;
          var sessionReset = ", session will be reset";
          var tokens = sessionData.split("|");
          if (tokens.length >= 2) {
            try {
              var acqMs = +tokens[1] || 0;
              var renewalMs = +tokens[2] || 0;
              if (isNaN(acqMs) || acqMs <= 0) {
                _throwInternal(_logger, 2, 27, "AI session acquisition date is 0" + sessionReset);
              } else if (isNaN(renewalMs) || renewalMs <= 0) {
                _throwInternal(_logger, 2, 27, "AI session renewal date is 0" + sessionReset);
              } else if (tokens[0]) {
                session.id = tokens[0];
                session[
                  _DYN_ACQUISITION_DATE
                  /* @min:%2eacquisitionDate */
                ] = acqMs;
                session[
                  _DYN_RENEWAL_DATE
                  /* @min:%2erenewalDate */
                ] = renewalMs;
                isValid = true;
              }
            } catch (e) {
              _throwInternal(_logger, 1, 9, "Error parsing ai_session value [" + (sessionData || "") + "]" + sessionReset + " - " + getExceptionName(e), {
                exception: dumpObj(e)
              });
            }
          }
          return isValid;
        }
        function _renew(nowMs) {
          var getNewId = config2.getNewId || newId;
          _self[
            _DYN_AUTOMATIC_SESSION
            /* @min:%2eautomaticSession */
          ].id = getNewId(config2.idLength || 22);
          _self[
            _DYN_AUTOMATIC_SESSION
            /* @min:%2eautomaticSession */
          ][
            _DYN_ACQUISITION_DATE
            /* @min:%2eacquisitionDate */
          ] = nowMs;
          _setCookie(_self[
            _DYN_AUTOMATIC_SESSION
            /* @min:%2eautomaticSession */
          ], nowMs);
          if (!utlCanUseLocalStorage()) {
            _throwInternal(_logger, 2, 0, "Browser does not support local storage. Session durations will be inaccurate.");
          }
        }
        function _setCookie(session, nowMs) {
          var acq = session[
            _DYN_ACQUISITION_DATE
            /* @min:%2eacquisitionDate */
          ];
          session[
            _DYN_RENEWAL_DATE
            /* @min:%2erenewalDate */
          ] = nowMs;
          var renewalPeriodMs = _sessionRenewalMs;
          var acqTimeLeftMs = acq + _sessionExpirationMs - nowMs;
          var cookie = [session.id, acq, nowMs];
          var maxAgeSec = 0;
          if (acqTimeLeftMs < renewalPeriodMs) {
            maxAgeSec = acqTimeLeftMs / 1e3;
          } else {
            maxAgeSec = renewalPeriodMs / 1e3;
          }
          var cookieDomain = config2.cookieDomain || null;
          _cookieManager.set(_storageNamePrefix, cookie.join("|"), _sessionExpirationMs > 0 ? maxAgeSec : null, cookieDomain);
          _cookieUpdatedTimestamp = nowMs;
        }
        function _setStorage(guid, acq, renewal) {
          utlSetLocalStorage(_logger, _storageNamePrefix, [guid, acq, renewal].join("|"));
        }
      });
    }
    _SessionManager2.__ieDyn = 1;
    return _SessionManager2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/TelemetryTrace.js
var TelemetryTrace = (
  /** @class */
  /* @__PURE__ */ function() {
    function TelemetryTrace2(id, parentId, name, logger) {
      var _self = this;
      _self.traceID = id || generateW3CId();
      _self.parentID = parentId;
      var location2 = getLocation();
      if (!name && location2 && location2.pathname) {
        name = location2.pathname;
      }
      _self.name = dataSanitizeString(logger, name);
    }
    return TelemetryTrace2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/Context/User.js
function _validateUserInput(id) {
  if (typeof id !== "string" || !id || id.match(/,|;|=| |\|/)) {
    return false;
  }
  return true;
}
var User = (
  /** @class */
  function() {
    function User2(config2, core, unloadHookContainer) {
      this.isNewUser = false;
      this.isUserCookieSet = false;
      var _logger = safeGetLogger(core);
      var _cookieManager = safeGetCookieMgr(core);
      var _storageNamePrefix;
      dynamicProto(User2, this, function(_self) {
        objDefine(_self, "config", {
          g: function() {
            return config2;
          }
        });
        var unloadHook = onConfigChange(config2, function() {
          var userCookiePostfix = config2.userCookiePostfix || "";
          _storageNamePrefix = User2.userCookieName + userCookiePostfix;
          var cookie = _cookieManager.get(_storageNamePrefix);
          if (cookie) {
            _self[
              _DYN_IS_NEW_USER
              /* @min:%2eisNewUser */
            ] = false;
            var params = cookie.split(User2[
              _DYN_COOKIE_SEPARATOR
              /* @min:%2ecookieSeparator */
            ]);
            if (params.length > 0) {
              _self.id = params[0];
              _self[
                _DYN_IS_USER_COOKIE_SET
                /* @min:%2eisUserCookieSet */
              ] = !!_self.id;
            }
          }
          if (!_self.id) {
            _self.id = _generateNewId();
            var newCookie = _generateNewCookie(_self.id);
            _setUserCookie(newCookie.join(User2[
              _DYN_COOKIE_SEPARATOR
              /* @min:%2ecookieSeparator */
            ]));
            var name_1 = (config2.namePrefix || "") + "ai_session";
            utlRemoveStorage(_logger, name_1);
          }
          _self[
            _DYN_ACCOUNT_ID
            /* @min:%2eaccountId */
          ] = config2[
            _DYN_ACCOUNT_ID
            /* @min:%2eaccountId */
          ] || void 0;
          var authCookie = _cookieManager.get(User2[
            _DYN_AUTH_USER_COOKIE_NAM7
            /* @min:%2eauthUserCookieName */
          ]);
          if (authCookie) {
            authCookie = decodeURI(authCookie);
            var authCookieString = authCookie.split(User2[
              _DYN_COOKIE_SEPARATOR
              /* @min:%2ecookieSeparator */
            ]);
            if (authCookieString[0]) {
              _self[
                _DYN_AUTHENTICATED_ID
                /* @min:%2eauthenticatedId */
              ] = authCookieString[0];
            }
            if (authCookieString.length > 1 && authCookieString[1]) {
              _self[
                _DYN_ACCOUNT_ID
                /* @min:%2eaccountId */
              ] = authCookieString[1];
            }
          }
        });
        unloadHookContainer && unloadHookContainer.add(unloadHook);
        function _generateNewId() {
          var theConfig = config2 || {};
          var getNewId = theConfig.getNewId || newId;
          var id = getNewId(theConfig.idLength ? config2.idLength : 22);
          return id;
        }
        function _generateNewCookie(userId) {
          var acqStr = toISOString(/* @__PURE__ */ new Date());
          _self.accountAcquisitionDate = acqStr;
          _self[
            _DYN_IS_NEW_USER
            /* @min:%2eisNewUser */
          ] = true;
          var newCookie = [userId, acqStr];
          return newCookie;
        }
        function _setUserCookie(cookie) {
          var oneYear = 31536e3;
          _self[
            _DYN_IS_USER_COOKIE_SET
            /* @min:%2eisUserCookieSet */
          ] = _cookieManager.set(_storageNamePrefix, cookie, oneYear);
        }
        _self.setAuthenticatedUserContext = function(authenticatedUserId, accountId, storeInCookie) {
          if (storeInCookie === void 0) {
            storeInCookie = false;
          }
          var isInvalidInput = !_validateUserInput(authenticatedUserId) || accountId && !_validateUserInput(accountId);
          if (isInvalidInput) {
            _throwInternal(_logger, 2, 60, "Setting auth user context failed. User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.", true);
            return;
          }
          _self[
            _DYN_AUTHENTICATED_ID
            /* @min:%2eauthenticatedId */
          ] = authenticatedUserId;
          var authCookie = _self[
            _DYN_AUTHENTICATED_ID
            /* @min:%2eauthenticatedId */
          ];
          if (accountId) {
            _self[
              _DYN_ACCOUNT_ID
              /* @min:%2eaccountId */
            ] = accountId;
            authCookie = [_self[
              _DYN_AUTHENTICATED_ID
              /* @min:%2eauthenticatedId */
            ], _self.accountId].join(User2[
              _DYN_COOKIE_SEPARATOR
              /* @min:%2ecookieSeparator */
            ]);
          }
          if (storeInCookie) {
            _cookieManager.set(User2[
              _DYN_AUTH_USER_COOKIE_NAM7
              /* @min:%2eauthUserCookieName */
            ], encodeURI(authCookie));
          }
        };
        _self.clearAuthenticatedUserContext = function() {
          _self[
            _DYN_AUTHENTICATED_ID
            /* @min:%2eauthenticatedId */
          ] = null;
          _self[
            _DYN_ACCOUNT_ID
            /* @min:%2eaccountId */
          ] = null;
          _cookieManager.del(User2[
            _DYN_AUTH_USER_COOKIE_NAM7
            /* @min:%2eauthUserCookieName */
          ]);
        };
        _self.update = function(userId) {
          if (_self.id !== userId || !_self[
            _DYN_IS_USER_COOKIE_SET
            /* @min:%2eisUserCookieSet */
          ]) {
            var user_id = userId ? userId : _generateNewId();
            var user_cookie = _generateNewCookie(user_id);
            _setUserCookie(user_cookie.join(User2[
              _DYN_COOKIE_SEPARATOR
              /* @min:%2ecookieSeparator */
            ]));
          }
        };
      });
    }
    User2.cookieSeparator = "|";
    User2.userCookieName = "ai_user";
    User2.authUserCookieName = "ai_authUser";
    return User2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/TelemetryContext.js
var strExt = "ext";
var strTags = "tags";
function _removeEmpty(target, name) {
  if (target && target[name] && objKeys(target[name]).length === 0) {
    delete target[name];
  }
}
function _nullResult() {
  return null;
}
var TelemetryContext = (
  /** @class */
  function() {
    function TelemetryContext2(core, defaultConfig2, previousTraceCtx, unloadHookContainer) {
      var _this = this;
      var logger = core.logger;
      dynamicProto(TelemetryContext2, this, function(_self) {
        _self.appId = _nullResult;
        _self[
          _DYN_GET_SESSION_ID
          /* @min:%2egetSessionId */
        ] = _nullResult;
        _self.application = new Application();
        _self.internal = new Internal(defaultConfig2, unloadHookContainer);
        if (hasWindow()) {
          _self[
            _DYN_SESSION_MANAGER
            /* @min:%2esessionManager */
          ] = new _SessionManager(defaultConfig2, core, unloadHookContainer);
          _self.device = new Device();
          _self.location = new Location2();
          _self.user = new User(defaultConfig2, core, unloadHookContainer);
          var traceId = void 0;
          var parentId = void 0;
          var name_1;
          if (previousTraceCtx) {
            traceId = previousTraceCtx.getTraceId();
            parentId = previousTraceCtx.getSpanId();
            name_1 = previousTraceCtx.getName();
          }
          _self[
            _DYN_TELEMETRY_TRACE
            /* @min:%2etelemetryTrace */
          ] = new TelemetryTrace(traceId, parentId, name_1, logger);
          _self[
            _DYN_SESSION
            /* @min:%2esession */
          ] = new Session();
        }
        _self[
          _DYN_GET_SESSION_ID
          /* @min:%2egetSessionId */
        ] = function() {
          var session = _self[
            _DYN_SESSION
            /* @min:%2esession */
          ];
          var sesId = null;
          if (session && isString(session.id)) {
            sesId = session.id;
          } else {
            var autoSession = (_self[
              _DYN_SESSION_MANAGER
              /* @min:%2esessionManager */
            ] || {})[
              _DYN_AUTOMATIC_SESSION
              /* @min:%2eautomaticSession */
            ];
            sesId = autoSession && isString(autoSession.id) ? autoSession.id : null;
          }
          return sesId;
        };
        _self[
          _DYN_APPLY_SESSION_CONTEX0
          /* @min:%2eapplySessionContext */
        ] = function(evt, itemCtx) {
          setValue(getSetValue(evt.ext, Extensions.AppExt), "sesId", _self[
            _DYN_GET_SESSION_ID
            /* @min:%2egetSessionId */
          ](), isString);
        };
        _self[
          _DYN_APPLY_OPERATING_SYST3
          /* @min:%2eapplyOperatingSystemContxt */
        ] = function(evt, itemCtx) {
          setValue(evt.ext, Extensions.OSExt, _self.os);
        };
        _self[
          _DYN_APPLY_APPLICATION_CO1
          /* @min:%2eapplyApplicationContext */
        ] = function(evt, itemCtx) {
          var application = _self.application;
          if (application) {
            var tags = getSetValue(evt, strTags);
            setValue(tags, CtxTagKeys.applicationVersion, application.ver, isString);
            setValue(tags, CtxTagKeys.applicationBuild, application.build, isString);
          }
        };
        _self.applyDeviceContext = function(evt, itemCtx) {
          var device = _self.device;
          if (device) {
            var extDevice = getSetValue(getSetValue(evt, strExt), Extensions.DeviceExt);
            setValue(extDevice, "localId", device.id, isString);
            setValue(extDevice, "ip", device.ip, isString);
            setValue(extDevice, "model", device.model, isString);
            setValue(extDevice, "deviceClass", device.deviceClass, isString);
          }
        };
        _self[
          _DYN_APPLY_INTERNAL_CONTE5
          /* @min:%2eapplyInternalContext */
        ] = function(evt, itemCtx) {
          var internal = _self.internal;
          if (internal) {
            var tags = getSetValue(evt, strTags);
            setValue(tags, CtxTagKeys.internalAgentVersion, internal.agentVersion, isString);
            setValue(tags, CtxTagKeys.internalSdkVersion, dataSanitizeString(logger, internal.sdkVersion, 64), isString);
            if (evt.baseType === _InternalLogMessage.dataType || evt.baseType === PageView.dataType) {
              setValue(tags, CtxTagKeys.internalSnippet, internal.snippetVer, isString);
              setValue(tags, CtxTagKeys.internalSdkSrc, internal.sdkSrc, isString);
            }
          }
        };
        _self[
          _DYN_APPLY_LOCATION_CONTE4
          /* @min:%2eapplyLocationContext */
        ] = function(evt, itemCtx) {
          var location2 = _this.location;
          if (location2) {
            setValue(getSetValue(evt, strTags, []), CtxTagKeys.locationIp, location2.ip, isString);
          }
        };
        _self[
          _DYN_APPLY_OPERATION_CONT2
          /* @min:%2eapplyOperationContext */
        ] = function(evt, itemCtx) {
          var telemetryTrace = _self[
            _DYN_TELEMETRY_TRACE
            /* @min:%2etelemetryTrace */
          ];
          if (telemetryTrace) {
            var extTrace = getSetValue(getSetValue(evt, strExt), Extensions.TraceExt, {
              traceID: void 0,
              parentID: void 0
            });
            setValue(extTrace, "traceID", telemetryTrace.traceID, isString, isNullOrUndefined);
            setValue(extTrace, "name", telemetryTrace.name, isString, isNullOrUndefined);
            setValue(extTrace, "parentID", telemetryTrace.parentID, isString, isNullOrUndefined);
          }
        };
        _self.applyWebContext = function(evt, itemCtx) {
          var web = _this.web;
          if (web) {
            setValue(getSetValue(evt, strExt), Extensions.WebExt, web);
          }
        };
        _self.applyUserContext = function(evt, itemCtx) {
          var user = _self.user;
          if (user) {
            var tags = getSetValue(evt, strTags, []);
            setValue(tags, CtxTagKeys.userAccountId, user[
              _DYN_ACCOUNT_ID
              /* @min:%2eaccountId */
            ], isString);
            var extUser = getSetValue(getSetValue(evt, strExt), Extensions.UserExt);
            setValue(extUser, "id", user.id, isString);
            setValue(extUser, "authId", user[
              _DYN_AUTHENTICATED_ID
              /* @min:%2eauthenticatedId */
            ], isString);
          }
        };
        _self.cleanUp = function(evt, itemCtx) {
          var ext = evt.ext;
          if (ext) {
            _removeEmpty(ext, Extensions.DeviceExt);
            _removeEmpty(ext, Extensions.UserExt);
            _removeEmpty(ext, Extensions.WebExt);
            _removeEmpty(ext, Extensions.OSExt);
            _removeEmpty(ext, Extensions.AppExt);
            _removeEmpty(ext, Extensions.TraceExt);
          }
        };
      });
    }
    TelemetryContext2.__ieDyn = 1;
    return TelemetryContext2;
  }()
);

// node_modules/@microsoft/applicationinsights-properties-js/dist-es5/PropertiesPlugin.js
var _a10;
var undefString;
var nullValue = null;
var _defaultConfig3 = objDeepFreeze((_a10 = {
  accountId: nullValue,
  sessionRenewalMs: 30 * 60 * 1e3,
  samplingPercentage: 100,
  sessionExpirationMs: 24 * 60 * 60 * 1e3,
  cookieDomain: nullValue,
  sdkExtension: nullValue,
  isBrowserLinkTrackingEnabled: false,
  appId: nullValue
}, _a10[
  _DYN_GET_SESSION_ID
  /* @min:getSessionId */
] = nullValue, _a10.namePrefix = undefString, _a10[
  _DYN_SESSION_COOKIE_POSTF6
  /* @min:sessionCookiePostfix */
] = undefString, _a10.userCookiePostfix = undefString, _a10.idLength = 22, _a10.getNewId = nullValue, _a10));
var PropertiesPlugin = (
  /** @class */
  function(_super) {
    __extendsFn(PropertiesPlugin2, _super);
    function PropertiesPlugin2() {
      var _this = _super.call(this) || this;
      _this.priority = 110;
      _this.identifier = PropertiesPluginIdentifier;
      var _extensionConfig;
      var _distributedTraceCtx;
      var _previousTraceCtx;
      var _context;
      var _disableUserInitMessage;
      dynamicProto(PropertiesPlugin2, _this, function(_self, _base) {
        _initDefaults();
        objDefine(_self, "context", {
          g: function() {
            return _context;
          }
        });
        _self.initialize = function(config2, core, extensions, pluginChain) {
          _base.initialize(config2, core, extensions, pluginChain);
          _populateDefaults(config2);
        };
        _self.processTelemetry = function(event, itemCtx) {
          if (!isNullOrUndefined(event)) {
            itemCtx = _self._getTelCtx(itemCtx);
            if (event.name === PageView.envelopeType) {
              itemCtx.diagLog().resetInternalMessageCount();
            }
            var theContext = _context || {};
            if (theContext[
              _DYN_SESSION
              /* @min:%2esession */
            ]) {
              if (typeof _context[
                _DYN_SESSION
                /* @min:%2esession */
              ].id !== "string" && theContext[
                _DYN_SESSION_MANAGER
                /* @min:%2esessionManager */
              ]) {
                theContext[
                  _DYN_SESSION_MANAGER
                  /* @min:%2esessionManager */
                ].update();
              }
            }
            var userCtx = theContext.user;
            if (userCtx && !userCtx[
              _DYN_IS_USER_COOKIE_SET
              /* @min:%2eisUserCookieSet */
            ]) {
              userCtx.update(theContext.user.id);
            }
            _processTelemetryInternal(event, itemCtx);
            if (userCtx && userCtx[
              _DYN_IS_NEW_USER
              /* @min:%2eisNewUser */
            ]) {
              userCtx[
                _DYN_IS_NEW_USER
                /* @min:%2eisNewUser */
              ] = false;
              if (!_disableUserInitMessage) {
                var message = new _InternalLogMessage(72, (getNavigator() || {}).userAgent || "");
                _logInternalMessage(itemCtx.diagLog(), 1, message);
              }
            }
            _self.processNext(event, itemCtx);
          }
        };
        _self._doTeardown = function(unloadCtx, unloadState) {
          var core = (unloadCtx || {}).core();
          if (core && core[
            _DYN_GET_TRACE_CTX
            /* @min:%2egetTraceCtx */
          ]) {
            var traceCtx = core[
              _DYN_GET_TRACE_CTX
              /* @min:%2egetTraceCtx */
            ](false);
            if (traceCtx === _distributedTraceCtx) {
              core.setTraceCtx(_previousTraceCtx);
            }
          }
          _initDefaults();
        };
        function _initDefaults() {
          _extensionConfig = null;
          _distributedTraceCtx = null;
          _previousTraceCtx = null;
          _context = null;
          _disableUserInitMessage = true;
        }
        function _populateDefaults(config2) {
          var identifier = _self.identifier;
          var core = _self.core;
          _self._addHook(onConfigChange(config2, function() {
            var ctx = createProcessTelemetryContext(null, config2, core);
            if (config2.storagePrefix) {
              utlSetStoragePrefix(config2.storagePrefix);
            }
            _disableUserInitMessage = config2.disableUserInitMessage === false ? false : true;
            _extensionConfig = ctx.getExtCfg(identifier, _defaultConfig3);
            _self["_extConfig"] = _extensionConfig;
          }));
          _previousTraceCtx = core[
            _DYN_GET_TRACE_CTX
            /* @min:%2egetTraceCtx */
          ](false);
          _context = new TelemetryContext(core, _extensionConfig, _previousTraceCtx, _self._unloadHooks);
          _distributedTraceCtx = createDistributedTraceContextFromTrace(_self.context[
            _DYN_TELEMETRY_TRACE
            /* @min:%2etelemetryTrace */
          ], _previousTraceCtx);
          core.setTraceCtx(_distributedTraceCtx);
          _self.context.appId = function() {
            var breezeChannel = core.getPlugin(BreezeChannelIdentifier);
            return breezeChannel ? breezeChannel.plugin["_appId"] : null;
          };
        }
        function _processTelemetryInternal(evt, itemCtx) {
          getSetValue(evt, "tags", []);
          getSetValue(evt, "ext", {});
          var ctx = _self.context;
          ctx[
            _DYN_APPLY_SESSION_CONTEX0
            /* @min:%2eapplySessionContext */
          ](evt, itemCtx);
          ctx[
            _DYN_APPLY_APPLICATION_CO1
            /* @min:%2eapplyApplicationContext */
          ](evt, itemCtx);
          ctx.applyDeviceContext(evt, itemCtx);
          ctx[
            _DYN_APPLY_OPERATION_CONT2
            /* @min:%2eapplyOperationContext */
          ](evt, itemCtx);
          ctx.applyUserContext(evt, itemCtx);
          ctx[
            _DYN_APPLY_OPERATING_SYST3
            /* @min:%2eapplyOperatingSystemContxt */
          ](evt, itemCtx);
          ctx.applyWebContext(evt, itemCtx);
          ctx[
            _DYN_APPLY_LOCATION_CONTE4
            /* @min:%2eapplyLocationContext */
          ](evt, itemCtx);
          ctx[
            _DYN_APPLY_INTERNAL_CONTE5
            /* @min:%2eapplyInternalContext */
          ](evt, itemCtx);
          ctx.cleanUp(evt, itemCtx);
        }
      });
      return _this;
    }
    PropertiesPlugin2.__ieDyn = 1;
    return PropertiesPlugin2;
  }(BaseTelemetryPlugin)
);
var PropertiesPlugin_default = PropertiesPlugin;

// node_modules/@microsoft/applicationinsights-web/dist-es5/InternalConstants.js
var _AUTHENTICATED_USER_CONTEXT = "AuthenticatedUserContext";
var _TRACK = "track";
var STR_SNIPPET = "snippet";
var STR_GET_COOKIE_MGR = "getCookieMgr";
var STR_START_TRACK_PAGE = "startTrackPage";
var STR_STOP_TRACK_PAGE = "stopTrackPage";
var STR_FLUSH = "flush";
var STR_START_TRACK_EVENT = "startTrackEvent";
var STR_STOP_TRACK_EVENT = "stopTrackEvent";
var STR_ADD_TELEMETRY_INITIALIZER = "addTelemetryInitializer";
var STR_ADD_TELEMETRY_INITIALIZERS = STR_ADD_TELEMETRY_INITIALIZER + "s";
var STR_POLL_INTERNAL_LOGS = "pollInternalLogs";
var STR_GET_PLUGIN = "getPlugin";
var STR_EVT_NAMESPACE = "evtNamespace";
var STR_TRACK_EVENT = _TRACK + "Event";
var STR_TRACK_TRACE = _TRACK + "Trace";
var STR_TRACK_METRIC = _TRACK + "Metric";
var STR_TRACK_PAGE_VIEW = _TRACK + "PageView";
var STR_TRACK_EXCEPTION = _TRACK + "Exception";
var STR_TRACK_DEPENDENCY_DATA = _TRACK + "DependencyData";
var STR_SET_AUTHENTICATED_USER_CONTEXT = "set" + _AUTHENTICATED_USER_CONTEXT;
var STR_CLEAR_AUTHENTICATED_USER_CONTEXT = "clear" + _AUTHENTICATED_USER_CONTEXT;
var CONFIG_ENDPOINT_URL = "https://js.monitor.azure.com/scripts/b/ai.config.1.cfg.json";

// node_modules/@microsoft/applicationinsights-web/dist-es5/__DynamicConstants.js
var _DYN_VERSION2 = "version";
var _DYN_QUEUE = "queue";
var _DYN_CONNECTION_STRING = "connectionString";
var _DYN_INSTRUMENTATION_KEY2 = "instrumentationKey";
var _DYN_USER_OVERRIDE_ENDPOI0 = "userOverrideEndpointUrl";
var _DYN_ENDPOINT_URL2 = "endpointUrl";
var _DYN_ONUNLOAD_FLUSH = "onunloadFlush";
var _DYN_CONTEXT2 = "context";
var _DYN_ADD_HOUSEKEEPING_BEF1 = "addHousekeepingBeforeUnload";
var _DYN_SEND_MESSAGE = "sendMessage";
var _DYN_UPDATE_SNIPPET_DEFIN2 = "updateSnippetDefinitions";

// node_modules/@microsoft/applicationinsights-web/dist-es5/AISku.js
var _a11;
var _b3;
var _c;
var _d;
var _internalSdkSrc;
var _ignoreUpdateSnippetProperties = [STR_SNIPPET, "dependencies", "properties", "_snippetVersion", "appInsightsNew", "getSKUDefaults"];
var IKEY_USAGE = "iKeyUsage";
var CDN_USAGE = "CdnUsage";
var SDK_LOADER_VER = "SdkLoaderVer";
var UNDEFINED_VALUE3 = void 0;
var default_limit = {
  samplingRate: 100,
  maxSendNumber: 1
};
var default_interval = {
  monthInterval: 3,
  daysOfMonth: [28]
};
var default_throttle_config = {
  disabled: true,
  limit: cfgDfMerge(default_limit),
  interval: cfgDfMerge(default_interval)
};
var defaultConfigValues = (_a11 = {}, _a11[
  _DYN_CONNECTION_STRING
  /* @min:connectionString */
] = UNDEFINED_VALUE3, _a11.endpointUrl = UNDEFINED_VALUE3, _a11[
  _DYN_INSTRUMENTATION_KEY2
  /* @min:instrumentationKey */
] = UNDEFINED_VALUE3, _a11[
  _DYN_USER_OVERRIDE_ENDPOI0
  /* @min:userOverrideEndpointUrl */
] = UNDEFINED_VALUE3, _a11.diagnosticLogInterval = cfgDfValidate(_chkDiagLevel, 1e4), _a11.featureOptIn = (_b3 = {}, _b3[IKEY_USAGE] = {
  mode: 3
  /* FeatureOptInMode.enable */
}, _b3[CDN_USAGE] = {
  mode: 2
  /* FeatureOptInMode.disable */
}, _b3[SDK_LOADER_VER] = {
  mode: 2
  /* FeatureOptInMode.disable */
}, _b3), _a11.throttleMgrCfg = cfgDfMerge((_c = {}, _c[
  109
  /* _eInternalMessageId.DefaultThrottleMsgKey */
] = cfgDfMerge(default_throttle_config), _c[
  106
  /* _eInternalMessageId.InstrumentationKeyDeprecation */
] = cfgDfMerge(default_throttle_config), _c[
  111
  /* _eInternalMessageId.SdkLdrUpdate */
] = cfgDfMerge(default_throttle_config), _c[
  110
  /* _eInternalMessageId.CdnDeprecation */
] = cfgDfMerge(default_throttle_config), _c)), _a11.extensionConfig = cfgDfMerge((_d = {}, _d["AppInsightsCfgSyncPlugin"] = cfgDfMerge({
  cfgUrl: CONFIG_ENDPOINT_URL,
  syncMode: 2
  /* ICfgSyncMode.Receive */
}), _d)), _a11);
function _chkDiagLevel(value) {
  return value && value > 0;
}
var AppInsightsSku = (
  /** @class */
  function() {
    function AppInsightsSku2(snippet) {
      var _this = this;
      var dependencies;
      var properties;
      var _sender;
      var _snippetVersion;
      var _evtNamespace;
      var _houseKeepingNamespace;
      var _core;
      var _config;
      var _analyticsPlugin;
      var _cfgSyncPlugin;
      var _throttleMgr;
      var _iKeySentMessage;
      var _cdnSentMessage;
      var _sdkVerSentMessage;
      dynamicProto(AppInsightsSku2, this, function(_self) {
        _initDefaults();
        objDefine(_self, "config", {
          g: function() {
            return _config;
          }
        });
        arrForEach(["pluginVersionStringArr", "pluginVersionString"], function(key) {
          objDefine(_self, key, {
            g: function() {
              if (_core) {
                return _core[key];
              }
              return null;
            }
          });
        });
        _snippetVersion = "" + (snippet.sv || snippet[
          _DYN_VERSION2
          /* @min:%2eversion */
        ] || "");
        snippet[
          _DYN_QUEUE
          /* @min:%2equeue */
        ] = snippet[
          _DYN_QUEUE
          /* @min:%2equeue */
        ] || [];
        snippet[
          _DYN_VERSION2
          /* @min:%2eversion */
        ] = snippet[
          _DYN_VERSION2
          /* @min:%2eversion */
        ] || 2;
        var cfgHandler = createDynamicConfig(snippet.config || {}, defaultConfigValues);
        _config = cfgHandler.cfg;
        _analyticsPlugin = new AnalyticsPlugin();
        objDefine(_self, "appInsights", {
          g: function() {
            return _analyticsPlugin;
          }
        });
        properties = new PropertiesPlugin_default();
        dependencies = new AjaxMonitor();
        _sender = new Sender();
        _core = new AppInsightsCore();
        objDefine(_self, "core", {
          g: function() {
            return _core;
          }
        });
        _addUnloadHook(onConfigChange(cfgHandler, function() {
          var configCs = _config[
            _DYN_CONNECTION_STRING
            /* @min:%2econnectionString */
          ];
          function _parseCs() {
            return createSyncPromise(function(resolve, reject) {
              doAwaitResponse(configCs, function(res) {
                var curCs = res && res.value;
                var parsedCs = null;
                if (!res.rejected && curCs) {
                  _config[
                    _DYN_CONNECTION_STRING
                    /* @min:%2econnectionString */
                  ] = curCs;
                  parsedCs = parseConnectionString(curCs);
                }
                resolve(parsedCs);
              });
            });
          }
          if (isPromiseLike(configCs)) {
            var ikeyPromise = createSyncPromise(function(resolve, reject) {
              _parseCs().then(function(cs2) {
                var ikey = _config[
                  _DYN_INSTRUMENTATION_KEY2
                  /* @min:%2einstrumentationKey */
                ];
                ikey = cs2 && cs2.instrumentationkey || ikey;
                resolve(ikey);
              }).catch(function(e) {
                resolve(null);
              });
            });
            var url = _config[
              _DYN_USER_OVERRIDE_ENDPOI0
              /* @min:%2euserOverrideEndpointUrl */
            ];
            if (isNullOrUndefined(url)) {
              url = createSyncPromise(function(resolve, reject) {
                _parseCs().then(function(cs2) {
                  var url2 = _config[
                    _DYN_ENDPOINT_URL2
                    /* @min:%2eendpointUrl */
                  ];
                  var ingest2 = cs2 && cs2.ingestionendpoint;
                  url2 = ingest2 ? ingest2 + DEFAULT_BREEZE_PATH : url2;
                  resolve(url2);
                }).catch(function(e) {
                  resolve(null);
                });
              });
            }
            _config[
              _DYN_INSTRUMENTATION_KEY2
              /* @min:%2einstrumentationKey */
            ] = ikeyPromise;
            _config[
              _DYN_ENDPOINT_URL2
              /* @min:%2eendpointUrl */
            ] = url;
          }
          if (isString(configCs) && configCs) {
            var cs = parseConnectionString(configCs);
            var ingest = cs.ingestionendpoint;
            _config.endpointUrl = _config[
              _DYN_USER_OVERRIDE_ENDPOI0
              /* @min:%2euserOverrideEndpointUrl */
            ] ? _config[
              _DYN_USER_OVERRIDE_ENDPOI0
              /* @min:%2euserOverrideEndpointUrl */
            ] : ingest + DEFAULT_BREEZE_PATH;
            _config[
              _DYN_INSTRUMENTATION_KEY2
              /* @min:%2einstrumentationKey */
            ] = cs.instrumentationkey || _config[
              _DYN_INSTRUMENTATION_KEY2
              /* @min:%2einstrumentationKey */
            ];
          }
          _config.endpointUrl = _config[
            _DYN_USER_OVERRIDE_ENDPOI0
            /* @min:%2euserOverrideEndpointUrl */
          ] ? _config[
            _DYN_USER_OVERRIDE_ENDPOI0
            /* @min:%2euserOverrideEndpointUrl */
          ] : _config[
            _DYN_ENDPOINT_URL2
            /* @min:%2eendpointUrl */
          ];
        }));
        _self[
          STR_SNIPPET
          /* @min:%2esnippet */
        ] = snippet;
        _self[
          STR_FLUSH
          /* @min:%2eflush */
        ] = function(async, callBack) {
          if (async === void 0) {
            async = true;
          }
          var result;
          doPerf(_core, function() {
            return "AISKU.flush";
          }, function() {
            if (async && !callBack) {
              result = createPromise(function(resolve) {
                callBack = resolve;
              });
            }
            var waiting = 1;
            var flushDone = function() {
              waiting--;
              if (waiting === 0) {
                callBack();
              }
            };
            arrForEach(_core.getChannels(), function(channel) {
              if (channel) {
                waiting++;
                channel[
                  STR_FLUSH
                  /* @min:%2eflush */
                ](async, flushDone);
              }
            });
            flushDone();
          }, null, async);
          return result;
        };
        _self[
          _DYN_ONUNLOAD_FLUSH
          /* @min:%2eonunloadFlush */
        ] = function(async) {
          if (async === void 0) {
            async = true;
          }
          arrForEach(_core.getChannels(), function(channel) {
            if (channel[
              _DYN_ONUNLOAD_FLUSH
              /* @min:%2eonunloadFlush */
            ]) {
              channel[
                _DYN_ONUNLOAD_FLUSH
                /* @min:%2eonunloadFlush */
              ]();
            } else {
              channel[
                STR_FLUSH
                /* @min:%2eflush */
              ](async);
            }
          });
        };
        _self.loadAppInsights = function(legacyMode, logger, notificationManager) {
          if (legacyMode === void 0) {
            legacyMode = false;
          }
          if (legacyMode) {
            throwUnsupported("Legacy Mode is no longer supported");
          }
          function _updateSnippetProperties(snippet2) {
            if (snippet2) {
              var snippetVer = "";
              if (!isNullOrUndefined(_snippetVersion)) {
                snippetVer += _snippetVersion;
              }
              if (_self[
                _DYN_CONTEXT2
                /* @min:%2econtext */
              ] && _self[
                _DYN_CONTEXT2
                /* @min:%2econtext */
              ].internal) {
                _self[
                  _DYN_CONTEXT2
                  /* @min:%2econtext */
                ].internal.snippetVer = snippetVer || "-";
              }
              objForEachKey(_self, function(field, value) {
                if (isString(field) && !isFunction3(value) && field && field[0] !== "_" && // Don't copy "internal" values
                arrIndexOf(_ignoreUpdateSnippetProperties, field) === -1) {
                  if (snippet2[field] !== value) {
                    snippet2[field] = value;
                  }
                }
              });
            }
          }
          doPerf(_self.core, function() {
            return "AISKU.loadAppInsights";
          }, function() {
            _core.initialize(_config, [_sender, properties, dependencies, _analyticsPlugin, _cfgSyncPlugin], logger, notificationManager);
            objDefine(_self, "context", {
              g: function() {
                return properties[
                  _DYN_CONTEXT2
                  /* @min:%2econtext */
                ];
              }
            });
            if (!_throttleMgr) {
              _throttleMgr = new ThrottleMgr(_core);
            }
            var sdkSrc = _findSdkSourceFile();
            if (sdkSrc && _self[
              _DYN_CONTEXT2
              /* @min:%2econtext */
            ]) {
              _self[
                _DYN_CONTEXT2
                /* @min:%2econtext */
              ].internal.sdkSrc = sdkSrc;
            }
            _updateSnippetProperties(_self[
              STR_SNIPPET
              /* @min:%2esnippet */
            ]);
            _self.emptyQueue();
            _self[
              STR_POLL_INTERNAL_LOGS
              /* @min:%2epollInternalLogs */
            ]();
            _self[
              _DYN_ADD_HOUSEKEEPING_BEF1
              /* @min:%2eaddHousekeepingBeforeUnload */
            ](_self);
            _addUnloadHook(onConfigChange(cfgHandler, function() {
              var defaultEnable = false;
              if (_config.throttleMgrCfg[
                109
                /* _eInternalMessageId.DefaultThrottleMsgKey */
              ]) {
                defaultEnable = !_config.throttleMgrCfg[
                  109
                  /* _eInternalMessageId.DefaultThrottleMsgKey */
                ].disabled;
              }
              if (!_throttleMgr.isReady() && _config.extensionConfig && _config.extensionConfig[_cfgSyncPlugin.identifier] && defaultEnable) {
                _throttleMgr.onReadyState(true);
              }
              if (!_iKeySentMessage && !_config[
                _DYN_CONNECTION_STRING
                /* @min:%2econnectionString */
              ] && isFeatureEnabled(IKEY_USAGE, _config)) {
                _throttleMgr[
                  _DYN_SEND_MESSAGE
                  /* @min:%2esendMessage */
                ](106, "See Instrumentation key support at aka.ms/IkeyMigrate");
                _iKeySentMessage = true;
              }
              if (!_cdnSentMessage && _self[
                _DYN_CONTEXT2
                /* @min:%2econtext */
              ].internal.sdkSrc && _self[
                _DYN_CONTEXT2
                /* @min:%2econtext */
              ].internal.sdkSrc.indexOf("az416426") != -1 && isFeatureEnabled(CDN_USAGE, _config)) {
                _throttleMgr[
                  _DYN_SEND_MESSAGE
                  /* @min:%2esendMessage */
                ](110, "See Cdn support notice at aka.ms/JsActiveCdn");
                _cdnSentMessage = true;
              }
              if (!_sdkVerSentMessage && parseInt(_snippetVersion) < 6 && isFeatureEnabled(SDK_LOADER_VER, _config)) {
                _throttleMgr[
                  _DYN_SEND_MESSAGE
                  /* @min:%2esendMessage */
                ](111, "An updated Sdk Loader is available, see aka.ms/SnippetVer");
                _sdkVerSentMessage = true;
              }
            }));
          });
          return _self;
        };
        _self[
          _DYN_UPDATE_SNIPPET_DEFIN2
          /* @min:%2eupdateSnippetDefinitions */
        ] = function(snippet2) {
          proxyAssign(snippet2, _self, function(name) {
            return name && arrIndexOf(_ignoreUpdateSnippetProperties, name) === -1;
          });
        };
        _self.emptyQueue = function() {
          try {
            if (isArray3(_self.snippet[
              _DYN_QUEUE
              /* @min:%2equeue */
            ])) {
              var length_1 = _self.snippet[
                _DYN_QUEUE
                /* @min:%2equeue */
              ].length;
              for (var i = 0; i < length_1; i++) {
                var call = _self.snippet[
                  _DYN_QUEUE
                  /* @min:%2equeue */
                ][i];
                call();
              }
              _self.snippet[
                _DYN_QUEUE
                /* @min:%2equeue */
              ] = void 0;
              delete _self.snippet[
                _DYN_QUEUE
                /* @min:%2equeue */
              ];
            }
          } catch (exception) {
            var properties_1 = {};
            if (exception && isFunction3(exception.toString)) {
              properties_1.exception = exception.toString();
            }
          }
        };
        _self[
          _DYN_ADD_HOUSEKEEPING_BEF1
          /* @min:%2eaddHousekeepingBeforeUnload */
        ] = function(appInsightsInstance) {
          if (hasWindow() || hasDocument()) {
            var performHousekeeping_1 = function() {
              appInsightsInstance[
                _DYN_ONUNLOAD_FLUSH
                /* @min:%2eonunloadFlush */
              ](false);
              if (isFunction3(_self.core[
                STR_GET_PLUGIN
                /* @min:%2egetPlugin */
              ])) {
                var loadedPlugin = _this.core[
                  STR_GET_PLUGIN
                  /* @min:%2egetPlugin */
                ](PropertiesPluginIdentifier);
                if (loadedPlugin) {
                  var propertiesPlugin = loadedPlugin.plugin;
                  if (propertiesPlugin && propertiesPlugin[
                    _DYN_CONTEXT2
                    /* @min:%2econtext */
                  ] && propertiesPlugin[
                    _DYN_CONTEXT2
                    /* @min:%2econtext */
                  ]._sessionManager) {
                    propertiesPlugin[
                      _DYN_CONTEXT2
                      /* @min:%2econtext */
                    ]._sessionManager.backup();
                  }
                }
              }
            };
            var added_1 = false;
            if (!_houseKeepingNamespace) {
              _houseKeepingNamespace = mergeEvtNamespace(_evtNamespace, _core[
                STR_EVT_NAMESPACE
                /* @min:%2eevtNamespace */
              ] && _core[
                STR_EVT_NAMESPACE
                /* @min:%2eevtNamespace */
              ]());
            }
            _addUnloadHook(onConfigChange(_config, function(details) {
              var coreConfig = details.cfg;
              var analyticsPlugin = appInsightsInstance.appInsights;
              var ctx = createProcessTelemetryContext(null, coreConfig, analyticsPlugin.core);
              var extConfig = ctx.getExtCfg(analyticsPlugin.identifier || AnalyticsPluginIdentifier);
              _removePageEventHandlers();
              var excludePageUnloadEvents = coreConfig.disablePageUnloadEvents;
              if (!extConfig.disableFlushOnBeforeUnload) {
                if (addPageUnloadEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {
                  added_1 = true;
                }
                if (addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace)) {
                  added_1 = true;
                }
                if (!added_1 && !isReactNative()) {
                  _throwInternal(_core.logger, 1, 19, "Could not add handler for beforeunload and pagehide");
                }
              }
              if (!added_1 && !extConfig.disableFlushOnUnload) {
                addPageHideEventListener(performHousekeeping_1, excludePageUnloadEvents, _houseKeepingNamespace);
              }
            }));
          }
        };
        _self.getSender = function() {
          return _sender;
        };
        _self.unload = function(isAsync, unloadComplete, cbTimeout) {
          var unloadDone = false;
          var result;
          if (isAsync && !unloadComplete) {
            result = createPromise(function(resolve) {
              unloadComplete = resolve;
            });
          }
          function _unloadCallback(unloadState) {
            if (!unloadDone) {
              unloadDone = true;
              _initDefaults();
              unloadComplete && unloadComplete(unloadState);
            }
          }
          _self[
            _DYN_ONUNLOAD_FLUSH
            /* @min:%2eonunloadFlush */
          ](isAsync);
          _removePageEventHandlers();
          _core.unload && _core.unload(isAsync, _unloadCallback, cbTimeout);
          return result;
        };
        proxyFunctions(_self, _analyticsPlugin, [STR_GET_COOKIE_MGR, STR_TRACK_EVENT, STR_TRACK_PAGE_VIEW, "trackPageViewPerformance", STR_TRACK_EXCEPTION, "_onerror", STR_TRACK_TRACE, STR_TRACK_METRIC, STR_START_TRACK_PAGE, STR_STOP_TRACK_PAGE, STR_START_TRACK_EVENT, STR_STOP_TRACK_EVENT]);
        proxyFunctions(_self, _getCurrentDependencies, [STR_TRACK_DEPENDENCY_DATA, "addDependencyListener", "addDependencyInitializer"]);
        proxyFunctions(_self, _core, [STR_ADD_TELEMETRY_INITIALIZER, STR_POLL_INTERNAL_LOGS, "stopPollingInternalLogs", STR_GET_PLUGIN, "addPlugin", STR_EVT_NAMESPACE, "addUnloadCb", "getTraceCtx", "updateCfg", "onCfgChange"]);
        proxyFunctions(_self, function() {
          var context2 = properties[
            _DYN_CONTEXT2
            /* @min:%2econtext */
          ];
          return context2 ? context2.user : null;
        }, [STR_SET_AUTHENTICATED_USER_CONTEXT, STR_CLEAR_AUTHENTICATED_USER_CONTEXT]);
        function _getCurrentDependencies() {
          return dependencies;
        }
        function _initDefaults() {
          _evtNamespace = createUniqueNamespace("AISKU");
          _houseKeepingNamespace = null;
          dependencies = null;
          properties = null;
          _sender = null;
          _snippetVersion = null;
          _throttleMgr = null;
          _iKeySentMessage = false;
          _cdnSentMessage = false;
          _sdkVerSentMessage = false;
          _cfgSyncPlugin = new CfgSyncPlugin();
        }
        function _removePageEventHandlers() {
          if (_houseKeepingNamespace) {
            removePageUnloadEventListener(null, _houseKeepingNamespace);
            removePageHideEventListener(null, _houseKeepingNamespace);
          }
        }
        function _addUnloadHook(hooks) {
          _core.addUnloadHook(hooks);
        }
      });
    }
    AppInsightsSku2.prototype.addDependencyInitializer = function(dependencyInitializer) {
      return null;
    };
    return AppInsightsSku2;
  }()
);
function _findSdkSourceFile() {
  if (_internalSdkSrc) {
    return _internalSdkSrc;
  }
  var sdkSrc = null;
  var isModule = false;
  var cdns = ["://js.monitor.azure.com/", "://az416426.vo.msecnd.net/"];
  try {
    var scrpt = (document || {}).currentScript;
    if (scrpt) {
      sdkSrc = scrpt.src;
    }
  } catch (e) {
  }
  if (sdkSrc) {
    try {
      var url_1 = sdkSrc.toLowerCase();
      if (url_1) {
        var src_1 = "";
        arrForEach(cdns, function(value, idx) {
          if (strIndexOf(url_1, value) !== -1) {
            src_1 = "cdn" + (idx + 1);
            if (strIndexOf(url_1, "/scripts/") === -1) {
              if (strIndexOf(url_1, "/next/") !== -1) {
                src_1 += "-next";
              } else if (strIndexOf(url_1, "/beta/") !== -1) {
                src_1 += "-beta";
              }
            }
            _internalSdkSrc = src_1 + (isModule ? ".mod" : "");
            return -1;
          }
        });
      }
    } catch (e) {
    }
    _internalSdkSrc = sdkSrc;
  }
  return _internalSdkSrc;
}

// src/app/services/app-insights.service.ts
var _AppInsightsService = class _AppInsightsService {
  constructor() {
    try {
      this.appInsights = new AppInsightsSku({
        config: {
          connectionString: "InstrumentationKey=401ba243-e7c9-4c72-b596-27bca52f9fbc;IngestionEndpoint=https://westeurope-5.in.applicationinsights.azure.com/;LiveEndpoint=https://westeurope.livediagnostics.monitor.azure.com/;ApplicationId=82c42d23-1253-48f5-8d90-20fa84aad00f",
          enableAutoRouteTracking: true
          // Optional: Tracks route changes
        }
      });
      this.appInsights.loadAppInsights();
      this.appInsights.trackPageView();
    } catch (error) {
    }
  }
};
_AppInsightsService.\u0275fac = function AppInsightsService_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _AppInsightsService)();
};
_AppInsightsService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _AppInsightsService, factory: _AppInsightsService.\u0275fac, providedIn: "root" });
var AppInsightsService = _AppInsightsService;

// src/app/services/logging.service.ts
var _LoggingService = class _LoggingService {
  constructor(appInsights) {
    this.appInsights = appInsights;
    this.originalConsole = {};
    this.isLogging = false;
    try {
      ["log", "warn", "error"].forEach((method) => {
        this.originalConsole[method] = console[method];
        console[method] = (...args) => {
          if (this.isLogging)
            return;
          this.isLogging = true;
          this.originalConsole[method].apply(console, args);
          const eventTelemetry = {
            name: `Console ${method}`,
            properties: {
              message: args.join(" "),
              orderId: sessionStorage.getItem("orderID") ?? ""
            }
          };
          this.appInsights.appInsights?.trackEvent(eventTelemetry);
          this.isLogging = false;
        };
      });
    } catch {
    }
  }
  ngOnDestroy() {
    ["log", "warn", "error"].forEach((method) => {
      console[method] = this.originalConsole[method];
    });
  }
};
_LoggingService.\u0275fac = function LoggingService_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _LoggingService)(\u0275\u0275inject(AppInsightsService));
};
_LoggingService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _LoggingService, factory: _LoggingService.\u0275fac, providedIn: "root" });
var LoggingService = _LoggingService;

// src/app/app.module.ts
var _AppModule = class _AppModule {
  constructor(loggingService) {
  }
};
_AppModule.\u0275fac = function AppModule_Factory(__ngFactoryType__) {
  return new (__ngFactoryType__ || _AppModule)(\u0275\u0275inject(LoggingService));
};
_AppModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _AppModule, bootstrap: [AppComponent] });
_AppModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ providers: [ProxyService, provideHttpClient(withInterceptorsFromDi())], imports: [
  BrowserModule,
  RouterModule.forRoot([
    { path: "", component: StartComponent },
    { path: "mobileredirect", component: MobileRedirectComponent },
    { path: "identification", component: IdentificationComponent },
    { path: "final", component: FinalComponent },
    { path: "finalmd", component: FinalMdComponent },
    { path: "finalaborted", component: FinalAbortedComponent }
  ])
] });
var AppModule = _AppModule;

// node_modules/@ekyc_qoobiss/qbs-ect-cmp/dist/esm/app-globals-rDYrFmpp.js
function appGlobalScript() {
}
var globalScripts = appGlobalScript;

// node_modules/@ekyc_qoobiss/qbs-ect-cmp/dist/esm/loader.js
var defineCustomElements = (win, options) => __async(void 0, null, function* () {
  if (typeof window === "undefined") return void 0;
  yield globalScripts();
  return bootstrapLazy([["agreement-check", [[0, "agreement-check", {
    "agreementType": [1, "agreement-type"],
    "htmlContent": [32],
    "buttonEnabled": [32],
    "scrollClass": [32],
    "atBottom": [32],
    "scrollingToTop": [32]
  }]]], ["loader-dots", [[1, "loader-dots"]]], ["random-actions", [[0, "random-actions"]]], ["agreement-info_23", [[1, "identification-component", {
    "token": [1537],
    "order_id": [1537],
    "api_url": [1537],
    "env": [1537],
    "redirect_id": [1537],
    "phone_number": [1537],
    "lang_iso": [1537],
    "citizenship": [1537],
    "show_citizenship_selector": [1540],
    "scroll_mode": [1540],
    "analytics": [1540],
    "errorMessage": [32],
    "errorTitle": [32]
  }, [[0, "agreementAcceptance", "agreementAcceptanceEmitted"], [0, "apiError", "apiErrorEmitter"]], {
    "token": ["onTokenChange"]
  }], [0, "process-id", {
    "mode": [1],
    "showTimeout": [32],
    "showInvalid": [32],
    "flow": [32],
    "shapshotTaken": [32],
    "capture": [32],
    "uploading": [32]
  }, [[0, "timeElapsed", "timeElapsed"], [0, "captureErrorDone", "captureErrorDone"], [0, "photoIdCapture", "captureIdImage"], [0, "recordingIdCapture", "capturedIdRecording"], [0, "verificationFinished", "verificationFinished"], [0, "idCaptureConfirmation", "idCaptureConfirmation"], [0, "idCaptureRetry", "idCaptureRetry"]]], [0, "user-liveness", {
    "mode": [1],
    "showError": [32],
    "showTimeout": [32],
    "flow": [32],
    "uploading": [32]
  }, [[0, "timeElapsed", "timeElapsed"], [0, "captureErrorDone", "captureErrorDone"], [0, "photoSelfieCapture", "captureSelfieImage"], [0, "recordingSelfieCapture", "capturedSelfieRecording"], [0, "verificationFinished", "verificationFinished"]]], [0, "agreement-info", {
    "buttonDisabled": [32]
  }, [[0, "atBottom", "atBottomEmitted"]]], [0, "camera-error", {
    "title": [32],
    "description": [32],
    "info": [32],
    "modal": [32],
    "infoTitle": [32],
    "buttonDisabled": [32],
    "demoVideo": [32]
  }], [0, "citizenship-selection", {
    "canCancel": [32],
    "selected": [32],
    "citizenships": [32],
    "imgClass": [32]
  }], [0, "end-redirect"], [0, "error-end", {
    "message": [1],
    "errorTitle": [1, "error-title"]
  }], [0, "how-to-info", {
    "topTitle": [32],
    "subTitle": [32],
    "imagePath": [32],
    "buttonText": [32],
    "buttonEnabled": [32],
    "image": [32],
    "imageLoaded": [32]
  }], [0, "id-selection", {
    "selected": [32],
    "ids": [32]
  }], [0, "landing-validation", {
    "warningText": [32],
    "buttonDisabled": [32]
  }], [0, "mobile-redirect", {
    "infoTextTop": [32],
    "infoTextBottom": [32],
    "contact": [32],
    "invalidValue": [32],
    "waitingMobile": [32],
    "orderStatus": [32],
    "redirectLink": [32],
    "qrCode": [32],
    "prefilledPhone": [32]
  }], [0, "random-action", {
    "rand": [32],
    "choice": [32]
  }], [0, "sms-code-validation", {
    "title": [32],
    "details": [32],
    "buttonText": [32],
    "code": [32],
    "canSend": [32],
    "sending": [32],
    "hasError": [32]
  }], [0, "sms-send", {
    "buttonText": [32],
    "title": [32],
    "details": [32],
    "phoneNumber": [32],
    "prefilledPhone": [32],
    "canSend": [32],
    "sending": [32]
  }], [0, "state-transition"], [0, "id-capture", {
    "videoStarted": [32],
    "cameraSize": [32],
    "verified": [32],
    "titleMesage": [32],
    "showDemo": [32],
    "titleStyle": [32]
  }, [[0, "videoStarted", "eventVideoStarted"], [0, "infoTimeElapsed", "infoTimeElapsed"], [0, "infoFullDetected", "infoFullDetected"], [0, "infoNoneDetected", "infoNoneDetected"], [0, "takePhoto", "takePhoto"], [0, "verificationFinished", "verificationFinished"]]], [0, "selfie-capture", {
    "videoStarted": [32],
    "captureTaken": [32],
    "verified": [32],
    "titleMesage": [32],
    "showDemo": [32],
    "captureHeight": [32],
    "captureWidth": [32],
    "titleStyle": [32]
  }, [[0, "videoStarted", "eventVideoStarted"], [0, "infoTimeElapsed", "infoTimeElapsed"], [0, "takePhoto", "takePhoto"], [0, "verificationFinished", "verificationFinished"]]], [0, "agreement-view", {
    "agreementType": [1, "agreement-type"],
    "htmlContent": [32],
    "atBottom": [32],
    "scrollingToBottom": [32],
    "scrollClass": [32]
  }], [0, "id-capture-confirm", {
    "capture": [16]
  }], [0, "capture-error", {
    "type": [1],
    "reason": [1],
    "error": [1],
    "modal": [32],
    "buttonEnabled": [32],
    "buttonText": [32]
  }], [0, "uploading-data", {
    "type": [1]
  }], [0, "camera-comp", {
    "modelPath": [1, "model-path"],
    "probabilityThreshold": [2, "probability-threshold"],
    "captureMode": [1, "capture-mode"],
    "verificationMode": [32]
  }]]]], options);
});

// node_modules/@ekyc_qoobiss/qbs-ect-cmp/dist/loader/index.js
(function() {
  if ("undefined" !== typeof window && void 0 !== window.Reflect && void 0 !== window.customElements) {
    var a = HTMLElement;
    window.HTMLElement = function() {
      return Reflect.construct(a, [], this.constructor);
    };
    HTMLElement.prototype = a.prototype;
    HTMLElement.prototype.constructor = HTMLElement;
    Object.setPrototypeOf(HTMLElement, a);
  }
})();

// src/main.ts
if (environment.production) {
  enableProdMode();
}
platformBrowser().bootstrapModule(AppModule).catch((err) => console.error(err));
defineCustomElements(window);
